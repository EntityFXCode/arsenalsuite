Only in sip/: .svn
Only in sip/: Makefile
Only in sip/: README.Fink
Only in sip/: README.HP-UX
Only in sip/: THANKS
Only in sip/: TODO
Only in sip/: __init__.py
Only in sip/: __init__.pyc
Only in sip/: build.py
Only in sip/: build.pyc
Only in sip/custom: .svn
Only in sip/: diff_from_4.9.1.diff
Only in sip/doc: .svn
Only in sip/doc: default.css
Only in sip/doc: sipref.html
Only in sip/doc: sipref.txt
Only in sip/: sip.nsi
Only in sip/: sipconfig.py
Only in sip/: sipconfig.pyc
Only in sip/sipgen: .svn
Only in sip/sipgen: Makefile
Only in sip/sipgen: export.o
Only in sip/sipgen: export.obj
diff -ru sip-4.9.1/sipgen/gencode.c sip/sipgen/gencode.c
--- sip-4.9.1/sipgen/gencode.c	2009-10-23 10:13:16.000000000 -0700
+++ sip/sipgen/gencode.c	2009-10-23 11:36:50.294500000 -0700
@@ -6070,6 +6070,20 @@
     }
 }
 
+/*
+ * Find the virtual error handler name for the given function.
+ */
+static char * findVirtualErrorHandler(moduleDef *mod, classDef *cd, overDef *od)
+{
+    char * veh = NULL;
+    if (od->virterrorhandler)
+        veh = od->virterrorhandler;
+    else if(cd->virterrorhandler)
+        veh = cd->virterrorhandler;
+    else
+        veh = mod->virterrorhandler;
+    return veh;
+}
 
 /*
  * Generate the catcher for a virtual function.
@@ -6081,6 +6095,7 @@
     argDef *res;
     apiVersionRangeDef *avr;
     const char *indent;
+    char * veh = findVirtualErrorHandler(mod,cd,od);
 
     normaliseArgs(od->cppsig);
 
@@ -6123,7 +6138,11 @@
 
     prcode(fp,
 "    sip_gilstate_t sipGILState;\n"
-"    PyObject *meth;\n"
+"    PyObject *meth;\n");
+    if (veh)
+        prcode(fp,
+"    bool error = false;\n");
+	prcode(fp,
 "\n"
 "    meth = sipIsPyMethod(&sipGILState,");
 
@@ -6305,6 +6324,7 @@
     signatureDef saved;
     argDef *ad;
     int a, args_keep = FALSE, result_keep = FALSE;
+    char * veh = findVirtualErrorHandler(mod,cd,od);
 
     saved = *vhd->cppsig;
     fakeProtectedArgs(vhd->cppsig);
@@ -6316,7 +6336,7 @@
 
         generateBaseType(cd->iff, &od->cppsig->result, FALSE, fp);
 
-        prcode(fp, " sipVH_%s_%d(sip_gilstate_t,PyObject *", vhd->module->name, vhd->virthandlernr);
+        prcode(fp, " sipVH_%s_%d(sip_gilstate_t,PyObject *,bool*", vhd->module->name, vhd->virthandlernr);
     }
     else
     {
@@ -6325,7 +6345,7 @@
 
         generateBaseType(cd->iff, &od->cppsig->result, FALSE, fp);
 
-        prcode(fp, " (*sipVH_%s_%d)(sip_gilstate_t,PyObject *", vhd->module->name, vhd->virthandlernr);
+        prcode(fp, " (*sipVH_%s_%d)(sip_gilstate_t,PyObject *,bool*", vhd->module->name, vhd->virthandlernr);
     }
 
     if (vhd->cppsig->nrArgs > 0)
@@ -6368,6 +6388,7 @@
         prcode(fp, "((sipVH_%s_%d)(sipModuleAPI_%s_%s->em_virthandlers[%d]))", vhd->module->name, vhd->virthandlernr, mod->name, vhd->module->name, vhd->virthandlernr);
 
     prcode(fp,"(sipGILState,meth");
+    prcode(fp,"(sipGILState,meth,%s", veh ? "&error" : "0");
 
     for (ad = od->cppsig->args, a = 0; a < od->cppsig->nrArgs; ++a, ++ad)
     {
@@ -6393,6 +6414,10 @@
  
     prcode(fp,");\n"
         );
+	if (veh) {
+        prcode(fp,
+"    if (error) %s(this,sipPySelf);\n", veh);
+    }
 }
 
 
@@ -6953,7 +6978,7 @@
 
     generateBaseType(NULL, &vhd->cppsig->result, FALSE, fp);
 
-    prcode(fp," sipVH_%s_%d(sip_gilstate_t sipGILState,PyObject *sipMethod"
+    prcode(fp," sipVH_%s_%d(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error"
         , vhd->module->name, vhd->virthandlernr);
 
     if (vhd->cppsig->nrArgs > 0)
@@ -7059,8 +7084,10 @@
         if (error_flag)
             prcode(fp,
 "\n"
-"    if (sipIsErr)\n"
-"        PyErr_Print();\n"
+"    if (sipIsErr) {\n"
+"        if (error) *error = true;\n"
+"        else       PyErr_Print();\n"
+"    }\n"
                 );
 
         prcode(fp,
@@ -7185,14 +7212,16 @@
     if (isref)
         prcode(fp,") < 0);\n"
 "\n"
-"    if (sipIsErr)\n"
+"    if (sipIsErr) {\n"
             );
     else
-        prcode(fp,") < 0)\n"
+        prcode(fp,") < 0) {\n"
             );
 
     prcode(fp,
-"        PyErr_Print();\n"
+"        if (error) *error = true;\n"
+"        else       PyErr_Print();\n"
+"    }\n"
         );
 
     /* Make a copy if needed. */
Only in sip/sipgen: gencode.o
Only in sip/sipgen: gencode.obj
Only in sip/sipgen: heap.o
Only in sip/sipgen: heap.obj
diff -ru sip-4.9.1/sipgen/lexer.l sip/sipgen/lexer.l
--- sip-4.9.1/sipgen/lexer.l	2009-10-23 10:13:16.000000000 -0700
+++ sip/sipgen/lexer.l	2009-10-23 11:19:09.841375000 -0700
@@ -79,6 +79,7 @@
 ^[ \t]*%DefaultMetatype     {return TK_DEFMETATYPE;}
 ^[ \t]*%DefaultSupertype    {return TK_DEFSUPERTYPE;}
 <INITIAL>^[ \t]*%End        {return TK_END;}
+^[ \t]*%VirtualErrorHandler {return TK_VIRTERRORHANDLER; }
 class                       {return TK_CLASS;}
 struct                      {return TK_STRUCT;}
 public                      {return TK_PUBLIC;}
Only in sip/sipgen: lexer.o
Only in sip/sipgen: lexer.obj
Only in sip/sipgen: main.o
Only in sip/sipgen: main.obj
diff -ru sip-4.9.1/sipgen/parser.c sip/sipgen/parser.c
--- sip-4.9.1/sipgen/parser.c	2009-10-23 10:13:18.000000000 -0700
+++ sip/sipgen/parser.c	2009-10-23 11:57:33.794500000 -0700
@@ -91,89 +91,90 @@
      TK_PATHNAME = 280,
      TK_STRING = 281,
      TK_VIRTUALCATCHERCODE = 282,
-     TK_TRAVERSECODE = 283,
-     TK_CLEARCODE = 284,
-     TK_GETBUFFERCODE = 285,
-     TK_RELEASEBUFFERCODE = 286,
-     TK_READBUFFERCODE = 287,
-     TK_WRITEBUFFERCODE = 288,
-     TK_SEGCOUNTCODE = 289,
-     TK_CHARBUFFERCODE = 290,
-     TK_PICKLECODE = 291,
-     TK_METHODCODE = 292,
-     TK_FROMTYPE = 293,
-     TK_TOTYPE = 294,
-     TK_TOSUBCLASS = 295,
-     TK_INCLUDE = 296,
-     TK_OPTINCLUDE = 297,
-     TK_IMPORT = 298,
-     TK_EXPHEADERCODE = 299,
-     TK_MODHEADERCODE = 300,
-     TK_TYPEHEADERCODE = 301,
-     TK_MODULE = 302,
-     TK_CMODULE = 303,
-     TK_CONSMODULE = 304,
-     TK_COMPOMODULE = 305,
-     TK_CLASS = 306,
-     TK_STRUCT = 307,
-     TK_PUBLIC = 308,
-     TK_PROTECTED = 309,
-     TK_PRIVATE = 310,
-     TK_SIGNALS = 311,
-     TK_SLOTS = 312,
-     TK_BOOL = 313,
-     TK_SHORT = 314,
-     TK_INT = 315,
-     TK_LONG = 316,
-     TK_FLOAT = 317,
-     TK_DOUBLE = 318,
-     TK_CHAR = 319,
-     TK_WCHAR_T = 320,
-     TK_VOID = 321,
-     TK_PYOBJECT = 322,
-     TK_PYTUPLE = 323,
-     TK_PYLIST = 324,
-     TK_PYDICT = 325,
-     TK_PYCALLABLE = 326,
-     TK_PYSLICE = 327,
-     TK_PYTYPE = 328,
-     TK_VIRTUAL = 329,
-     TK_ENUM = 330,
-     TK_SIGNED = 331,
-     TK_UNSIGNED = 332,
-     TK_SCOPE = 333,
-     TK_LOGICAL_OR = 334,
-     TK_CONST = 335,
-     TK_STATIC = 336,
-     TK_SIPSIGNAL = 337,
-     TK_SIPSLOT = 338,
-     TK_SIPANYSLOT = 339,
-     TK_SIPRXCON = 340,
-     TK_SIPRXDIS = 341,
-     TK_SIPSLOTCON = 342,
-     TK_SIPSLOTDIS = 343,
-     TK_NUMBER = 344,
-     TK_REAL = 345,
-     TK_TYPEDEF = 346,
-     TK_NAMESPACE = 347,
-     TK_TIMELINE = 348,
-     TK_PLATFORMS = 349,
-     TK_FEATURE = 350,
-     TK_LICENSE = 351,
-     TK_QCHAR = 352,
-     TK_TRUE = 353,
-     TK_FALSE = 354,
-     TK_NULL = 355,
-     TK_OPERATOR = 356,
-     TK_THROW = 357,
-     TK_QOBJECT = 358,
-     TK_EXCEPTION = 359,
-     TK_RAISECODE = 360,
-     TK_EXPLICIT = 361,
-     TK_TEMPLATE = 362,
-     TK_ELLIPSIS = 363,
-     TK_DEFMETATYPE = 364,
-     TK_DEFSUPERTYPE = 365
+     TK_VIRTERRORHANDLER = 283,
+     TK_TRAVERSECODE = 284,
+     TK_CLEARCODE = 285,
+     TK_GETBUFFERCODE = 286,
+     TK_RELEASEBUFFERCODE = 287,
+     TK_READBUFFERCODE = 288,
+     TK_WRITEBUFFERCODE = 289,
+     TK_SEGCOUNTCODE = 290,
+     TK_CHARBUFFERCODE = 291,
+     TK_PICKLECODE = 292,
+     TK_METHODCODE = 293,
+     TK_FROMTYPE = 294,
+     TK_TOTYPE = 295,
+     TK_TOSUBCLASS = 296,
+     TK_INCLUDE = 297,
+     TK_OPTINCLUDE = 298,
+     TK_IMPORT = 299,
+     TK_EXPHEADERCODE = 300,
+     TK_MODHEADERCODE = 301,
+     TK_TYPEHEADERCODE = 302,
+     TK_MODULE = 303,
+     TK_CMODULE = 304,
+     TK_CONSMODULE = 305,
+     TK_COMPOMODULE = 306,
+     TK_CLASS = 307,
+     TK_STRUCT = 308,
+     TK_PUBLIC = 309,
+     TK_PROTECTED = 310,
+     TK_PRIVATE = 311,
+     TK_SIGNALS = 312,
+     TK_SLOTS = 313,
+     TK_BOOL = 314,
+     TK_SHORT = 315,
+     TK_INT = 316,
+     TK_LONG = 317,
+     TK_FLOAT = 318,
+     TK_DOUBLE = 319,
+     TK_CHAR = 320,
+     TK_WCHAR_T = 321,
+     TK_VOID = 322,
+     TK_PYOBJECT = 323,
+     TK_PYTUPLE = 324,
+     TK_PYLIST = 325,
+     TK_PYDICT = 326,
+     TK_PYCALLABLE = 327,
+     TK_PYSLICE = 328,
+     TK_PYTYPE = 329,
+     TK_VIRTUAL = 330,
+     TK_ENUM = 331,
+     TK_SIGNED = 332,
+     TK_UNSIGNED = 333,
+     TK_SCOPE = 334,
+     TK_LOGICAL_OR = 335,
+     TK_CONST = 336,
+     TK_STATIC = 337,
+     TK_SIPSIGNAL = 338,
+     TK_SIPSLOT = 339,
+     TK_SIPANYSLOT = 340,
+     TK_SIPRXCON = 341,
+     TK_SIPRXDIS = 342,
+     TK_SIPSLOTCON = 343,
+     TK_SIPSLOTDIS = 344,
+     TK_NUMBER = 345,
+     TK_REAL = 346,
+     TK_TYPEDEF = 347,
+     TK_NAMESPACE = 348,
+     TK_TIMELINE = 349,
+     TK_PLATFORMS = 350,
+     TK_FEATURE = 351,
+     TK_LICENSE = 352,
+     TK_QCHAR = 353,
+     TK_TRUE = 354,
+     TK_FALSE = 355,
+     TK_NULL = 356,
+     TK_OPERATOR = 357,
+     TK_THROW = 358,
+     TK_QOBJECT = 359,
+     TK_EXCEPTION = 360,
+     TK_RAISECODE = 361,
+     TK_EXPLICIT = 362,
+     TK_TEMPLATE = 363,
+     TK_ELLIPSIS = 364,
+     TK_DEFMETATYPE = 365,
+     TK_DEFSUPERTYPE = 366
    };
 #endif
 /* Tokens.  */
@@ -202,89 +203,90 @@
 #define TK_PATHNAME 280
 #define TK_STRING 281
 #define TK_VIRTUALCATCHERCODE 282
-#define TK_TRAVERSECODE 283
-#define TK_CLEARCODE 284
-#define TK_GETBUFFERCODE 285
-#define TK_RELEASEBUFFERCODE 286
-#define TK_READBUFFERCODE 287
-#define TK_WRITEBUFFERCODE 288
-#define TK_SEGCOUNTCODE 289
-#define TK_CHARBUFFERCODE 290
-#define TK_PICKLECODE 291
-#define TK_METHODCODE 292
-#define TK_FROMTYPE 293
-#define TK_TOTYPE 294
-#define TK_TOSUBCLASS 295
-#define TK_INCLUDE 296
-#define TK_OPTINCLUDE 297
-#define TK_IMPORT 298
-#define TK_EXPHEADERCODE 299
-#define TK_MODHEADERCODE 300
-#define TK_TYPEHEADERCODE 301
-#define TK_MODULE 302
-#define TK_CMODULE 303
-#define TK_CONSMODULE 304
-#define TK_COMPOMODULE 305
-#define TK_CLASS 306
-#define TK_STRUCT 307
-#define TK_PUBLIC 308
-#define TK_PROTECTED 309
-#define TK_PRIVATE 310
-#define TK_SIGNALS 311
-#define TK_SLOTS 312
-#define TK_BOOL 313
-#define TK_SHORT 314
-#define TK_INT 315
-#define TK_LONG 316
-#define TK_FLOAT 317
-#define TK_DOUBLE 318
-#define TK_CHAR 319
-#define TK_WCHAR_T 320
-#define TK_VOID 321
-#define TK_PYOBJECT 322
-#define TK_PYTUPLE 323
-#define TK_PYLIST 324
-#define TK_PYDICT 325
-#define TK_PYCALLABLE 326
-#define TK_PYSLICE 327
-#define TK_PYTYPE 328
-#define TK_VIRTUAL 329
-#define TK_ENUM 330
-#define TK_SIGNED 331
-#define TK_UNSIGNED 332
-#define TK_SCOPE 333
-#define TK_LOGICAL_OR 334
-#define TK_CONST 335
-#define TK_STATIC 336
-#define TK_SIPSIGNAL 337
-#define TK_SIPSLOT 338
-#define TK_SIPANYSLOT 339
-#define TK_SIPRXCON 340
-#define TK_SIPRXDIS 341
-#define TK_SIPSLOTCON 342
-#define TK_SIPSLOTDIS 343
-#define TK_NUMBER 344
-#define TK_REAL 345
-#define TK_TYPEDEF 346
-#define TK_NAMESPACE 347
-#define TK_TIMELINE 348
-#define TK_PLATFORMS 349
-#define TK_FEATURE 350
-#define TK_LICENSE 351
-#define TK_QCHAR 352
-#define TK_TRUE 353
-#define TK_FALSE 354
-#define TK_NULL 355
-#define TK_OPERATOR 356
-#define TK_THROW 357
-#define TK_QOBJECT 358
-#define TK_EXCEPTION 359
-#define TK_RAISECODE 360
-#define TK_EXPLICIT 361
-#define TK_TEMPLATE 362
-#define TK_ELLIPSIS 363
-#define TK_DEFMETATYPE 364
-#define TK_DEFSUPERTYPE 365
+#define TK_VIRTERRORHANDLER 283
+#define TK_TRAVERSECODE 284
+#define TK_CLEARCODE 285
+#define TK_GETBUFFERCODE 286
+#define TK_RELEASEBUFFERCODE 287
+#define TK_READBUFFERCODE 288
+#define TK_WRITEBUFFERCODE 289
+#define TK_SEGCOUNTCODE 290
+#define TK_CHARBUFFERCODE 291
+#define TK_PICKLECODE 292
+#define TK_METHODCODE 293
+#define TK_FROMTYPE 294
+#define TK_TOTYPE 295
+#define TK_TOSUBCLASS 296
+#define TK_INCLUDE 297
+#define TK_OPTINCLUDE 298
+#define TK_IMPORT 299
+#define TK_EXPHEADERCODE 300
+#define TK_MODHEADERCODE 301
+#define TK_TYPEHEADERCODE 302
+#define TK_MODULE 303
+#define TK_CMODULE 304
+#define TK_CONSMODULE 305
+#define TK_COMPOMODULE 306
+#define TK_CLASS 307
+#define TK_STRUCT 308
+#define TK_PUBLIC 309
+#define TK_PROTECTED 310
+#define TK_PRIVATE 311
+#define TK_SIGNALS 312
+#define TK_SLOTS 313
+#define TK_BOOL 314
+#define TK_SHORT 315
+#define TK_INT 316
+#define TK_LONG 317
+#define TK_FLOAT 318
+#define TK_DOUBLE 319
+#define TK_CHAR 320
+#define TK_WCHAR_T 321
+#define TK_VOID 322
+#define TK_PYOBJECT 323
+#define TK_PYTUPLE 324
+#define TK_PYLIST 325
+#define TK_PYDICT 326
+#define TK_PYCALLABLE 327
+#define TK_PYSLICE 328
+#define TK_PYTYPE 329
+#define TK_VIRTUAL 330
+#define TK_ENUM 331
+#define TK_SIGNED 332
+#define TK_UNSIGNED 333
+#define TK_SCOPE 334
+#define TK_LOGICAL_OR 335
+#define TK_CONST 336
+#define TK_STATIC 337
+#define TK_SIPSIGNAL 338
+#define TK_SIPSLOT 339
+#define TK_SIPANYSLOT 340
+#define TK_SIPRXCON 341
+#define TK_SIPRXDIS 342
+#define TK_SIPSLOTCON 343
+#define TK_SIPSLOTDIS 344
+#define TK_NUMBER 345
+#define TK_REAL 346
+#define TK_TYPEDEF 347
+#define TK_NAMESPACE 348
+#define TK_TIMELINE 349
+#define TK_PLATFORMS 350
+#define TK_FEATURE 351
+#define TK_LICENSE 352
+#define TK_QCHAR 353
+#define TK_TRUE 354
+#define TK_FALSE 355
+#define TK_NULL 356
+#define TK_OPERATOR 357
+#define TK_THROW 358
+#define TK_QOBJECT 359
+#define TK_EXCEPTION 360
+#define TK_RAISECODE 361
+#define TK_EXPLICIT 362
+#define TK_TEMPLATE 363
+#define TK_ELLIPSIS 364
+#define TK_DEFMETATYPE 365
+#define TK_DEFSUPERTYPE 366
 
 
 
@@ -452,7 +454,7 @@
     classDef        *klass;
 }
 /* Line 187 of yacc.c.  */
-#line 456 "parser.c"
+#line 458 "parser.c"
 	YYSTYPE;
 # define yystype YYSTYPE /* obsolescent; will be withdrawn */
 # define YYSTYPE_IS_DECLARED 1
@@ -465,7 +467,7 @@
 
 
 /* Line 216 of yacc.c.  */
-#line 469 "parser.c"
+#line 471 "parser.c"
 
 #ifdef short
 # undef short
@@ -680,20 +682,20 @@
 /* YYFINAL -- State number of the termination state.  */
 #define YYFINAL  4
 /* YYLAST -- Last index in YYTABLE.  */
-#define YYLAST   1126
+#define YYLAST   1151
 
 /* YYNTOKENS -- Number of terminals.  */
-#define YYNTOKENS  133
+#define YYNTOKENS  134
 /* YYNNTS -- Number of nonterminals.  */
-#define YYNNTS  146
+#define YYNNTS  147
 /* YYNRULES -- Number of rules.  */
-#define YYNRULES  363
+#define YYNRULES  365
 /* YYNRULES -- Number of states.  */
-#define YYNSTATES  622
+#define YYNSTATES  625
 
 /* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
 #define YYUNDEFTOK  2
-#define YYMAXUTOK   365
+#define YYMAXUTOK   366
 
 #define YYTRANSLATE(YYX)						\
   ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)
@@ -704,16 +706,16 @@
        0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,   116,     2,     2,     2,   131,   123,     2,
-     114,   115,   121,   120,   118,   117,     2,   122,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,   128,   113,
-     126,   119,   127,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,   117,     2,     2,     2,   132,   124,     2,
+     115,   116,   122,   121,   119,   118,     2,   123,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,   129,   114,
+     127,   120,   128,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,   129,     2,   130,   132,     2,     2,     2,     2,     2,
+       2,   130,     2,   131,   133,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,   111,   124,   112,   125,     2,     2,     2,
+       2,     2,     2,   112,   125,   113,   126,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
@@ -737,7 +739,7 @@
       75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
       85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
       95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
-     105,   106,   107,   108,   109,   110
+     105,   106,   107,   108,   109,   110,   111
 };
 
 #if YYDEBUG
@@ -749,190 +751,190 @@
       20,    22,    24,    26,    28,    30,    32,    34,    36,    38,
       40,    42,    44,    46,    48,    50,    52,    54,    56,    58,
       60,    62,    64,    66,    68,    70,    72,    74,    76,    78,
-      80,    82,    84,    86,    88,    90,    92,    94,    96,    99,
-     102,   106,   116,   117,   121,   124,   125,   131,   132,   138,
-     143,   145,   148,   150,   153,   156,   158,   160,   173,   174,
-     182,   184,   187,   188,   194,   196,   199,   201,   204,   205,
-     211,   213,   216,   218,   223,   225,   228,   232,   237,   239,
-     243,   245,   248,   251,   254,   257,   260,   264,   266,   268,
-     270,   272,   273,   275,   278,   281,   284,   285,   288,   289,
-     292,   293,   296,   299,   302,   305,   308,   309,   311,   314,
-     317,   320,   323,   326,   329,   332,   335,   338,   341,   344,
-     347,   350,   353,   356,   359,   362,   365,   370,   373,   375,
-     378,   379,   388,   389,   391,   392,   394,   395,   397,   399,
-     402,   404,   406,   411,   412,   414,   415,   418,   419,   422,
-     424,   428,   430,   432,   434,   436,   438,   440,   441,   443,
-     445,   447,   449,   452,   454,   458,   460,   462,   467,   469,
-     471,   473,   475,   477,   479,   481,   482,   484,   488,   494,
-     506,   507,   508,   517,   518,   522,   527,   528,   529,   538,
-     539,   542,   544,   548,   550,   551,   555,   557,   560,   562,
-     564,   566,   568,   570,   572,   574,   576,   578,   580,   582,
-     584,   586,   588,   590,   592,   594,   596,   598,   600,   602,
-     604,   607,   610,   614,   618,   622,   625,   626,   628,   640,
-     641,   645,   647,   657,   658,   664,   665,   672,   673,   675,
-     689,   697,   712,   726,   728,   730,   732,   734,   736,   738,
-     740,   742,   745,   748,   751,   754,   757,   760,   763,   766,
-     769,   772,   776,   780,   782,   785,   788,   790,   793,   796,
-     799,   801,   804,   805,   807,   808,   811,   812,   816,   818,
-     822,   824,   828,   830,   836,   838,   840,   841,   844,   845,
-     848,   850,   851,   853,   857,   862,   867,   872,   876,   880,
-     887,   894,   898,   901,   902,   906,   908,   910,   912,   913,
-     917,   919,   927,   932,   936,   940,   941,   943,   944,   947,
-     949,   954,   957,   960,   962,   964,   967,   969,   971,   974,
-     977,   981,   983,   985,   987,   990,   993,   995,   997,   999,
-    1001,  1003,  1005,  1007,  1009,  1011,  1013,  1015,  1017,  1021,
-    1022,  1027,  1028,  1030
+      80,    82,    84,    86,    88,    90,    92,    94,    96,    98,
+     101,   104,   108,   118,   119,   123,   126,   127,   133,   134,
+     140,   145,   147,   150,   152,   155,   158,   160,   162,   175,
+     176,   184,   186,   189,   190,   196,   198,   201,   203,   206,
+     209,   210,   216,   218,   221,   223,   228,   230,   233,   237,
+     242,   244,   248,   250,   253,   256,   259,   262,   265,   269,
+     271,   273,   275,   277,   278,   280,   283,   286,   289,   290,
+     293,   294,   297,   298,   301,   304,   307,   310,   313,   314,
+     316,   319,   322,   325,   328,   331,   334,   337,   340,   343,
+     346,   349,   352,   355,   358,   361,   364,   367,   370,   375,
+     378,   380,   383,   384,   393,   394,   396,   397,   399,   400,
+     402,   404,   407,   409,   411,   416,   417,   419,   420,   423,
+     424,   427,   429,   433,   435,   437,   439,   441,   443,   445,
+     446,   448,   450,   452,   454,   457,   459,   463,   465,   467,
+     472,   474,   476,   478,   480,   482,   484,   486,   487,   489,
+     493,   499,   511,   512,   513,   522,   523,   527,   532,   533,
+     534,   543,   544,   547,   549,   553,   555,   556,   560,   562,
+     565,   567,   569,   571,   573,   575,   577,   579,   581,   583,
+     585,   587,   589,   591,   593,   595,   597,   599,   601,   603,
+     605,   607,   609,   612,   615,   619,   623,   627,   630,   631,
+     633,   645,   646,   650,   652,   662,   663,   669,   670,   677,
+     678,   680,   694,   702,   717,   731,   733,   735,   737,   739,
+     741,   743,   745,   747,   750,   753,   756,   759,   762,   765,
+     768,   771,   774,   777,   781,   785,   787,   790,   793,   795,
+     798,   801,   804,   806,   809,   810,   812,   813,   816,   817,
+     821,   823,   827,   829,   833,   835,   841,   843,   845,   846,
+     849,   850,   853,   855,   856,   858,   862,   867,   872,   877,
+     881,   885,   892,   899,   903,   906,   907,   911,   913,   915,
+     917,   918,   922,   924,   932,   937,   941,   945,   946,   948,
+     949,   952,   954,   959,   962,   965,   967,   969,   972,   974,
+     976,   979,   982,   986,   988,   990,   992,   995,   998,  1000,
+    1002,  1004,  1006,  1008,  1010,  1012,  1014,  1016,  1018,  1020,
+    1022,  1026,  1027,  1032,  1033,  1035
 };
 
 /* YYRHS -- A `-1'-separated list of the rules' RHS.  */
 static const yytype_int16 yyrhs[] =
 {
-     134,     0,    -1,   135,    -1,   134,   135,    -1,    -1,   136,
-     137,    -1,   174,    -1,   172,    -1,   173,    -1,   140,    -1,
-     184,    -1,   178,    -1,   179,    -1,   180,    -1,   141,    -1,
-     161,    -1,   156,    -1,   160,    -1,   169,    -1,   139,    -1,
-     170,    -1,   171,    -1,   185,    -1,   186,    -1,   198,    -1,
-     200,    -1,   201,    -1,   202,    -1,   203,    -1,   204,    -1,
-     205,    -1,   206,    -1,   207,    -1,   145,    -1,   147,    -1,
-     138,    -1,   165,    -1,   168,    -1,   153,    -1,   229,    -1,
-     235,    -1,   232,    -1,   142,    -1,   228,    -1,   210,    -1,
-     252,    -1,   270,    -1,   187,    -1,     4,    26,    -1,     5,
-      24,    -1,     3,    24,    89,    -1,   104,   224,   143,   256,
-     111,   188,   144,   112,   113,    -1,    -1,   114,   224,   115,
-      -1,   105,   208,    -1,    -1,    20,   275,   256,   146,   149,
-      -1,    -1,   234,    20,   275,   148,   149,    -1,   111,   150,
-     112,   113,    -1,   151,    -1,   150,   151,    -1,   187,    -1,
-      38,   208,    -1,    39,   208,    -1,   210,    -1,   152,    -1,
-      81,   271,    24,   114,   262,   115,   254,   277,   256,   250,
-     113,   260,    -1,    -1,    92,    24,   154,   111,   155,   112,
-     113,    -1,   138,    -1,   155,   138,    -1,    -1,    94,   157,
-     111,   158,   112,    -1,   159,    -1,   158,   159,    -1,    24,
-      -1,    95,    24,    -1,    -1,    93,   162,   111,   163,   112,
-      -1,   164,    -1,   163,   164,    -1,    24,    -1,    22,   114,
-     167,   115,    -1,    24,    -1,   116,    24,    -1,   166,    79,
-      24,    -1,   166,    79,   116,    24,    -1,   166,    -1,   213,
-     117,   213,    -1,    23,    -1,    96,   256,    -1,   109,   176,
-      -1,   110,   176,    -1,    49,   176,    -1,    50,   176,    -1,
-     175,   176,   177,    -1,    47,    -1,    48,    -1,    24,    -1,
-      25,    -1,    -1,    89,    -1,    41,    25,    -1,    42,    25,
-      -1,    43,    25,    -1,    -1,     9,   208,    -1,    -1,    10,
-     208,    -1,    -1,    11,   208,    -1,    19,   208,    -1,    44,
-     208,    -1,    45,   208,    -1,    46,   208,    -1,    -1,   187,
-      -1,    28,   208,    -1,    29,   208,    -1,    30,   208,    -1,
-      31,   208,    -1,    32,   208,    -1,    33,   208,    -1,    34,
-     208,    -1,    35,   208,    -1,    36,   208,    -1,    16,   208,
-      -1,    17,   208,    -1,    12,   208,    -1,    13,   208,    -1,
-      14,   208,    -1,    15,   208,    -1,    18,   208,    -1,     6,
-     208,    -1,     7,   208,    -1,     8,    25,   212,   208,    -1,
-     209,    23,    -1,    21,    -1,   209,    21,    -1,    -1,    75,
-     213,   256,   211,   111,   214,   112,   113,    -1,    -1,    25,
-      -1,    -1,    24,    -1,    -1,   215,    -1,   216,    -1,   215,
-     216,    -1,   165,    -1,   168,    -1,    24,   218,   256,   217,
-      -1,    -1,   118,    -1,    -1,   119,   223,    -1,    -1,   119,
-     220,    -1,   223,    -1,   220,   221,   223,    -1,   117,    -1,
-     120,    -1,   121,    -1,   122,    -1,   123,    -1,   124,    -1,
-      -1,   116,    -1,   125,    -1,   117,    -1,   120,    -1,   222,
-     226,    -1,   225,    -1,   224,    78,   225,    -1,    24,    -1,
-     224,    -1,   275,   114,   227,   115,    -1,    90,    -1,    89,
-      -1,    98,    -1,    99,    -1,   100,    -1,    26,    -1,    97,
-      -1,    -1,   220,    -1,   227,   118,   220,    -1,    91,   271,
-      24,   256,   113,    -1,    91,   271,   114,   274,    24,   115,
-     114,   276,   115,   256,   113,    -1,    -1,    -1,    52,   224,
-     230,   238,   256,   231,   241,   113,    -1,    -1,   234,   233,
-     235,    -1,   107,   126,   276,   127,    -1,    -1,    -1,    51,
-     224,   236,   238,   256,   237,   241,   113,    -1,    -1,   128,
-     239,    -1,   240,    -1,   239,   118,   240,    -1,   224,    -1,
-      -1,   111,   242,   112,    -1,   243,    -1,   242,   243,    -1,
-     165,    -1,   168,    -1,   153,    -1,   229,    -1,   235,    -1,
-     142,    -1,   228,    -1,   210,    -1,   199,    -1,   187,    -1,
-     189,    -1,   190,    -1,   191,    -1,   192,    -1,   193,    -1,
-     194,    -1,   195,    -1,   196,    -1,   197,    -1,   246,    -1,
-     245,    -1,   265,    -1,    40,   208,    -1,    39,   208,    -1,
-      53,   244,   128,    -1,    54,   244,   128,    -1,    55,   244,
-     128,    -1,    56,   128,    -1,    -1,    57,    -1,   251,   125,
-      24,   114,   115,   277,   255,   256,   113,   260,   261,    -1,
-      -1,   106,   247,   248,    -1,   248,    -1,    24,   114,   262,
-     115,   277,   256,   249,   113,   260,    -1,    -1,   129,   114,
-     262,   115,   130,    -1,    -1,   129,   271,   114,   262,   115,
-     130,    -1,    -1,    74,    -1,   271,    24,   114,   262,   115,
-     254,   277,   255,   256,   250,   113,   260,   261,    -1,   271,
-     101,   119,   114,   271,   115,   113,    -1,   271,   101,   253,
-     114,   262,   115,   254,   277,   255,   256,   250,   113,   260,
-     261,    -1,   101,   271,   114,   262,   115,   254,   277,   255,
-     256,   250,   113,   260,   261,    -1,   120,    -1,   117,    -1,
-     121,    -1,   122,    -1,   131,    -1,   123,    -1,   124,    -1,
-     132,    -1,   126,   126,    -1,   127,   127,    -1,   120,   119,
-      -1,   117,   119,    -1,   121,   119,    -1,   122,   119,    -1,
-     131,   119,    -1,   123,   119,    -1,   124,   119,    -1,   132,
-     119,    -1,   126,   126,   119,    -1,   127,   127,   119,    -1,
-     125,    -1,   114,   115,    -1,   129,   130,    -1,   126,    -1,
-     126,   119,    -1,   119,   119,    -1,   116,   119,    -1,   127,
-      -1,   127,   119,    -1,    -1,    80,    -1,    -1,   119,    89,
-      -1,    -1,   122,   257,   122,    -1,   258,    -1,   257,   118,
-     258,    -1,    24,    -1,    24,   119,   259,    -1,   176,    -1,
-      24,   128,   177,   117,   177,    -1,    26,    -1,    89,    -1,
-      -1,    37,   208,    -1,    -1,    27,   208,    -1,   263,    -1,
-      -1,   264,    -1,   263,   118,   264,    -1,    82,   213,   256,
-     219,    -1,    83,   213,   256,   219,    -1,    84,   213,   256,
-     219,    -1,    85,   213,   256,    -1,    86,   213,   256,    -1,
-      87,   114,   262,   115,   213,   256,    -1,    88,   114,   262,
-     115,   213,   256,    -1,   103,   213,   256,    -1,   272,   219,
-      -1,    -1,    81,   266,   267,    -1,   267,    -1,   268,    -1,
-     270,    -1,    -1,    74,   269,   252,    -1,   252,    -1,   271,
-      24,   256,   113,   181,   182,   183,    -1,    80,   275,   274,
-     273,    -1,   275,   274,   273,    -1,   271,   213,   256,    -1,
-      -1,   123,    -1,    -1,   274,   121,    -1,   224,    -1,   224,
-     126,   276,   127,    -1,    52,   224,    -1,    77,    59,    -1,
-      59,    -1,    77,    -1,    77,    60,    -1,    60,    -1,    61,
-      -1,    77,    61,    -1,    61,    61,    -1,    77,    61,    61,
-      -1,    62,    -1,    63,    -1,    58,    -1,    76,    64,    -1,
-      77,    64,    -1,    64,    -1,    65,    -1,    66,    -1,    67,
-      -1,    68,    -1,    69,    -1,    70,    -1,    71,    -1,    72,
-      -1,    73,    -1,   108,    -1,   271,    -1,   276,   118,   271,
-      -1,    -1,   102,   114,   278,   115,    -1,    -1,   224,    -1,
-     278,   118,   224,    -1
+     135,     0,    -1,   136,    -1,   135,   136,    -1,    -1,   137,
+     138,    -1,   176,    -1,   174,    -1,   175,    -1,   141,    -1,
+     186,    -1,   180,    -1,   181,    -1,   182,    -1,   142,    -1,
+     163,    -1,   157,    -1,   162,    -1,   171,    -1,   140,    -1,
+     172,    -1,   173,    -1,   187,    -1,   188,    -1,   200,    -1,
+     202,    -1,   203,    -1,   204,    -1,   205,    -1,   206,    -1,
+     207,    -1,   208,    -1,   209,    -1,   146,    -1,   148,    -1,
+     139,    -1,   161,    -1,   167,    -1,   170,    -1,   154,    -1,
+     231,    -1,   237,    -1,   234,    -1,   143,    -1,   230,    -1,
+     212,    -1,   254,    -1,   272,    -1,   189,    -1,     4,    26,
+      -1,     5,    24,    -1,     3,    24,    90,    -1,   105,   226,
+     144,   258,   112,   190,   145,   113,   114,    -1,    -1,   115,
+     226,   116,    -1,   106,   210,    -1,    -1,    20,   277,   258,
+     147,   150,    -1,    -1,   236,    20,   277,   149,   150,    -1,
+     112,   151,   113,   114,    -1,   152,    -1,   151,   152,    -1,
+     189,    -1,    39,   210,    -1,    40,   210,    -1,   212,    -1,
+     153,    -1,    82,   273,    24,   115,   264,   116,   256,   279,
+     258,   252,   114,   262,    -1,    -1,    93,    24,   155,   112,
+     156,   113,   114,    -1,   139,    -1,   156,   139,    -1,    -1,
+      95,   158,   112,   159,   113,    -1,   160,    -1,   159,   160,
+      -1,    24,    -1,    28,    24,    -1,    96,    24,    -1,    -1,
+      94,   164,   112,   165,   113,    -1,   166,    -1,   165,   166,
+      -1,    24,    -1,    22,   115,   169,   116,    -1,    24,    -1,
+     117,    24,    -1,   168,    80,    24,    -1,   168,    80,   117,
+      24,    -1,   168,    -1,   215,   118,   215,    -1,    23,    -1,
+      97,   258,    -1,   110,   178,    -1,   111,   178,    -1,    50,
+     178,    -1,    51,   178,    -1,   177,   178,   179,    -1,    48,
+      -1,    49,    -1,    24,    -1,    25,    -1,    -1,    90,    -1,
+      42,    25,    -1,    43,    25,    -1,    44,    25,    -1,    -1,
+       9,   210,    -1,    -1,    10,   210,    -1,    -1,    11,   210,
+      -1,    19,   210,    -1,    45,   210,    -1,    46,   210,    -1,
+      47,   210,    -1,    -1,   189,    -1,    29,   210,    -1,    30,
+     210,    -1,    31,   210,    -1,    32,   210,    -1,    33,   210,
+      -1,    34,   210,    -1,    35,   210,    -1,    36,   210,    -1,
+      37,   210,    -1,    16,   210,    -1,    17,   210,    -1,    12,
+     210,    -1,    13,   210,    -1,    14,   210,    -1,    15,   210,
+      -1,    18,   210,    -1,     6,   210,    -1,     7,   210,    -1,
+       8,    25,   214,   210,    -1,   211,    23,    -1,    21,    -1,
+     211,    21,    -1,    -1,    76,   215,   258,   213,   112,   216,
+     113,   114,    -1,    -1,    25,    -1,    -1,    24,    -1,    -1,
+     217,    -1,   218,    -1,   217,   218,    -1,   167,    -1,   170,
+      -1,    24,   220,   258,   219,    -1,    -1,   119,    -1,    -1,
+     120,   225,    -1,    -1,   120,   222,    -1,   225,    -1,   222,
+     223,   225,    -1,   118,    -1,   121,    -1,   122,    -1,   123,
+      -1,   124,    -1,   125,    -1,    -1,   117,    -1,   126,    -1,
+     118,    -1,   121,    -1,   224,   228,    -1,   227,    -1,   226,
+      79,   227,    -1,    24,    -1,   226,    -1,   277,   115,   229,
+     116,    -1,    91,    -1,    90,    -1,    99,    -1,   100,    -1,
+     101,    -1,    26,    -1,    98,    -1,    -1,   222,    -1,   229,
+     119,   222,    -1,    92,   273,    24,   258,   114,    -1,    92,
+     273,   115,   276,    24,   116,   115,   278,   116,   258,   114,
+      -1,    -1,    -1,    53,   226,   232,   240,   258,   233,   243,
+     114,    -1,    -1,   236,   235,   237,    -1,   108,   127,   278,
+     128,    -1,    -1,    -1,    52,   226,   238,   240,   258,   239,
+     243,   114,    -1,    -1,   129,   241,    -1,   242,    -1,   241,
+     119,   242,    -1,   226,    -1,    -1,   112,   244,   113,    -1,
+     245,    -1,   244,   245,    -1,   167,    -1,   170,    -1,   154,
+      -1,   231,    -1,   237,    -1,   143,    -1,   230,    -1,   212,
+      -1,   201,    -1,   189,    -1,   191,    -1,   192,    -1,   193,
+      -1,   194,    -1,   195,    -1,   196,    -1,   197,    -1,   198,
+      -1,   199,    -1,   248,    -1,   247,    -1,   267,    -1,    41,
+     210,    -1,    40,   210,    -1,    54,   246,   129,    -1,    55,
+     246,   129,    -1,    56,   246,   129,    -1,    57,   129,    -1,
+      -1,    58,    -1,   253,   126,    24,   115,   116,   279,   257,
+     258,   114,   262,   263,    -1,    -1,   107,   249,   250,    -1,
+     250,    -1,    24,   115,   264,   116,   279,   258,   251,   114,
+     262,    -1,    -1,   130,   115,   264,   116,   131,    -1,    -1,
+     130,   273,   115,   264,   116,   131,    -1,    -1,    75,    -1,
+     273,    24,   115,   264,   116,   256,   279,   257,   258,   252,
+     114,   262,   263,    -1,   273,   102,   120,   115,   273,   116,
+     114,    -1,   273,   102,   255,   115,   264,   116,   256,   279,
+     257,   258,   252,   114,   262,   263,    -1,   102,   273,   115,
+     264,   116,   256,   279,   257,   258,   252,   114,   262,   263,
+      -1,   121,    -1,   118,    -1,   122,    -1,   123,    -1,   132,
+      -1,   124,    -1,   125,    -1,   133,    -1,   127,   127,    -1,
+     128,   128,    -1,   121,   120,    -1,   118,   120,    -1,   122,
+     120,    -1,   123,   120,    -1,   132,   120,    -1,   124,   120,
+      -1,   125,   120,    -1,   133,   120,    -1,   127,   127,   120,
+      -1,   128,   128,   120,    -1,   126,    -1,   115,   116,    -1,
+     130,   131,    -1,   127,    -1,   127,   120,    -1,   120,   120,
+      -1,   117,   120,    -1,   128,    -1,   128,   120,    -1,    -1,
+      81,    -1,    -1,   120,    90,    -1,    -1,   123,   259,   123,
+      -1,   260,    -1,   259,   119,   260,    -1,    24,    -1,    24,
+     120,   261,    -1,   178,    -1,    24,   129,   179,   118,   179,
+      -1,    26,    -1,    90,    -1,    -1,    38,   210,    -1,    -1,
+      27,   210,    -1,   265,    -1,    -1,   266,    -1,   265,   119,
+     266,    -1,    83,   215,   258,   221,    -1,    84,   215,   258,
+     221,    -1,    85,   215,   258,   221,    -1,    86,   215,   258,
+      -1,    87,   215,   258,    -1,    88,   115,   264,   116,   215,
+     258,    -1,    89,   115,   264,   116,   215,   258,    -1,   104,
+     215,   258,    -1,   274,   221,    -1,    -1,    82,   268,   269,
+      -1,   269,    -1,   270,    -1,   272,    -1,    -1,    75,   271,
+     254,    -1,   254,    -1,   273,    24,   258,   114,   183,   184,
+     185,    -1,    81,   277,   276,   275,    -1,   277,   276,   275,
+      -1,   273,   215,   258,    -1,    -1,   124,    -1,    -1,   276,
+     122,    -1,   226,    -1,   226,   127,   278,   128,    -1,    53,
+     226,    -1,    78,    60,    -1,    60,    -1,    78,    -1,    78,
+      61,    -1,    61,    -1,    62,    -1,    78,    62,    -1,    62,
+      62,    -1,    78,    62,    62,    -1,    63,    -1,    64,    -1,
+      59,    -1,    77,    65,    -1,    78,    65,    -1,    65,    -1,
+      66,    -1,    67,    -1,    68,    -1,    69,    -1,    70,    -1,
+      71,    -1,    72,    -1,    73,    -1,    74,    -1,   109,    -1,
+     273,    -1,   278,   119,   273,    -1,    -1,   103,   115,   280,
+     116,    -1,    -1,   226,    -1,   280,   119,   226,    -1
 };
 
 /* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
 static const yytype_uint16 yyrline[] =
 {
-       0,   337,   337,   338,   341,   341,   360,   361,   362,   363,
-     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
-     374,   375,   376,   380,   384,   388,   389,   390,   391,   392,
-     393,   394,   395,   396,   397,   398,   401,   402,   403,   404,
-     405,   406,   407,   408,   409,   410,   411,   412,   425,   434,
-     439,   465,   501,   505,   579,   584,   584,   590,   590,   639,
-     653,   654,   657,   661,   670,   679,   680,   683,   697,   697,
-     734,   735,   738,   738,   765,   766,   769,   774,   779,   779,
-     804,   805,   808,   813,   826,   829,   832,   835,   840,   841,
-     846,   852,   879,   890,   901,   914,   927,   960,   963,   968,
-     969,   985,   988,   991,   996,  1001,  1006,  1009,  1014,  1017,
-    1022,  1025,  1030,  1035,  1040,  1045,  1050,  1053,  1056,  1061,
-    1066,  1071,  1076,  1081,  1086,  1091,  1096,  1101,  1106,  1111,
-    1117,  1123,  1129,  1135,  1144,  1150,  1155,  1161,  1164,  1165,
-    1176,  1176,  1188,  1191,  1196,  1199,  1204,  1205,  1208,  1209,
-    1212,  1213,  1214,  1242,  1243,  1246,  1247,  1250,  1253,  1258,
-    1259,  1277,  1280,  1283,  1286,  1289,  1292,  1297,  1300,  1303,
-    1306,  1309,  1314,  1332,  1333,  1341,  1346,  1355,  1365,  1369,
-    1373,  1377,  1381,  1385,  1389,  1395,  1400,  1406,  1424,  1431,
-    1456,  1462,  1456,  1477,  1477,  1503,  1508,  1514,  1508,  1526,
-    1527,  1530,  1531,  1534,  1573,  1576,  1581,  1582,  1585,  1586,
-    1587,  1588,  1589,  1590,  1591,  1592,  1593,  1597,  1601,  1612,
-    1623,  1634,  1645,  1656,  1667,  1678,  1689,  1700,  1701,  1702,
-    1703,  1714,  1725,  1732,  1739,  1746,  1755,  1758,  1763,  1812,
-    1812,  1813,  1816,  1842,  1845,  1852,  1855,  1863,  1866,  1871,
-    1886,  1904,  1930,  2005,  2006,  2007,  2008,  2009,  2010,  2011,
-    2012,  2013,  2014,  2015,  2016,  2017,  2018,  2019,  2020,  2021,
-    2022,  2023,  2024,  2025,  2026,  2027,  2028,  2029,  2030,  2031,
-    2032,  2033,  2036,  2039,  2044,  2047,  2055,  2058,  2064,  2068,
-    2080,  2084,  2090,  2094,  2116,  2120,  2126,  2129,  2134,  2137,
-    2142,  2190,  2195,  2201,  2228,  2237,  2246,  2255,  2266,  2274,
-    2289,  2304,  2310,  2316,  2316,  2317,  2320,  2321,  2324,  2324,
-    2325,  2328,  2363,  2369,  2377,  2445,  2448,  2456,  2459,  2464,
-    2475,  2489,  2506,  2513,  2520,  2527,  2534,  2541,  2548,  2555,
-    2562,  2569,  2576,  2583,  2590,  2597,  2604,  2611,  2618,  2625,
-    2632,  2639,  2646,  2653,  2660,  2667,  2674,  2683,  2689,  2705,
-    2708,  2716,  2722,  2729
+       0,   338,   338,   339,   342,   342,   361,   362,   363,   364,
+     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
+     375,   376,   377,   381,   385,   389,   390,   391,   392,   393,
+     394,   395,   396,   397,   398,   399,   400,   403,   404,   405,
+     406,   407,   408,   409,   410,   411,   412,   413,   414,   427,
+     436,   441,   467,   503,   507,   581,   586,   586,   592,   592,
+     641,   655,   656,   659,   663,   672,   681,   682,   685,   699,
+     699,   736,   737,   740,   740,   767,   768,   771,   776,   781,
+     786,   786,   811,   812,   815,   820,   833,   836,   839,   842,
+     847,   848,   853,   859,   886,   897,   908,   921,   934,   967,
+     970,   975,   976,   992,   995,   998,  1003,  1008,  1013,  1016,
+    1021,  1024,  1029,  1032,  1037,  1042,  1047,  1052,  1057,  1060,
+    1063,  1068,  1073,  1078,  1083,  1088,  1093,  1098,  1103,  1108,
+    1113,  1118,  1124,  1130,  1136,  1142,  1151,  1157,  1162,  1168,
+    1171,  1172,  1183,  1183,  1195,  1198,  1203,  1206,  1211,  1212,
+    1215,  1216,  1219,  1220,  1221,  1249,  1250,  1253,  1254,  1257,
+    1260,  1265,  1266,  1284,  1287,  1290,  1293,  1296,  1299,  1304,
+    1307,  1310,  1313,  1316,  1321,  1339,  1340,  1348,  1353,  1362,
+    1372,  1376,  1380,  1384,  1388,  1392,  1396,  1402,  1407,  1413,
+    1431,  1438,  1463,  1469,  1463,  1484,  1484,  1510,  1515,  1521,
+    1515,  1533,  1534,  1537,  1538,  1541,  1580,  1583,  1588,  1589,
+    1592,  1593,  1594,  1595,  1596,  1597,  1598,  1599,  1600,  1604,
+    1608,  1619,  1630,  1641,  1652,  1663,  1674,  1685,  1696,  1707,
+    1708,  1709,  1710,  1721,  1732,  1739,  1746,  1753,  1762,  1765,
+    1770,  1819,  1819,  1820,  1823,  1849,  1852,  1859,  1862,  1870,
+    1873,  1878,  1893,  1911,  1937,  2012,  2013,  2014,  2015,  2016,
+    2017,  2018,  2019,  2020,  2021,  2022,  2023,  2024,  2025,  2026,
+    2027,  2028,  2029,  2030,  2031,  2032,  2033,  2034,  2035,  2036,
+    2037,  2038,  2039,  2040,  2043,  2046,  2051,  2054,  2062,  2065,
+    2071,  2075,  2087,  2091,  2097,  2101,  2123,  2127,  2133,  2136,
+    2141,  2144,  2149,  2197,  2202,  2208,  2235,  2244,  2253,  2262,
+    2273,  2281,  2296,  2311,  2317,  2323,  2323,  2324,  2327,  2328,
+    2331,  2331,  2332,  2335,  2370,  2376,  2384,  2452,  2455,  2463,
+    2466,  2471,  2482,  2496,  2513,  2520,  2527,  2534,  2541,  2548,
+    2555,  2562,  2569,  2576,  2583,  2590,  2597,  2604,  2611,  2618,
+    2625,  2632,  2639,  2646,  2653,  2660,  2667,  2674,  2681,  2690,
+    2696,  2712,  2715,  2723,  2729,  2736
 };
 #endif
 
@@ -946,11 +948,12 @@
   "TK_SETCODE", "TK_PREINITCODE", "TK_INITCODE", "TK_POSTINITCODE",
   "TK_UNITCODE", "TK_MODCODE", "TK_TYPECODE", "TK_PREPYCODE", "TK_COPYING",
   "TK_MAPPEDTYPE", "TK_CODELINE", "TK_IF", "TK_END", "TK_NAME",
-  "TK_PATHNAME", "TK_STRING", "TK_VIRTUALCATCHERCODE", "TK_TRAVERSECODE",
-  "TK_CLEARCODE", "TK_GETBUFFERCODE", "TK_RELEASEBUFFERCODE",
-  "TK_READBUFFERCODE", "TK_WRITEBUFFERCODE", "TK_SEGCOUNTCODE",
-  "TK_CHARBUFFERCODE", "TK_PICKLECODE", "TK_METHODCODE", "TK_FROMTYPE",
-  "TK_TOTYPE", "TK_TOSUBCLASS", "TK_INCLUDE", "TK_OPTINCLUDE", "TK_IMPORT",
+  "TK_PATHNAME", "TK_STRING", "TK_VIRTUALCATCHERCODE",
+  "TK_VIRTERRORHANDLER", "TK_TRAVERSECODE", "TK_CLEARCODE",
+  "TK_GETBUFFERCODE", "TK_RELEASEBUFFERCODE", "TK_READBUFFERCODE",
+  "TK_WRITEBUFFERCODE", "TK_SEGCOUNTCODE", "TK_CHARBUFFERCODE",
+  "TK_PICKLECODE", "TK_METHODCODE", "TK_FROMTYPE", "TK_TOTYPE",
+  "TK_TOSUBCLASS", "TK_INCLUDE", "TK_OPTINCLUDE", "TK_IMPORT",
   "TK_EXPHEADERCODE", "TK_MODHEADERCODE", "TK_TYPEHEADERCODE", "TK_MODULE",
   "TK_CMODULE", "TK_CONSMODULE", "TK_COMPOMODULE", "TK_CLASS", "TK_STRUCT",
   "TK_PUBLIC", "TK_PROTECTED", "TK_PRIVATE", "TK_SIGNALS", "TK_SLOTS",
@@ -971,22 +974,22 @@
   "nsstatement", "defencoding", "plugin", "api", "exception",
   "baseexception", "raisecode", "mappedtype", "@2", "mappedtypetmpl", "@3",
   "mtdefinition", "mtbody", "mtline", "mtfunction", "namespace", "@4",
-  "nsbody", "platforms", "@5", "platformlist", "platform", "feature",
-  "timeline", "@6", "qualifierlist", "qualifiername", "ifstart",
-  "oredqualifiers", "qualifiers", "ifend", "license", "defmetatype",
-  "defsupertype", "consmodule", "compmodule", "module", "modlang",
-  "dottedname", "optnumber", "include", "optinclude", "import",
-  "optaccesscode", "optgetcode", "optsetcode", "copying", "exphdrcode",
-  "modhdrcode", "typehdrcode", "opttypehdrcode", "travcode", "clearcode",
-  "getbufcode", "releasebufcode", "readbufcode", "writebufcode",
-  "segcountcode", "charbufcode", "picklecode", "modcode", "typecode",
-  "preinitcode", "initcode", "postinitcode", "unitcode", "prepycode",
-  "doc", "exporteddoc", "makefile", "codeblock", "codelines", "enum", "@7",
-  "optfilename", "optname", "optenumbody", "enumbody", "enumline",
-  "optcomma", "optenumassign", "optassign", "expr", "binop", "optunop",
-  "value", "scopedname", "scopepart", "simplevalue", "exprlist", "typedef",
-  "struct", "@8", "@9", "classtmpl", "@10", "template", "class", "@11",
-  "@12", "superclasses", "superlist", "superclass", "optclassbody",
+  "nsbody", "platforms", "@5", "platformlist", "platform",
+  "virterrorhandler", "feature", "timeline", "@6", "qualifierlist",
+  "qualifiername", "ifstart", "oredqualifiers", "qualifiers", "ifend",
+  "license", "defmetatype", "defsupertype", "consmodule", "compmodule",
+  "module", "modlang", "dottedname", "optnumber", "include", "optinclude",
+  "import", "optaccesscode", "optgetcode", "optsetcode", "copying",
+  "exphdrcode", "modhdrcode", "typehdrcode", "opttypehdrcode", "travcode",
+  "clearcode", "getbufcode", "releasebufcode", "readbufcode",
+  "writebufcode", "segcountcode", "charbufcode", "picklecode", "modcode",
+  "typecode", "preinitcode", "initcode", "postinitcode", "unitcode",
+  "prepycode", "doc", "exporteddoc", "makefile", "codeblock", "codelines",
+  "enum", "@7", "optfilename", "optname", "optenumbody", "enumbody",
+  "enumline", "optcomma", "optenumassign", "optassign", "expr", "binop",
+  "optunop", "value", "scopedname", "scopepart", "simplevalue", "exprlist",
+  "typedef", "struct", "@8", "@9", "classtmpl", "@10", "template", "class",
+  "@11", "@12", "superclasses", "superlist", "superclass", "optclassbody",
   "classbody", "classline", "optslot", "dtor", "ctor", "@13", "simplector",
   "optctorsig", "optsig", "optvirtual", "function", "operatorname",
   "optconst", "optabstract", "optflags", "flaglist", "flag", "flagvalue",
@@ -1013,52 +1016,52 @@
      335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
-     365,   123,   125,    59,    40,    41,    33,    45,    44,    61,
-      43,    42,    47,    38,   124,   126,    60,    62,    58,    91,
-      93,    37,    94
+     365,   366,   123,   125,    59,    40,    41,    33,    45,    44,
+      61,    43,    42,    47,    38,   124,   126,    60,    62,    58,
+      91,    93,    37,    94
 };
 # endif
 
 /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
 static const yytype_uint16 yyr1[] =
 {
-       0,   133,   134,   134,   136,   135,   137,   137,   137,   137,
-     137,   137,   137,   137,   137,   137,   137,   137,   137,   137,
-     137,   137,   137,   137,   137,   137,   137,   137,   137,   137,
-     137,   137,   137,   137,   137,   137,   138,   138,   138,   138,
-     138,   138,   138,   138,   138,   138,   138,   138,   139,   140,
-     141,   142,   143,   143,   144,   146,   145,   148,   147,   149,
-     150,   150,   151,   151,   151,   151,   151,   152,   154,   153,
-     155,   155,   157,   156,   158,   158,   159,   160,   162,   161,
-     163,   163,   164,   165,   166,   166,   166,   166,   167,   167,
-     168,   169,   170,   171,   172,   173,   174,   175,   175,   176,
-     176,   177,   177,   178,   179,   180,   181,   181,   182,   182,
-     183,   183,   184,   185,   186,   187,   188,   188,   189,   190,
+       0,   134,   135,   135,   137,   136,   138,   138,   138,   138,
+     138,   138,   138,   138,   138,   138,   138,   138,   138,   138,
+     138,   138,   138,   138,   138,   138,   138,   138,   138,   138,
+     138,   138,   138,   138,   138,   138,   138,   139,   139,   139,
+     139,   139,   139,   139,   139,   139,   139,   139,   139,   140,
+     141,   142,   143,   144,   144,   145,   147,   146,   149,   148,
+     150,   151,   151,   152,   152,   152,   152,   152,   153,   155,
+     154,   156,   156,   158,   157,   159,   159,   160,   161,   162,
+     164,   163,   165,   165,   166,   167,   168,   168,   168,   168,
+     169,   169,   170,   171,   172,   173,   174,   175,   176,   177,
+     177,   178,   178,   179,   179,   180,   181,   182,   183,   183,
+     184,   184,   185,   185,   186,   187,   188,   189,   190,   190,
      191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
-     201,   202,   203,   204,   205,   206,   207,   208,   209,   209,
-     211,   210,   212,   212,   213,   213,   214,   214,   215,   215,
-     216,   216,   216,   217,   217,   218,   218,   219,   219,   220,
-     220,   221,   221,   221,   221,   221,   221,   222,   222,   222,
-     222,   222,   223,   224,   224,   225,   226,   226,   226,   226,
-     226,   226,   226,   226,   226,   227,   227,   227,   228,   228,
-     230,   231,   229,   233,   232,   234,   236,   237,   235,   238,
-     238,   239,   239,   240,   241,   241,   242,   242,   243,   243,
-     243,   243,   243,   243,   243,   243,   243,   243,   243,   243,
-     243,   243,   243,   243,   243,   243,   243,   243,   243,   243,
-     243,   243,   243,   243,   243,   243,   244,   244,   245,   247,
-     246,   246,   248,   249,   249,   250,   250,   251,   251,   252,
-     252,   252,   252,   253,   253,   253,   253,   253,   253,   253,
-     253,   253,   253,   253,   253,   253,   253,   253,   253,   253,
-     253,   253,   253,   253,   253,   253,   253,   253,   253,   253,
-     253,   253,   254,   254,   255,   255,   256,   256,   257,   257,
-     258,   258,   259,   259,   259,   259,   260,   260,   261,   261,
-     262,   263,   263,   263,   264,   264,   264,   264,   264,   264,
-     264,   264,   264,   266,   265,   265,   267,   267,   269,   268,
-     268,   270,   271,   271,   272,   273,   273,   274,   274,   275,
-     275,   275,   275,   275,   275,   275,   275,   275,   275,   275,
-     275,   275,   275,   275,   275,   275,   275,   275,   275,   275,
-     275,   275,   275,   275,   275,   275,   275,   276,   276,   277,
-     277,   278,   278,   278
+     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
+     211,   211,   213,   212,   214,   214,   215,   215,   216,   216,
+     217,   217,   218,   218,   218,   219,   219,   220,   220,   221,
+     221,   222,   222,   223,   223,   223,   223,   223,   223,   224,
+     224,   224,   224,   224,   225,   226,   226,   227,   228,   228,
+     228,   228,   228,   228,   228,   228,   228,   229,   229,   229,
+     230,   230,   232,   233,   231,   235,   234,   236,   238,   239,
+     237,   240,   240,   241,   241,   242,   243,   243,   244,   244,
+     245,   245,   245,   245,   245,   245,   245,   245,   245,   245,
+     245,   245,   245,   245,   245,   245,   245,   245,   245,   245,
+     245,   245,   245,   245,   245,   245,   245,   245,   246,   246,
+     247,   249,   248,   248,   250,   251,   251,   252,   252,   253,
+     253,   254,   254,   254,   254,   255,   255,   255,   255,   255,
+     255,   255,   255,   255,   255,   255,   255,   255,   255,   255,
+     255,   255,   255,   255,   255,   255,   255,   255,   255,   255,
+     255,   255,   255,   255,   256,   256,   257,   257,   258,   258,
+     259,   259,   260,   260,   261,   261,   261,   261,   262,   262,
+     263,   263,   264,   265,   265,   265,   266,   266,   266,   266,
+     266,   266,   266,   266,   266,   268,   267,   267,   269,   269,
+     271,   270,   270,   272,   273,   273,   274,   275,   275,   276,
+     276,   277,   277,   277,   277,   277,   277,   277,   277,   277,
+     277,   277,   277,   277,   277,   277,   277,   277,   277,   277,
+     277,   277,   277,   277,   277,   277,   277,   277,   277,   278,
+     278,   279,   279,   280,   280,   280
 };
 
 /* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
@@ -1068,39 +1071,39 @@
        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
-       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
-       3,     9,     0,     3,     2,     0,     5,     0,     5,     4,
-       1,     2,     1,     2,     2,     1,     1,    12,     0,     7,
-       1,     2,     0,     5,     1,     2,     1,     2,     0,     5,
-       1,     2,     1,     4,     1,     2,     3,     4,     1,     3,
-       1,     2,     2,     2,     2,     2,     3,     1,     1,     1,
-       1,     0,     1,     2,     2,     2,     0,     2,     0,     2,
-       0,     2,     2,     2,     2,     2,     0,     1,     2,     2,
+       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
+       2,     3,     9,     0,     3,     2,     0,     5,     0,     5,
+       4,     1,     2,     1,     2,     2,     1,     1,    12,     0,
+       7,     1,     2,     0,     5,     1,     2,     1,     2,     2,
+       0,     5,     1,     2,     1,     4,     1,     2,     3,     4,
+       1,     3,     1,     2,     2,     2,     2,     2,     3,     1,
+       1,     1,     1,     0,     1,     2,     2,     2,     0,     2,
+       0,     2,     0,     2,     2,     2,     2,     2,     0,     1,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     4,     2,     1,     2,
-       0,     8,     0,     1,     0,     1,     0,     1,     1,     2,
-       1,     1,     4,     0,     1,     0,     2,     0,     2,     1,
-       3,     1,     1,     1,     1,     1,     1,     0,     1,     1,
-       1,     1,     2,     1,     3,     1,     1,     4,     1,     1,
-       1,     1,     1,     1,     1,     0,     1,     3,     5,    11,
-       0,     0,     8,     0,     3,     4,     0,     0,     8,     0,
-       2,     1,     3,     1,     0,     3,     1,     2,     1,     1,
+       2,     2,     2,     2,     2,     2,     2,     2,     4,     2,
+       1,     2,     0,     8,     0,     1,     0,     1,     0,     1,
+       1,     2,     1,     1,     4,     0,     1,     0,     2,     0,
+       2,     1,     3,     1,     1,     1,     1,     1,     1,     0,
+       1,     1,     1,     1,     2,     1,     3,     1,     1,     4,
+       1,     1,     1,     1,     1,     1,     1,     0,     1,     3,
+       5,    11,     0,     0,     8,     0,     3,     4,     0,     0,
+       8,     0,     2,     1,     3,     1,     0,     3,     1,     2,
        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
-       2,     2,     3,     3,     3,     2,     0,     1,    11,     0,
-       3,     1,     9,     0,     5,     0,     6,     0,     1,    13,
-       7,    14,    13,     1,     1,     1,     1,     1,     1,     1,
-       1,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     3,     3,     1,     2,     2,     1,     2,     2,     2,
-       1,     2,     0,     1,     0,     2,     0,     3,     1,     3,
-       1,     3,     1,     5,     1,     1,     0,     2,     0,     2,
-       1,     0,     1,     3,     4,     4,     4,     3,     3,     6,
-       6,     3,     2,     0,     3,     1,     1,     1,     0,     3,
-       1,     7,     4,     3,     3,     0,     1,     0,     2,     1,
-       4,     2,     2,     1,     1,     2,     1,     1,     2,     2,
-       3,     1,     1,     1,     2,     2,     1,     1,     1,     1,
-       1,     1,     1,     1,     1,     1,     1,     1,     3,     0,
-       4,     0,     1,     3
+       1,     1,     2,     2,     3,     3,     3,     2,     0,     1,
+      11,     0,     3,     1,     9,     0,     5,     0,     6,     0,
+       1,    13,     7,    14,    13,     1,     1,     1,     1,     1,
+       1,     1,     1,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     3,     3,     1,     2,     2,     1,     2,
+       2,     2,     1,     2,     0,     1,     0,     2,     0,     3,
+       1,     3,     1,     3,     1,     5,     1,     1,     0,     2,
+       0,     2,     1,     0,     1,     3,     4,     4,     4,     3,
+       3,     6,     6,     3,     2,     0,     3,     1,     1,     1,
+       0,     3,     1,     7,     4,     3,     3,     0,     1,     0,
+       2,     1,     4,     2,     2,     1,     1,     2,     1,     1,
+       2,     2,     3,     1,     1,     1,     2,     2,     1,     1,
+       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
+       3,     0,     4,     0,     1,     3
 };
 
 /* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
@@ -1110,485 +1113,491 @@
 {
        4,     4,     2,     0,     1,     3,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,    90,   175,     0,     0,     0,     0,     0,     0,    97,
-      98,     0,     0,     0,     0,   343,   333,   336,   337,   341,
-     342,   346,   347,   348,   349,   350,   351,   352,   353,   354,
-     355,   144,     0,   334,     0,     0,     0,    78,    72,     0,
-     286,     0,     0,     0,   356,     0,     0,     5,    35,    19,
-       9,    14,    42,    33,    34,    38,    16,    17,    15,    36,
-      37,    18,    20,    21,     7,     8,     6,     0,    11,    12,
-      13,    10,    22,    23,    47,    24,    25,    26,    27,    28,
-      29,    30,    31,    32,    44,   329,   173,    43,    39,    41,
-     193,    40,    45,    46,     0,   327,     0,    48,    49,   138,
-     134,     0,   135,   142,   129,   130,   131,   132,   127,   133,
-     112,     0,   286,   144,   103,   104,   105,   113,   114,   115,
-      99,   100,    94,    95,   196,   190,   339,   145,   286,   344,
-     332,   335,   338,   345,   327,     0,    68,     0,     0,    77,
-       0,    91,     0,    52,     0,    92,    93,   101,     0,     0,
-       0,     0,   286,     0,   325,    50,   139,   137,   143,     0,
-     331,    55,    84,     0,    88,     0,     0,   199,   199,   140,
-     340,   325,   286,   327,     0,     0,     0,   290,     0,   288,
-     301,     0,   286,   357,     0,   102,    96,   174,     0,    57,
-     194,   301,     0,     0,     0,   254,     0,   253,   255,   256,
-     258,   259,   273,   276,   280,     0,   257,   260,     0,   328,
-     326,   323,   136,     0,    85,     0,    83,   144,     0,   286,
-     286,     0,   322,     0,     0,     0,    82,     0,    80,    76,
-       0,    74,     0,     0,   287,   144,   144,   144,   144,   144,
-       0,     0,   144,     0,   300,   302,   144,   157,     0,     0,
-       0,   195,   330,     0,     0,   106,   274,   279,   264,     0,
-     278,   263,   265,   266,   268,   269,   277,   261,   281,   262,
-     275,   267,   270,   301,     0,    56,    86,     0,    89,   203,
-     200,   201,   197,   191,   146,   188,     0,    70,     0,   193,
-      79,    81,    73,    75,    99,   294,   295,   292,   291,   289,
-     286,   286,   286,   286,   286,   301,   301,   286,   282,     0,
-     286,   167,   312,    53,   116,   358,    58,   282,     0,   108,
-       0,   271,   272,     0,     0,     0,     0,     0,    60,    66,
-      62,    65,    87,     0,   204,   204,   155,   150,   151,     0,
-     147,   148,     0,     0,    71,   101,   157,   157,   157,   307,
-     308,     0,     0,   311,   283,   359,   303,   324,   168,   170,
-     171,   169,   158,     0,   159,   117,     0,   359,   107,     0,
-     110,     0,   282,    63,    64,     0,     0,    61,   202,   247,
-       0,     0,   167,   286,     0,   149,     0,    69,     0,   304,
-     305,   306,   144,   144,     0,   284,   161,   162,   163,   164,
-     165,   166,   167,   183,   179,   178,   184,   180,   181,   182,
-     176,   172,     0,     0,     0,   284,   109,     0,   321,   250,
-     359,     0,    59,     0,   175,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,   236,   236,   236,     0,
-     318,   313,   239,   213,   210,   208,   209,   217,   218,   219,
-     220,   221,   222,   223,   224,   225,   226,   216,   215,   214,
-     211,   212,   247,   206,   228,   227,   241,     0,   320,   229,
-     315,   316,   317,   198,   192,   156,   153,   141,     0,   101,
-     286,   286,   361,     0,   286,   160,   167,    54,     0,   286,
-     111,   284,   301,   128,   301,   118,   119,   120,   121,   122,
-     123,   124,   125,   126,   231,   230,   237,     0,     0,     0,
-     235,     0,     0,     0,   205,   207,     0,   154,   152,   286,
-     293,   309,   310,   362,     0,   285,   245,   186,     0,    51,
-     245,   286,     0,     0,   232,   233,   234,   319,     0,   318,
-     314,     0,   240,     0,     0,   360,     0,     0,     0,   177,
-     167,     0,   245,   282,   359,     0,     0,   189,   363,     0,
-     296,   187,   296,     0,   359,   286,   359,   301,     0,   298,
-     298,   296,   286,   243,   284,     0,   297,     0,   252,   249,
-     298,   245,     0,     0,   286,     0,   299,   251,     0,   301,
-     296,     0,   246,   296,     0,   242,   296,    67,     0,   298,
-     244,   238
+       0,    92,   177,     0,     0,     0,     0,     0,     0,     0,
+      99,   100,     0,     0,     0,     0,   345,   335,   338,   339,
+     343,   344,   348,   349,   350,   351,   352,   353,   354,   355,
+     356,   357,   146,     0,   336,     0,     0,     0,    80,    73,
+       0,   288,     0,     0,     0,   358,     0,     0,     5,    35,
+      19,     9,    14,    43,    33,    34,    39,    16,    36,    17,
+      15,    37,    38,    18,    20,    21,     7,     8,     6,     0,
+      11,    12,    13,    10,    22,    23,    48,    24,    25,    26,
+      27,    28,    29,    30,    31,    32,    45,   331,   175,    44,
+      40,    42,   195,    41,    46,    47,     0,   329,     0,    49,
+      50,   140,   136,     0,   137,   144,   131,   132,   133,   134,
+     129,   135,   114,     0,   288,   146,    78,   105,   106,   107,
+     115,   116,   117,   101,   102,    96,    97,   198,   192,   341,
+     147,   288,   346,   334,   337,   340,   347,   329,     0,    69,
+       0,     0,    79,     0,    93,     0,    53,     0,    94,    95,
+     103,     0,     0,     0,     0,   288,     0,   327,    51,   141,
+     139,   145,     0,   333,    56,    86,     0,    90,     0,     0,
+     201,   201,   142,   342,   327,   288,   329,     0,     0,     0,
+     292,     0,   290,   303,     0,   288,   359,     0,   104,    98,
+     176,     0,    58,   196,   303,     0,     0,     0,   256,     0,
+     255,   257,   258,   260,   261,   275,   278,   282,     0,   259,
+     262,     0,   330,   328,   325,   138,     0,    87,     0,    85,
+     146,     0,   288,   288,     0,   324,     0,     0,     0,    84,
+       0,    82,    77,     0,    75,     0,     0,   289,   146,   146,
+     146,   146,   146,     0,     0,   146,     0,   302,   304,   146,
+     159,     0,     0,     0,   197,   332,     0,     0,   108,   276,
+     281,   266,     0,   280,   265,   267,   268,   270,   271,   279,
+     263,   283,   264,   277,   269,   272,   303,     0,    57,    88,
+       0,    91,   205,   202,   203,   199,   193,   148,   190,     0,
+      71,     0,   195,    81,    83,    74,    76,   101,   296,   297,
+     294,   293,   291,   288,   288,   288,   288,   288,   303,   303,
+     288,   284,     0,   288,   169,   314,    54,   118,   360,    59,
+     284,     0,   110,     0,   273,   274,     0,     0,     0,     0,
+       0,    61,    67,    63,    66,    89,     0,   206,   206,   157,
+     152,   153,     0,   149,   150,     0,     0,    72,   103,   159,
+     159,   159,   309,   310,     0,     0,   313,   285,   361,   305,
+     326,   170,   172,   173,   171,   160,     0,   161,   119,     0,
+     361,   109,     0,   112,     0,   284,    64,    65,     0,     0,
+      62,   204,   249,     0,     0,   169,   288,     0,   151,     0,
+      70,     0,   306,   307,   308,   146,   146,     0,   286,   163,
+     164,   165,   166,   167,   168,   169,   185,   181,   180,   186,
+     182,   183,   184,   178,   174,     0,     0,     0,   286,   111,
+       0,   323,   252,   361,     0,    60,     0,   177,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   238,
+     238,   238,     0,   320,   315,   241,   215,   212,   210,   211,
+     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
+     218,   217,   216,   213,   214,   249,   208,   230,   229,   243,
+       0,   322,   231,   317,   318,   319,   200,   194,   158,   155,
+     143,     0,   103,   288,   288,   363,     0,   288,   162,   169,
+      55,     0,   288,   113,   286,   303,   130,   303,   120,   121,
+     122,   123,   124,   125,   126,   127,   128,   233,   232,   239,
+       0,     0,     0,   237,     0,     0,     0,   207,   209,     0,
+     156,   154,   288,   295,   311,   312,   364,     0,   287,   247,
+     188,     0,    52,   247,   288,     0,     0,   234,   235,   236,
+     321,     0,   320,   316,     0,   242,     0,     0,   362,     0,
+       0,     0,   179,   169,     0,   247,   284,   361,     0,     0,
+     191,   365,     0,   298,   189,   298,     0,   361,   288,   361,
+     303,     0,   300,   300,   298,   288,   245,   286,     0,   299,
+       0,   254,   251,   300,   247,     0,     0,   288,     0,   301,
+     253,     0,   303,   298,     0,   248,   298,     0,   244,   298,
+      68,     0,   300,   246,   240
 };
 
 /* YYDEFGOTO[NTERM-NUM].  */
 static const yytype_int16 yydefgoto[] =
 {
-      -1,     1,     2,     3,    67,    68,    69,    70,    71,    72,
-     202,   434,    73,   233,    74,   273,   295,   347,   348,   349,
-      75,   194,   308,    76,   158,   250,   251,    77,    78,   157,
-     247,   248,    79,   184,   185,    80,    81,    82,    83,    84,
-      85,    86,    87,   142,   206,    88,    89,    90,   339,   390,
-     438,    91,    92,    93,    94,   386,   468,   469,   470,   471,
-     472,   473,   474,   475,   476,    95,   477,    96,    97,    98,
-      99,   100,   101,   102,   103,   120,   121,   104,   241,   179,
-     148,   359,   360,   361,   538,   403,   332,   382,   422,   383,
-     384,   105,   106,   431,   548,   107,   108,   188,   355,   109,
-     171,   309,   111,   187,   354,   239,   300,   301,   400,   482,
-     483,   527,   484,   485,   533,   486,   603,   568,   487,   112,
-     228,   375,   504,   161,   198,   199,   318,   589,   598,   263,
-     264,   265,   489,   532,   490,   491,   531,   113,   266,   267,
-     231,   174,   115,   204,   415,   544
+      -1,     1,     2,     3,    68,    69,    70,    71,    72,    73,
+     205,   437,    74,   236,    75,   276,   298,   350,   351,   352,
+      76,   197,   311,    77,   161,   253,   254,    78,    79,    80,
+     160,   250,   251,    81,   187,   188,    82,    83,    84,    85,
+      86,    87,    88,    89,   145,   209,    90,    91,    92,   342,
+     393,   441,    93,    94,    95,    96,   389,   471,   472,   473,
+     474,   475,   476,   477,   478,   479,    97,   480,    98,    99,
+     100,   101,   102,   103,   104,   105,   122,   123,   106,   244,
+     182,   151,   362,   363,   364,   541,   406,   335,   385,   425,
+     386,   387,   107,   108,   434,   551,   109,   110,   191,   358,
+     111,   174,   312,   113,   190,   357,   242,   303,   304,   403,
+     485,   486,   530,   487,   488,   536,   489,   606,   571,   490,
+     114,   231,   378,   507,   164,   201,   202,   321,   592,   601,
+     266,   267,   268,   492,   535,   493,   494,   534,   115,   269,
+     270,   234,   177,   117,   207,   418,   547
 };
 
 /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
    STATE-NUM.  */
-#define YYPACT_NINF -534
+#define YYPACT_NINF -537
 static const yytype_int16 yypact[] =
 {
-    -534,    56,  -534,   444,  -534,  -534,    38,    47,    81,   139,
-     139,   111,   139,   139,   139,   139,   139,   139,   139,  1018,
-      52,  -534,  -534,   145,   157,   166,   139,   139,   139,  -534,
-    -534,   126,   126,   170,   170,  -534,  -534,  -534,   134,  -534,
-    -534,  -534,  -534,  -534,  -534,  -534,  -534,  -534,  -534,  -534,
-    -534,   181,   160,   174,  1018,   992,   185,  -534,  -534,   202,
-     114,   992,   170,   113,  -534,   126,   126,  -534,  -534,  -534,
-    -534,  -534,  -534,  -534,  -534,  -534,  -534,  -534,  -534,  -534,
-    -534,  -534,  -534,  -534,  -534,  -534,  -534,   126,  -534,  -534,
-    -534,  -534,  -534,  -534,  -534,  -534,  -534,  -534,  -534,  -534,
-    -534,  -534,  -534,  -534,  -534,   -34,  -534,  -534,  -534,  -534,
-     217,  -534,  -534,  -534,    34,  -534,   151,  -534,  -534,  -534,
-    -534,   155,  -534,   219,  -534,  -534,  -534,  -534,  -534,  -534,
-    -534,   170,   114,     5,  -534,  -534,  -534,  -534,  -534,  -534,
-    -534,  -534,  -534,  -534,   167,    16,  -534,  -534,   114,  -534,
-    -534,  -534,   186,  -534,  -534,    13,  -534,   135,   137,  -534,
-     225,  -534,   136,   -12,   992,  -534,  -534,   162,   170,   992,
-    1018,   203,   -23,   165,    85,  -534,  -534,  -534,  -534,   139,
-     167,  -534,   138,   229,   178,   143,   142,   132,   132,  -534,
-    -534,    85,   114,  -534,   150,   238,   239,   146,   -35,  -534,
-     806,   170,   114,  -534,   -17,  -534,  -534,  -534,   -15,  -534,
-    -534,   806,   153,   149,   148,   152,    -8,   154,   156,   159,
-     161,   176,  -534,    -4,    46,   140,   182,   183,   158,  -534,
-    -534,  -534,  -534,   163,  -534,     8,  -534,   181,   170,   114,
-     114,   189,  -534,   180,     7,   752,  -534,    19,  -534,  -534,
-      21,  -534,    25,   225,  -534,   181,   181,   181,   181,   181,
-     190,   191,   181,   188,   192,  -534,   181,   194,   -31,   196,
-     992,  -534,  -534,   163,   193,   260,  -534,  -534,  -534,   992,
-    -534,  -534,  -534,  -534,  -534,  -534,  -534,   197,  -534,   198,
-    -534,  -534,  -534,   806,   141,  -534,  -534,   252,  -534,   167,
-     200,  -534,  -534,  -534,   175,  -534,   204,  -534,   693,  -534,
-    -534,  -534,  -534,  -534,   187,  -534,  -534,  -534,  -534,  -534,
-     114,   114,   114,   114,   114,   806,   806,   114,   231,   806,
-     114,   -46,  -534,  -534,   263,  -534,  -534,   231,   139,   310,
-     206,  -534,  -534,   207,   139,   139,   992,   115,  -534,  -534,
-    -534,  -534,  -534,   170,   212,   212,   205,  -534,  -534,   214,
-     175,  -534,   213,   218,  -534,   162,   194,   194,   194,  -534,
-    -534,   215,   221,  -534,  -534,   230,  -534,  -534,  -534,  -534,
-    -534,  -534,   108,   861,  -534,  -534,   228,   230,  -534,   139,
-     326,   226,   231,  -534,  -534,   314,   227,  -534,  -534,   632,
-     232,   233,   -46,   114,   234,  -534,   992,  -534,   224,  -534,
-    -534,  -534,   181,   181,   235,   223,  -534,  -534,  -534,  -534,
-    -534,  -534,   -46,  -534,  -534,  -534,  -534,  -534,  -534,  -534,
-     -18,  -534,   236,   139,   240,   223,  -534,   139,  -534,  -534,
-     230,   237,  -534,   139,   241,   139,   139,   139,   139,   139,
-     139,   139,   139,   139,   139,   139,   286,   286,   286,   220,
-     242,  -534,  -534,  -534,  -534,  -534,  -534,  -534,  -534,  -534,
-    -534,  -534,  -534,  -534,  -534,  -534,  -534,  -534,  -534,  -534,
-    -534,  -534,   540,  -534,  -534,  -534,  -534,   243,  -534,  -534,
-    -534,  -534,  -534,  -534,  -534,  -534,   244,  -534,   -30,   162,
-     114,   114,   170,   264,   114,  -534,    68,  -534,   245,   114,
-    -534,   223,   806,  -534,   806,  -534,  -534,  -534,  -534,  -534,
-    -534,  -534,  -534,  -534,  -534,  -534,  -534,   246,   247,   248,
-    -534,   938,   912,   330,  -534,  -534,   332,  -534,  -534,   114,
-    -534,  -534,  -534,   167,    57,  -534,   249,   108,    74,  -534,
-     249,   114,   250,   251,  -534,  -534,  -534,  -534,    37,  -534,
-    -534,   241,  -534,   255,   257,  -534,   170,   992,   258,  -534,
-     -46,   259,   249,   231,   230,   268,   270,  -534,   167,   269,
-     320,   108,   320,   273,   230,   114,   230,   806,   139,   333,
-     333,   320,   114,   261,   223,   276,  -534,   139,  -534,  -534,
-     333,   249,   274,   279,   114,   265,  -534,  -534,   280,   806,
-     320,   281,  -534,   320,   283,  -534,   320,  -534,   266,   333,
-    -534,  -534
+    -537,    53,  -537,   551,  -537,  -537,    71,    89,   120,   128,
+     128,   129,   128,   128,   128,   128,   128,   128,   128,   124,
+      49,  -537,  -537,   145,   151,   174,   184,   128,   128,   128,
+    -537,  -537,   134,   134,   191,   191,  -537,  -537,  -537,   154,
+    -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,
+    -537,  -537,   196,   159,   113,   124,  1042,   201,  -537,  -537,
+     205,   107,  1042,   191,   105,  -537,   134,   134,  -537,  -537,
+    -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,
+    -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,   134,
+    -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,
+    -537,  -537,  -537,  -537,  -537,  -537,  -537,   -27,  -537,  -537,
+    -537,  -537,   214,  -537,  -537,  -537,    12,  -537,   146,  -537,
+    -537,  -537,  -537,    84,  -537,   217,  -537,  -537,  -537,  -537,
+    -537,  -537,  -537,   191,   107,    17,  -537,  -537,  -537,  -537,
+    -537,  -537,  -537,  -537,  -537,  -537,  -537,   165,     8,  -537,
+    -537,   107,  -537,  -537,  -537,   183,  -537,  -537,     4,  -537,
+     137,   139,  -537,   230,  -537,   148,   -35,  1042,  -537,  -537,
+     185,   191,  1042,   124,   224,   -26,   228,    57,  -537,  -537,
+    -537,  -537,   128,   165,  -537,   160,   253,   199,   166,   163,
+     155,   155,  -537,  -537,    57,   107,  -537,   171,   261,   263,
+     168,   -11,  -537,   846,   191,   107,  -537,   -63,  -537,  -537,
+    -537,   -58,  -537,  -537,   846,   175,   177,   170,   178,   -46,
+     180,   181,   182,   186,   187,  -537,   -16,   -22,   164,   190,
+     192,   176,  -537,  -537,  -537,  -537,   193,  -537,    18,  -537,
+     196,   191,   107,   107,   202,  -537,   189,    11,   795,  -537,
+       5,  -537,  -537,    23,  -537,    67,   230,  -537,   196,   196,
+     196,   196,   196,   203,   204,   196,   195,   197,  -537,   196,
+     206,   -28,   209,  1042,  -537,  -537,   193,   207,   285,  -537,
+    -537,  -537,  1042,  -537,  -537,  -537,  -537,  -537,  -537,  -537,
+     208,  -537,   210,  -537,  -537,  -537,   846,   188,  -537,  -537,
+     275,  -537,   165,   198,  -537,  -537,  -537,   236,  -537,   211,
+    -537,   433,  -537,  -537,  -537,  -537,  -537,   200,  -537,  -537,
+    -537,  -537,  -537,   107,   107,   107,   107,   107,   846,   846,
+     107,   223,   846,   107,    34,  -537,  -537,   277,  -537,  -537,
+     223,   128,   298,   218,  -537,  -537,   219,   128,   128,  1042,
+     179,  -537,  -537,  -537,  -537,  -537,   191,   213,   213,   216,
+    -537,  -537,   220,   236,  -537,   225,   227,  -537,   185,   206,
+     206,   206,  -537,  -537,   226,   241,  -537,  -537,   256,  -537,
+    -537,  -537,  -537,  -537,  -537,   144,   912,  -537,  -537,   233,
+     256,  -537,   128,   311,   249,   223,  -537,  -537,   320,   250,
+    -537,  -537,   734,   251,   252,    34,   107,   254,  -537,  1042,
+    -537,   255,  -537,  -537,  -537,   196,   196,   257,   247,  -537,
+    -537,  -537,  -537,  -537,  -537,    34,  -537,  -537,  -537,  -537,
+    -537,  -537,  -537,   -31,  -537,   259,   128,   258,   247,  -537,
+     128,  -537,  -537,   256,   260,  -537,   128,   262,   128,   128,
+     128,   128,   128,   128,   128,   128,   128,   128,   128,   312,
+     312,   312,   240,   264,  -537,  -537,  -537,  -537,  -537,  -537,
+    -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,
+    -537,  -537,  -537,  -537,  -537,   641,  -537,  -537,  -537,  -537,
+     265,  -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,   266,
+    -537,   -48,   185,   107,   107,   191,   286,   107,  -537,   122,
+    -537,   267,   107,  -537,   247,   846,  -537,   846,  -537,  -537,
+    -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,
+     268,   269,   270,  -537,   990,   963,   354,  -537,  -537,   355,
+    -537,  -537,   107,  -537,  -537,  -537,   165,    37,  -537,   271,
+     144,    52,  -537,   271,   107,   273,   278,  -537,  -537,  -537,
+    -537,    22,  -537,  -537,   262,  -537,   280,   272,  -537,   191,
+    1042,   279,  -537,    34,   282,   271,   223,   256,   287,   288,
+    -537,   165,   290,   365,   144,   365,   292,   256,   107,   256,
+     846,   128,   381,   381,   365,   107,   281,   247,   293,  -537,
+     128,  -537,  -537,   381,   271,   297,   299,   107,   283,  -537,
+    -537,   301,   846,   365,   302,  -537,   365,   303,  -537,   365,
+    -537,   289,   381,  -537,  -537
 };
 
 /* YYPGOTO[NTERM-NUM].  */
 static const yytype_int16 yypgoto[] =
 {
-    -534,  -534,   360,  -534,  -534,  -204,  -534,  -534,  -534,  -366,
-    -534,  -534,  -534,  -534,  -534,  -534,    90,  -534,    17,  -534,
-    -364,  -534,  -534,  -534,  -534,  -534,   123,  -534,  -534,  -534,
-    -534,   164,  -270,  -534,  -534,  -265,  -534,  -534,  -534,  -534,
-    -534,  -534,  -534,   -11,  -342,  -534,  -534,  -534,  -534,  -534,
-    -534,  -534,  -534,  -534,  -269,  -534,  -534,  -534,  -534,  -534,
-    -534,  -534,  -534,  -534,  -534,  -534,  -534,  -534,  -534,  -534,
-    -534,  -534,  -534,  -534,  -534,   -10,  -534,  -267,  -534,  -534,
-    -114,  -534,  -534,    39,  -534,  -534,  -148,  -470,  -534,  -534,
-    -333,   -24,   253,  -534,  -534,  -336,  -335,  -534,  -534,  -534,
-    -534,   397,  -157,  -534,  -534,   222,  -534,    48,    50,  -534,
-     -80,  -302,  -534,  -534,  -534,  -130,  -534,  -504,  -534,  -373,
-    -534,  -317,  -413,  -120,  -534,   169,  -534,  -442,  -533,  -200,
-    -534,    77,  -534,  -534,  -125,  -534,  -534,  -369,    -2,  -534,
-     262,  -112,    -6,  -154,  -363,  -534
+    -537,  -537,   416,  -537,  -537,  -208,  -537,  -537,  -537,  -365,
+    -537,  -537,  -537,  -537,  -537,  -537,   142,  -537,    73,  -537,
+    -357,  -537,  -537,  -537,  -537,  -537,   172,  -537,  -537,  -537,
+    -537,  -537,   212,  -285,  -537,  -537,  -273,  -537,  -537,  -537,
+    -537,  -537,  -537,  -537,    -8,  -341,  -537,  -537,  -537,  -537,
+    -537,  -537,  -537,  -537,  -537,  -271,  -537,  -537,  -537,  -537,
+    -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,  -537,
+    -537,  -537,  -537,  -537,  -537,  -537,   -10,  -537,  -277,  -537,
+    -537,  -119,  -537,  -537,    58,  -537,  -537,   -97,  -471,  -537,
+    -537,  -342,   -24,   294,  -537,  -537,  -340,  -338,  -537,  -537,
+    -537,  -537,   421,  -165,  -537,  -537,   237,  -537,    75,    69,
+    -537,   -56,  -323,  -537,  -537,  -537,  -104,  -537,  -503,  -537,
+    -372,  -537,  -319,  -415,  -120,  -537,   194,  -537,  -363,  -536,
+    -202,  -537,   101,  -537,  -537,  -100,  -537,  -537,  -369,    -2,
+    -537,   243,  -114,    -6,  -157,  -366,  -537
 };
 
 /* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
    positive, shift that token.  If negative, reduce the rule which
    number is the opposite.  If zero, do what YYDEFACT says.
    If YYTABLE_NINF, syntax error.  */
-#define YYTABLE_NINF -332
+#define YYTABLE_NINF -334
 static const yytype_int16 yytable[] =
 {
-     122,   114,   124,   125,   126,   127,   128,   129,   130,   144,
-     145,   274,   181,   132,   210,   208,   137,   138,   139,   186,
-     387,   143,   509,   408,   435,   350,   488,   351,   189,   182,
-     492,   306,   296,   463,   357,   464,   547,   192,   163,   358,
-    -331,   307,   191,   246,   168,   249,   571,   168,   154,   314,
-     141,   315,   212,   155,   165,   166,     4,   599,   172,   162,
-     168,   575,   116,   479,   480,   385,   168,   607,   583,   495,
-     378,   379,   243,   117,   380,   440,   167,   511,   350,   381,
-     351,   244,   269,   253,   333,   539,   621,   254,   270,   505,
-     357,   211,   169,   343,   168,   358,  -329,   608,   551,   160,
-     581,   270,   201,   270,   364,   118,   279,   180,   169,   488,
-     271,   280,   272,   492,   316,   286,   463,  -331,   464,   302,
-     303,   183,   287,   298,   297,   371,   372,   193,   229,   465,
-     467,   310,   478,   312,   466,   173,   123,  -331,   173,  -331,
-     590,   320,   321,   322,   323,   324,   479,   480,   327,   600,
-     140,   141,   330,   344,   345,   528,   529,   540,   557,   488,
-     119,    28,   203,   492,   209,   288,   133,   203,   615,   232,
-     134,   617,   565,   289,   619,   566,   176,   268,   177,   344,
-     345,   604,   135,  -185,   378,   379,  -185,    28,   380,   569,
-      51,   136,   570,   381,    22,   146,   346,    20,    21,   356,
-     366,   367,   368,   369,   370,   147,   229,   373,   230,   156,
-     377,   585,   465,   467,   299,   478,    51,   466,   409,   410,
-     411,   592,   346,   594,   149,   416,   159,   396,   417,   418,
-     419,   420,   421,   150,   151,   152,   160,   170,   153,   164,
-     175,   317,   481,   114,   178,   168,   195,   190,   196,   197,
-     200,   205,   498,   234,    33,  -145,   584,   235,   236,   237,
-     238,   245,   246,   249,   276,   252,   275,   277,   335,   338,
-     290,   278,   293,   281,   294,   282,   352,   340,   283,   213,
-     284,   214,   215,   496,   216,   217,   218,   219,   220,   221,
-     222,   223,   224,   305,   225,   285,   226,   227,   500,   501,
-     304,   291,   292,   328,   325,   326,   114,   334,   337,    28,
-     329,   374,   552,   331,   553,   365,   341,   342,   353,   362,
-     389,   391,   392,   399,   402,   481,   404,   406,   388,   299,
-     412,   407,   414,   433,   393,   394,   413,   437,   441,   439,
-     442,   499,   503,   526,   395,   493,   494,   497,   530,   502,
-     506,   512,   508,   545,   561,   514,   563,   588,   549,   430,
-     597,     5,   537,   336,   397,   573,   574,  -248,   536,   576,
-     577,   580,   582,   313,   554,   555,   556,   432,   567,   436,
-     541,   542,   211,   587,   546,   586,   591,   595,   609,   550,
-     602,   605,   610,   613,   616,   612,   620,   114,   618,   405,
-     110,   398,   535,   562,   203,   401,   376,   560,     0,   614,
-     240,   311,     0,     0,     0,     0,     0,     0,     0,   564,
-       0,   207,   319,   507,     0,     0,     0,   510,     0,     0,
-       0,   572,     0,   513,     0,   515,   516,   517,   518,   519,
-     520,   521,   522,   523,   524,   525,     0,     6,     7,     8,
-       9,    10,    11,   242,     0,     0,    12,    13,    14,    15,
-      16,     0,    17,    18,    19,   593,    20,    21,    22,     0,
-       0,     0,   601,     0,     0,     0,     0,     0,   543,     0,
-     114,     0,     0,     0,   611,    23,    24,    25,    26,    27,
-      28,    29,    30,    31,    32,    33,    34,     0,     0,     0,
-       0,     0,    35,    36,    37,    38,    39,    40,    41,    42,
-      43,    44,    45,    46,    47,    48,    49,    50,     0,    51,
-      52,    53,     0,     0,    54,     0,     0,     0,     0,   558,
-     114,     0,     0,     0,     0,    55,    56,    57,    58,    59,
-      60,     0,   578,     0,     0,    61,     0,     0,    62,     0,
-       0,    63,    64,    65,    66,     0,     0,   443,     0,     0,
-       0,     0,    20,    21,   444,   579,     0,     0,   445,   446,
-     447,   448,   449,   450,   451,   452,   453,     0,   596,   454,
-     455,     0,     0,     0,     0,     0,    28,   606,     0,     0,
-       0,    33,    34,   456,   457,   458,   459,     0,    35,    36,
-      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
-      47,    48,    49,    50,   460,    51,    52,    53,     0,     0,
-      54,   461,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,    55,    56,     0,     0,     0,     0,     0,     0,     0,
-       0,    61,     0,     0,    62,     0,   462,     0,    64,   443,
-       0,     0,   534,     0,    20,    21,   444,     0,     0,     0,
-     445,   446,   447,   448,   449,   450,   451,   452,   453,     0,
-       0,   454,   455,     0,     0,     0,     0,     0,    28,     0,
-       0,     0,     0,    33,    34,   456,   457,   458,   459,     0,
-      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
-      45,    46,    47,    48,    49,    50,   460,    51,    52,    53,
-       0,     0,    54,   461,     0,    20,    21,    22,     0,     0,
-       0,     0,     0,    55,    56,     0,     0,     0,     0,     0,
-       0,     0,     0,    61,     0,     0,    62,     0,   462,    28,
-      64,     0,     0,     0,    33,    34,     0,     0,     0,     0,
-       0,    35,    36,    37,    38,    39,    40,    41,    42,    43,
-      44,    45,    46,    47,    48,    49,    50,     0,    51,    52,
-      53,     0,     0,    54,    20,    21,    22,     0,     0,     0,
-       0,     0,     0,     0,    55,    56,     0,     0,     0,     0,
-       0,     0,     0,     0,    61,     0,     0,    62,    28,     0,
-      63,    64,     0,    33,    34,   363,     0,     0,     0,     0,
-      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
-      45,    46,    47,    48,    49,    50,     0,    51,    52,    53,
-      22,     0,    54,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,    55,    56,     0,     0,     0,     0,     0,
-       0,     0,     0,    61,     0,     0,    62,     0,   131,    63,
-      64,     0,     0,     0,    35,    36,    37,    38,    39,    40,
-      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
-       0,     0,    52,    53,     0,    22,    54,   423,   255,   256,
-     257,   258,   259,   260,   261,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   262,
-       0,     0,     0,   131,    64,     0,     0,     0,     0,    35,
+     124,   116,   126,   127,   128,   129,   130,   131,   132,   213,
+     147,   148,   277,   134,   184,   211,   189,   140,   141,   142,
+     354,   390,   360,   512,   438,   146,   353,   411,   195,   249,
+     491,   192,  -333,   495,   361,   309,   175,   466,   550,   166,
+     310,   185,   299,   194,   171,   467,   578,   252,   171,   157,
+     574,   171,   171,     4,   158,   215,   273,   602,   168,   169,
+     165,   273,   482,   498,   483,   274,   388,   610,   542,   282,
+     275,   273,   586,   354,   283,   246,   443,   514,   360,   353,
+     204,   170,   247,   508,  -331,   272,   624,   171,   336,   214,
+     361,   317,   144,   318,   346,   118,   172,   163,   291,   554,
+     172,   611,   584,   367,   289,   179,   292,   180,   256,   183,
+    -333,   290,   257,   491,   176,   119,   495,   468,   313,   196,
+     466,   301,   305,   306,   176,   481,   374,   375,   467,   469,
+    -333,   470,  -333,   232,   186,   300,   315,   531,   532,   323,
+     324,   325,   326,   327,   120,   482,   330,   483,    22,   121,
+     333,   381,   382,   568,   125,   383,   569,   319,   143,   144,
+     384,   543,   560,   491,   135,   206,   495,   212,   572,   136,
+     206,   573,   235,   153,   154,   155,   137,   133,   156,   232,
+     271,   233,   607,    36,    37,    38,    39,    40,    41,    42,
+      43,    44,    45,    46,    47,    48,    49,    50,    51,   138,
+     468,    53,    54,   369,   370,   371,   372,   373,   481,   139,
+     376,   588,   469,   380,   470,    22,   149,   302,   347,   348,
+     150,   595,   593,   597,   152,   159,    29,   347,   348,   162,
+     163,   603,   167,    65,   173,    29,   178,   484,  -187,   381,
+     382,  -187,   181,   383,   171,   193,   116,   320,   384,   198,
+     618,   199,   501,   620,   200,    52,   622,   587,    20,    21,
+     359,   349,   419,   203,    52,   420,   421,   422,   423,   424,
+     349,   338,   412,   413,   414,   208,    34,   237,  -147,   238,
+     343,   240,   239,   248,   241,   249,   499,   252,   255,   278,
+     280,   296,   399,   279,   341,   293,   503,   504,   281,   355,
+     284,   285,   286,   308,   377,   297,   287,   288,   392,   116,
+     294,   331,   295,   555,   307,   556,   332,   356,   328,   329,
+     484,   337,   440,   340,    29,   402,   334,   365,   344,   368,
+     345,   391,   302,   407,   394,   395,   405,   396,   397,   436,
+     409,   410,   415,   216,   444,   217,   218,   398,   219,   220,
+     221,   222,   223,   224,   225,   226,   227,   416,   228,   417,
+     229,   230,   433,   442,   445,   496,   497,   506,   500,   533,
+     529,   511,   505,   502,   509,   515,   548,   517,   564,   566,
+     435,   552,   439,   544,   545,   540,   580,   549,   598,   576,
+    -250,   539,   553,   583,   577,   579,   585,   557,   558,   559,
+     116,   570,   214,   591,   589,   590,   594,   206,   600,   608,
+     617,   605,   612,   613,   615,   616,   619,     5,   339,   621,
+     623,   408,   567,   400,   112,   316,   510,   404,   243,   538,
+     513,   401,   565,   379,   575,   563,   516,   245,   518,   519,
+     520,   521,   522,   523,   524,   525,   526,   527,   528,     0,
+     322,     0,     0,     0,     0,    20,    21,    22,     0,     0,
+       0,     0,   314,     0,     0,   210,     0,     0,   596,     0,
+       0,     0,     0,     0,     0,   604,     0,     0,     0,     0,
+      29,   546,     0,   116,     0,    34,    35,   614,     0,     0,
+       0,     0,    36,    37,    38,    39,    40,    41,    42,    43,
+      44,    45,    46,    47,    48,    49,    50,    51,     0,    52,
+      53,    54,     0,     0,    55,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,    56,    57,     0,     0,     0,
+       0,     0,   561,   116,     0,    62,     0,     0,    63,     0,
+       0,    64,    65,     0,     0,   581,   366,     0,     0,     0,
+       0,     0,     0,     0,     6,     7,     8,     9,    10,    11,
+       0,     0,     0,    12,    13,    14,    15,    16,   582,    17,
+      18,    19,     0,    20,    21,    22,     0,     0,     0,    23,
+       0,   599,     0,     0,     0,     0,     0,     0,     0,     0,
+     609,     0,     0,    24,    25,    26,    27,    28,    29,    30,
+      31,    32,    33,    34,    35,     0,     0,     0,     0,     0,
+      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
+      46,    47,    48,    49,    50,    51,     0,    52,    53,    54,
+       0,     0,    55,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,    56,    57,    58,    59,    60,    61,     0,
+       0,     0,     0,    62,     0,     0,    63,     0,   446,    64,
+      65,    66,    67,    20,    21,   447,     0,     0,     0,     0,
+     448,   449,   450,   451,   452,   453,   454,   455,   456,     0,
+       0,   457,   458,     0,     0,     0,     0,     0,    29,     0,
+       0,     0,     0,    34,    35,   459,   460,   461,   462,     0,
       36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
-      46,    47,    48,    49,    50,     0,    22,    52,    53,     0,
+      46,    47,    48,    49,    50,    51,   463,    52,    53,    54,
+       0,     0,    55,   464,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,    56,    57,     0,     0,     0,     0,     0,
+       0,     0,     0,    62,     0,     0,    63,     0,   465,     0,
+      65,   446,     0,     0,   537,     0,    20,    21,   447,     0,
+       0,     0,     0,   448,   449,   450,   451,   452,   453,   454,
+     455,   456,     0,     0,   457,   458,     0,     0,     0,     0,
+       0,    29,     0,     0,     0,     0,    34,    35,   459,   460,
+     461,   462,     0,    36,    37,    38,    39,    40,    41,    42,
+      43,    44,    45,    46,    47,    48,    49,    50,    51,   463,
+      52,    53,    54,     0,     0,    55,   464,    20,    21,    22,
+       0,     0,     0,     0,     0,     0,    56,    57,     0,     0,
+       0,     0,     0,     0,     0,     0,    62,     0,     0,    63,
+       0,   465,    29,    65,     0,     0,     0,    34,    35,     0,
+       0,     0,     0,     0,    36,    37,    38,    39,    40,    41,
+      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
+      22,    52,    53,    54,     0,     0,    55,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,    56,    57,     0,
+       0,     0,     0,     0,     0,     0,     0,    62,     0,   133,
+      63,     0,     0,    64,    65,    36,    37,    38,    39,    40,
+      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
+      51,     0,     0,    53,    54,     0,     0,    55,     0,   258,
+     259,   260,   261,   262,   263,   264,    22,     0,   426,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     265,     0,     0,     0,     0,    65,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   133,     0,     0,     0,     0,
+       0,    36,    37,    38,    39,    40,    41,    42,    43,    44,
+      45,    46,    47,    48,    49,    50,    51,    22,     0,    53,
+      54,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   427,   428,     0,     0,     0,     0,     0,     0,
+     429,   430,   431,   432,    22,     0,   133,     0,     0,     0,
+       0,    65,    36,    37,    38,    39,    40,    41,    42,    43,
+      44,    45,    46,    47,    48,    49,    50,    51,   562,     0,
+      53,    54,     0,   133,    55,     0,     0,     0,     0,    36,
+      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
+      47,    48,    49,    50,    51,    62,    22,    53,    54,     0,
+       0,    55,    65,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,    62,     0,     0,   133,     0,     0,     0,    65,
+       0,    36,    37,    38,    39,    40,    41,    42,    43,    44,
+      45,    46,    47,    48,    49,    50,    51,     0,     0,    53,
+      54,     0,     0,    55,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     424,   425,     0,     0,     0,     0,     0,     0,   426,   427,
-     428,   429,    22,     0,   131,     0,     0,     0,     0,    64,
-      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
-      45,    46,    47,    48,    49,    50,   559,     0,    52,    53,
-     131,     0,    54,     0,     0,     0,    35,    36,    37,    38,
-      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
-      49,    50,     0,    61,    52,    53,    22,     0,    54,     0,
-      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,    61,
-       0,     0,    22,     0,   131,     0,    64,     0,     0,     0,
-      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
-      45,    46,    47,    48,    49,    50,     0,     0,    52,    53,
-     131,     0,    54,     0,     0,     0,    35,    36,    37,    38,
-      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
-      49,    50,     0,     0,    52,    53,     0,     0,     0,     0,
-      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,    64
+       0,    65
 };
 
 static const yytype_int16 yycheck[] =
 {
-      10,     3,    12,    13,    14,    15,    16,    17,    18,    33,
-      34,   211,   132,    19,   171,   169,    26,    27,    28,   133,
-     337,    32,   435,   365,   387,   294,   399,   294,   148,    24,
-     399,    24,    24,   399,   304,   399,   506,    24,    62,   304,
-      24,   245,   154,    24,    78,    24,   550,    78,    54,    24,
-      25,    26,   172,    55,    65,    66,     0,   590,    24,    61,
-      78,    24,    24,   399,   399,   334,    78,   600,   572,   402,
-     116,   117,   192,    26,   120,   392,    87,   440,   347,   125,
-     347,   193,   202,   118,   115,   115,   619,   122,   118,   422,
-     360,   114,   126,   293,    78,   360,   114,   601,   511,   122,
-     570,   118,   114,   118,   308,    24,   114,   131,   126,   482,
-     127,   119,   127,   482,    89,   119,   482,   101,   482,   239,
-     240,   116,   126,   237,   116,   325,   326,   114,   121,   399,
-     399,   112,   399,   112,   399,   101,    25,   121,   101,   123,
-     582,   255,   256,   257,   258,   259,   482,   482,   262,   591,
-      24,    25,   266,    38,    39,   457,   458,   499,   531,   532,
-      21,    46,   164,   532,   170,   119,   114,   169,   610,   179,
-      25,   613,   115,   127,   616,   118,    21,   201,    23,    38,
-      39,   594,    25,   115,   116,   117,   118,    46,   120,   115,
-      75,    25,   118,   125,    24,    61,    81,    22,    23,    24,
-     320,   321,   322,   323,   324,    24,   121,   327,   123,    24,
-     330,   574,   482,   482,   238,   482,    75,   482,   366,   367,
-     368,   584,    81,   586,    64,   117,    24,   112,   120,   121,
-     122,   123,   124,    59,    60,    61,   122,    20,    64,   126,
-      89,   252,   399,   245,    25,    78,   111,    61,   111,    24,
-     114,    89,   406,    24,    51,   117,   573,    79,   115,   117,
-     128,   111,    24,    24,   115,   119,   113,   119,   270,     9,
-     130,   119,   114,   119,   111,   119,    24,   279,   119,   114,
-     119,   116,   117,   403,   119,   120,   121,   122,   123,   124,
-     125,   126,   127,   113,   129,   119,   131,   132,   412,   413,
-     111,   119,   119,   115,   114,   114,   308,   111,   115,    46,
-     118,    80,   512,   119,   514,   128,   119,   119,   118,   115,
-      10,   115,   115,   111,   119,   482,   112,   114,   338,   353,
-     115,   113,   102,   105,   344,   345,   115,    11,    24,   113,
-     113,   117,   119,    57,   346,   113,   113,   113,   128,   114,
-     114,   114,   112,    89,    24,   114,    24,    37,   113,   383,
-      27,     1,   118,   273,   347,   115,   115,   125,   125,   114,
-     113,   113,   113,   250,   128,   128,   128,   383,   129,   389,
-     500,   501,   114,   114,   504,   115,   113,   587,   114,   509,
-     129,   115,   113,   113,   113,   130,   130,   399,   115,   360,
-       3,   353,   482,   533,   406,   355,   329,   532,    -1,   609,
-     188,   247,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   539,
-      -1,   168,   253,   433,    -1,    -1,    -1,   437,    -1,    -1,
-      -1,   551,    -1,   443,    -1,   445,   446,   447,   448,   449,
-     450,   451,   452,   453,   454,   455,    -1,     3,     4,     5,
-       6,     7,     8,   191,    -1,    -1,    12,    13,    14,    15,
-      16,    -1,    18,    19,    20,   585,    22,    23,    24,    -1,
-      -1,    -1,   592,    -1,    -1,    -1,    -1,    -1,   502,    -1,
-     482,    -1,    -1,    -1,   604,    41,    42,    43,    44,    45,
-      46,    47,    48,    49,    50,    51,    52,    -1,    -1,    -1,
-      -1,    -1,    58,    59,    60,    61,    62,    63,    64,    65,
-      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
-      76,    77,    -1,    -1,    80,    -1,    -1,    -1,    -1,   531,
-     532,    -1,    -1,    -1,    -1,    91,    92,    93,    94,    95,
-      96,    -1,   566,    -1,    -1,   101,    -1,    -1,   104,    -1,
-      -1,   107,   108,   109,   110,    -1,    -1,    17,    -1,    -1,
-      -1,    -1,    22,    23,    24,   567,    -1,    -1,    28,    29,
-      30,    31,    32,    33,    34,    35,    36,    -1,   588,    39,
-      40,    -1,    -1,    -1,    -1,    -1,    46,   597,    -1,    -1,
-      -1,    51,    52,    53,    54,    55,    56,    -1,    58,    59,
-      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
-      70,    71,    72,    73,    74,    75,    76,    77,    -1,    -1,
-      80,    81,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    91,    92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,   101,    -1,    -1,   104,    -1,   106,    -1,   108,    17,
-      -1,    -1,   112,    -1,    22,    23,    24,    -1,    -1,    -1,
-      28,    29,    30,    31,    32,    33,    34,    35,    36,    -1,
-      -1,    39,    40,    -1,    -1,    -1,    -1,    -1,    46,    -1,
-      -1,    -1,    -1,    51,    52,    53,    54,    55,    56,    -1,
-      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
-      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
-      -1,    -1,    80,    81,    -1,    22,    23,    24,    -1,    -1,
-      -1,    -1,    -1,    91,    92,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   101,    -1,    -1,   104,    -1,   106,    46,
-     108,    -1,    -1,    -1,    51,    52,    -1,    -1,    -1,    -1,
-      -1,    58,    59,    60,    61,    62,    63,    64,    65,    66,
-      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
-      77,    -1,    -1,    80,    22,    23,    24,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    91,    92,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,   101,    -1,    -1,   104,    46,    -1,
-     107,   108,    -1,    51,    52,   112,    -1,    -1,    -1,    -1,
-      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
-      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
-      24,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    91,    92,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   101,    -1,    -1,   104,    -1,    52,   107,
-     108,    -1,    -1,    -1,    58,    59,    60,    61,    62,    63,
-      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
-      -1,    -1,    76,    77,    -1,    24,    80,    26,    82,    83,
-      84,    85,    86,    87,    88,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   103,
-      -1,    -1,    -1,    52,   108,    -1,    -1,    -1,    -1,    58,
+      10,     3,    12,    13,    14,    15,    16,    17,    18,   174,
+      34,    35,   214,    19,   134,   172,   135,    27,    28,    29,
+     297,   340,   307,   438,   390,    33,   297,   368,    24,    24,
+     402,   151,    24,   402,   307,    24,    24,   402,   509,    63,
+     248,    24,    24,   157,    79,   402,    24,    24,    79,    55,
+     553,    79,    79,     0,    56,   175,   119,   593,    66,    67,
+      62,   119,   402,   405,   402,   128,   337,   603,   116,   115,
+     128,   119,   575,   350,   120,   195,   395,   443,   363,   350,
+     115,    89,   196,   425,   115,   205,   622,    79,   116,   115,
+     363,    24,    25,    26,   296,    24,   127,   123,   120,   514,
+     127,   604,   573,   311,   120,    21,   128,    23,   119,   133,
+     102,   127,   123,   485,   102,    26,   485,   402,   113,   115,
+     485,   240,   242,   243,   102,   402,   328,   329,   485,   402,
+     122,   402,   124,   122,   117,   117,   113,   460,   461,   258,
+     259,   260,   261,   262,    24,   485,   265,   485,    24,    21,
+     269,   117,   118,   116,    25,   121,   119,    90,    24,    25,
+     126,   502,   534,   535,   115,   167,   535,   173,   116,    24,
+     172,   119,   182,    60,    61,    62,    25,    53,    65,   122,
+     204,   124,   597,    59,    60,    61,    62,    63,    64,    65,
+      66,    67,    68,    69,    70,    71,    72,    73,    74,    25,
+     485,    77,    78,   323,   324,   325,   326,   327,   485,    25,
+     330,   577,   485,   333,   485,    24,    62,   241,    39,    40,
+      24,   587,   585,   589,    65,    24,    47,    39,    40,    24,
+     123,   594,   127,   109,    20,    47,    90,   402,   116,   117,
+     118,   119,    25,   121,    79,    62,   248,   255,   126,   112,
+     613,   112,   409,   616,    24,    76,   619,   576,    22,    23,
+      24,    82,   118,   115,    76,   121,   122,   123,   124,   125,
+      82,   273,   369,   370,   371,    90,    52,    24,   118,    80,
+     282,   118,   116,   112,   129,    24,   406,    24,   120,   114,
+     120,   115,   113,   116,     9,   131,   415,   416,   120,    24,
+     120,   120,   120,   114,    81,   112,   120,   120,    10,   311,
+     120,   116,   120,   515,   112,   517,   119,   119,   115,   115,
+     485,   112,    11,   116,    47,   112,   120,   116,   120,   129,
+     120,   341,   356,   113,   116,   116,   120,   347,   348,   106,
+     115,   114,   116,   115,    24,   117,   118,   349,   120,   121,
+     122,   123,   124,   125,   126,   127,   128,   116,   130,   103,
+     132,   133,   386,   114,   114,   114,   114,   120,   114,   129,
+      58,   113,   115,   118,   115,   115,    90,   115,    24,    24,
+     386,   114,   392,   503,   504,   119,   114,   507,   590,   116,
+     126,   126,   512,   114,   116,   115,   114,   129,   129,   129,
+     402,   130,   115,    38,   116,   115,   114,   409,    27,   116,
+     612,   130,   115,   114,   131,   114,   114,     1,   276,   116,
+     131,   363,   542,   350,     3,   253,   436,   358,   191,   485,
+     440,   356,   536,   332,   554,   535,   446,   194,   448,   449,
+     450,   451,   452,   453,   454,   455,   456,   457,   458,    -1,
+     256,    -1,    -1,    -1,    -1,    22,    23,    24,    -1,    -1,
+      -1,    -1,   250,    -1,    -1,   171,    -1,    -1,   588,    -1,
+      -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,    -1,    -1,
+      47,   505,    -1,   485,    -1,    52,    53,   607,    -1,    -1,
+      -1,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
+      67,    68,    69,    70,    71,    72,    73,    74,    -1,    76,
+      77,    78,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    92,    93,    -1,    -1,    -1,
+      -1,    -1,   534,   535,    -1,   102,    -1,    -1,   105,    -1,
+      -1,   108,   109,    -1,    -1,   569,   113,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,     3,     4,     5,     6,     7,     8,
+      -1,    -1,    -1,    12,    13,    14,    15,    16,   570,    18,
+      19,    20,    -1,    22,    23,    24,    -1,    -1,    -1,    28,
+      -1,   591,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     600,    -1,    -1,    42,    43,    44,    45,    46,    47,    48,
+      49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
       59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
-      69,    70,    71,    72,    73,    -1,    24,    76,    77,    -1,
+      69,    70,    71,    72,    73,    74,    -1,    76,    77,    78,
+      -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    92,    93,    94,    95,    96,    97,    -1,
+      -1,    -1,    -1,   102,    -1,    -1,   105,    -1,    17,   108,
+     109,   110,   111,    22,    23,    24,    -1,    -1,    -1,    -1,
+      29,    30,    31,    32,    33,    34,    35,    36,    37,    -1,
+      -1,    40,    41,    -1,    -1,    -1,    -1,    -1,    47,    -1,
+      -1,    -1,    -1,    52,    53,    54,    55,    56,    57,    -1,
+      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
+      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
+      -1,    -1,    81,    82,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    92,    93,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   102,    -1,    -1,   105,    -1,   107,    -1,
+     109,    17,    -1,    -1,   113,    -1,    22,    23,    24,    -1,
+      -1,    -1,    -1,    29,    30,    31,    32,    33,    34,    35,
+      36,    37,    -1,    -1,    40,    41,    -1,    -1,    -1,    -1,
+      -1,    47,    -1,    -1,    -1,    -1,    52,    53,    54,    55,
+      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
+      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
+      76,    77,    78,    -1,    -1,    81,    82,    22,    23,    24,
+      -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,    -1,   105,
+      -1,   107,    47,   109,    -1,    -1,    -1,    52,    53,    -1,
+      -1,    -1,    -1,    -1,    59,    60,    61,    62,    63,    64,
+      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
+      24,    76,    77,    78,    -1,    -1,    81,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,    -1,    53,
+     105,    -1,    -1,   108,   109,    59,    60,    61,    62,    63,
+      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
+      74,    -1,    -1,    77,    78,    -1,    -1,    81,    -1,    83,
+      84,    85,    86,    87,    88,    89,    24,    -1,    26,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     104,    -1,    -1,    -1,    -1,   109,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,
+      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
+      68,    69,    70,    71,    72,    73,    74,    24,    -1,    77,
+      78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    90,    91,    -1,    -1,    -1,    -1,    -1,    -1,
+      98,    99,   100,   101,    24,    -1,    53,    -1,    -1,    -1,
+      -1,   109,    59,    60,    61,    62,    63,    64,    65,    66,
+      67,    68,    69,    70,    71,    72,    73,    74,    75,    -1,
+      77,    78,    -1,    53,    81,    -1,    -1,    -1,    -1,    59,
+      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
+      70,    71,    72,    73,    74,   102,    24,    77,    78,    -1,
+      -1,    81,   109,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   102,    -1,    -1,    53,    -1,    -1,    -1,   109,
+      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
+      68,    69,    70,    71,    72,    73,    74,    -1,    -1,    77,
+      78,    -1,    -1,    81,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      89,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,
-      99,   100,    24,    -1,    52,    -1,    -1,    -1,    -1,   108,
-      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
-      68,    69,    70,    71,    72,    73,    74,    -1,    76,    77,
-      52,    -1,    80,    -1,    -1,    -1,    58,    59,    60,    61,
-      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
-      72,    73,    -1,   101,    76,    77,    24,    -1,    80,    -1,
-     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
-      -1,    -1,    24,    -1,    52,    -1,   108,    -1,    -1,    -1,
-      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
-      68,    69,    70,    71,    72,    73,    -1,    -1,    76,    77,
-      52,    -1,    80,    -1,    -1,    -1,    58,    59,    60,    61,
-      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
-      72,    73,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,
-     108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,   108
+      -1,   109
 };
 
 /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
    symbol of state STATE-NUM.  */
 static const yytype_uint16 yystos[] =
 {
-       0,   134,   135,   136,     0,   135,     3,     4,     5,     6,
+       0,   135,   136,   137,     0,   136,     3,     4,     5,     6,
        7,     8,    12,    13,    14,    15,    16,    18,    19,    20,
-      22,    23,    24,    41,    42,    43,    44,    45,    46,    47,
-      48,    49,    50,    51,    52,    58,    59,    60,    61,    62,
+      22,    23,    24,    28,    42,    43,    44,    45,    46,    47,
+      48,    49,    50,    51,    52,    53,    59,    60,    61,    62,
       63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
-      73,    75,    76,    77,    80,    91,    92,    93,    94,    95,
-      96,   101,   104,   107,   108,   109,   110,   137,   138,   139,
-     140,   141,   142,   145,   147,   153,   156,   160,   161,   165,
-     168,   169,   170,   171,   172,   173,   174,   175,   178,   179,
-     180,   184,   185,   186,   187,   198,   200,   201,   202,   203,
-     204,   205,   206,   207,   210,   224,   225,   228,   229,   232,
-     234,   235,   252,   270,   271,   275,    24,    26,    24,    21,
-     208,   209,   208,    25,   208,   208,   208,   208,   208,   208,
-     208,    52,   275,   114,    25,    25,    25,   208,   208,   208,
-      24,    25,   176,   176,   224,   224,    61,    24,   213,    64,
-      59,    60,    61,    64,   275,   271,    24,   162,   157,    24,
-     122,   256,   271,   224,   126,   176,   176,   176,    78,   126,
-      20,   233,    24,   101,   274,    89,    21,    23,    25,   212,
-     224,   256,    24,   116,   166,   167,   213,   236,   230,   256,
-      61,   274,    24,   114,   154,   111,   111,    24,   257,   258,
-     114,   114,   143,   271,   276,    89,   177,   225,   276,   275,
-     235,   114,   256,   114,   116,   117,   119,   120,   121,   122,
-     123,   124,   125,   126,   127,   129,   131,   132,   253,   121,
-     123,   273,   208,   146,    24,    79,   115,   117,   128,   238,
-     238,   211,   273,   256,   274,   111,    24,   163,   164,    24,
-     158,   159,   119,   118,   122,    82,    83,    84,    85,    86,
-      87,    88,   103,   262,   263,   264,   271,   272,   224,   256,
-     118,   127,   127,   148,   262,   113,   115,   119,   119,   114,
-     119,   119,   119,   119,   119,   119,   119,   126,   119,   127,
-     130,   119,   119,   114,   111,   149,    24,   116,   213,   224,
-     239,   240,   256,   256,   111,   113,    24,   138,   155,   234,
-     112,   164,   112,   159,    24,    26,    89,   176,   259,   258,
-     213,   213,   213,   213,   213,   114,   114,   213,   115,   118,
-     213,   119,   219,   115,   111,   271,   149,   115,     9,   181,
-     271,   119,   119,   262,    38,    39,    81,   150,   151,   152,
-     187,   210,    24,   118,   237,   231,    24,   165,   168,   214,
-     215,   216,   115,   112,   138,   128,   256,   256,   256,   256,
-     256,   262,   262,   256,    80,   254,   264,   256,   116,   117,
-     120,   125,   220,   222,   223,   187,   188,   254,   208,    10,
-     182,   115,   115,   208,   208,   271,   112,   151,   240,   111,
-     241,   241,   119,   218,   112,   216,   114,   113,   177,   219,
-     219,   219,   115,   115,   102,   277,   117,   120,   121,   122,
-     123,   124,   221,    26,    89,    90,    97,    98,    99,   100,
-     224,   226,   275,   105,   144,   277,   208,    11,   183,   113,
-     254,    24,   113,    17,    24,    28,    29,    30,    31,    32,
-      33,    34,    35,    36,    39,    40,    53,    54,    55,    56,
-      74,    81,   106,   142,   153,   165,   168,   187,   189,   190,
-     191,   192,   193,   194,   195,   196,   197,   199,   210,   228,
-     229,   235,   242,   243,   245,   246,   248,   251,   252,   265,
-     267,   268,   270,   113,   113,   223,   256,   113,   276,   117,
-     213,   213,   114,   119,   255,   223,   114,   208,   112,   255,
-     208,   277,   114,   208,   114,   208,   208,   208,   208,   208,
-     208,   208,   208,   208,   208,   208,    57,   244,   244,   244,
-     128,   269,   266,   247,   112,   243,   125,   118,   217,   115,
-     177,   256,   256,   224,   278,    89,   256,   220,   227,   113,
-     256,   255,   262,   262,   128,   128,   128,   252,   271,    74,
-     267,    24,   248,    24,   256,   115,   118,   129,   250,   115,
-     118,   250,   256,   115,   115,    24,   114,   113,   224,   271,
-     113,   220,   113,   250,   254,   277,   115,   114,    37,   260,
-     260,   113,   277,   256,   277,   262,   208,    27,   261,   261,
-     260,   256,   129,   249,   255,   115,   208,   261,   250,   114,
-     113,   256,   130,   113,   262,   260,   113,   260,   115,   260,
-     130,   261
+      73,    74,    76,    77,    78,    81,    92,    93,    94,    95,
+      96,    97,   102,   105,   108,   109,   110,   111,   138,   139,
+     140,   141,   142,   143,   146,   148,   154,   157,   161,   162,
+     163,   167,   170,   171,   172,   173,   174,   175,   176,   177,
+     180,   181,   182,   186,   187,   188,   189,   200,   202,   203,
+     204,   205,   206,   207,   208,   209,   212,   226,   227,   230,
+     231,   234,   236,   237,   254,   272,   273,   277,    24,    26,
+      24,    21,   210,   211,   210,    25,   210,   210,   210,   210,
+     210,   210,   210,    53,   277,   115,    24,    25,    25,    25,
+     210,   210,   210,    24,    25,   178,   178,   226,   226,    62,
+      24,   215,    65,    60,    61,    62,    65,   277,   273,    24,
+     164,   158,    24,   123,   258,   273,   226,   127,   178,   178,
+     178,    79,   127,    20,   235,    24,   102,   276,    90,    21,
+      23,    25,   214,   226,   258,    24,   117,   168,   169,   215,
+     238,   232,   258,    62,   276,    24,   115,   155,   112,   112,
+      24,   259,   260,   115,   115,   144,   273,   278,    90,   179,
+     227,   278,   277,   237,   115,   258,   115,   117,   118,   120,
+     121,   122,   123,   124,   125,   126,   127,   128,   130,   132,
+     133,   255,   122,   124,   275,   210,   147,    24,    80,   116,
+     118,   129,   240,   240,   213,   275,   258,   276,   112,    24,
+     165,   166,    24,   159,   160,   120,   119,   123,    83,    84,
+      85,    86,    87,    88,    89,   104,   264,   265,   266,   273,
+     274,   226,   258,   119,   128,   128,   149,   264,   114,   116,
+     120,   120,   115,   120,   120,   120,   120,   120,   120,   120,
+     127,   120,   128,   131,   120,   120,   115,   112,   150,    24,
+     117,   215,   226,   241,   242,   258,   258,   112,   114,    24,
+     139,   156,   236,   113,   166,   113,   160,    24,    26,    90,
+     178,   261,   260,   215,   215,   215,   215,   215,   115,   115,
+     215,   116,   119,   215,   120,   221,   116,   112,   273,   150,
+     116,     9,   183,   273,   120,   120,   264,    39,    40,    82,
+     151,   152,   153,   189,   212,    24,   119,   239,   233,    24,
+     167,   170,   216,   217,   218,   116,   113,   139,   129,   258,
+     258,   258,   258,   258,   264,   264,   258,    81,   256,   266,
+     258,   117,   118,   121,   126,   222,   224,   225,   189,   190,
+     256,   210,    10,   184,   116,   116,   210,   210,   273,   113,
+     152,   242,   112,   243,   243,   120,   220,   113,   218,   115,
+     114,   179,   221,   221,   221,   116,   116,   103,   279,   118,
+     121,   122,   123,   124,   125,   223,    26,    90,    91,    98,
+      99,   100,   101,   226,   228,   277,   106,   145,   279,   210,
+      11,   185,   114,   256,    24,   114,    17,    24,    29,    30,
+      31,    32,    33,    34,    35,    36,    37,    40,    41,    54,
+      55,    56,    57,    75,    82,   107,   143,   154,   167,   170,
+     189,   191,   192,   193,   194,   195,   196,   197,   198,   199,
+     201,   212,   230,   231,   237,   244,   245,   247,   248,   250,
+     253,   254,   267,   269,   270,   272,   114,   114,   225,   258,
+     114,   278,   118,   215,   215,   115,   120,   257,   225,   115,
+     210,   113,   257,   210,   279,   115,   210,   115,   210,   210,
+     210,   210,   210,   210,   210,   210,   210,   210,   210,    58,
+     246,   246,   246,   129,   271,   268,   249,   113,   245,   126,
+     119,   219,   116,   179,   258,   258,   226,   280,    90,   258,
+     222,   229,   114,   258,   257,   264,   264,   129,   129,   129,
+     254,   273,    75,   269,    24,   250,    24,   258,   116,   119,
+     130,   252,   116,   119,   252,   258,   116,   116,    24,   115,
+     114,   226,   273,   114,   222,   114,   252,   256,   279,   116,
+     115,    38,   262,   262,   114,   279,   258,   279,   264,   210,
+      27,   263,   263,   262,   258,   130,   251,   257,   116,   210,
+     263,   252,   115,   114,   258,   131,   114,   264,   262,   114,
+     262,   116,   262,   131,   263
 };
 
 #define yyerrok		(yyerrstatus = 0)
@@ -2403,7 +2412,7 @@
   switch (yyn)
     {
         case 4:
-#line 341 "parser.y"
+#line 342 "parser.y"
     {
             /*
              * We don't do these in parserEOF() because the parser is reading
@@ -2420,35 +2429,35 @@
                 free(previousFile);
                 previousFile = NULL;
             }
-    }
+    ;}
     break;
 
   case 22:
-#line 376 "parser.y"
+#line 377 "parser.y"
     {
             if (notSkipping())
                 appendCodeBlock(&currentSpec->exphdrcode, (yyvsp[(1) - (1)].codeb));
-        }
+        ;}
     break;
 
   case 23:
-#line 380 "parser.y"
+#line 381 "parser.y"
     {
             if (notSkipping())
                 appendCodeBlock(&currentModule->hdrcode, (yyvsp[(1) - (1)].codeb));
-        }
+        ;}
     break;
 
   case 24:
-#line 384 "parser.y"
+#line 385 "parser.y"
     {
             if (notSkipping())
                 appendCodeBlock(&currentModule->cppcode, (yyvsp[(1) - (1)].codeb));
-        }
+        ;}
     break;
 
-  case 47:
-#line 412 "parser.y"
+  case 48:
+#line 414 "parser.y"
     {
             if (notSkipping())
             {
@@ -2459,29 +2468,29 @@
 
                 appendCodeBlock(&scope->iff->hdrcode, (yyvsp[(1) - (1)].codeb));
             }
-        }
+        ;}
     break;
 
-  case 48:
-#line 425 "parser.y"
+  case 49:
+#line 427 "parser.y"
     {
             if (notSkipping())
             {
                 if ((currentModule->encoding = convertEncoding((yyvsp[(2) - (2)].text))) == no_type)
                     yyerror("The value of %DefaultEncoding must be one of \"ASCII\", \"Latin-1\", \"UTF-8\" or \"None\"");
             }
-        }
+        ;}
     break;
 
-  case 49:
-#line 434 "parser.y"
+  case 50:
+#line 436 "parser.y"
     {
             appendString(&currentSpec->plugins, (yyvsp[(2) - (2)].text));
-        }
+        ;}
     break;
 
-  case 50:
-#line 439 "parser.y"
+  case 51:
+#line 441 "parser.y"
     {
             if (notSkipping())
             {
@@ -2505,11 +2514,11 @@
                 if (inMainModule())
                     setIsUsedName(avd->api_name);
             }
-        }
+        ;}
     break;
 
-  case 51:
-#line 465 "parser.y"
+  case 52:
+#line 467 "parser.y"
     {
             if (notSkipping())
             {
@@ -2543,19 +2552,19 @@
                 if (xd->bibase != NULL || xd->base != NULL)
                     xd->exceptionnr = currentModule->nrexceptions++;
             }
-        }
+        ;}
     break;
 
-  case 52:
-#line 501 "parser.y"
+  case 53:
+#line 503 "parser.y"
     {
             (yyval.exceptionbase).bibase = NULL;
             (yyval.exceptionbase).base = NULL;
-        }
+        ;}
     break;
 
-  case 53:
-#line 505 "parser.y"
+  case 54:
+#line 507 "parser.y"
     {
             exceptionDef *xd;
 
@@ -2627,26 +2636,26 @@
 
             if ((yyval.exceptionbase).bibase == NULL && (yyval.exceptionbase).base == NULL)
                 yyerror("Unknown exception base type");
-        }
+        ;}
     break;
 
-  case 54:
-#line 579 "parser.y"
+  case 55:
+#line 581 "parser.y"
     {
             (yyval.codeb) = (yyvsp[(2) - (2)].codeb);
-        }
+        ;}
     break;
 
-  case 55:
-#line 584 "parser.y"
+  case 56:
+#line 586 "parser.y"
     {
             if (notSkipping())
                 currentMappedType = newMappedType(currentSpec, &(yyvsp[(2) - (3)].memArg), &(yyvsp[(3) - (3)].optflags));
-        }
+        ;}
     break;
 
-  case 57:
-#line 590 "parser.y"
+  case 58:
+#line 592 "parser.y"
     {
             int a;
 
@@ -2693,11 +2702,11 @@
                 iff->hdrcode = NULL;
                 mtt->mt->iff = iff;
             }
-        }
+        ;}
     break;
 
-  case 59:
-#line 639 "parser.y"
+  case 60:
+#line 641 "parser.y"
     {
             if (notSkipping())
             {
@@ -2709,19 +2718,19 @@
 
                 currentMappedType = NULL;
             }
-        }
+        ;}
     break;
 
-  case 62:
-#line 657 "parser.y"
+  case 63:
+#line 659 "parser.y"
     {
             if (notSkipping())
                 appendCodeBlock(&currentMappedType->iff->hdrcode, (yyvsp[(1) - (1)].codeb));
-        }
+        ;}
     break;
 
-  case 63:
-#line 661 "parser.y"
+  case 64:
+#line 663 "parser.y"
     {
             if (notSkipping())
             {
@@ -2730,11 +2739,11 @@
 
                 currentMappedType -> convfromcode = (yyvsp[(2) - (2)].codeb);
             }
-        }
+        ;}
     break;
 
-  case 64:
-#line 670 "parser.y"
+  case 65:
+#line 672 "parser.y"
     {
             if (notSkipping())
             {
@@ -2743,11 +2752,11 @@
 
                 currentMappedType -> convtocode = (yyvsp[(2) - (2)].codeb);
             }
-        }
+        ;}
     break;
 
-  case 67:
-#line 683 "parser.y"
+  case 68:
+#line 685 "parser.y"
     {
             if (notSkipping())
             {
@@ -2759,11 +2768,11 @@
                         currentMappedType, 0, TRUE, FALSE, (yyvsp[(3) - (12)].text), &(yyvsp[(5) - (12)].signature), (yyvsp[(7) - (12)].number), FALSE,
                         &(yyvsp[(9) - (12)].optflags), (yyvsp[(12) - (12)].codeb), NULL, (yyvsp[(8) - (12)].throwlist), (yyvsp[(10) - (12)].optsignature));
             }
-        }
+        ;}
     break;
 
-  case 68:
-#line 697 "parser.y"
+  case 69:
+#line 699 "parser.y"
     {
             if (currentSpec -> genc)
                 yyerror("namespace definition not allowed in a C module");
@@ -2785,11 +2794,11 @@
 
                 sectionFlags = 0;
             }
-        }
+        ;}
     break;
 
-  case 69:
-#line 718 "parser.y"
+  case 70:
+#line 720 "parser.y"
     {
             if (notSkipping())
             {
@@ -2803,22 +2812,22 @@
 
                 popScope();
             }
-        }
+        ;}
     break;
 
-  case 72:
-#line 738 "parser.y"
+  case 73:
+#line 740 "parser.y"
     {
             qualDef *qd;
 
             for (qd = currentModule -> qualifiers; qd != NULL; qd = qd -> next)
                 if (qd -> qtype == platform_qualifier)
                     yyerror("%Platforms has already been defined for this module");
-        }
+        ;}
     break;
 
-  case 73:
-#line 745 "parser.y"
+  case 74:
+#line 747 "parser.y"
     {
             qualDef *qd;
             int nrneeded;
@@ -2836,32 +2845,39 @@
 
             if (nrneeded > 1)
                 yyerror("No more than one of these %Platforms must be specified with the -t flag");
-        }
+        ;}
     break;
 
-  case 76:
-#line 769 "parser.y"
+  case 77:
+#line 771 "parser.y"
     {
             newQualifier(currentModule,-1,-1,(yyvsp[(1) - (1)].text),platform_qualifier);
-        }
+        ;}
     break;
 
-  case 77:
-#line 774 "parser.y"
+  case 78:
+#line 776 "parser.y"
+    {
+            currentModule->virterrorhandler = (yyvsp[(2) - (2)].text);
+        ;}
+    break;
+
+  case 79:
+#line 781 "parser.y"
     {
             newQualifier(currentModule,-1,-1,(yyvsp[(2) - (2)].text),feature_qualifier);
-        }
+        ;}
     break;
 
-  case 78:
-#line 779 "parser.y"
+  case 80:
+#line 786 "parser.y"
     {
             currentTimelineOrder = 0;
-        }
+        ;}
     break;
 
-  case 79:
-#line 782 "parser.y"
+  case 81:
+#line 789 "parser.y"
     {
             qualDef *qd;
             int nrneeded;
@@ -2881,18 +2897,18 @@
                 yyerror("At most one of this %Timeline must be specified with the -t flag");
 
             currentModule -> nrtimelines++;
-        }
+        ;}
     break;
 
-  case 82:
-#line 808 "parser.y"
+  case 84:
+#line 815 "parser.y"
     {
             newQualifier(currentModule,currentModule -> nrtimelines,currentTimelineOrder++,(yyvsp[(1) - (1)].text),time_qualifier);
-        }
+        ;}
     break;
 
-  case 83:
-#line 813 "parser.y"
+  case 85:
+#line 820 "parser.y"
     {
             if (skipStackPtr >= MAX_NESTED_IF)
                 yyerror("Internal error: increase the value of MAX_NESTED_IF");
@@ -2903,54 +2919,54 @@
                 (yyvsp[(3) - (4)].boolean) = ((yyvsp[(3) - (4)].boolean) && skipStack[skipStackPtr - 1]);
 
             skipStack[skipStackPtr++] = (yyvsp[(3) - (4)].boolean);
-        }
+        ;}
     break;
 
-  case 84:
-#line 826 "parser.y"
+  case 86:
+#line 833 "parser.y"
     {
             (yyval.boolean) = platOrFeature((yyvsp[(1) - (1)].text),FALSE);
-        }
+        ;}
     break;
 
-  case 85:
-#line 829 "parser.y"
+  case 87:
+#line 836 "parser.y"
     {
             (yyval.boolean) = platOrFeature((yyvsp[(2) - (2)].text),TRUE);
-        }
+        ;}
     break;
 
-  case 86:
-#line 832 "parser.y"
+  case 88:
+#line 839 "parser.y"
     {
             (yyval.boolean) = (platOrFeature((yyvsp[(3) - (3)].text),FALSE) || (yyvsp[(1) - (3)].boolean));
-        }
+        ;}
     break;
 
-  case 87:
-#line 835 "parser.y"
+  case 89:
+#line 842 "parser.y"
     {
             (yyval.boolean) = (platOrFeature((yyvsp[(4) - (4)].text),TRUE) || (yyvsp[(1) - (4)].boolean));
-        }
+        ;}
     break;
 
-  case 89:
-#line 841 "parser.y"
+  case 91:
+#line 848 "parser.y"
     {
             (yyval.boolean) = timePeriod((yyvsp[(1) - (3)].text),(yyvsp[(3) - (3)].text));
-        }
+        ;}
     break;
 
-  case 90:
-#line 846 "parser.y"
+  case 92:
+#line 853 "parser.y"
     {
             if (skipStackPtr-- <= 0)
                 yyerror("Too many %End directives");
-        }
+        ;}
     break;
 
-  case 91:
-#line 852 "parser.y"
+  case 93:
+#line 859 "parser.y"
     {
             optFlag *of;
 
@@ -2975,11 +2991,11 @@
             currentModule -> license -> sig = 
                 ((of = findOptFlag(&(yyvsp[(2) - (2)].optflags),"Signature",string_flag)) != NULL)
                     ? of -> fvalue.sval : NULL;
-        }
+        ;}
     break;
 
-  case 92:
-#line 879 "parser.y"
+  case 94:
+#line 886 "parser.y"
     {
             if (notSkipping())
             {
@@ -2988,11 +3004,11 @@
 
                 currentModule->defmetatype = cacheName(currentSpec, (yyvsp[(2) - (2)].text));
             }
-        }
+        ;}
     break;
 
-  case 93:
-#line 890 "parser.y"
+  case 95:
+#line 897 "parser.y"
     {
             if (notSkipping())
             {
@@ -3001,11 +3017,11 @@
 
                 currentModule->defsupertype = cacheName(currentSpec, (yyvsp[(2) - (2)].text));
             }
-        }
+        ;}
     break;
 
-  case 94:
-#line 901 "parser.y"
+  case 96:
+#line 908 "parser.y"
     {
             /* Make sure this is the first mention of a module. */
             if (currentSpec->module != currentModule)
@@ -3016,11 +3032,11 @@
 
             setModuleName(currentSpec, currentModule, (yyvsp[(2) - (2)].text));
             setIsConsolidated(currentModule);
-        }
+        ;}
     break;
 
-  case 95:
-#line 914 "parser.y"
+  case 97:
+#line 921 "parser.y"
     {
             /* Make sure this is the first mention of a module. */
             if (currentSpec->module != currentModule)
@@ -3031,11 +3047,11 @@
 
             setModuleName(currentSpec, currentModule, (yyvsp[(2) - (2)].text));
             setIsComposite(currentModule);
-        }
+        ;}
     break;
 
-  case 96:
-#line 927 "parser.y"
+  case 98:
+#line 934 "parser.y"
     {
             /* Check the module hasn't already been defined. */
 
@@ -3066,25 +3082,25 @@
                 currentSpec->genc = (yyvsp[(1) - (3)].boolean);
             else if (currentSpec->genc != (yyvsp[(1) - (3)].boolean))
                 yyerror("Cannot mix C and C++ modules");
-        }
+        ;}
     break;
 
-  case 97:
-#line 960 "parser.y"
+  case 99:
+#line 967 "parser.y"
     {
             (yyval.boolean) = FALSE;
-        }
+        ;}
     break;
 
-  case 98:
-#line 963 "parser.y"
+  case 100:
+#line 970 "parser.y"
     {
             (yyval.boolean) = TRUE;
-        }
+        ;}
     break;
 
-  case 100:
-#line 969 "parser.y"
+  case 102:
+#line 976 "parser.y"
     {
             /*
              * The grammar design is a bit broken and this is the easiest way
@@ -3098,259 +3114,259 @@
                     yyerror("Invalid character in name");
 
             (yyval.text) = (yyvsp[(1) - (1)].text);
-        }
-    break;
-
-  case 101:
-#line 985 "parser.y"
-    {
-            (yyval.number) = -1;
-        }
+        ;}
     break;
 
   case 103:
-#line 991 "parser.y"
-    {
-            parseFile(NULL, (yyvsp[(2) - (2)].text), NULL, FALSE);
-        }
-    break;
-
-  case 104:
-#line 996 "parser.y"
+#line 992 "parser.y"
     {
-            parseFile(NULL, (yyvsp[(2) - (2)].text), NULL, TRUE);
-        }
+            (yyval.number) = -1;
+        ;}
     break;
 
   case 105:
-#line 1001 "parser.y"
+#line 998 "parser.y"
     {
-            newImport((yyvsp[(2) - (2)].text));
-        }
+            parseFile(NULL, (yyvsp[(2) - (2)].text), NULL, FALSE);
+        ;}
     break;
 
   case 106:
-#line 1006 "parser.y"
+#line 1003 "parser.y"
     {
-            (yyval.codeb) = NULL;
-        }
+            parseFile(NULL, (yyvsp[(2) - (2)].text), NULL, TRUE);
+        ;}
     break;
 
   case 107:
-#line 1009 "parser.y"
+#line 1008 "parser.y"
     {
-            (yyval.codeb) = (yyvsp[(2) - (2)].codeb);
-        }
+            newImport((yyvsp[(2) - (2)].text));
+        ;}
     break;
 
   case 108:
-#line 1014 "parser.y"
+#line 1013 "parser.y"
     {
             (yyval.codeb) = NULL;
-        }
+        ;}
     break;
 
   case 109:
-#line 1017 "parser.y"
+#line 1016 "parser.y"
     {
             (yyval.codeb) = (yyvsp[(2) - (2)].codeb);
-        }
+        ;}
     break;
 
   case 110:
-#line 1022 "parser.y"
+#line 1021 "parser.y"
     {
             (yyval.codeb) = NULL;
-        }
+        ;}
     break;
 
   case 111:
-#line 1025 "parser.y"
+#line 1024 "parser.y"
     {
             (yyval.codeb) = (yyvsp[(2) - (2)].codeb);
-        }
+        ;}
     break;
 
   case 112:
-#line 1030 "parser.y"
+#line 1029 "parser.y"
     {
-            appendCodeBlock(&currentModule->copying, (yyvsp[(2) - (2)].codeb));
-        }
+            (yyval.codeb) = NULL;
+        ;}
     break;
 
   case 113:
-#line 1035 "parser.y"
+#line 1032 "parser.y"
     {
             (yyval.codeb) = (yyvsp[(2) - (2)].codeb);
-        }
+        ;}
     break;
 
   case 114:
-#line 1040 "parser.y"
+#line 1037 "parser.y"
     {
-            (yyval.codeb) = (yyvsp[(2) - (2)].codeb);
-        }
+            appendCodeBlock(&currentModule->copying, (yyvsp[(2) - (2)].codeb));
+        ;}
     break;
 
   case 115:
-#line 1045 "parser.y"
+#line 1042 "parser.y"
     {
             (yyval.codeb) = (yyvsp[(2) - (2)].codeb);
-        }
+        ;}
     break;
 
   case 116:
-#line 1050 "parser.y"
+#line 1047 "parser.y"
     {
-            (yyval.codeb) = NULL;
-        }
+            (yyval.codeb) = (yyvsp[(2) - (2)].codeb);
+        ;}
     break;
 
-  case 118:
-#line 1056 "parser.y"
+  case 117:
+#line 1052 "parser.y"
     {
             (yyval.codeb) = (yyvsp[(2) - (2)].codeb);
-        }
+        ;}
     break;
 
-  case 119:
-#line 1061 "parser.y"
+  case 118:
+#line 1057 "parser.y"
     {
-            (yyval.codeb) = (yyvsp[(2) - (2)].codeb);
-        }
+            (yyval.codeb) = NULL;
+        ;}
     break;
 
   case 120:
-#line 1066 "parser.y"
+#line 1063 "parser.y"
     {
             (yyval.codeb) = (yyvsp[(2) - (2)].codeb);
-        }
+        ;}
     break;
 
   case 121:
-#line 1071 "parser.y"
+#line 1068 "parser.y"
     {
             (yyval.codeb) = (yyvsp[(2) - (2)].codeb);
-        }
+        ;}
     break;
 
   case 122:
-#line 1076 "parser.y"
+#line 1073 "parser.y"
     {
             (yyval.codeb) = (yyvsp[(2) - (2)].codeb);
-        }
+        ;}
     break;
 
   case 123:
-#line 1081 "parser.y"
+#line 1078 "parser.y"
     {
             (yyval.codeb) = (yyvsp[(2) - (2)].codeb);
-        }
+        ;}
     break;
 
   case 124:
-#line 1086 "parser.y"
+#line 1083 "parser.y"
     {
             (yyval.codeb) = (yyvsp[(2) - (2)].codeb);
-        }
+        ;}
     break;
 
   case 125:
-#line 1091 "parser.y"
+#line 1088 "parser.y"
     {
             (yyval.codeb) = (yyvsp[(2) - (2)].codeb);
-        }
+        ;}
     break;
 
   case 126:
-#line 1096 "parser.y"
+#line 1093 "parser.y"
     {
             (yyval.codeb) = (yyvsp[(2) - (2)].codeb);
-        }
+        ;}
     break;
 
   case 127:
-#line 1101 "parser.y"
+#line 1098 "parser.y"
     {
             (yyval.codeb) = (yyvsp[(2) - (2)].codeb);
-        }
+        ;}
     break;
 
   case 128:
-#line 1106 "parser.y"
+#line 1103 "parser.y"
     {
             (yyval.codeb) = (yyvsp[(2) - (2)].codeb);
-        }
+        ;}
     break;
 
   case 129:
-#line 1111 "parser.y"
+#line 1108 "parser.y"
+    {
+            (yyval.codeb) = (yyvsp[(2) - (2)].codeb);
+        ;}
+    break;
+
+  case 130:
+#line 1113 "parser.y"
+    {
+            (yyval.codeb) = (yyvsp[(2) - (2)].codeb);
+        ;}
+    break;
+
+  case 131:
+#line 1118 "parser.y"
     {
             if (notSkipping())
                 appendCodeBlock(&currentModule->preinitcode, (yyvsp[(2) - (2)].codeb));
-        }
+        ;}
     break;
 
-  case 130:
-#line 1117 "parser.y"
+  case 132:
+#line 1124 "parser.y"
     {
             if (notSkipping())
                 appendCodeBlock(&currentModule->initcode, (yyvsp[(2) - (2)].codeb));
-        }
+        ;}
     break;
 
-  case 131:
-#line 1123 "parser.y"
+  case 133:
+#line 1130 "parser.y"
     {
             if (notSkipping())
                 appendCodeBlock(&currentModule->postinitcode, (yyvsp[(2) - (2)].codeb));
-        }
+        ;}
     break;
 
-  case 132:
-#line 1129 "parser.y"
+  case 134:
+#line 1136 "parser.y"
     {
             if (notSkipping())
                 appendCodeBlock(&currentModule->unitcode, (yyvsp[(2) - (2)].codeb));
-        }
+        ;}
     break;
 
-  case 133:
-#line 1135 "parser.y"
+  case 135:
+#line 1142 "parser.y"
     {
             /*
              * This is a no-op and is retained for compatibility
              * until the last use of it (by SIP v3) can be removed
              * from PyQt.
              */
-        }
+        ;}
     break;
 
-  case 134:
-#line 1144 "parser.y"
+  case 136:
+#line 1151 "parser.y"
     {
             if (inMainModule())
                 appendCodeBlock(&currentSpec -> docs,(yyvsp[(2) - (2)].codeb));
-        }
+        ;}
     break;
 
-  case 135:
-#line 1150 "parser.y"
+  case 137:
+#line 1157 "parser.y"
     {
             appendCodeBlock(&currentSpec -> docs,(yyvsp[(2) - (2)].codeb));
-        }
+        ;}
     break;
 
-  case 136:
-#line 1155 "parser.y"
+  case 138:
+#line 1162 "parser.y"
     {
             if (inMainModule())
                 yywarning("%Makefile is ignored, please use the -b flag instead");
-        }
+        ;}
     break;
 
-  case 139:
-#line 1165 "parser.y"
+  case 141:
+#line 1172 "parser.y"
     {
             (yyval.codeb) = (yyvsp[(1) - (2)].codeb);
 
@@ -3359,11 +3375,11 @@
             free((yyvsp[(2) - (2)].codeb)->frag);
             free((char *)(yyvsp[(2) - (2)].codeb)->filename);
             free((yyvsp[(2) - (2)].codeb));
-        }
+        ;}
     break;
 
-  case 140:
-#line 1176 "parser.y"
+  case 142:
+#line 1183 "parser.y"
     {
             if (notSkipping())
             {
@@ -3373,39 +3389,39 @@
                 currentEnum = newEnum(currentSpec, currentModule,
                         currentMappedType, (yyvsp[(2) - (3)].text), &(yyvsp[(3) - (3)].optflags), sectionFlags);
             }
-        }
+        ;}
     break;
 
-  case 142:
-#line 1188 "parser.y"
+  case 144:
+#line 1195 "parser.y"
     {
             (yyval.text) = NULL;
-        }
+        ;}
     break;
 
-  case 143:
-#line 1191 "parser.y"
+  case 145:
+#line 1198 "parser.y"
     {
             (yyval.text) = (yyvsp[(1) - (1)].text);
-        }
+        ;}
     break;
 
-  case 144:
-#line 1196 "parser.y"
+  case 146:
+#line 1203 "parser.y"
     {
             (yyval.text) = NULL;
-        }
+        ;}
     break;
 
-  case 145:
-#line 1199 "parser.y"
+  case 147:
+#line 1206 "parser.y"
     {
             (yyval.text) = (yyvsp[(1) - (1)].text);
-        }
+        ;}
     break;
 
-  case 152:
-#line 1214 "parser.y"
+  case 154:
+#line 1221 "parser.y"
     {
             if (notSkipping())
             {
@@ -3431,25 +3447,25 @@
                 if (inMainModule())
                     setIsUsedName(emd -> pyname);
             }
-        }
+        ;}
     break;
 
-  case 157:
-#line 1250 "parser.y"
+  case 159:
+#line 1257 "parser.y"
     {
             (yyval.valp) = NULL;
-        }
+        ;}
     break;
 
-  case 158:
-#line 1253 "parser.y"
+  case 160:
+#line 1260 "parser.y"
     {
             (yyval.valp) = (yyvsp[(2) - (2)].valp);
-        }
+        ;}
     break;
 
-  case 160:
-#line 1259 "parser.y"
+  case 162:
+#line 1266 "parser.y"
     {
             valueDef *vd;
  
@@ -3465,88 +3481,88 @@
             vd -> next = (yyvsp[(3) - (3)].valp);
 
             (yyval.valp) = (yyvsp[(1) - (3)].valp);
-        }
+        ;}
     break;
 
-  case 161:
-#line 1277 "parser.y"
+  case 163:
+#line 1284 "parser.y"
     {
             (yyval.qchar) = '-';
-        }
+        ;}
     break;
 
-  case 162:
-#line 1280 "parser.y"
+  case 164:
+#line 1287 "parser.y"
     {
             (yyval.qchar) = '+';
-        }
+        ;}
     break;
 
-  case 163:
-#line 1283 "parser.y"
+  case 165:
+#line 1290 "parser.y"
     {
             (yyval.qchar) = '*';
-        }
+        ;}
     break;
 
-  case 164:
-#line 1286 "parser.y"
+  case 166:
+#line 1293 "parser.y"
     {
             (yyval.qchar) = '/';
-        }
+        ;}
     break;
 
-  case 165:
-#line 1289 "parser.y"
+  case 167:
+#line 1296 "parser.y"
     {
             (yyval.qchar) = '&';
-        }
+        ;}
     break;
 
-  case 166:
-#line 1292 "parser.y"
+  case 168:
+#line 1299 "parser.y"
     {
             (yyval.qchar) = '|';
-        }
+        ;}
     break;
 
-  case 167:
-#line 1297 "parser.y"
+  case 169:
+#line 1304 "parser.y"
     {
             (yyval.qchar) = '\0';
-        }
+        ;}
     break;
 
-  case 168:
-#line 1300 "parser.y"
+  case 170:
+#line 1307 "parser.y"
     {
             (yyval.qchar) = '!';
-        }
+        ;}
     break;
 
-  case 169:
-#line 1303 "parser.y"
+  case 171:
+#line 1310 "parser.y"
     {
             (yyval.qchar) = '~';
-        }
+        ;}
     break;
 
-  case 170:
-#line 1306 "parser.y"
+  case 172:
+#line 1313 "parser.y"
     {
             (yyval.qchar) = '-';
-        }
+        ;}
     break;
 
-  case 171:
-#line 1309 "parser.y"
+  case 173:
+#line 1316 "parser.y"
     {
             (yyval.qchar) = '+';
-        }
+        ;}
     break;
 
-  case 172:
-#line 1314 "parser.y"
+  case 174:
+#line 1321 "parser.y"
     {
             if ((yyvsp[(1) - (2)].qchar) != '\0' && (yyvsp[(2) - (2)].value).vtype == string_value)
                 yyerror("Invalid unary operator for string");
@@ -3562,28 +3578,28 @@
             (yyval.valp) -> vunop = (yyvsp[(1) - (2)].qchar);
             (yyval.valp) -> vbinop = '\0';
             (yyval.valp) -> next = NULL;
-        }
+        ;}
     break;
 
-  case 174:
-#line 1333 "parser.y"
+  case 176:
+#line 1340 "parser.y"
     {
             if (currentSpec -> genc)
                 yyerror("Scoped names are not allowed in a C module");
 
             appendScopedName(&(yyvsp[(1) - (3)].scpvalp),(yyvsp[(3) - (3)].scpvalp));
-        }
+        ;}
     break;
 
-  case 175:
-#line 1341 "parser.y"
+  case 177:
+#line 1348 "parser.y"
     {
             (yyval.scpvalp) = text2scopePart((yyvsp[(1) - (1)].text));
-        }
+        ;}
     break;
 
-  case 176:
-#line 1346 "parser.y"
+  case 178:
+#line 1353 "parser.y"
     {
             /*
              * We let the C++ compiler decide if the value is a valid one - no
@@ -3592,11 +3608,11 @@
 
             (yyval.value).vtype = scoped_value;
             (yyval.value).u.vscp = (yyvsp[(1) - (1)].scpvalp);
-        }
+        ;}
     break;
 
-  case 177:
-#line 1355 "parser.y"
+  case 179:
+#line 1362 "parser.y"
     {
             fcallDef *fcd;
 
@@ -3606,86 +3622,86 @@
 
             (yyval.value).vtype = fcall_value;
             (yyval.value).u.fcd = fcd;
-        }
+        ;}
     break;
 
-  case 178:
-#line 1365 "parser.y"
+  case 180:
+#line 1372 "parser.y"
     {
             (yyval.value).vtype = real_value;
             (yyval.value).u.vreal = (yyvsp[(1) - (1)].real);
-        }
+        ;}
     break;
 
-  case 179:
-#line 1369 "parser.y"
+  case 181:
+#line 1376 "parser.y"
     {
             (yyval.value).vtype = numeric_value;
             (yyval.value).u.vnum = (yyvsp[(1) - (1)].number);
-        }
+        ;}
     break;
 
-  case 180:
-#line 1373 "parser.y"
+  case 182:
+#line 1380 "parser.y"
     {
             (yyval.value).vtype = numeric_value;
             (yyval.value).u.vnum = 1;
-        }
+        ;}
     break;
 
-  case 181:
-#line 1377 "parser.y"
+  case 183:
+#line 1384 "parser.y"
     {
             (yyval.value).vtype = numeric_value;
             (yyval.value).u.vnum = 0;
-        }
+        ;}
     break;
 
-  case 182:
-#line 1381 "parser.y"
+  case 184:
+#line 1388 "parser.y"
     {
             (yyval.value).vtype = numeric_value;
             (yyval.value).u.vnum = 0;
-        }
+        ;}
     break;
 
-  case 183:
-#line 1385 "parser.y"
+  case 185:
+#line 1392 "parser.y"
     {
             (yyval.value).vtype = string_value;
             (yyval.value).u.vstr = (yyvsp[(1) - (1)].text);
-        }
+        ;}
     break;
 
-  case 184:
-#line 1389 "parser.y"
+  case 186:
+#line 1396 "parser.y"
     {
             (yyval.value).vtype = qchar_value;
             (yyval.value).u.vqchar = (yyvsp[(1) - (1)].qchar);
-        }
+        ;}
     break;
 
-  case 185:
-#line 1395 "parser.y"
+  case 187:
+#line 1402 "parser.y"
     {
             /* No values. */
 
             (yyval.fcall).nrArgs = 0;
-        }
+        ;}
     break;
 
-  case 186:
-#line 1400 "parser.y"
+  case 188:
+#line 1407 "parser.y"
     {
             /* The single or first expression. */
 
             (yyval.fcall).args[0] = (yyvsp[(1) - (1)].valp);
             (yyval.fcall).nrArgs = 1;
-        }
+        ;}
     break;
 
-  case 187:
-#line 1406 "parser.y"
+  case 189:
+#line 1413 "parser.y"
     {
             /* Check that it wasn't ...(,expression...). */
 
@@ -3701,22 +3717,22 @@
 
             (yyval.fcall).args[(yyval.fcall).nrArgs] = (yyvsp[(3) - (3)].valp);
             (yyval.fcall).nrArgs++;
-        }
+        ;}
     break;
 
-  case 188:
-#line 1424 "parser.y"
+  case 190:
+#line 1431 "parser.y"
     {
             if (notSkipping())
             {
                 applyTypeFlags(currentModule, &(yyvsp[(2) - (5)].memArg), &(yyvsp[(4) - (5)].optflags));
                 newTypedef(currentSpec, currentModule, (yyvsp[(3) - (5)].text), &(yyvsp[(2) - (5)].memArg), &(yyvsp[(4) - (5)].optflags));
             }
-        }
+        ;}
     break;
 
-  case 189:
-#line 1431 "parser.y"
+  case 191:
+#line 1438 "parser.y"
     {
             if (notSkipping())
             {
@@ -3739,22 +3755,22 @@
 
                 newTypedef(currentSpec, currentModule, (yyvsp[(5) - (11)].text), &ftype, &(yyvsp[(10) - (11)].optflags));
             }
-        }
+        ;}
     break;
 
-  case 190:
-#line 1456 "parser.y"
+  case 192:
+#line 1463 "parser.y"
     {
             if (currentSpec -> genc && (yyvsp[(2) - (2)].scpvalp)->next != NULL)
                 yyerror("Namespaces not allowed in a C module");
 
             if (notSkipping())
                 currentSupers = NULL;
-        }
+        ;}
     break;
 
-  case 191:
-#line 1462 "parser.y"
+  case 193:
+#line 1469 "parser.y"
     {
             if (notSkipping())
             {
@@ -3764,24 +3780,24 @@
                 defineClass((yyvsp[(2) - (5)].scpvalp), currentSupers, &(yyvsp[(5) - (5)].optflags));
                 sectionFlags = SECT_IS_PUBLIC;
             }
-        }
+        ;}
     break;
 
-  case 192:
-#line 1471 "parser.y"
+  case 194:
+#line 1478 "parser.y"
     {
             if (notSkipping())
                 completeClass((yyvsp[(2) - (8)].scpvalp), &(yyvsp[(5) - (8)].optflags), (yyvsp[(7) - (8)].boolean));
-        }
+        ;}
     break;
 
-  case 193:
-#line 1477 "parser.y"
-    {currentIsTemplate = TRUE;}
+  case 195:
+#line 1484 "parser.y"
+    {currentIsTemplate = TRUE;;}
     break;
 
-  case 194:
-#line 1477 "parser.y"
+  case 196:
+#line 1484 "parser.y"
     {
             if (currentSpec->genc)
                 yyerror("Class templates not allowed in a C module");
@@ -3805,48 +3821,48 @@
             }
 
             currentIsTemplate = FALSE;
-        }
+        ;}
     break;
 
-  case 195:
-#line 1503 "parser.y"
+  case 197:
+#line 1510 "parser.y"
     {
             (yyval.signature) = (yyvsp[(3) - (4)].signature);
-        }
+        ;}
     break;
 
-  case 196:
-#line 1508 "parser.y"
+  case 198:
+#line 1515 "parser.y"
     {
             if (currentSpec->genc)
                 yyerror("Class definition not allowed in a C module");
 
             if (notSkipping())
                 currentSupers = NULL;
-        }
+        ;}
     break;
 
-  case 197:
-#line 1514 "parser.y"
+  case 199:
+#line 1521 "parser.y"
     {
             if (notSkipping())
             {
                 defineClass((yyvsp[(2) - (5)].scpvalp), currentSupers, &(yyvsp[(5) - (5)].optflags));
                 sectionFlags = SECT_IS_PRIVATE;
             }
-        }
+        ;}
     break;
 
-  case 198:
-#line 1520 "parser.y"
+  case 200:
+#line 1527 "parser.y"
     {
             if (notSkipping())
                 (yyval.klass) = completeClass((yyvsp[(2) - (8)].scpvalp), &(yyvsp[(5) - (8)].optflags), (yyvsp[(7) - (8)].boolean));
-        }
+        ;}
     break;
 
-  case 203:
-#line 1534 "parser.y"
+  case 205:
+#line 1541 "parser.y"
     {
             if (notSkipping())
             {
@@ -3883,41 +3899,41 @@
                 super = findClass(currentSpec, class_iface, NULL, snd);
                 appendToClassList(&currentSupers, super);
             }
-        }
+        ;}
     break;
 
-  case 204:
-#line 1573 "parser.y"
+  case 206:
+#line 1580 "parser.y"
     {
             (yyval.boolean) = FALSE;
-        }
+        ;}
     break;
 
-  case 205:
-#line 1576 "parser.y"
+  case 207:
+#line 1583 "parser.y"
     {
             (yyval.boolean) = TRUE;
-        }
+        ;}
     break;
 
-  case 216:
-#line 1593 "parser.y"
+  case 218:
+#line 1600 "parser.y"
     {
             if (notSkipping())
                 appendCodeBlock(&currentScope()->cppcode, (yyvsp[(1) - (1)].codeb));
-        }
+        ;}
     break;
 
-  case 217:
-#line 1597 "parser.y"
+  case 219:
+#line 1604 "parser.y"
     {
             if (notSkipping())
                 appendCodeBlock(&currentScope()->iff->hdrcode, (yyvsp[(1) - (1)].codeb));
-        }
+        ;}
     break;
 
-  case 218:
-#line 1601 "parser.y"
+  case 220:
+#line 1608 "parser.y"
     {
             if (notSkipping())
             {
@@ -3928,11 +3944,11 @@
 
                 scope->travcode = (yyvsp[(1) - (1)].codeb);
             }
-        }
+        ;}
     break;
 
-  case 219:
-#line 1612 "parser.y"
+  case 221:
+#line 1619 "parser.y"
     {
             if (notSkipping())
             {
@@ -3943,11 +3959,11 @@
 
                 scope->clearcode = (yyvsp[(1) - (1)].codeb);
             }
-        }
+        ;}
     break;
 
-  case 220:
-#line 1623 "parser.y"
+  case 222:
+#line 1630 "parser.y"
     {
             if (notSkipping())
             {
@@ -3958,11 +3974,11 @@
 
                 scope->getbufcode = (yyvsp[(1) - (1)].codeb);
             }
-        }
+        ;}
     break;
 
-  case 221:
-#line 1634 "parser.y"
+  case 223:
+#line 1641 "parser.y"
     {
             if (notSkipping())
             {
@@ -3973,11 +3989,11 @@
 
                 scope->releasebufcode = (yyvsp[(1) - (1)].codeb);
             }
-        }
+        ;}
     break;
 
-  case 222:
-#line 1645 "parser.y"
+  case 224:
+#line 1652 "parser.y"
     {
             if (notSkipping())
             {
@@ -3988,11 +4004,11 @@
 
                 scope->readbufcode = (yyvsp[(1) - (1)].codeb);
             }
-        }
+        ;}
     break;
 
-  case 223:
-#line 1656 "parser.y"
+  case 225:
+#line 1663 "parser.y"
     {
             if (notSkipping())
             {
@@ -4003,11 +4019,11 @@
 
                 scope->writebufcode = (yyvsp[(1) - (1)].codeb);
             }
-        }
+        ;}
     break;
 
-  case 224:
-#line 1667 "parser.y"
+  case 226:
+#line 1674 "parser.y"
     {
             if (notSkipping())
             {
@@ -4018,11 +4034,11 @@
 
                 scope->segcountcode = (yyvsp[(1) - (1)].codeb);
             }
-        }
+        ;}
     break;
 
-  case 225:
-#line 1678 "parser.y"
+  case 227:
+#line 1685 "parser.y"
     {
             if (notSkipping())
             {
@@ -4033,11 +4049,11 @@
 
                 scope->charbufcode = (yyvsp[(1) - (1)].codeb);
             }
-        }
+        ;}
     break;
 
-  case 226:
-#line 1689 "parser.y"
+  case 228:
+#line 1696 "parser.y"
     {
             if (notSkipping())
             {
@@ -4048,11 +4064,11 @@
 
                 scope->picklecode = (yyvsp[(1) - (1)].codeb);
             }
-        }
+        ;}
     break;
 
-  case 230:
-#line 1703 "parser.y"
+  case 232:
+#line 1710 "parser.y"
     {
             if (notSkipping())
             {
@@ -4063,11 +4079,11 @@
 
                 scope->convtosubcode = (yyvsp[(2) - (2)].codeb);
             }
-        }
+        ;}
     break;
 
-  case 231:
-#line 1714 "parser.y"
+  case 233:
+#line 1721 "parser.y"
     {
             if (notSkipping())
             {
@@ -4078,69 +4094,69 @@
 
                 scope->convtocode = (yyvsp[(2) - (2)].codeb);
             }
-        }
+        ;}
     break;
 
-  case 232:
-#line 1725 "parser.y"
+  case 234:
+#line 1732 "parser.y"
     {
             if (currentSpec -> genc)
                 yyerror("public section not allowed in a C module");
 
             if (notSkipping())
                 sectionFlags = SECT_IS_PUBLIC | (yyvsp[(2) - (3)].number);
-        }
+        ;}
     break;
 
-  case 233:
-#line 1732 "parser.y"
+  case 235:
+#line 1739 "parser.y"
     {
             if (currentSpec -> genc)
                 yyerror("protected section not allowed in a C module");
 
             if (notSkipping())
                 sectionFlags = SECT_IS_PROT | (yyvsp[(2) - (3)].number);
-        }
+        ;}
     break;
 
-  case 234:
-#line 1739 "parser.y"
+  case 236:
+#line 1746 "parser.y"
     {
             if (currentSpec -> genc)
                 yyerror("private section not allowed in a C module");
 
             if (notSkipping())
                 sectionFlags = SECT_IS_PRIVATE | (yyvsp[(2) - (3)].number);
-        }
+        ;}
     break;
 
-  case 235:
-#line 1746 "parser.y"
+  case 237:
+#line 1753 "parser.y"
     {
             if (currentSpec -> genc)
                 yyerror("signals section not allowed in a C module");
 
             if (notSkipping())
                 sectionFlags = SECT_IS_SIGNAL;
-        }
+        ;}
     break;
 
-  case 236:
-#line 1755 "parser.y"
+  case 238:
+#line 1762 "parser.y"
     {
             (yyval.number) = 0;
-        }
+        ;}
     break;
 
-  case 237:
-#line 1758 "parser.y"
+  case 239:
+#line 1765 "parser.y"
     {
             (yyval.number) = SECT_IS_SLOT;
-        }
+        ;}
     break;
 
-  case 238:
-#line 1763 "parser.y"
+  case 240:
+#line 1770 "parser.y"
     {
             /* Note that we allow non-virtual dtors in C modules. */
 
@@ -4187,16 +4203,16 @@
                 else if (getHoldGIL(&(yyvsp[(8) - (11)].optflags)))
                     setIsHoldGILDtor(cd);
             }
-        }
+        ;}
     break;
 
-  case 239:
-#line 1812 "parser.y"
-    {currentCtorIsExplicit = TRUE;}
+  case 241:
+#line 1819 "parser.y"
+    {currentCtorIsExplicit = TRUE;;}
     break;
 
-  case 242:
-#line 1816 "parser.y"
+  case 244:
+#line 1823 "parser.y"
     {
             /* Note that we allow ctors in C modules. */
 
@@ -4220,58 +4236,58 @@
             free((yyvsp[(1) - (9)].text));
 
             currentCtorIsExplicit = FALSE;
-        }
+        ;}
     break;
 
-  case 243:
-#line 1842 "parser.y"
+  case 245:
+#line 1849 "parser.y"
     {
             (yyval.optsignature) = NULL;
-        }
+        ;}
     break;
 
-  case 244:
-#line 1845 "parser.y"
+  case 246:
+#line 1852 "parser.y"
     {
             (yyval.optsignature) = sipMalloc(sizeof (signatureDef));
 
             *(yyval.optsignature) = (yyvsp[(3) - (5)].signature);
-        }
+        ;}
     break;
 
-  case 245:
-#line 1852 "parser.y"
+  case 247:
+#line 1859 "parser.y"
     {
             (yyval.optsignature) = NULL;
-        }
+        ;}
     break;
 
-  case 246:
-#line 1855 "parser.y"
+  case 248:
+#line 1862 "parser.y"
     {
             (yyval.optsignature) = sipMalloc(sizeof (signatureDef));
 
             *(yyval.optsignature) = (yyvsp[(4) - (6)].signature);
             (yyval.optsignature) -> result = (yyvsp[(2) - (6)].memArg);
-        }
+        ;}
     break;
 
-  case 247:
-#line 1863 "parser.y"
+  case 249:
+#line 1870 "parser.y"
     {
             (yyval.number) = FALSE;
-        }
+        ;}
     break;
 
-  case 248:
-#line 1866 "parser.y"
+  case 250:
+#line 1873 "parser.y"
     {
             (yyval.number) = TRUE;
-        }
+        ;}
     break;
 
-  case 249:
-#line 1871 "parser.y"
+  case 251:
+#line 1878 "parser.y"
     {
             if (notSkipping())
             {
@@ -4286,11 +4302,11 @@
 
             currentIsStatic = FALSE;
             currentOverIsVirt = FALSE;
-        }
+        ;}
     break;
 
-  case 250:
-#line 1886 "parser.y"
+  case 252:
+#line 1893 "parser.y"
     {
             /*
              * It looks like an assignment operator (though we don't bother to
@@ -4308,11 +4324,11 @@
 
             currentIsStatic = FALSE;
             currentOverIsVirt = FALSE;
-        }
+        ;}
     break;
 
-  case 251:
-#line 1904 "parser.y"
+  case 253:
+#line 1911 "parser.y"
     {
             if (notSkipping())
             {
@@ -4338,11 +4354,11 @@
 
             currentIsStatic = FALSE;
             currentOverIsVirt = FALSE;
-        }
+        ;}
     break;
 
-  case 252:
-#line 1930 "parser.y"
+  case 254:
+#line 1937 "parser.y"
     {
             if (notSkipping())
             {
@@ -4415,209 +4431,209 @@
 
             currentIsStatic = FALSE;
             currentOverIsVirt = FALSE;
-        }
-    break;
-
-  case 253:
-#line 2005 "parser.y"
-    {(yyval.text) = "__add__";}
-    break;
-
-  case 254:
-#line 2006 "parser.y"
-    {(yyval.text) = "__sub__";}
+        ;}
     break;
 
   case 255:
-#line 2007 "parser.y"
-    {(yyval.text) = "__mul__";}
+#line 2012 "parser.y"
+    {(yyval.text) = "__add__";;}
     break;
 
   case 256:
-#line 2008 "parser.y"
-    {(yyval.text) = "__div__";}
+#line 2013 "parser.y"
+    {(yyval.text) = "__sub__";;}
     break;
 
   case 257:
-#line 2009 "parser.y"
-    {(yyval.text) = "__mod__";}
+#line 2014 "parser.y"
+    {(yyval.text) = "__mul__";;}
     break;
 
   case 258:
-#line 2010 "parser.y"
-    {(yyval.text) = "__and__";}
+#line 2015 "parser.y"
+    {(yyval.text) = "__div__";;}
     break;
 
   case 259:
-#line 2011 "parser.y"
-    {(yyval.text) = "__or__";}
+#line 2016 "parser.y"
+    {(yyval.text) = "__mod__";;}
     break;
 
   case 260:
-#line 2012 "parser.y"
-    {(yyval.text) = "__xor__";}
+#line 2017 "parser.y"
+    {(yyval.text) = "__and__";;}
     break;
 
   case 261:
-#line 2013 "parser.y"
-    {(yyval.text) = "__lshift__";}
+#line 2018 "parser.y"
+    {(yyval.text) = "__or__";;}
     break;
 
   case 262:
-#line 2014 "parser.y"
-    {(yyval.text) = "__rshift__";}
+#line 2019 "parser.y"
+    {(yyval.text) = "__xor__";;}
     break;
 
   case 263:
-#line 2015 "parser.y"
-    {(yyval.text) = "__iadd__";}
+#line 2020 "parser.y"
+    {(yyval.text) = "__lshift__";;}
     break;
 
   case 264:
-#line 2016 "parser.y"
-    {(yyval.text) = "__isub__";}
+#line 2021 "parser.y"
+    {(yyval.text) = "__rshift__";;}
     break;
 
   case 265:
-#line 2017 "parser.y"
-    {(yyval.text) = "__imul__";}
+#line 2022 "parser.y"
+    {(yyval.text) = "__iadd__";;}
     break;
 
   case 266:
-#line 2018 "parser.y"
-    {(yyval.text) = "__idiv__";}
+#line 2023 "parser.y"
+    {(yyval.text) = "__isub__";;}
     break;
 
   case 267:
-#line 2019 "parser.y"
-    {(yyval.text) = "__imod__";}
+#line 2024 "parser.y"
+    {(yyval.text) = "__imul__";;}
     break;
 
   case 268:
-#line 2020 "parser.y"
-    {(yyval.text) = "__iand__";}
+#line 2025 "parser.y"
+    {(yyval.text) = "__idiv__";;}
     break;
 
   case 269:
-#line 2021 "parser.y"
-    {(yyval.text) = "__ior__";}
+#line 2026 "parser.y"
+    {(yyval.text) = "__imod__";;}
     break;
 
   case 270:
-#line 2022 "parser.y"
-    {(yyval.text) = "__ixor__";}
+#line 2027 "parser.y"
+    {(yyval.text) = "__iand__";;}
     break;
 
   case 271:
-#line 2023 "parser.y"
-    {(yyval.text) = "__ilshift__";}
+#line 2028 "parser.y"
+    {(yyval.text) = "__ior__";;}
     break;
 
   case 272:
-#line 2024 "parser.y"
-    {(yyval.text) = "__irshift__";}
+#line 2029 "parser.y"
+    {(yyval.text) = "__ixor__";;}
     break;
 
   case 273:
-#line 2025 "parser.y"
-    {(yyval.text) = "__invert__";}
+#line 2030 "parser.y"
+    {(yyval.text) = "__ilshift__";;}
     break;
 
   case 274:
-#line 2026 "parser.y"
-    {(yyval.text) = "__call__";}
+#line 2031 "parser.y"
+    {(yyval.text) = "__irshift__";;}
     break;
 
   case 275:
-#line 2027 "parser.y"
-    {(yyval.text) = "__getitem__";}
+#line 2032 "parser.y"
+    {(yyval.text) = "__invert__";;}
     break;
 
   case 276:
-#line 2028 "parser.y"
-    {(yyval.text) = "__lt__";}
+#line 2033 "parser.y"
+    {(yyval.text) = "__call__";;}
     break;
 
   case 277:
-#line 2029 "parser.y"
-    {(yyval.text) = "__le__";}
+#line 2034 "parser.y"
+    {(yyval.text) = "__getitem__";;}
     break;
 
   case 278:
-#line 2030 "parser.y"
-    {(yyval.text) = "__eq__";}
+#line 2035 "parser.y"
+    {(yyval.text) = "__lt__";;}
     break;
 
   case 279:
-#line 2031 "parser.y"
-    {(yyval.text) = "__ne__";}
+#line 2036 "parser.y"
+    {(yyval.text) = "__le__";;}
     break;
 
   case 280:
-#line 2032 "parser.y"
-    {(yyval.text) = "__gt__";}
+#line 2037 "parser.y"
+    {(yyval.text) = "__eq__";;}
     break;
 
   case 281:
-#line 2033 "parser.y"
-    {(yyval.text) = "__ge__";}
+#line 2038 "parser.y"
+    {(yyval.text) = "__ne__";;}
     break;
 
   case 282:
-#line 2036 "parser.y"
+#line 2039 "parser.y"
+    {(yyval.text) = "__gt__";;}
+    break;
+
+  case 283:
+#line 2040 "parser.y"
+    {(yyval.text) = "__ge__";;}
+    break;
+
+  case 284:
+#line 2043 "parser.y"
     {
             (yyval.number) = FALSE;
-        }
+        ;}
     break;
 
-  case 283:
-#line 2039 "parser.y"
+  case 285:
+#line 2046 "parser.y"
     {
             (yyval.number) = TRUE;
-        }
+        ;}
     break;
 
-  case 284:
-#line 2044 "parser.y"
+  case 286:
+#line 2051 "parser.y"
     {
             (yyval.number) = 0;
-        }
+        ;}
     break;
 
-  case 285:
-#line 2047 "parser.y"
+  case 287:
+#line 2054 "parser.y"
     {
             if ((yyvsp[(2) - (2)].number) != 0)
                 yyerror("Abstract virtual function '= 0' expected");
 
             (yyval.number) = TRUE;
-        }
+        ;}
     break;
 
-  case 286:
-#line 2055 "parser.y"
+  case 288:
+#line 2062 "parser.y"
     {
             (yyval.optflags).nrFlags = 0;
-        }
+        ;}
     break;
 
-  case 287:
-#line 2058 "parser.y"
+  case 289:
+#line 2065 "parser.y"
     {
             (yyval.optflags) = (yyvsp[(2) - (3)].optflags);
-        }
+        ;}
     break;
 
-  case 288:
-#line 2064 "parser.y"
+  case 290:
+#line 2071 "parser.y"
     {
             (yyval.optflags).flags[0] = (yyvsp[(1) - (1)].flag);
             (yyval.optflags).nrFlags = 1;
-        }
+        ;}
     break;
 
-  case 289:
-#line 2068 "parser.y"
+  case 291:
+#line 2075 "parser.y"
     {
             /* Check there is room. */
 
@@ -4627,35 +4643,35 @@
             (yyval.optflags) = (yyvsp[(1) - (3)].optflags);
 
             (yyval.optflags).flags[(yyval.optflags).nrFlags++] = (yyvsp[(3) - (3)].flag);
-        }
+        ;}
     break;
 
-  case 290:
-#line 2080 "parser.y"
+  case 292:
+#line 2087 "parser.y"
     {
             (yyval.flag).ftype = bool_flag;
             (yyval.flag).fname = (yyvsp[(1) - (1)].text);
-        }
+        ;}
     break;
 
-  case 291:
-#line 2084 "parser.y"
+  case 293:
+#line 2091 "parser.y"
     {
             (yyval.flag) = (yyvsp[(3) - (3)].flag);
             (yyval.flag).fname = (yyvsp[(1) - (3)].text);
-        }
+        ;}
     break;
 
-  case 292:
-#line 2090 "parser.y"
+  case 294:
+#line 2097 "parser.y"
     {
             (yyval.flag).ftype = (strchr((yyvsp[(1) - (1)].text), '.') != NULL) ? dotted_name_flag : name_flag;
             (yyval.flag).fvalue.sval = (yyvsp[(1) - (1)].text);
-        }
+        ;}
     break;
 
-  case 293:
-#line 2094 "parser.y"
+  case 295:
+#line 2101 "parser.y"
     {
             nameDef *name;
             int from, to;
@@ -4677,55 +4693,55 @@
                 to = 0;
 
             (yyval.flag).fvalue.aval = convertAPIRange(currentModule, name, from, to);
-        }
+        ;}
     break;
 
-  case 294:
-#line 2116 "parser.y"
+  case 296:
+#line 2123 "parser.y"
     {
             (yyval.flag).ftype = string_flag;
             (yyval.flag).fvalue.sval = (yyvsp[(1) - (1)].text);
-        }
+        ;}
     break;
 
-  case 295:
-#line 2120 "parser.y"
+  case 297:
+#line 2127 "parser.y"
     {
             (yyval.flag).ftype = integer_flag;
             (yyval.flag).fvalue.ival = (yyvsp[(1) - (1)].number);
-        }
+        ;}
     break;
 
-  case 296:
-#line 2126 "parser.y"
+  case 298:
+#line 2133 "parser.y"
     {
             (yyval.codeb) = NULL;
-        }
+        ;}
     break;
 
-  case 297:
-#line 2129 "parser.y"
+  case 299:
+#line 2136 "parser.y"
     {
             (yyval.codeb) = (yyvsp[(2) - (2)].codeb);
-        }
+        ;}
     break;
 
-  case 298:
-#line 2134 "parser.y"
+  case 300:
+#line 2141 "parser.y"
     {
             (yyval.codeb) = NULL;
-        }
+        ;}
     break;
 
-  case 299:
-#line 2137 "parser.y"
+  case 301:
+#line 2144 "parser.y"
     {
             (yyval.codeb) = (yyvsp[(2) - (2)].codeb);
-        }
+        ;}
     break;
 
-  case 300:
-#line 2142 "parser.y"
+  case 302:
+#line 2149 "parser.y"
     {
             int a, nrrxcon, nrrxdis, nrslotcon, nrslotdis, nrarray, nrarraysize;
 
@@ -4771,30 +4787,30 @@
                 yyerror("/Array/ and /ArraySize/ must both be given and at most once");
 
             (yyval.signature) = (yyvsp[(1) - (1)].signature);
-        }
+        ;}
     break;
 
-  case 301:
-#line 2190 "parser.y"
+  case 303:
+#line 2197 "parser.y"
     {
             /* No arguments. */
 
             (yyval.signature).nrArgs = 0;
-        }
+        ;}
     break;
 
-  case 302:
-#line 2195 "parser.y"
+  case 304:
+#line 2202 "parser.y"
     {
             /* The single or first argument. */
 
             (yyval.signature).args[0] = (yyvsp[(1) - (1)].memArg);
             (yyval.signature).nrArgs = 1;
-        }
+        ;}
     break;
 
-  case 303:
-#line 2201 "parser.y"
+  case 305:
+#line 2208 "parser.y"
     {
             /* Check that it wasn't ...(,arg...). */
             if ((yyvsp[(1) - (3)].signature).nrArgs == 0)
@@ -4819,11 +4835,11 @@
 
             (yyval.signature).args[(yyval.signature).nrArgs] = (yyvsp[(3) - (3)].memArg);
             (yyval.signature).nrArgs++;
-        }
+        ;}
     break;
 
-  case 304:
-#line 2228 "parser.y"
+  case 306:
+#line 2235 "parser.y"
     {
             (yyval.memArg).atype = signal_type;
             (yyval.memArg).argflags = ARG_IS_CONST;
@@ -4832,11 +4848,11 @@
             (yyval.memArg).defval = (yyvsp[(4) - (4)].valp);
 
             currentSpec -> sigslots = TRUE;
-        }
+        ;}
     break;
 
-  case 305:
-#line 2237 "parser.y"
+  case 307:
+#line 2244 "parser.y"
     {
             (yyval.memArg).atype = slot_type;
             (yyval.memArg).argflags = ARG_IS_CONST;
@@ -4845,11 +4861,11 @@
             (yyval.memArg).defval = (yyvsp[(4) - (4)].valp);
 
             currentSpec -> sigslots = TRUE;
-        }
+        ;}
     break;
 
-  case 306:
-#line 2246 "parser.y"
+  case 308:
+#line 2253 "parser.y"
     {
             (yyval.memArg).atype = anyslot_type;
             (yyval.memArg).argflags = ARG_IS_CONST;
@@ -4858,11 +4874,11 @@
             (yyval.memArg).defval = (yyvsp[(4) - (4)].valp);
 
             currentSpec -> sigslots = TRUE;
-        }
+        ;}
     break;
 
-  case 307:
-#line 2255 "parser.y"
+  case 309:
+#line 2262 "parser.y"
     {
             (yyval.memArg).atype = rxcon_type;
             (yyval.memArg).argflags = 0;
@@ -4873,11 +4889,11 @@
                 (yyval.memArg).argflags |= ARG_SINGLE_SHOT;
 
             currentSpec -> sigslots = TRUE;
-        }
+        ;}
     break;
 
-  case 308:
-#line 2266 "parser.y"
+  case 310:
+#line 2273 "parser.y"
     {
             (yyval.memArg).atype = rxdis_type;
             (yyval.memArg).argflags = 0;
@@ -4885,11 +4901,11 @@
             (yyval.memArg).name = (yyvsp[(2) - (3)].text);
 
             currentSpec -> sigslots = TRUE;
-        }
+        ;}
     break;
 
-  case 309:
-#line 2274 "parser.y"
+  case 311:
+#line 2281 "parser.y"
     {
             (yyval.memArg).atype = slotcon_type;
             (yyval.memArg).argflags = ARG_IS_CONST;
@@ -4904,11 +4920,11 @@
             *(yyval.memArg).u.sa = (yyvsp[(3) - (6)].signature);
 
             currentSpec -> sigslots = TRUE;
-        }
+        ;}
     break;
 
-  case 310:
-#line 2289 "parser.y"
+  case 312:
+#line 2296 "parser.y"
     {
             (yyval.memArg).atype = slotdis_type;
             (yyval.memArg).argflags = ARG_IS_CONST;
@@ -4923,39 +4939,39 @@
             *(yyval.memArg).u.sa = (yyvsp[(3) - (6)].signature);
 
             currentSpec -> sigslots = TRUE;
-        }
+        ;}
     break;
 
-  case 311:
-#line 2304 "parser.y"
+  case 313:
+#line 2311 "parser.y"
     {
             (yyval.memArg).atype = qobject_type;
             (yyval.memArg).argflags = 0;
             (yyval.memArg).nrderefs = 0;
             (yyval.memArg).name = (yyvsp[(2) - (3)].text);
-        }
+        ;}
     break;
 
-  case 312:
-#line 2310 "parser.y"
+  case 314:
+#line 2317 "parser.y"
     {
             (yyval.memArg) = (yyvsp[(1) - (2)].memArg);
             (yyval.memArg).defval = (yyvsp[(2) - (2)].valp);
-        }
+        ;}
     break;
 
-  case 313:
-#line 2316 "parser.y"
-    {currentIsStatic = TRUE;}
+  case 315:
+#line 2323 "parser.y"
+    {currentIsStatic = TRUE;;}
     break;
 
-  case 318:
-#line 2324 "parser.y"
-    {currentOverIsVirt = TRUE;}
+  case 320:
+#line 2331 "parser.y"
+    {currentOverIsVirt = TRUE;;}
     break;
 
-  case 321:
-#line 2328 "parser.y"
+  case 323:
+#line 2335 "parser.y"
     {
             if (notSkipping())
             {
@@ -4988,31 +5004,31 @@
             }
 
             currentIsStatic = FALSE;
-        }
+        ;}
     break;
 
-  case 322:
-#line 2363 "parser.y"
+  case 324:
+#line 2370 "parser.y"
     {
             (yyval.memArg) = (yyvsp[(2) - (4)].memArg);
             (yyval.memArg).nrderefs += (yyvsp[(3) - (4)].number);
             (yyval.memArg).argflags |= ARG_IS_CONST | (yyvsp[(4) - (4)].number);
             (yyval.memArg).name = NULL;
-        }
+        ;}
     break;
 
-  case 323:
-#line 2369 "parser.y"
+  case 325:
+#line 2376 "parser.y"
     {
             (yyval.memArg) = (yyvsp[(1) - (3)].memArg);
             (yyval.memArg).nrderefs += (yyvsp[(2) - (3)].number);
             (yyval.memArg).argflags |= (yyvsp[(3) - (3)].number);
             (yyval.memArg).name = NULL;
-        }
+        ;}
     break;
 
-  case 324:
-#line 2377 "parser.y"
+  case 326:
+#line 2384 "parser.y"
     {
             (yyval.memArg) = (yyvsp[(1) - (3)].memArg);
             (yyval.memArg).name = (yyvsp[(2) - (3)].text);
@@ -5078,42 +5094,42 @@
             }
 
             applyTypeFlags(currentModule, &(yyval.memArg), &(yyvsp[(3) - (3)].optflags));
-        }
+        ;}
     break;
 
-  case 325:
-#line 2445 "parser.y"
+  case 327:
+#line 2452 "parser.y"
     {
             (yyval.number) = 0;
-        }
+        ;}
     break;
 
-  case 326:
-#line 2448 "parser.y"
+  case 328:
+#line 2455 "parser.y"
     {
             if (currentSpec -> genc)
                 yyerror("References not allowed in a C module");
 
             (yyval.number) = ARG_IS_REF;
-        }
+        ;}
     break;
 
-  case 327:
-#line 2456 "parser.y"
+  case 329:
+#line 2463 "parser.y"
     {
             (yyval.number) = 0;
-        }
+        ;}
     break;
 
-  case 328:
-#line 2459 "parser.y"
+  case 330:
+#line 2466 "parser.y"
     {
             (yyval.number) = (yyvsp[(1) - (2)].number) + 1;
-        }
+        ;}
     break;
 
-  case 329:
-#line 2464 "parser.y"
+  case 331:
+#line 2471 "parser.y"
     {
             (yyval.memArg).nrderefs = 0;
             (yyval.memArg).argflags = 0;
@@ -5124,11 +5140,11 @@
 
             /* Try and resolve typedefs as early as possible. */
             resolveAnyTypedef(currentSpec, &(yyval.memArg));
-        }
+        ;}
     break;
 
-  case 330:
-#line 2475 "parser.y"
+  case 332:
+#line 2482 "parser.y"
     {
             templateDef *td;
 
@@ -5142,11 +5158,11 @@
 
             (yyval.memArg).atype = template_type;
             (yyval.memArg).u.td = td;
-        }
+        ;}
     break;
 
-  case 331:
-#line 2489 "parser.y"
+  case 333:
+#line 2496 "parser.y"
     {
             (yyval.memArg).nrderefs = 0;
             (yyval.memArg).argflags = 0;
@@ -5163,296 +5179,296 @@
                 (yyval.memArg).atype = struct_type;
                 (yyval.memArg).u.sname = (yyvsp[(2) - (2)].scpvalp);
             }
-        }
+        ;}
     break;
 
-  case 332:
-#line 2506 "parser.y"
+  case 334:
+#line 2513 "parser.y"
     {
             (yyval.memArg).nrderefs = 0;
             (yyval.memArg).argflags = 0;
             (yyval.memArg).original_type = NULL;
 
             (yyval.memArg).atype = ushort_type;
-        }
+        ;}
     break;
 
-  case 333:
-#line 2513 "parser.y"
+  case 335:
+#line 2520 "parser.y"
     {
             (yyval.memArg).nrderefs = 0;
             (yyval.memArg).argflags = 0;
             (yyval.memArg).original_type = NULL;
 
             (yyval.memArg).atype = short_type;
-        }
+        ;}
     break;
 
-  case 334:
-#line 2520 "parser.y"
+  case 336:
+#line 2527 "parser.y"
     {
             (yyval.memArg).nrderefs = 0;
             (yyval.memArg).argflags = 0;
             (yyval.memArg).original_type = NULL;
 
             (yyval.memArg).atype = uint_type;
-        }
+        ;}
     break;
 
-  case 335:
-#line 2527 "parser.y"
+  case 337:
+#line 2534 "parser.y"
     {
             (yyval.memArg).nrderefs = 0;
             (yyval.memArg).argflags = 0;
             (yyval.memArg).original_type = NULL;
 
             (yyval.memArg).atype = uint_type;
-        }
+        ;}
     break;
 
-  case 336:
-#line 2534 "parser.y"
+  case 338:
+#line 2541 "parser.y"
     {
             (yyval.memArg).nrderefs = 0;
             (yyval.memArg).argflags = 0;
             (yyval.memArg).original_type = NULL;
 
             (yyval.memArg).atype = int_type;
-        }
+        ;}
     break;
 
-  case 337:
-#line 2541 "parser.y"
+  case 339:
+#line 2548 "parser.y"
     {
             (yyval.memArg).nrderefs = 0;
             (yyval.memArg).argflags = 0;
             (yyval.memArg).original_type = NULL;
 
             (yyval.memArg).atype = long_type;
-        }
+        ;}
     break;
 
-  case 338:
-#line 2548 "parser.y"
+  case 340:
+#line 2555 "parser.y"
     {
             (yyval.memArg).nrderefs = 0;
             (yyval.memArg).argflags = 0;
             (yyval.memArg).original_type = NULL;
 
             (yyval.memArg).atype = ulong_type;
-        }
+        ;}
     break;
 
-  case 339:
-#line 2555 "parser.y"
+  case 341:
+#line 2562 "parser.y"
     {
             (yyval.memArg).nrderefs = 0;
             (yyval.memArg).argflags = 0;
             (yyval.memArg).original_type = NULL;
 
             (yyval.memArg).atype = longlong_type;
-        }
+        ;}
     break;
 
-  case 340:
-#line 2562 "parser.y"
+  case 342:
+#line 2569 "parser.y"
     {
             (yyval.memArg).nrderefs = 0;
             (yyval.memArg).argflags = 0;
             (yyval.memArg).original_type = NULL;
 
             (yyval.memArg).atype = ulonglong_type;
-        }
+        ;}
     break;
 
-  case 341:
-#line 2569 "parser.y"
+  case 343:
+#line 2576 "parser.y"
     {
             (yyval.memArg).nrderefs = 0;
             (yyval.memArg).argflags = 0;
             (yyval.memArg).original_type = NULL;
 
             (yyval.memArg).atype = float_type;
-        }
+        ;}
     break;
 
-  case 342:
-#line 2576 "parser.y"
+  case 344:
+#line 2583 "parser.y"
     {
             (yyval.memArg).nrderefs = 0;
             (yyval.memArg).argflags = 0;
             (yyval.memArg).original_type = NULL;
 
             (yyval.memArg).atype = double_type;
-        }
+        ;}
     break;
 
-  case 343:
-#line 2583 "parser.y"
+  case 345:
+#line 2590 "parser.y"
     {
             (yyval.memArg).nrderefs = 0;
             (yyval.memArg).argflags = 0;
             (yyval.memArg).original_type = NULL;
 
             (yyval.memArg).atype = bool_type;
-        }
+        ;}
     break;
 
-  case 344:
-#line 2590 "parser.y"
+  case 346:
+#line 2597 "parser.y"
     {
             (yyval.memArg).nrderefs = 0;
             (yyval.memArg).argflags = 0;
             (yyval.memArg).original_type = NULL;
 
             (yyval.memArg).atype = sstring_type;
-        }
+        ;}
     break;
 
-  case 345:
-#line 2597 "parser.y"
+  case 347:
+#line 2604 "parser.y"
     {
             (yyval.memArg).nrderefs = 0;
             (yyval.memArg).argflags = 0;
             (yyval.memArg).original_type = NULL;
 
             (yyval.memArg).atype = ustring_type;
-        }
+        ;}
     break;
 
-  case 346:
-#line 2604 "parser.y"
+  case 348:
+#line 2611 "parser.y"
     {
             (yyval.memArg).nrderefs = 0;
             (yyval.memArg).argflags = 0;
             (yyval.memArg).original_type = NULL;
 
             (yyval.memArg).atype = string_type;
-        }
+        ;}
     break;
 
-  case 347:
-#line 2611 "parser.y"
+  case 349:
+#line 2618 "parser.y"
     {
             (yyval.memArg).nrderefs = 0;
             (yyval.memArg).argflags = 0;
             (yyval.memArg).original_type = NULL;
 
             (yyval.memArg).atype = wstring_type;
-        }
+        ;}
     break;
 
-  case 348:
-#line 2618 "parser.y"
+  case 350:
+#line 2625 "parser.y"
     {
             (yyval.memArg).nrderefs = 0;
             (yyval.memArg).argflags = 0;
             (yyval.memArg).original_type = NULL;
 
             (yyval.memArg).atype = void_type;
-        }
+        ;}
     break;
 
-  case 349:
-#line 2625 "parser.y"
+  case 351:
+#line 2632 "parser.y"
     {
             (yyval.memArg).nrderefs = 0;
             (yyval.memArg).argflags = 0;
             (yyval.memArg).original_type = NULL;
 
             (yyval.memArg).atype = pyobject_type;
-        }
+        ;}
     break;
 
-  case 350:
-#line 2632 "parser.y"
+  case 352:
+#line 2639 "parser.y"
     {
             (yyval.memArg).nrderefs = 0;
             (yyval.memArg).argflags = 0;
             (yyval.memArg).original_type = NULL;
 
             (yyval.memArg).atype = pytuple_type;
-        }
+        ;}
     break;
 
-  case 351:
-#line 2639 "parser.y"
+  case 353:
+#line 2646 "parser.y"
     {
             (yyval.memArg).nrderefs = 0;
             (yyval.memArg).argflags = 0;
             (yyval.memArg).original_type = NULL;
 
             (yyval.memArg).atype = pylist_type;
-        }
+        ;}
     break;
 
-  case 352:
-#line 2646 "parser.y"
+  case 354:
+#line 2653 "parser.y"
     {
             (yyval.memArg).nrderefs = 0;
             (yyval.memArg).argflags = 0;
             (yyval.memArg).original_type = NULL;
 
             (yyval.memArg).atype = pydict_type;
-        }
+        ;}
     break;
 
-  case 353:
-#line 2653 "parser.y"
+  case 355:
+#line 2660 "parser.y"
     {
             (yyval.memArg).nrderefs = 0;
             (yyval.memArg).argflags = 0;
             (yyval.memArg).original_type = NULL;
 
             (yyval.memArg).atype = pycallable_type;
-        }
+        ;}
     break;
 
-  case 354:
-#line 2660 "parser.y"
+  case 356:
+#line 2667 "parser.y"
     {
             (yyval.memArg).nrderefs = 0;
             (yyval.memArg).argflags = 0;
             (yyval.memArg).original_type = NULL;
 
             (yyval.memArg).atype = pyslice_type;
-        }
+        ;}
     break;
 
-  case 355:
-#line 2667 "parser.y"
+  case 357:
+#line 2674 "parser.y"
     {
             (yyval.memArg).nrderefs = 0;
             (yyval.memArg).argflags = 0;
             (yyval.memArg).original_type = NULL;
 
             (yyval.memArg).atype = pytype_type;
-        }
+        ;}
     break;
 
-  case 356:
-#line 2674 "parser.y"
+  case 358:
+#line 2681 "parser.y"
     {
             (yyval.memArg).nrderefs = 0;
             (yyval.memArg).argflags = 0;
             (yyval.memArg).original_type = NULL;
 
             (yyval.memArg).atype = ellipsis_type;
-        }
+        ;}
     break;
 
-  case 357:
-#line 2683 "parser.y"
+  case 359:
+#line 2690 "parser.y"
     {
             /* The single or first type. */
 
             (yyval.signature).args[0] = (yyvsp[(1) - (1)].memArg);
             (yyval.signature).nrArgs = 1;
-        }
+        ;}
     break;
 
-  case 358:
-#line 2689 "parser.y"
+  case 360:
+#line 2696 "parser.y"
     {
             /* Check there is nothing after an ellipsis. */
             if ((yyvsp[(1) - (3)].signature).args[(yyvsp[(1) - (3)].signature).nrArgs - 1].atype == ellipsis_type)
@@ -5466,49 +5482,49 @@
 
             (yyval.signature).args[(yyval.signature).nrArgs] = (yyvsp[(3) - (3)].memArg);
             (yyval.signature).nrArgs++;
-        }
+        ;}
     break;
 
-  case 359:
-#line 2705 "parser.y"
+  case 361:
+#line 2712 "parser.y"
     {
             (yyval.throwlist) = NULL;
-        }
+        ;}
     break;
 
-  case 360:
-#line 2708 "parser.y"
+  case 362:
+#line 2715 "parser.y"
     {
             if (currentSpec->genc)
                 yyerror("Exceptions not allowed in a C module");
 
             (yyval.throwlist) = (yyvsp[(3) - (4)].throwlist);
-        }
+        ;}
     break;
 
-  case 361:
-#line 2716 "parser.y"
+  case 363:
+#line 2723 "parser.y"
     {
             /* Empty list so use a blank. */
 
             (yyval.throwlist) = sipMalloc(sizeof (throwArgs));
             (yyval.throwlist) -> nrArgs = 0;
-        }
+        ;}
     break;
 
-  case 362:
-#line 2722 "parser.y"
+  case 364:
+#line 2729 "parser.y"
     {
             /* The only or first exception. */
 
             (yyval.throwlist) = sipMalloc(sizeof (throwArgs));
             (yyval.throwlist) -> nrArgs = 1;
             (yyval.throwlist) -> args[0] = findException(currentSpec, (yyvsp[(1) - (1)].scpvalp), FALSE);
-        }
+        ;}
     break;
 
-  case 363:
-#line 2729 "parser.y"
+  case 365:
+#line 2736 "parser.y"
     {
             /* Check that it wasn't ...(,arg...). */
 
@@ -5522,12 +5538,12 @@
 
             (yyval.throwlist) = (yyvsp[(1) - (3)].throwlist);
             (yyval.throwlist) -> args[(yyval.throwlist) -> nrArgs++] = findException(currentSpec, (yyvsp[(3) - (3)].scpvalp), FALSE);
-        }
+        ;}
     break;
 
 
 /* Line 1267 of yacc.c.  */
-#line 5531 "parser.c"
+#line 5547 "parser.c"
       default: break;
     }
   YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);
@@ -5741,7 +5757,7 @@
 }
 
 
-#line 2745 "parser.y"
+#line 2752 "parser.y"
 
 
 
@@ -6350,6 +6366,12 @@
             setHasDelayedDtors(mod);
         }
 
+        if ((flg = findOptFlag(of,"VirtualErrorHandler",opt_name_flag)) != NULL)
+        {
+            cd->virterrorhandler = flg->fvalue.sval;
+        }
+
+
         /*
          * There are subtle differences between the add and concat methods and
          * the multiply and repeat methods.  The number versions can have their
@@ -7976,6 +7998,9 @@
         }
     }
 
+    of = findOptFlag(optflgs,"VirtualErrorHandler",opt_name_flag);
+    od->virterrorhandler = 0;
+
     if (isvirt)
     {
         if (isSignal(od) && pluginPyQt3(pt))
@@ -7991,6 +8016,11 @@
         vhd->pysig = &od->pysig;
         vhd->cppsig = (cppsig != NULL ? cppsig : &od->pysig);
         vhd->virtcode = vcode;
+        od->virterrorhandler = ((of && of -> fvalue.sval) ? of -> fvalue.sval : 0);
+ 
+        if( od->virterrorhandler ) {
+            printf( "VirtualErrorHandler set to %s\n", od->virterrorhandler );
+        }
 
         if (factory || xferback)
             setIsTransferVH(vhd);
@@ -8006,12 +8036,18 @@
             vhd->next = mod->virthandlers;
             mod->virthandlers = vhd;
         }
+
+        if (of && !of -> fvalue.sval)
+            yyerror("%VirtualErrorHandler annotation must provide the name of the handler");
     }
     else
     {
         if (vcode != NULL)
             yyerror("%VirtualCatcherCode provided for non-virtual function");
 
+        if (of != NULL)
+            yyerror("%VirtualErrorHandler provided for non-virtual function");
+
         vhd = NULL;
     }
 
diff -ru sip-4.9.1/sipgen/parser.h sip/sipgen/parser.h
--- sip-4.9.1/sipgen/parser.h	2009-10-23 10:13:18.000000000 -0700
+++ sip/sipgen/parser.h	2009-10-23 11:57:34.169500000 -0700
@@ -64,89 +64,90 @@
      TK_PATHNAME = 280,
      TK_STRING = 281,
      TK_VIRTUALCATCHERCODE = 282,
-     TK_TRAVERSECODE = 283,
-     TK_CLEARCODE = 284,
-     TK_GETBUFFERCODE = 285,
-     TK_RELEASEBUFFERCODE = 286,
-     TK_READBUFFERCODE = 287,
-     TK_WRITEBUFFERCODE = 288,
-     TK_SEGCOUNTCODE = 289,
-     TK_CHARBUFFERCODE = 290,
-     TK_PICKLECODE = 291,
-     TK_METHODCODE = 292,
-     TK_FROMTYPE = 293,
-     TK_TOTYPE = 294,
-     TK_TOSUBCLASS = 295,
-     TK_INCLUDE = 296,
-     TK_OPTINCLUDE = 297,
-     TK_IMPORT = 298,
-     TK_EXPHEADERCODE = 299,
-     TK_MODHEADERCODE = 300,
-     TK_TYPEHEADERCODE = 301,
-     TK_MODULE = 302,
-     TK_CMODULE = 303,
-     TK_CONSMODULE = 304,
-     TK_COMPOMODULE = 305,
-     TK_CLASS = 306,
-     TK_STRUCT = 307,
-     TK_PUBLIC = 308,
-     TK_PROTECTED = 309,
-     TK_PRIVATE = 310,
-     TK_SIGNALS = 311,
-     TK_SLOTS = 312,
-     TK_BOOL = 313,
-     TK_SHORT = 314,
-     TK_INT = 315,
-     TK_LONG = 316,
-     TK_FLOAT = 317,
-     TK_DOUBLE = 318,
-     TK_CHAR = 319,
-     TK_WCHAR_T = 320,
-     TK_VOID = 321,
-     TK_PYOBJECT = 322,
-     TK_PYTUPLE = 323,
-     TK_PYLIST = 324,
-     TK_PYDICT = 325,
-     TK_PYCALLABLE = 326,
-     TK_PYSLICE = 327,
-     TK_PYTYPE = 328,
-     TK_VIRTUAL = 329,
-     TK_ENUM = 330,
-     TK_SIGNED = 331,
-     TK_UNSIGNED = 332,
-     TK_SCOPE = 333,
-     TK_LOGICAL_OR = 334,
-     TK_CONST = 335,
-     TK_STATIC = 336,
-     TK_SIPSIGNAL = 337,
-     TK_SIPSLOT = 338,
-     TK_SIPANYSLOT = 339,
-     TK_SIPRXCON = 340,
-     TK_SIPRXDIS = 341,
-     TK_SIPSLOTCON = 342,
-     TK_SIPSLOTDIS = 343,
-     TK_NUMBER = 344,
-     TK_REAL = 345,
-     TK_TYPEDEF = 346,
-     TK_NAMESPACE = 347,
-     TK_TIMELINE = 348,
-     TK_PLATFORMS = 349,
-     TK_FEATURE = 350,
-     TK_LICENSE = 351,
-     TK_QCHAR = 352,
-     TK_TRUE = 353,
-     TK_FALSE = 354,
-     TK_NULL = 355,
-     TK_OPERATOR = 356,
-     TK_THROW = 357,
-     TK_QOBJECT = 358,
-     TK_EXCEPTION = 359,
-     TK_RAISECODE = 360,
-     TK_EXPLICIT = 361,
-     TK_TEMPLATE = 362,
-     TK_ELLIPSIS = 363,
-     TK_DEFMETATYPE = 364,
-     TK_DEFSUPERTYPE = 365
+     TK_VIRTERRORHANDLER = 283,
+     TK_TRAVERSECODE = 284,
+     TK_CLEARCODE = 285,
+     TK_GETBUFFERCODE = 286,
+     TK_RELEASEBUFFERCODE = 287,
+     TK_READBUFFERCODE = 288,
+     TK_WRITEBUFFERCODE = 289,
+     TK_SEGCOUNTCODE = 290,
+     TK_CHARBUFFERCODE = 291,
+     TK_PICKLECODE = 292,
+     TK_METHODCODE = 293,
+     TK_FROMTYPE = 294,
+     TK_TOTYPE = 295,
+     TK_TOSUBCLASS = 296,
+     TK_INCLUDE = 297,
+     TK_OPTINCLUDE = 298,
+     TK_IMPORT = 299,
+     TK_EXPHEADERCODE = 300,
+     TK_MODHEADERCODE = 301,
+     TK_TYPEHEADERCODE = 302,
+     TK_MODULE = 303,
+     TK_CMODULE = 304,
+     TK_CONSMODULE = 305,
+     TK_COMPOMODULE = 306,
+     TK_CLASS = 307,
+     TK_STRUCT = 308,
+     TK_PUBLIC = 309,
+     TK_PROTECTED = 310,
+     TK_PRIVATE = 311,
+     TK_SIGNALS = 312,
+     TK_SLOTS = 313,
+     TK_BOOL = 314,
+     TK_SHORT = 315,
+     TK_INT = 316,
+     TK_LONG = 317,
+     TK_FLOAT = 318,
+     TK_DOUBLE = 319,
+     TK_CHAR = 320,
+     TK_WCHAR_T = 321,
+     TK_VOID = 322,
+     TK_PYOBJECT = 323,
+     TK_PYTUPLE = 324,
+     TK_PYLIST = 325,
+     TK_PYDICT = 326,
+     TK_PYCALLABLE = 327,
+     TK_PYSLICE = 328,
+     TK_PYTYPE = 329,
+     TK_VIRTUAL = 330,
+     TK_ENUM = 331,
+     TK_SIGNED = 332,
+     TK_UNSIGNED = 333,
+     TK_SCOPE = 334,
+     TK_LOGICAL_OR = 335,
+     TK_CONST = 336,
+     TK_STATIC = 337,
+     TK_SIPSIGNAL = 338,
+     TK_SIPSLOT = 339,
+     TK_SIPANYSLOT = 340,
+     TK_SIPRXCON = 341,
+     TK_SIPRXDIS = 342,
+     TK_SIPSLOTCON = 343,
+     TK_SIPSLOTDIS = 344,
+     TK_NUMBER = 345,
+     TK_REAL = 346,
+     TK_TYPEDEF = 347,
+     TK_NAMESPACE = 348,
+     TK_TIMELINE = 349,
+     TK_PLATFORMS = 350,
+     TK_FEATURE = 351,
+     TK_LICENSE = 352,
+     TK_QCHAR = 353,
+     TK_TRUE = 354,
+     TK_FALSE = 355,
+     TK_NULL = 356,
+     TK_OPERATOR = 357,
+     TK_THROW = 358,
+     TK_QOBJECT = 359,
+     TK_EXCEPTION = 360,
+     TK_RAISECODE = 361,
+     TK_EXPLICIT = 362,
+     TK_TEMPLATE = 363,
+     TK_ELLIPSIS = 364,
+     TK_DEFMETATYPE = 365,
+     TK_DEFSUPERTYPE = 366
    };
 #endif
 /* Tokens.  */
@@ -175,89 +176,90 @@
 #define TK_PATHNAME 280
 #define TK_STRING 281
 #define TK_VIRTUALCATCHERCODE 282
-#define TK_TRAVERSECODE 283
-#define TK_CLEARCODE 284
-#define TK_GETBUFFERCODE 285
-#define TK_RELEASEBUFFERCODE 286
-#define TK_READBUFFERCODE 287
-#define TK_WRITEBUFFERCODE 288
-#define TK_SEGCOUNTCODE 289
-#define TK_CHARBUFFERCODE 290
-#define TK_PICKLECODE 291
-#define TK_METHODCODE 292
-#define TK_FROMTYPE 293
-#define TK_TOTYPE 294
-#define TK_TOSUBCLASS 295
-#define TK_INCLUDE 296
-#define TK_OPTINCLUDE 297
-#define TK_IMPORT 298
-#define TK_EXPHEADERCODE 299
-#define TK_MODHEADERCODE 300
-#define TK_TYPEHEADERCODE 301
-#define TK_MODULE 302
-#define TK_CMODULE 303
-#define TK_CONSMODULE 304
-#define TK_COMPOMODULE 305
-#define TK_CLASS 306
-#define TK_STRUCT 307
-#define TK_PUBLIC 308
-#define TK_PROTECTED 309
-#define TK_PRIVATE 310
-#define TK_SIGNALS 311
-#define TK_SLOTS 312
-#define TK_BOOL 313
-#define TK_SHORT 314
-#define TK_INT 315
-#define TK_LONG 316
-#define TK_FLOAT 317
-#define TK_DOUBLE 318
-#define TK_CHAR 319
-#define TK_WCHAR_T 320
-#define TK_VOID 321
-#define TK_PYOBJECT 322
-#define TK_PYTUPLE 323
-#define TK_PYLIST 324
-#define TK_PYDICT 325
-#define TK_PYCALLABLE 326
-#define TK_PYSLICE 327
-#define TK_PYTYPE 328
-#define TK_VIRTUAL 329
-#define TK_ENUM 330
-#define TK_SIGNED 331
-#define TK_UNSIGNED 332
-#define TK_SCOPE 333
-#define TK_LOGICAL_OR 334
-#define TK_CONST 335
-#define TK_STATIC 336
-#define TK_SIPSIGNAL 337
-#define TK_SIPSLOT 338
-#define TK_SIPANYSLOT 339
-#define TK_SIPRXCON 340
-#define TK_SIPRXDIS 341
-#define TK_SIPSLOTCON 342
-#define TK_SIPSLOTDIS 343
-#define TK_NUMBER 344
-#define TK_REAL 345
-#define TK_TYPEDEF 346
-#define TK_NAMESPACE 347
-#define TK_TIMELINE 348
-#define TK_PLATFORMS 349
-#define TK_FEATURE 350
-#define TK_LICENSE 351
-#define TK_QCHAR 352
-#define TK_TRUE 353
-#define TK_FALSE 354
-#define TK_NULL 355
-#define TK_OPERATOR 356
-#define TK_THROW 357
-#define TK_QOBJECT 358
-#define TK_EXCEPTION 359
-#define TK_RAISECODE 360
-#define TK_EXPLICIT 361
-#define TK_TEMPLATE 362
-#define TK_ELLIPSIS 363
-#define TK_DEFMETATYPE 364
-#define TK_DEFSUPERTYPE 365
+#define TK_VIRTERRORHANDLER 283
+#define TK_TRAVERSECODE 284
+#define TK_CLEARCODE 285
+#define TK_GETBUFFERCODE 286
+#define TK_RELEASEBUFFERCODE 287
+#define TK_READBUFFERCODE 288
+#define TK_WRITEBUFFERCODE 289
+#define TK_SEGCOUNTCODE 290
+#define TK_CHARBUFFERCODE 291
+#define TK_PICKLECODE 292
+#define TK_METHODCODE 293
+#define TK_FROMTYPE 294
+#define TK_TOTYPE 295
+#define TK_TOSUBCLASS 296
+#define TK_INCLUDE 297
+#define TK_OPTINCLUDE 298
+#define TK_IMPORT 299
+#define TK_EXPHEADERCODE 300
+#define TK_MODHEADERCODE 301
+#define TK_TYPEHEADERCODE 302
+#define TK_MODULE 303
+#define TK_CMODULE 304
+#define TK_CONSMODULE 305
+#define TK_COMPOMODULE 306
+#define TK_CLASS 307
+#define TK_STRUCT 308
+#define TK_PUBLIC 309
+#define TK_PROTECTED 310
+#define TK_PRIVATE 311
+#define TK_SIGNALS 312
+#define TK_SLOTS 313
+#define TK_BOOL 314
+#define TK_SHORT 315
+#define TK_INT 316
+#define TK_LONG 317
+#define TK_FLOAT 318
+#define TK_DOUBLE 319
+#define TK_CHAR 320
+#define TK_WCHAR_T 321
+#define TK_VOID 322
+#define TK_PYOBJECT 323
+#define TK_PYTUPLE 324
+#define TK_PYLIST 325
+#define TK_PYDICT 326
+#define TK_PYCALLABLE 327
+#define TK_PYSLICE 328
+#define TK_PYTYPE 329
+#define TK_VIRTUAL 330
+#define TK_ENUM 331
+#define TK_SIGNED 332
+#define TK_UNSIGNED 333
+#define TK_SCOPE 334
+#define TK_LOGICAL_OR 335
+#define TK_CONST 336
+#define TK_STATIC 337
+#define TK_SIPSIGNAL 338
+#define TK_SIPSLOT 339
+#define TK_SIPANYSLOT 340
+#define TK_SIPRXCON 341
+#define TK_SIPRXDIS 342
+#define TK_SIPSLOTCON 343
+#define TK_SIPSLOTDIS 344
+#define TK_NUMBER 345
+#define TK_REAL 346
+#define TK_TYPEDEF 347
+#define TK_NAMESPACE 348
+#define TK_TIMELINE 349
+#define TK_PLATFORMS 350
+#define TK_FEATURE 351
+#define TK_LICENSE 352
+#define TK_QCHAR 353
+#define TK_TRUE 354
+#define TK_FALSE 355
+#define TK_NULL 356
+#define TK_OPERATOR 357
+#define TK_THROW 358
+#define TK_QOBJECT 359
+#define TK_EXCEPTION 360
+#define TK_RAISECODE 361
+#define TK_EXPLICIT 362
+#define TK_TEMPLATE 363
+#define TK_ELLIPSIS 364
+#define TK_DEFMETATYPE 365
+#define TK_DEFSUPERTYPE 366
 
 
 
@@ -286,7 +288,7 @@
     classDef        *klass;
 }
 /* Line 1489 of yacc.c.  */
-#line 290 "parser.h"
+#line 292 "parser.h"
 	YYSTYPE;
 # define yystype YYSTYPE /* obsolescent; will be withdrawn */
 # define YYSTYPE_IS_DECLARED 1
Only in sip/sipgen: parser.o
Only in sip/sipgen: parser.obj
Only in sip/sipgen: parser.tab.c
Only in sip/sipgen: parser.tab.h
diff -ru sip-4.9.1/sipgen/parser.y sip/sipgen/parser.y
--- sip-4.9.1/sipgen/parser.y	2009-10-23 10:13:16.000000000 -0700
+++ sip/sipgen/parser.y	2009-10-23 11:00:04.138250000 -0700
@@ -182,6 +182,7 @@
 %token <text>   TK_PATHNAME
 %token <text>   TK_STRING
 %token          TK_VIRTUALCATCHERCODE
+%token          TK_VIRTERRORHANDLER
 %token          TK_TRAVERSECODE
 %token          TK_CLEARCODE
 %token          TK_GETBUFFERCODE
@@ -396,6 +397,7 @@
     |   mappedtype
     |   mappedtypetmpl
     |   nsstatement
+    |   virterrorhandler
     ;
 
 nsstatement:    ifstart
@@ -771,6 +773,11 @@
         }
     ;
 
+virterrorhandler:    TK_VIRTERRORHANDLER TK_NAME {
+            currentModule->virterrorhandler = $2;
+        }
+    ;
+
 feature:    TK_FEATURE TK_NAME {
             newQualifier(currentModule,-1,-1,$2,feature_qualifier);
         }
@@ -3350,6 +3357,12 @@
             setHasDelayedDtors(mod);
         }
 
+        if ((flg = findOptFlag(of,"VirtualErrorHandler",opt_name_flag)) != NULL)
+        {
+            cd->virterrorhandler = flg->fvalue.sval;
+        }
+
+
         /*
          * There are subtle differences between the add and concat methods and
          * the multiply and repeat methods.  The number versions can have their
@@ -4976,6 +4989,9 @@
         }
     }
 
+    of = findOptFlag(optflgs,"VirtualErrorHandler",opt_name_flag);
+    od->virterrorhandler = 0;
+
     if (isvirt)
     {
         if (isSignal(od) && pluginPyQt3(pt))
@@ -4991,6 +5007,11 @@
         vhd->pysig = &od->pysig;
         vhd->cppsig = (cppsig != NULL ? cppsig : &od->pysig);
         vhd->virtcode = vcode;
+        od->virterrorhandler = ((of && of -> fvalue.sval) ? of -> fvalue.sval : 0);
+ 
+        if( od->virterrorhandler ) {
+            printf( "VirtualErrorHandler set to %s\n", od->virterrorhandler );
+        }
 
         if (factory || xferback)
             setIsTransferVH(vhd);
@@ -5006,12 +5027,18 @@
             vhd->next = mod->virthandlers;
             mod->virthandlers = vhd;
         }
+
+        if (of && !of -> fvalue.sval)
+            yyerror("%VirtualErrorHandler annotation must provide the name of the handler");
     }
     else
     {
         if (vcode != NULL)
             yyerror("%VirtualCatcherCode provided for non-virtual function");
 
+        if (of != NULL)
+            yyerror("%VirtualErrorHandler provided for non-virtual function");
+
         vhd = NULL;
     }
 
Only in sip/sipgen: sip.exe
Only in sip/sipgen: sip.exe.manifest
diff -ru sip-4.9.1/sipgen/sip.h sip/sipgen/sip.h
--- sip-4.9.1/sipgen/sip.h	2009-10-23 10:13:16.000000000 -0700
+++ sip/sipgen/sip.h	2009-10-23 10:51:57.732000000 -0700
@@ -728,6 +728,7 @@
     int nrvirthandlers;                 /* The nr. of virtual handlers. */
     int next_key;                       /* The next key to allocate. */
     struct _virtHandlerDef *virthandlers;   /* The virtual handlers. */
+    char * virterrorhandler;            /* Name of the default virtual error handler */
     licenseDef *license;                /* The software license. */
     struct _classDef *proxies;          /* The list of proxy classes. */
     struct _moduleDef *container;       /* The container module, if any. */
@@ -866,6 +867,7 @@
     virtHandlerDef *virthandler;        /* The virtual handler. */
     char *prehook;                      /* The pre-hook name. */
     char *posthook;                     /* The post-hook name. */
+    char *virterrorhandler;             /* Name of function used to handle python exceptions that occur in overridden virtual handlers */
     struct _overDef *next;              /* Next in the list. */
 } overDef;
 
@@ -969,6 +971,7 @@
     int classflags;                     /* The class flags. */
     int pyqt4_flags;                    /* The PyQt4 specific flags. */
     nameDef *pyname;                    /* The Python name. */
+    char * virterrorhandler;            /* Name of the default virtual error handler for the class */
     ifaceFileDef *iff;                  /* The interface file. */
     struct _classDef *ecd;              /* The enclosing scope. */
     struct _classDef *real;             /* The real class if this is a proxy or extender. */
diff -ru sip-4.9.1/sipgen/transform.c sip/sipgen/transform.c
--- sip-4.9.1/sipgen/transform.c	2009-10-23 10:13:16.000000000 -0700
+++ sip/sipgen/transform.c	2009-10-23 11:21:42.888250000 -0700
@@ -1590,7 +1590,13 @@
                 for (od = mrocd->overs; od != NULL; od = od->next)
                     if (od->common == md)
                     {
-                        if (isAbstract(od))
+                        /*
+                         * Mark classes as abstract if they have abstract virtual methods.
+                         * but only if the method is directly in the class, not inherited,
+                         * because the abstract method may already be implemented in a
+                         * derived class.
+                         */
+                        if (isAbstract(od) && mrocd == cd)
                             setIsAbstractClass(cd);
 
                         ifaceFilesAreUsedByOverload(&cd->iff->used, od);
Only in sip/sipgen: transform.o
Only in sip/sipgen: transform.obj
Only in sip/siplib: .svn
Only in sip/siplib: Makefile
Only in sip/siplib: apiversions.obj
Only in sip/siplib: bool.o
Only in sip/siplib: bool.obj
Only in sip/siplib: descriptors.o
Only in sip/siplib: descriptors.obj
Only in sip/siplib: objmap.o
Only in sip/siplib: objmap.obj
Only in sip/siplib: pysip.exp
Only in sip/siplib: pysip.lib
Only in sip/siplib: qtlib.o
Only in sip/siplib: qtlib.obj
Only in sip/siplib: sip.exp
diff -ru sip-4.9.1/siplib/sip.h sip/siplib/sip.h
--- sip-4.9.1/siplib/sip.h	2009-10-23 10:13:18.000000000 -0700
+++ sip/siplib/sip.h	2009-10-23 10:43:12.497625000 -0700
@@ -1328,6 +1328,8 @@
 #endif
     int (*api_deprecated)(const char *classname, const char *method);
     void (*api_keep_reference)(PyObject *self, int key, PyObject *obj);
+
+    sipExportedModuleDef * (*api_find_module)(const char * name);
 } sipAPIDef;
 
 
Only in sip/siplib: sip.lib
Only in sip/siplib: sip.pyd
Only in sip/siplib: sip.pyd.manifest
Only in sip/siplib: sip_d.lib
Only in sip/siplib: sip_d.pyd
diff -ru sip-4.9.1/siplib/siplib.c sip/siplib/siplib.c
--- sip-4.9.1/siplib/siplib.c	2009-10-23 10:13:18.000000000 -0700
+++ sip/siplib/siplib.c	2009-10-23 10:49:04.560125000 -0700
@@ -137,6 +137,7 @@
 static void sip_api_clear_any_slot_reference(sipSlot *slot);
 static int sip_api_visit_slot(sipSlot *slot, visitproc visit, void *arg);
 static void sip_api_keep_reference(PyObject *self, int key, PyObject *obj);
+static sipExportedModuleDef * sip_api_find_module(const char * name);
 
 
 /*
@@ -246,6 +247,7 @@
     sip_api_unicode_as_wstring,
     sip_api_deprecated,
     sip_api_keep_reference
+    ,sip_api_find_module
 };
 
 
@@ -9906,3 +9908,17 @@
 }
 
 #endif
+
+
+/*
+ * Return the registered sip module's sipExportedModuleDef according
+ * to the modules name. NULL is returned if the module is not registered
+ */
+static sipExportedModuleDef * sip_api_find_module(const char *name)
+{
+    sipExportedModuleDef * em;
+    for (em = moduleList; em != NULL; em = em->em_next)
+        if (strcmp(sipNameOfModule(em),name) == 0)
+            return em;
+    return 0;
+}
Only in sip/siplib: siplib.o
Only in sip/siplib: siplib.obj
Only in sip/siplib: threads.o
Only in sip/siplib: threads.obj
diff -ru sip-4.9.1/siputils.py sip/siputils.py
--- sip-4.9.1/siputils.py	2009-10-23 10:13:16.000000000 -0700
+++ sip/siputils.py	2009-10-23 11:58:57.903875000 -0700
@@ -1527,12 +1527,13 @@
         mfile.write("\n$(TARGET): $(OFILES)\n")
 
         if self.generator in ("MSVC", "MSVC.NET"):
+            implib = 'py' + self._target + '.lib'
             if self.static:
                 mfile.write("\t$(LIB) /OUT:$(TARGET) @<<\n")
                 mfile.write("\t  $(OFILES)\n")
                 mfile.write("<<\n")
             else:
-                mfile.write("\t$(LINK) $(LFLAGS) /OUT:$(TARGET) @<<\n")
+                mfile.write("\t$(LINK) $(LFLAGS) /OUT:$(TARGET) /IMPLIB:%s @<<\n" % implib)
                 mfile.write("\t  $(OFILES) $(LIBS)\n")
                 mfile.write("<<\n")
 
Only in sip/: siputils.pyc
Only in sip/specs: .svn

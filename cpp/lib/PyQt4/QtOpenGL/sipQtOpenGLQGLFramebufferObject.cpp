/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:29 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtOpenGL.h"

#line 39 "sip/QtOpenGL/qglframebufferobject.sip"
#include <qglframebufferobject.h>
#line 39 "sipQtOpenGLQGLFramebufferObject.cpp"

#line 41 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 43 "sipQtOpenGLQGLFramebufferObject.cpp"
#line 37 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 46 "sipQtOpenGLQGLFramebufferObject.cpp"
#line 69 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 49 "sipQtOpenGLQGLFramebufferObject.cpp"
#line 41 "sip/QtGui/qimage.sip"
#include <qimage.h>
#line 52 "sipQtOpenGLQGLFramebufferObject.cpp"
#line 160 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 55 "sipQtOpenGLQGLFramebufferObject.cpp"
#line 94 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 58 "sipQtOpenGLQGLFramebufferObject.cpp"


class sipQGLFramebufferObject : public QGLFramebufferObject
{
public:
    sipQGLFramebufferObject(const QSize&,GLenum);
    sipQGLFramebufferObject(int,int,GLenum);
    sipQGLFramebufferObject(const QSize&,QGLFramebufferObject::Attachment,GLenum,GLenum);
    sipQGLFramebufferObject(int,int,QGLFramebufferObject::Attachment,GLenum,GLenum);
    virtual ~sipQGLFramebufferObject();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtectVirt_metric(bool,QPaintDevice::PaintDeviceMetric) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QPaintEngine * paintEngine() const;
    int metric(QPaintDevice::PaintDeviceMetric) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGLFramebufferObject(const sipQGLFramebufferObject &);
    sipQGLFramebufferObject &operator = (const sipQGLFramebufferObject &);

    char sipPyMethods[2];
};

sipQGLFramebufferObject::sipQGLFramebufferObject(const QSize& a0,GLenum a1): QGLFramebufferObject(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGLFramebufferObject::sipQGLFramebufferObject(int a0,int a1,GLenum a2): QGLFramebufferObject(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGLFramebufferObject::sipQGLFramebufferObject(const QSize& a0,QGLFramebufferObject::Attachment a1,GLenum a2,GLenum a3): QGLFramebufferObject(a0,a1,a2,a3), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGLFramebufferObject::sipQGLFramebufferObject(int a0,int a1,QGLFramebufferObject::Attachment a2,GLenum a3,GLenum a4): QGLFramebufferObject(a0,a1,a2,a3,a4), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGLFramebufferObject::~sipQGLFramebufferObject()
{
    sipCommonDtor(sipPySelf);
}

QPaintEngine * sipQGLFramebufferObject::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_paintEngine);

    if (!meth)
        return QGLFramebufferObject::paintEngine();

    typedef QPaintEngine * (*sipVH_QtGui_28)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtGui_28)(sipModuleAPI_QtOpenGL_QtGui->em_virthandlers[28]))(sipGILState,meth,0);
}

int sipQGLFramebufferObject::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_metric);

    if (!meth)
        return QGLFramebufferObject::metric(a0);

    typedef int (*sipVH_QtGui_15)(sip_gilstate_t,PyObject *,bool*,QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_15)(sipModuleAPI_QtOpenGL_QtGui->em_virthandlers[15]))(sipGILState,meth,0,a0);
}

int sipQGLFramebufferObject::sipProtectVirt_metric(bool sipSelfWasArg,QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ? QGLFramebufferObject::metric(a0) : metric(a0));
}


extern "C" {static PyObject *meth_QGLFramebufferObject_attachment(PyObject *, PyObject *);}
static PyObject *meth_QGLFramebufferObject_attachment(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGLFramebufferObject,&sipCpp))
        {
            QGLFramebufferObject::Attachment sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->attachment();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QGLFramebufferObject_Attachment);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFramebufferObject,sipName_attachment);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFramebufferObject_isValid(PyObject *, PyObject *);}
static PyObject *meth_QGLFramebufferObject_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGLFramebufferObject,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFramebufferObject,sipName_isValid);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFramebufferObject_bind(PyObject *, PyObject *);}
static PyObject *meth_QGLFramebufferObject_bind(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGLFramebufferObject,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->bind();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFramebufferObject,sipName_bind);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFramebufferObject_isBound(PyObject *, PyObject *);}
static PyObject *meth_QGLFramebufferObject_isBound(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGLFramebufferObject,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isBound();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFramebufferObject,sipName_isBound);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFramebufferObject_release(PyObject *, PyObject *);}
static PyObject *meth_QGLFramebufferObject_release(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGLFramebufferObject,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->release();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFramebufferObject,sipName_release);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFramebufferObject_texture(PyObject *, PyObject *);}
static PyObject *meth_QGLFramebufferObject_texture(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGLFramebufferObject,&sipCpp))
        {
            GLuint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->texture();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFramebufferObject,sipName_texture);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFramebufferObject_drawTexture(PyObject *, PyObject *);}
static PyObject *meth_QGLFramebufferObject_drawTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QRectF * a0;
        GLuint a1;
        GLenum a2 = GL_TEXTURE_2D;
        QGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9u|u",&sipSelf,sipType_QGLFramebufferObject,&sipCpp,sipType_QRectF,&a0,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawTexture(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPointF * a0;
        GLuint a1;
        GLenum a2 = GL_TEXTURE_2D;
        QGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9u|u",&sipSelf,sipType_QGLFramebufferObject,&sipCpp,sipType_QPointF,&a0,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawTexture(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFramebufferObject,sipName_drawTexture);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFramebufferObject_size(PyObject *, PyObject *);}
static PyObject *meth_QGLFramebufferObject_size(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGLFramebufferObject,&sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->size());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFramebufferObject,sipName_size);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFramebufferObject_toImage(PyObject *, PyObject *);}
static PyObject *meth_QGLFramebufferObject_toImage(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGLFramebufferObject,&sipCpp))
        {
            QImage *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QImage(sipCpp->toImage());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFramebufferObject,sipName_toImage);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFramebufferObject_paintEngine(PyObject *, PyObject *);}
static PyObject *meth_QGLFramebufferObject_paintEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGLFramebufferObject,&sipCpp))
        {
            QPaintEngine *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QGLFramebufferObject::paintEngine() : sipCpp->paintEngine());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QPaintEngine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFramebufferObject,sipName_paintEngine);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFramebufferObject_handle(PyObject *, PyObject *);}
static PyObject *meth_QGLFramebufferObject_handle(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGLFramebufferObject,&sipCpp))
        {
            GLuint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->handle();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFramebufferObject,sipName_handle);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFramebufferObject_hasOpenGLFramebufferObjects(PyObject *, PyObject *);}
static PyObject *meth_QGLFramebufferObject_hasOpenGLFramebufferObjects(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QGLFramebufferObject::hasOpenGLFramebufferObjects();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFramebufferObject,sipName_hasOpenGLFramebufferObjects);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFramebufferObject_metric(PyObject *, PyObject *);}
static PyObject *meth_QGLFramebufferObject_metric(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        sipQGLFramebufferObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pE",&sipSelf,sipType_QGLFramebufferObject,&sipCpp,sipType_QPaintDevice_PaintDeviceMetric,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFramebufferObject,sipName_metric);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QGLFramebufferObject(void *, const sipTypeDef *);}
static void *cast_QGLFramebufferObject(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QGLFramebufferObject)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QPaintDevice)->ctd_cast((QPaintDevice *)(QGLFramebufferObject *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGLFramebufferObject(void *, int);}
static void release_QGLFramebufferObject(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQGLFramebufferObject *>(sipCppV);
    else
        delete reinterpret_cast<QGLFramebufferObject *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QGLFramebufferObject(sipSimpleWrapper *);}
static void dealloc_QGLFramebufferObject(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQGLFramebufferObject *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QGLFramebufferObject(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QGLFramebufferObject(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QGLFramebufferObject(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    sipQGLFramebufferObject *sipCpp = 0;

    if (!sipCpp)
    {
        const QSize * a0;
        GLenum a1 = GL_TEXTURE_2D;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9|u",sipType_QSize,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQGLFramebufferObject(*a0,a1);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        int a0;
        int a1;
        GLenum a2 = GL_TEXTURE_2D;

        if (sipParseArgs(sipArgsParsed,sipArgs,"ii|u",&a0,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQGLFramebufferObject(a0,a1,a2);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QSize * a0;
        QGLFramebufferObject::Attachment a1;
        GLenum a2 = GL_TEXTURE_2D;
        GLenum a3 = GL_RGBA8;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9E|uu",sipType_QSize,&a0,sipType_QGLFramebufferObject_Attachment,&a1,&a2,&a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQGLFramebufferObject(*a0,a1,a2,a3);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        int a0;
        int a1;
        QGLFramebufferObject::Attachment a2;
        GLenum a3 = GL_TEXTURE_2D;
        GLenum a4 = GL_RGBA8;

        if (sipParseArgs(sipArgsParsed,sipArgs,"iiE|uu",&a0,&a1,sipType_QGLFramebufferObject_Attachment,&a2,&a3,&a4))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQGLFramebufferObject(a0,a1,a2,a3,a4);
            Py_END_ALLOW_THREADS
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGLFramebufferObject[] = {{318, 1, 1}};


static PyMethodDef methods_QGLFramebufferObject[] = {
    {SIP_MLNAME_CAST(sipName_attachment), meth_QGLFramebufferObject_attachment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_bind), meth_QGLFramebufferObject_bind, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawTexture), meth_QGLFramebufferObject_drawTexture, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_handle), meth_QGLFramebufferObject_handle, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasOpenGLFramebufferObjects), meth_QGLFramebufferObject_hasOpenGLFramebufferObjects, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isBound), meth_QGLFramebufferObject_isBound, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QGLFramebufferObject_isValid, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_metric), meth_QGLFramebufferObject_metric, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paintEngine), meth_QGLFramebufferObject_paintEngine, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_release), meth_QGLFramebufferObject_release, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_size), meth_QGLFramebufferObject_size, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_texture), meth_QGLFramebufferObject_texture, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toImage), meth_QGLFramebufferObject_toImage, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QGLFramebufferObject[] = {
    {sipName_CombinedDepthStencil, QGLFramebufferObject::CombinedDepthStencil, 9},
    {sipName_Depth, QGLFramebufferObject::Depth, 9},
    {sipName_NoAttachment, QGLFramebufferObject::NoAttachment, 9},
};


pyqt4ClassTypeDef sipTypeDef_QtOpenGL_QGLFramebufferObject = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QGLFramebufferObject,
        {0}
    },
    {
        sipNameNr_QGLFramebufferObject,
        {0, 0, 1},
        13, methods_QGLFramebufferObject,
        3, enummembers_QGLFramebufferObject,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QGLFramebufferObject,
    0,
    init_QGLFramebufferObject,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGLFramebufferObject,
    0,
    0,
    0,
    release_QGLFramebufferObject,
    cast_QGLFramebufferObject,
    0,
    0,
    0
},
    0,
    0,
    0
};

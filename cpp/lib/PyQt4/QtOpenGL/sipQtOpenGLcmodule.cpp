/*
 * Module code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:29 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtOpenGL.h"

#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 39 "sipQtOpenGLcmodule.cpp"
#line 191 "sip/QtOpenGL/qgl.sip"
#include <qgl.h>
#line 42 "sipQtOpenGLcmodule.cpp"
#line 44 "sip/QtOpenGL/qgl.sip"
#include <qgl.h>
#line 45 "sipQtOpenGLcmodule.cpp"
#line 81 "sip/QtOpenGL/qgl.sip"
#include <qgl.h>
#line 48 "sipQtOpenGLcmodule.cpp"
#line 81 "sip/QtOpenGL/qgl.sip"
#include <qgl.h>
#line 51 "sipQtOpenGLcmodule.cpp"
#line 37 "sip/QtOpenGL/qglcolormap.sip"
#include <qglcolormap.h>
#line 54 "sipQtOpenGLcmodule.cpp"

/* Define the strings used by this module. */
const char sipStrings_QtOpenGL[] = {
    'Q', 'G', 'L', 'F', 'r', 'a', 'm', 'e', 'b', 'u', 'f', 'f', 'e', 'r', 'O', 'b', 'j', 'e', 'c', 't', ':', ':', 'A', 't', 't', 'a', 'c', 'h', 'm', 'e', 'n', 't', 0,
    'O', 'p', 'e', 'n', 'G', 'L', '_', 'E', 'S', '_', 'C', 'o', 'm', 'm', 'o', 'n', 'L', 'i', 't', 'e', '_', 'V', 'e', 'r', 's', 'i', 'o', 'n', '_', '1', '_', '1', 0,
    'O', 'p', 'e', 'n', 'G', 'L', '_', 'E', 'S', '_', 'C', 'o', 'm', 'm', 'o', 'n', 'L', 'i', 't', 'e', '_', 'V', 'e', 'r', 's', 'i', 'o', 'n', '_', '1', '_', '0', 0,
    'Q', 'G', 'L', 'F', 'o', 'r', 'm', 'a', 't', ':', ':', 'O', 'p', 'e', 'n', 'G', 'L', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'F', 'l', 'a', 'g', 's', 0,
    'O', 'p', 'e', 'n', 'G', 'L', '_', 'E', 'S', '_', 'C', 'o', 'm', 'm', 'o', 'n', '_', 'V', 'e', 'r', 's', 'i', 'o', 'n', '_', '1', '_', '1', 0,
    'O', 'p', 'e', 'n', 'G', 'L', '_', 'E', 'S', '_', 'C', 'o', 'm', 'm', 'o', 'n', '_', 'V', 'e', 'r', 's', 'i', 'o', 'n', '_', '1', '_', '0', 0,
    'Q', 'G', 'L', 'F', 'o', 'r', 'm', 'a', 't', ':', ':', 'O', 'p', 'e', 'n', 'G', 'L', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'F', 'l', 'a', 'g', 0,
    'P', 'y', 'Q', 't', '4', '.', 'Q', 't', 'C', 'o', 'r', 'e', '.', 'p', 'y', 'q', 't', 'W', 'r', 'a', 'p', 'p', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    'h', 'a', 's', 'O', 'p', 'e', 'n', 'G', 'L', 'F', 'r', 'a', 'm', 'e', 'b', 'u', 'f', 'f', 'e', 'r', 'O', 'b', 'j', 'e', 'c', 't', 's', 0,
    'r', 'e', 'l', 'e', 'a', 's', 'e', 'F', 'r', 'o', 'm', 'D', 'y', 'n', 'a', 'm', 'i', 'c', 'T', 'e', 'x', 't', 'u', 'r', 'e', 0,
    'g', 'e', 'n', 'e', 'r', 'a', 't', 'e', 'F', 'o', 'n', 't', 'D', 'i', 's', 'p', 'l', 'a', 'y', 'L', 'i', 's', 't', 's', 0,
    'o', 'v', 'e', 'r', 'l', 'a', 'y', 'T', 'r', 'a', 'n', 's', 'p', 'a', 'r', 'e', 'n', 't', 'C', 'o', 'l', 'o', 'r', 0,
    's', 'e', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'O', 'v', 'e', 'r', 'l', 'a', 'y', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'g', 'e', 'n', 'e', 'r', 'a', 't', 'e', 'D', 'y', 'n', 'a', 'm', 'i', 'c', 'T', 'e', 'x', 't', 'u', 'r', 'e', 0,
    'w', 'i', 'n', 'd', 'o', 'w', 'A', 'c', 't', 'i', 'v', 'a', 't', 'i', 'o', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'O', 'p', 'e', 'n', 'G', 'L', '_', 'E', 'S', '_', 'V', 'e', 'r', 's', 'i', 'o', 'n', '_', '2', '_', '0', 0,
    'm', 'o', 'u', 's', 'e', 'D', 'o', 'u', 'b', 'l', 'e', 'C', 'l', 'i', 'c', 'k', 'E', 'v', 'e', 'n', 't', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'D', 'y', 'n', 'a', 'm', 'i', 'c', 'T', 'e', 'x', 't', 'u', 'r', 'e', 0,
    'b', 'i', 'n', 'd', 'T', 'o', 'D', 'y', 'n', 'a', 'm', 'i', 'c', 'T', 'e', 'x', 't', 'u', 'r', 'e', 0,
    'C', 'o', 'm', 'b', 'i', 'n', 'e', 'd', 'D', 'e', 'p', 't', 'h', 'S', 't', 'e', 'n', 'c', 'i', 'l', 0,
    'Q', 'G', 'L', 'F', 'r', 'a', 'm', 'e', 'b', 'u', 'f', 'f', 'e', 'r', 'O', 'b', 'j', 'e', 'c', 't', 0,
    's', 'e', 't', 'T', 'e', 'x', 't', 'u', 'r', 'e', 'C', 'a', 'c', 'h', 'e', 'L', 'i', 'm', 'i', 't', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'O', 'v', 'e', 'r', 'l', 'a', 'y', 'F', 'o', 'r', 'm', 'a', 't', 0,
    's', 'e', 't', 'S', 't', 'e', 'n', 'c', 'i', 'l', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    'f', 'o', 'n', 't', 'D', 'i', 's', 'p', 'l', 'a', 'y', 'L', 'i', 's', 't', 'B', 'a', 's', 'e', 0,
    'i', 'n', 'i', 't', 'i', 'a', 'l', 'i', 'z', 'e', 'O', 'v', 'e', 'r', 'l', 'a', 'y', 'G', 'L', 0,
    'O', 'p', 'e', 'n', 'G', 'L', '_', 'V', 'e', 'r', 's', 'i', 'o', 'n', '_', 'N', 'o', 'n', 'e', 0,
    'm', 'a', 'k', 'e', 'O', 'v', 'e', 'r', 'l', 'a', 'y', 'C', 'u', 'r', 'r', 'e', 'n', 't', 0,
    'o', 'p', 'e', 'n', 'G', 'L', 'V', 'e', 'r', 's', 'i', 'o', 'n', 'F', 'l', 'a', 'g', 's', 0,
    's', 'e', 't', 'G', 'r', 'e', 'e', 'n', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    's', 'e', 't', 'D', 'i', 'r', 'e', 'c', 't', 'R', 'e', 'n', 'd', 'e', 'r', 'i', 'n', 'g', 0,
    's', 'e', 't', 'A', 'l', 'p', 'h', 'a', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    's', 'e', 't', 'A', 'c', 'c', 'u', 'm', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    's', 'e', 't', 'D', 'e', 'p', 't', 'h', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    'O', 'p', 'e', 'n', 'G', 'L', '_', 'V', 'e', 'r', 's', 'i', 'o', 'n', '_', '3', '_', '0', 0,
    'O', 'p', 'e', 'n', 'G', 'L', '_', 'V', 'e', 'r', 's', 'i', 'o', 'n', '_', '2', '_', '1', 0,
    'O', 'p', 'e', 'n', 'G', 'L', '_', 'V', 'e', 'r', 's', 'i', 'o', 'n', '_', '2', '_', '0', 0,
    'O', 'p', 'e', 'n', 'G', 'L', '_', 'V', 'e', 'r', 's', 'i', 'o', 'n', '_', '1', '_', '5', 0,
    'O', 'p', 'e', 'n', 'G', 'L', '_', 'V', 'e', 'r', 's', 'i', 'o', 'n', '_', '1', '_', '4', 0,
    'O', 'p', 'e', 'n', 'G', 'L', '_', 'V', 'e', 'r', 's', 'i', 'o', 'n', '_', '1', '_', '3', 0,
    'O', 'p', 'e', 'n', 'G', 'L', '_', 'V', 'e', 'r', 's', 'i', 'o', 'n', '_', '1', '_', '2', 0,
    'O', 'p', 'e', 'n', 'G', 'L', '_', 'V', 'e', 'r', 's', 'i', 'o', 'n', '_', '1', '_', '1', 0,
    'Q', 'G', 'L', ':', ':', 'F', 'o', 'r', 'm', 'a', 't', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'f', 'o', 'c', 'u', 's', 'P', 'r', 'e', 'v', 'i', 'o', 'u', 's', 'C', 'h', 'i', 'l', 'd', 0,
    'f', 'o', 'c', 'u', 's', 'N', 'e', 'x', 't', 'P', 'r', 'e', 'v', 'C', 'h', 'i', 'l', 'd', 0,
    'h', 'a', 's', 'O', 'p', 'e', 'n', 'G', 'L', 'P', 'b', 'u', 'f', 'f', 'e', 'r', 's', 0,
    's', 'e', 't', 'A', 'u', 't', 'o', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'w', 'a', 'p', 0,
    'c', 'o', 'n', 'v', 'e', 'r', 't', 'T', 'o', 'G', 'L', 'F', 'o', 'r', 'm', 'a', 't', 0,
    't', 'e', 'x', 't', 'u', 'r', 'e', 'C', 'a', 'c', 'h', 'e', 'L', 'i', 'm', 'i', 't', 0,
    's', 'e', 't', 'B', 'l', 'u', 'e', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    'h', 'a', 's', 'O', 'p', 'e', 'n', 'G', 'L', 'O', 'v', 'e', 'r', 'l', 'a', 'y', 's', 0,
    's', 't', 'e', 'n', 'c', 'i', 'l', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    'I', 'n', 'd', 'i', 'r', 'e', 'c', 't', 'R', 'e', 'n', 'd', 'e', 'r', 'i', 'n', 'g', 0,
    'Q', 'G', 'L', ':', ':', 'F', 'o', 'r', 'm', 'a', 't', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'r', 'e', 's', 'e', 't', 'I', 'n', 'p', 'u', 't', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    'm', 'o', 'u', 's', 'e', 'R', 'e', 'l', 'e', 'a', 's', 'e', 'E', 'v', 'e', 'n', 't', 0,
    's', 'i', 'p', '.', 's', 'i', 'm', 'p', 'l', 'e', 'w', 'r', 'a', 'p', 'p', 'e', 'r', 0,
    's', 'e', 't', 'W', 'i', 'n', 'd', 'o', 'w', 'C', 'r', 'e', 'a', 't', 'e', 'd', 0,
    's', 'e', 't', 'R', 'e', 'd', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    's', 'e', 't', 'S', 'a', 'm', 'p', 'l', 'e', 'B', 'u', 'f', 'f', 'e', 'r', 's', 0,
    's', 'e', 't', 'M', 'o', 'u', 's', 'e', 'T', 'r', 'a', 'c', 'k', 'i', 'n', 'g', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'M', 'i', 'c', 'r', 'o', 'F', 'o', 'c', 'u', 's', 0,
    'c', 'o', 'n', 't', 'e', 'x', 't', 'M', 'e', 'n', 'u', 'E', 'v', 'e', 'n', 't', 0,
    'i', 'n', 'p', 'u', 't', 'M', 'e', 't', 'h', 'o', 'd', 'E', 'v', 'e', 'n', 't', 0,
    'i', 'n', 'p', 'u', 't', 'M', 'e', 't', 'h', 'o', 'd', 'Q', 'u', 'e', 'r', 'y', 0,
    's', 'e', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'd', 'i', 's', 'c', 'o', 'n', 'n', 'e', 'c', 't', 'N', 'o', 't', 'i', 'f', 'y', 0,
    'r', 'e', 's', 'i', 'z', 'e', 'O', 'v', 'e', 'r', 'l', 'a', 'y', 'G', 'L', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'O', 'v', 'e', 'r', 'l', 'a', 'y', 'G', 'L', 0,
    'g', 'r', 'a', 'b', 'F', 'r', 'a', 'm', 'e', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    'r', 'e', 'q', 'u', 'e', 's', 't', 'e', 'd', 'F', 'o', 'r', 'm', 'a', 't', 0,
    's', 'e', 't', 'S', 'w', 'a', 'p', 'I', 'n', 't', 'e', 'r', 'v', 'a', 'l', 0,
    'g', 'r', 'e', 'e', 'n', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    's', 'e', 't', 'D', 'o', 'u', 'b', 'l', 'e', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    'a', 'l', 'p', 'h', 'a', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    'a', 'c', 'c', 'u', 'm', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    'd', 'e', 'p', 't', 'h', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    'N', 'o', 'S', 'a', 'm', 'p', 'l', 'e', 'B', 'u', 'f', 'f', 'e', 'r', 's', 0,
    'N', 'o', 'S', 't', 'e', 'r', 'e', 'o', 'B', 'u', 'f', 'f', 'e', 'r', 's', 0,
    'N', 'o', 'S', 't', 'e', 'n', 'c', 'i', 'l', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    'm', 'i', 'n', 'i', 'm', 'u', 'm', 'S', 'i', 'z', 'e', 'H', 'i', 'n', 't', 0,
    'm', 'o', 'u', 's', 'e', 'P', 'r', 'e', 's', 's', 'E', 'v', 'e', 'n', 't', 0,
    'k', 'e', 'y', 'R', 'e', 'l', 'e', 'a', 's', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'Q', 'G', 'L', 'P', 'i', 'x', 'e', 'l', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    'a', 'u', 't', 'o', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'w', 'a', 'p', 0,
    'p', 'a', 'i', 'n', 't', 'O', 'v', 'e', 'r', 'l', 'a', 'y', 'G', 'L', 0,
    'o', 'v', 'e', 'r', 'l', 'a', 'y', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    's', 'e', 't', 'I', 'n', 'i', 't', 'i', 'a', 'l', 'i', 'z', 'e', 'd', 0,
    'd', 'e', 'v', 'i', 'c', 'e', 'I', 's', 'P', 'i', 'x', 'm', 'a', 'p', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    'g', 'e', 't', 'P', 'r', 'o', 'c', 'A', 'd', 'd', 'r', 'e', 's', 's', 0,
    'b', 'l', 'u', 'e', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    'N', 'o', 'A', 'l', 'p', 'h', 'a', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 0,
    'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'f', 'o', 'c', 'u', 's', 'N', 'e', 'x', 't', 'C', 'h', 'i', 'l', 'd', 0,
    'h', 'e', 'i', 'g', 'h', 't', 'F', 'o', 'r', 'W', 'i', 'd', 't', 'h', 0,
    'd', 'r', 'a', 'g', 'L', 'e', 'a', 'v', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'd', 'r', 'a', 'g', 'E', 'n', 't', 'e', 'r', 'E', 'v', 'e', 'n', 't', 0,
    'm', 'o', 'u', 's', 'e', 'M', 'o', 'v', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'P', 'y', 'Q', 't', '4', '.', 'Q', 't', 'O', 'p', 'e', 'n', 'G', 'L', 0,
    'q', 'g', 'l', 'C', 'l', 'e', 'a', 'r', 'C', 'o', 'l', 'o', 'r', 0,
    'w', 'i', 'n', 'd', 'o', 'w', 'C', 'r', 'e', 'a', 't', 'e', 'd', 0,
    'c', 'h', 'o', 'o', 's', 'e', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    'd', 'e', 'l', 'e', 't', 'e', 'T', 'e', 'x', 't', 'u', 'r', 'e', 0,
    'r', 'e', 'd', 'B', 'u', 'f', 'f', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    's', 'a', 'm', 'p', 'l', 'e', 'B', 'u', 'f', 'f', 'e', 'r', 's', 0,
    'N', 'o', 'A', 'c', 'c', 'u', 'm', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    'N', 'o', 'D', 'e', 'p', 't', 'h', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    'p', 'a', 'l', 'e', 't', 't', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'e', 'n', 'a', 'b', 'l', 'e', 'd', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'd', 'r', 'a', 'g', 'M', 'o', 'v', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'f', 'o', 'c', 'u', 's', 'O', 'u', 't', 'E', 'v', 'e', 'n', 't', 0,
    'k', 'e', 'y', 'P', 'r', 'e', 's', 's', 'E', 'v', 'e', 'n', 't', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'N', 'o', 'A', 't', 't', 'a', 'c', 'h', 'm', 'e', 'n', 't', 0,
    'i', 'n', 'i', 't', 'i', 'a', 'l', 'i', 'z', 'e', 'G', 'L', 0,
    'r', 'e', 'n', 'd', 'e', 'r', 'P', 'i', 'x', 'm', 'a', 'p', 0,
    'c', 'h', 'o', 'o', 's', 'e', 'V', 'i', 's', 'u', 'a', 'l', 0,
    's', 'w', 'a', 'p', 'I', 'n', 't', 'e', 'r', 'v', 'a', 'l', 0,
    'd', 'o', 'u', 'b', 'l', 'e', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    'S', 'i', 'n', 'g', 'l', 'e', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    'f', 'o', 'c', 'u', 's', 'I', 'n', 'E', 'v', 'e', 'n', 't', 0,
    'f', 'i', 'n', 'd', 'N', 'e', 'a', 'r', 'e', 's', 't', 0,
    'Q', 'G', 'L', 'C', 'o', 'l', 'o', 'r', 'm', 'a', 'p', 0,
    's', 'e', 't', 'C', 'o', 'l', 'o', 'r', 'm', 'a', 'p', 0,
    'i', 'n', 'i', 't', 'i', 'a', 'l', 'i', 'z', 'e', 'd', 0,
    'd', 'r', 'a', 'w', 'T', 'e', 'x', 't', 'u', 'r', 'e', 0,
    'b', 'i', 'n', 'd', 'T', 'e', 'x', 't', 'u', 'r', 'e', 0,
    's', 'w', 'a', 'p', 'B', 'u', 'f', 'f', 'e', 'r', 's', 0,
    'd', 'o', 'n', 'e', 'C', 'u', 'r', 'r', 'e', 'n', 't', 0,
    'm', 'a', 'k', 'e', 'C', 'u', 'r', 'r', 'e', 'n', 't', 0,
    't', 'a', 'b', 'l', 'e', 't', 'E', 'v', 'e', 'n', 't', 0,
    'a', 'c', 't', 'i', 'o', 'n', 'E', 'v', 'e', 'n', 't', 0,
    'p', 'a', 'i', 'n', 't', 'E', 'n', 'g', 'i', 'n', 'e', 0,
    'r', 'e', 's', 'i', 'z', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'c', 'u', 's', 't', 'o', 'm', 'E', 'v', 'e', 'n', 't', 0,
    'e', 'v', 'e', 'n', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'a', 't', 't', 'a', 'c', 'h', 'm', 'e', 'n', 't', 0,
    'e', 'n', 't', 'r', 'y', 'C', 'o', 'l', 'o', 'r', 0,
    's', 'e', 't', 'E', 'n', 't', 'r', 'i', 'e', 's', 0,
    'r', 'e', 'n', 'd', 'e', 'r', 'T', 'e', 'x', 't', 0,
    'Q', 'G', 'L', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    'h', 'a', 's', 'O', 'v', 'e', 'r', 'l', 'a', 'y', 0,
    's', 'e', 't', 'O', 'v', 'e', 'r', 'l', 'a', 'y', 0,
    's', 'e', 't', 'S', 't', 'e', 'n', 'c', 'i', 'l', 0,
    's', 'e', 't', 'S', 'a', 'm', 'p', 'l', 'e', 's', 0,
    'C', 'o', 'l', 'o', 'r', 'I', 'n', 'd', 'e', 'x', 0,
    'H', 'a', 's', 'O', 'v', 'e', 'r', 'l', 'a', 'y', 0,
    'f', 'o', 'n', 't', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    's', 'e', 't', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    'e', 'n', 't', 'e', 'r', 'E', 'v', 'e', 'n', 't', 0,
    'l', 'e', 'a', 'v', 'e', 'E', 'v', 'e', 'n', 't', 0,
    't', 'e', 's', 't', 'O', 'p', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'V', 'i', 's', 'i', 'b', 'l', 'e', 0,
    'c', 'l', 'o', 's', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'w', 'h', 'e', 'e', 'l', 'E', 'v', 'e', 'n', 't', 0,
    'p', 'a', 'i', 'n', 't', 'E', 'v', 'e', 'n', 't', 0,
    'c', 'h', 'i', 'l', 'd', 'E', 'v', 'e', 'n', 't', 0,
    't', 'i', 'm', 'e', 'r', 'E', 'v', 'e', 'n', 't', 0,
    '_', '_', 'i', 'n', 'v', 'e', 'r', 't', '_', '_', 0,
    's', 'e', 't', 'H', 'a', 'n', 'd', 'l', 'e', 0,
    'Q', 'G', 'L', 'W', 'i', 'd', 'g', 'e', 't', 0,
    'i', 's', 'S', 'h', 'a', 'r', 'i', 'n', 'g', 0,
    'h', 'a', 's', 'O', 'p', 'e', 'n', 'G', 'L', 0,
    's', 'e', 't', 'S', 't', 'e', 'r', 'e', 'o', 0,
    'Q', 'G', 'L', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'N', 'o', 'O', 'v', 'e', 'r', 'l', 'a', 'y', 0,
    's', 'e', 't', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'm', 'o', 'v', 'e', 'E', 'v', 'e', 'n', 't', 0,
    's', 'e', 't', 'O', 'p', 't', 'i', 'o', 'n', 0,
    's', 'h', 'o', 'w', 'E', 'v', 'e', 'n', 't', 0,
    'h', 'i', 'd', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'd', 'r', 'o', 'p', 'E', 'v', 'e', 'n', 't', 0,
    'r', 'e', 'c', 'e', 'i', 'v', 'e', 'r', 's', 0,
    'e', 'n', 't', 'r', 'y', 'R', 'g', 'b', 0,
    's', 'e', 't', 'E', 'n', 't', 'r', 'y', 0,
    'r', 'e', 's', 'i', 'z', 'e', 'G', 'L', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'G', 'L', 0,
    'q', 'g', 'l', 'C', 'o', 'l', 'o', 'r', 0,
    's', 'e', 't', 'P', 'l', 'a', 'n', 'e', 0,
    's', 'e', 't', 'A', 'c', 'c', 'u', 'm', 0,
    's', 'e', 't', 'D', 'e', 'p', 't', 'h', 0,
    'c', 'o', 'l', 'o', 'r', 'm', 'a', 'p', 0,
    's', 'e', 't', 'A', 'l', 'p', 'h', 'a', 0,
    's', 'i', 'z', 'e', 'H', 'i', 'n', 't', 0,
    '_', '_', 'b', 'o', 'o', 'l', '_', '_', 0,
    '_', '_', 'i', 'x', 'o', 'r', '_', '_', 0,
    '_', '_', 'i', 'a', 'n', 'd', '_', '_', 0,
    'i', 's', 'B', 'o', 'u', 'n', 'd', 0,
    'p', 'a', 'i', 'n', 't', 'G', 'L', 0,
    's', 't', 'e', 'n', 'c', 'i', 'l', 0,
    's', 'a', 'm', 'p', 'l', 'e', 's', 0,
    'd', 'e', 's', 't', 'r', 'o', 'y', 0,
    'c', 'o', 'n', 't', 'e', 'x', 't', 0,
    't', 'o', 'I', 'm', 'a', 'g', 'e', 0,
    'd', 'e', 'v', 'T', 'y', 'p', 'e', 0,
    't', 'e', 'x', 't', 'u', 'r', 'e', 0,
    's', 'e', 't', 'R', 'g', 'b', 'a', 0,
    'r', 'e', 'l', 'e', 'a', 's', 'e', 0,
    'i', 's', 'E', 'm', 'p', 't', 'y', 0,
    'i', 's', 'V', 'a', 'l', 'i', 'd', 0,
    '_', '_', 'a', 'n', 'd', '_', '_', 0,
    '_', '_', 'x', 'o', 'r', '_', '_', 0,
    '_', '_', 'i', 'n', 't', '_', '_', 0,
    '_', '_', 'i', 'o', 'r', '_', '_', 0,
    'g', 'l', 'D', 'r', 'a', 'w', 0,
    'g', 'l', 'I', 'n', 'i', 't', 0,
    's', 't', 'e', 'r', 'e', 'o', 0,
    'm', 'e', 't', 'r', 'i', 'c', 0,
    'f', 'o', 'r', 'm', 'a', 't', 0,
    'd', 'e', 'v', 'i', 'c', 'e', 0,
    'd', 'e', 't', 'a', 'c', 'h', 0,
    'c', 'r', 'e', 'a', 't', 'e', 0,
    'h', 'a', 'n', 'd', 'l', 'e', 0,
    '_', '_', 'n', 'e', '_', '_', 0,
    '_', '_', 'e', 'q', '_', '_', 0,
    '_', '_', 'o', 'r', '_', '_', 0,
    'a', 'c', 'c', 'u', 'm', 0,
    'p', 'l', 'a', 'n', 'e', 0,
    'd', 'e', 'p', 't', 'h', 0,
    'a', 'l', 'p', 'h', 'a', 0,
    'e', 'v', 'e', 'n', 't', 0,
    'r', 'e', 's', 'e', 't', 0,
    'b', 'i', 'n', 'd', 0,
    'f', 'i', 'n', 'd', 0,
    'r', 'g', 'b', 'a', 0,
    's', 'i', 'z', 'e', 0,
    'Q', 'G', 'L', 0,
};
#line 34 "sip/QtOpenGL/qgl.sip"
#include <qgl.h>
#line 290 "sipQtOpenGLcmodule.cpp"

void * sipVH_QtOpenGL_0(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error)
{
    void * sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"");

    if (!resObj || sipParseResult(0,sipMethod,resObj,"V",&sipRes) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_QtOpenGL_1(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,const QGLContext *a0)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",const_cast<QGLContext *>(a0),sipType_QGLContext,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}


/* Convert to a sub-class if possible. */
extern "C" {static const sipTypeDef *sipSubClass_QGLWidget(void **);}
static const sipTypeDef *sipSubClass_QGLWidget(void **sipCppRet)
{
    QObject *sipCpp = reinterpret_cast<QObject *>(*sipCppRet);
    const sipTypeDef *sipType;

#line 248 "sip/QtOpenGL/qgl.sip"
    sipType = (sipCpp->inherits(sipName_QGLWidget) ? sipType_QGLWidget : 0);
#line 338 "sipQtOpenGLcmodule.cpp"

    return sipType;
}


extern "C" {static PyObject *slot_QGLFormat_OpenGLVersionFlag___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_QGLFormat_OpenGLVersionFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        QGLFormat::OpenGLVersionFlag a0;
        QGLFormat::OpenGLVersionFlag a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EE",sipType_QGLFormat_OpenGLVersionFlag,&a0,sipType_QGLFormat_OpenGLVersionFlag,&a1))
        {
            QGLFormat::OpenGLVersionFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QGLFormat::OpenGLVersionFlags((a0 | a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QGLFormat_OpenGLVersionFlags,NULL);
        }
    }

    {
        QGLFormat::OpenGLVersionFlag a0;
        QGLFormat::OpenGLVersionFlags * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EJ1",sipType_QGLFormat_OpenGLVersionFlag,&a0,sipType_QGLFormat_OpenGLVersionFlags,&a1,&a1State))
        {
            QGLFormat::OpenGLVersionFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QGLFormat::OpenGLVersionFlags((a0 | *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_QGLFormat_OpenGLVersionFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QGLFormat_OpenGLVersionFlags,NULL);
        }
    }

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QGLFormat_OpenGLVersionFlag[] = {
    {(void *)slot_QGLFormat_OpenGLVersionFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QGL_FormatOption___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_QGL_FormatOption___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        QGL::FormatOption a0;
        QGL::FormatOption a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EE",sipType_QGL_FormatOption,&a0,sipType_QGL_FormatOption,&a1))
        {
            QGL::FormatOptions *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QGL::FormatOptions((a0 | a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QGL_FormatOptions,NULL);
        }
    }

    {
        QGL::FormatOption a0;
        QGL::FormatOptions * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EJ1",sipType_QGL_FormatOption,&a0,sipType_QGL_FormatOptions,&a1,&a1State))
        {
            QGL::FormatOptions *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QGL::FormatOptions((a0 | *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_QGL_FormatOptions,a1State);

            return sipConvertFromNewType(sipRes,sipType_QGL_FormatOptions,NULL);
        }
    }

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QGL_FormatOption[] = {
    {(void *)slot_QGL_FormatOption___or__, or_slot},
    {0, (sipPySlotType)0}
};

static sipEnumTypeDef enumTypes[] = {
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QGLFramebufferObject__Attachment, {0}}, sipNameNr_Attachment, 8, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QGLFormat__OpenGLVersionFlag, {0}}, sipNameNr_OpenGLVersionFlag, 5, slots_QGLFormat_OpenGLVersionFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QGL__FormatOption, {0}}, sipNameNr_FormatOption, 0, slots_QGL_FormatOption},
};


/*
 * This defines each type in this module.
 */
static sipTypeDef *typesTable[] = {
    &sipTypeDef_QtOpenGL_QGL.super.ctd_base,
    &enumTypes[2].etd_base,
    &sipTypeDef_QtOpenGL_QGL_FormatOptions.super.ctd_base,
    &sipTypeDef_QtOpenGL_QGLColormap.super.ctd_base,
    &sipTypeDef_QtOpenGL_QGLContext.super.ctd_base,
    &sipTypeDef_QtOpenGL_QGLFormat.super.ctd_base,
    &enumTypes[1].etd_base,
    &sipTypeDef_QtOpenGL_QGLFormat_OpenGLVersionFlags.super.ctd_base,
    &sipTypeDef_QtOpenGL_QGLFramebufferObject.super.ctd_base,
    &enumTypes[0].etd_base,
    &sipTypeDef_QtOpenGL_QGLPixelBuffer.super.ctd_base,
    &sipTypeDef_QtOpenGL_QGLWidget.super.ctd_base,
};


/*
 * These define each typedef in this module.
 */
static sipTypedefDef typedefsTable[] = {
    {"GLenum", "unsigned"},
    {"GLint", "int"},
    {"GLuint", "unsigned"},
};


/*
 * This defines the virtual handlers that this module implements and can be
 * used by other modules.
 */
static sipVirtHandlerFunc virtHandlersTable[] = {
    (sipVirtHandlerFunc)sipVH_QtOpenGL_0,
    (sipVirtHandlerFunc)sipVH_QtOpenGL_1,
};


/* This defines the modules that this module needs to import. */
static sipImportedModuleDef importsTable[] = {
    {"PyQt4.QtCore", 0, NULL},
    {"PyQt4.QtGui", 0, NULL},
    {NULL, -1, NULL}
};


/* This defines the class sub-convertors that this module defines. */
static sipSubClassConvertorDef convertorsTable[] = {
    {sipSubClass_QGLWidget, {111, 0, 0}, NULL},
    {NULL, {0, 0, 0}, NULL}
};


/* This defines this module. */
sipExportedModuleDef sipModuleAPI_QtOpenGL = {
    0,
    SIP_API_MINOR_NR,
    sipNameNr_PyQt4_QtOpenGL,
    0,
    0,
    sipStrings_QtOpenGL,
    importsTable,
    NULL,
    12,
    typesTable,
    NULL,
    0,
    NULL,
    3,
    typedefsTable,
    virtHandlersTable,
    convertorsTable,
    {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL
};


/* The SIP API and the APIs of any imported modules. */
const sipAPIDef *sipAPI_QtOpenGL;
const sipExportedModuleDef *sipModuleAPI_QtOpenGL_QtCore;
const sipExportedModuleDef *sipModuleAPI_QtOpenGL_QtGui;

sip_qt_metaobject_func sip_QtOpenGL_qt_metaobject;
sip_qt_metacall_func sip_QtOpenGL_qt_metacall;
sip_qt_metacast_func sip_QtOpenGL_qt_metacast;


/* The Python module initialisation function. */
#if PY_MAJOR_VERSION >= 3
#define SIP_MODULE_ENTRY        PyInit_QtOpenGL
#define SIP_MODULE_TYPE         PyObject *
#define SIP_MODULE_DISCARD(r)   Py_DECREF(r)
#define SIP_MODULE_RETURN(r)    return (r)
#else
#define SIP_MODULE_ENTRY        initQtOpenGL
#define SIP_MODULE_TYPE         void
#define SIP_MODULE_DISCARD(r)
#define SIP_MODULE_RETURN(r)    return
#endif

#if defined(SIP_STATIC_MODULE)
extern "C" SIP_MODULE_TYPE SIP_MODULE_ENTRY()
#else
PyMODINIT_FUNC SIP_MODULE_ENTRY()
#endif
{
    static PyMethodDef sip_methods[] = {
        {0, 0, 0, 0}
    };

#if PY_MAJOR_VERSION >= 3
    static PyModuleDef sip_module_def = {
        PyModuleDef_HEAD_INIT,
        "PyQt4.QtOpenGL",
        NULL,
        -1,
        sip_methods,
        NULL,
        NULL,
        NULL,
        NULL
    };
#endif

    PyObject *sipModule, *sipModuleDict;
    PyObject *sip_sipmod, *sip_capiobj;

    /* Initialise the module and get it's dictionary. */
#if PY_MAJOR_VERSION >= 3
    sipModule = PyModule_Create(&sip_module_def);
#elif PY_VERSION_HEX >= 0x02050000
    sipModule = Py_InitModule(sipName_PyQt4_QtOpenGL, sip_methods);
#else
    sipModule = Py_InitModule(const_cast<char *>(sipName_PyQt4_QtOpenGL), sip_methods);
#endif

    if (sipModule == NULL)
        SIP_MODULE_RETURN(NULL);

    sipModuleDict = PyModule_GetDict(sipModule);

    /* Import the SIP module and get it's API. */
#if PY_VERSION_HEX >= 0x02050000
    sip_sipmod = PyImport_ImportModule("sip");
#else
    sip_sipmod = PyImport_ImportModule(const_cast<char *>("sip"));
#endif

    if (sip_sipmod == NULL)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

    sip_capiobj = PyDict_GetItemString(PyModule_GetDict(sip_sipmod), "_C_API");

    if (sip_capiobj == NULL || !PyCObject_Check(sip_capiobj))
    {
        Py_DECREF(sip_sipmod);
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

    sipAPI_QtOpenGL = reinterpret_cast<const sipAPIDef *>(PyCObject_AsVoidPtr(sip_capiobj));

    /* Export the module and publish it's API. */
    if (sipExportModule(&sipModuleAPI_QtOpenGL,SIP_API_MAJOR_NR,SIP_API_MINOR_NR,0) < 0)
    {
        Py_DECREF(sip_sipmod);
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }

    sip_QtOpenGL_qt_metaobject = (sip_qt_metaobject_func)sipImportSymbol("qtcore_qt_metaobject");
    sip_QtOpenGL_qt_metacall = (sip_qt_metacall_func)sipImportSymbol("qtcore_qt_metacall");
    sip_QtOpenGL_qt_metacast = (sip_qt_metacast_func)sipImportSymbol("qtcore_qt_metacast");

    /* Initialise the module now all its dependencies have been set up. */
    if (sipInitModule(&sipModuleAPI_QtOpenGL,sipModuleDict) < 0)
    {
        Py_DECREF(sip_sipmod);
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }

    /* Get the APIs of the modules that this one is dependent on. */
    sipModuleAPI_QtOpenGL_QtCore = sipModuleAPI_QtOpenGL.em_imports[0].im_module;
    sipModuleAPI_QtOpenGL_QtGui = sipModuleAPI_QtOpenGL.em_imports[1].im_module;

    SIP_MODULE_RETURN(sipModule);
}

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:29 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtOpenGL.h"

#line 81 "sip/QtOpenGL/qgl.sip"
#include <qgl.h>
#line 39 "sipQtOpenGLQGLFormat.cpp"

#line 44 "sip/QtOpenGL/qgl.sip"
#include <qgl.h>
#line 43 "sipQtOpenGLQGLFormat.cpp"
#line 81 "sip/QtOpenGL/qgl.sip"
#include <qgl.h>
#line 46 "sipQtOpenGLQGLFormat.cpp"


extern "C" {static PyObject *meth_QGLFormat_setDepthBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setDepthBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QGLFormat,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDepthBufferSize(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_setDepthBufferSize);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_depthBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_depthBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGLFormat,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->depthBufferSize();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_depthBufferSize);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_setAccumBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setAccumBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QGLFormat,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAccumBufferSize(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_setAccumBufferSize);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_accumBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_accumBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGLFormat,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->accumBufferSize();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_accumBufferSize);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_setAlphaBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setAlphaBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QGLFormat,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAlphaBufferSize(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_setAlphaBufferSize);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_alphaBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_alphaBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGLFormat,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->alphaBufferSize();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_alphaBufferSize);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_setStencilBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setStencilBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QGLFormat,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStencilBufferSize(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_setStencilBufferSize);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_stencilBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_stencilBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGLFormat,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->stencilBufferSize();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_stencilBufferSize);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_setSampleBuffers(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setSampleBuffers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QGLFormat,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSampleBuffers(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_setSampleBuffers);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_setSamples(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setSamples(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QGLFormat,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSamples(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_setSamples);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_samples(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_samples(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGLFormat,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->samples();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_samples);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_setDoubleBuffer(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setDoubleBuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QGLFormat,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDoubleBuffer(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_setDoubleBuffer);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_setDepth(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setDepth(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QGLFormat,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDepth(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_setDepth);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_setRgba(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setRgba(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QGLFormat,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRgba(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_setRgba);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_setAlpha(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setAlpha(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QGLFormat,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAlpha(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_setAlpha);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_setAccum(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setAccum(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QGLFormat,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAccum(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_setAccum);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_setStencil(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QGLFormat,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStencil(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_setStencil);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_setStereo(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setStereo(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QGLFormat,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStereo(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_setStereo);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_setDirectRendering(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setDirectRendering(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QGLFormat,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDirectRendering(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_setDirectRendering);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_setOverlay(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setOverlay(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QGLFormat,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOverlay(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_setOverlay);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_plane(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_plane(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGLFormat,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->plane();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_plane);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_setPlane(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setPlane(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QGLFormat,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPlane(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_setPlane);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_setOption(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setOption(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGL::FormatOptions * a0;
        int a0State = 0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QGLFormat,&sipCpp,sipType_QGL_FormatOptions,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOption(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QGL_FormatOptions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_setOption);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_testOption(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_testOption(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGL::FormatOptions * a0;
        int a0State = 0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QGLFormat,&sipCpp,sipType_QGL_FormatOptions,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->testOption(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QGL_FormatOptions,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_testOption);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_defaultFormat(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_defaultFormat(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QGLFormat *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QGLFormat(QGLFormat::defaultFormat());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QGLFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_defaultFormat);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_setDefaultFormat(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setDefaultFormat(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QGLFormat * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QGLFormat,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QGLFormat::setDefaultFormat(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_setDefaultFormat);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_defaultOverlayFormat(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_defaultOverlayFormat(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QGLFormat *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QGLFormat(QGLFormat::defaultOverlayFormat());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QGLFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_defaultOverlayFormat);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_setDefaultOverlayFormat(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setDefaultOverlayFormat(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QGLFormat * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QGLFormat,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QGLFormat::setDefaultOverlayFormat(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_setDefaultOverlayFormat);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_hasOpenGL(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_hasOpenGL(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QGLFormat::hasOpenGL();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_hasOpenGL);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_hasOpenGLOverlays(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_hasOpenGLOverlays(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QGLFormat::hasOpenGLOverlays();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_hasOpenGLOverlays);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_doubleBuffer(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_doubleBuffer(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGLFormat,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->doubleBuffer();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_doubleBuffer);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_depth(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_depth(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGLFormat,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->depth();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_depth);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_rgba(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_rgba(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGLFormat,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rgba();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_rgba);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_alpha(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_alpha(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGLFormat,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->alpha();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_alpha);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_accum(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_accum(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGLFormat,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->accum();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_accum);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_stencil(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_stencil(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGLFormat,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->stencil();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_stencil);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_stereo(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_stereo(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGLFormat,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->stereo();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_stereo);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_directRendering(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_directRendering(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGLFormat,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->directRendering();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_directRendering);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_hasOverlay(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_hasOverlay(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGLFormat,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasOverlay();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_hasOverlay);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_sampleBuffers(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_sampleBuffers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGLFormat,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sampleBuffers();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_sampleBuffers);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_setRedBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setRedBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QGLFormat,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRedBufferSize(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_setRedBufferSize);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_redBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_redBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGLFormat,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->redBufferSize();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_redBufferSize);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_setGreenBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setGreenBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QGLFormat,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setGreenBufferSize(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_setGreenBufferSize);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_greenBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_greenBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGLFormat,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->greenBufferSize();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_greenBufferSize);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_setBlueBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setBlueBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QGLFormat,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBlueBufferSize(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_setBlueBufferSize);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_blueBufferSize(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_blueBufferSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGLFormat,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->blueBufferSize();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_blueBufferSize);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_setSwapInterval(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_setSwapInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QGLFormat,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSwapInterval(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_setSwapInterval);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_swapInterval(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_swapInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGLFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGLFormat,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->swapInterval();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_swapInterval);

    return NULL;
}


extern "C" {static PyObject *meth_QGLFormat_openGLVersionFlags(PyObject *, PyObject *);}
static PyObject *meth_QGLFormat_openGLVersionFlags(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QGLFormat::OpenGLVersionFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QGLFormat::OpenGLVersionFlags(QGLFormat::openGLVersionFlags());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QGLFormat_OpenGLVersionFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGLFormat,sipName_openGLVersionFlags);

    return NULL;
}


extern "C" {static PyObject *slot_QGLFormat___eq__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QGLFormat___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QGLFormat *sipCpp = reinterpret_cast<QGLFormat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGLFormat));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QGLFormat * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QGLFormat,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator==((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtOpenGL,eq_slot,sipType_QGLFormat,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QGLFormat___ne__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QGLFormat___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QGLFormat *sipCpp = reinterpret_cast<QGLFormat *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QGLFormat));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QGLFormat * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QGLFormat,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator!=((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtOpenGL,ne_slot,sipType_QGLFormat,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QGLFormat(void *, const sipTypeDef *);}
static void *cast_QGLFormat(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QGLFormat)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGLFormat(void *, int);}
static void release_QGLFormat(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QGLFormat *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QGLFormat(void *, SIP_SSIZE_T, const void *);}
static void assign_QGLFormat(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QGLFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QGLFormat *>(sipSrc);
}


extern "C" {static void *array_QGLFormat(SIP_SSIZE_T);}
static void *array_QGLFormat(SIP_SSIZE_T sipNrElem)
{
    return new QGLFormat[sipNrElem];
}


extern "C" {static void *copy_QGLFormat(const void *, SIP_SSIZE_T);}
static void *copy_QGLFormat(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QGLFormat(reinterpret_cast<const QGLFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QGLFormat(sipSimpleWrapper *);}
static void dealloc_QGLFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QGLFormat(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QGLFormat(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QGLFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QGLFormat *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QGLFormat();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        QGL::FormatOptions * a0;
        int a0State = 0;
        int a1 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1|i",sipType_QGL_FormatOptions,&a0,&a0State,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QGLFormat(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QGL_FormatOptions,a0State);
        }
    }

    if (!sipCpp)
    {
        const QGLFormat * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QGLFormat,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QGLFormat(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    return sipCpp;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QGLFormat[] = {
    {(void *)slot_QGLFormat___eq__, eq_slot},
    {(void *)slot_QGLFormat___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QGLFormat[] = {
    {SIP_MLNAME_CAST(sipName_accum), meth_QGLFormat_accum, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_accumBufferSize), meth_QGLFormat_accumBufferSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_alpha), meth_QGLFormat_alpha, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_alphaBufferSize), meth_QGLFormat_alphaBufferSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_blueBufferSize), meth_QGLFormat_blueBufferSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_defaultFormat), meth_QGLFormat_defaultFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_defaultOverlayFormat), meth_QGLFormat_defaultOverlayFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_depth), meth_QGLFormat_depth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_depthBufferSize), meth_QGLFormat_depthBufferSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_directRendering), meth_QGLFormat_directRendering, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_doubleBuffer), meth_QGLFormat_doubleBuffer, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_greenBufferSize), meth_QGLFormat_greenBufferSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasOpenGL), meth_QGLFormat_hasOpenGL, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasOpenGLOverlays), meth_QGLFormat_hasOpenGLOverlays, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasOverlay), meth_QGLFormat_hasOverlay, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_openGLVersionFlags), meth_QGLFormat_openGLVersionFlags, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_plane), meth_QGLFormat_plane, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_redBufferSize), meth_QGLFormat_redBufferSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rgba), meth_QGLFormat_rgba, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sampleBuffers), meth_QGLFormat_sampleBuffers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_samples), meth_QGLFormat_samples, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAccum), meth_QGLFormat_setAccum, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAccumBufferSize), meth_QGLFormat_setAccumBufferSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAlpha), meth_QGLFormat_setAlpha, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAlphaBufferSize), meth_QGLFormat_setAlphaBufferSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBlueBufferSize), meth_QGLFormat_setBlueBufferSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDefaultFormat), meth_QGLFormat_setDefaultFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDefaultOverlayFormat), meth_QGLFormat_setDefaultOverlayFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDepth), meth_QGLFormat_setDepth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDepthBufferSize), meth_QGLFormat_setDepthBufferSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDirectRendering), meth_QGLFormat_setDirectRendering, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDoubleBuffer), meth_QGLFormat_setDoubleBuffer, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setGreenBufferSize), meth_QGLFormat_setGreenBufferSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setOption), meth_QGLFormat_setOption, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setOverlay), meth_QGLFormat_setOverlay, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPlane), meth_QGLFormat_setPlane, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRedBufferSize), meth_QGLFormat_setRedBufferSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRgba), meth_QGLFormat_setRgba, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSampleBuffers), meth_QGLFormat_setSampleBuffers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSamples), meth_QGLFormat_setSamples, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setStencil), meth_QGLFormat_setStencil, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setStencilBufferSize), meth_QGLFormat_setStencilBufferSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setStereo), meth_QGLFormat_setStereo, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSwapInterval), meth_QGLFormat_setSwapInterval, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_stencil), meth_QGLFormat_stencil, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_stencilBufferSize), meth_QGLFormat_stencilBufferSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_stereo), meth_QGLFormat_stereo, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_swapInterval), meth_QGLFormat_swapInterval, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_testOption), meth_QGLFormat_testOption, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QGLFormat[] = {
    {sipName_OpenGL_ES_CommonLite_Version_1_0, QGLFormat::OpenGL_ES_CommonLite_Version_1_0, 6},
    {sipName_OpenGL_ES_CommonLite_Version_1_1, QGLFormat::OpenGL_ES_CommonLite_Version_1_1, 6},
    {sipName_OpenGL_ES_Common_Version_1_0, QGLFormat::OpenGL_ES_Common_Version_1_0, 6},
    {sipName_OpenGL_ES_Common_Version_1_1, QGLFormat::OpenGL_ES_Common_Version_1_1, 6},
    {sipName_OpenGL_ES_Version_2_0, QGLFormat::OpenGL_ES_Version_2_0, 6},
    {sipName_OpenGL_Version_1_1, QGLFormat::OpenGL_Version_1_1, 6},
    {sipName_OpenGL_Version_1_2, QGLFormat::OpenGL_Version_1_2, 6},
    {sipName_OpenGL_Version_1_3, QGLFormat::OpenGL_Version_1_3, 6},
    {sipName_OpenGL_Version_1_4, QGLFormat::OpenGL_Version_1_4, 6},
    {sipName_OpenGL_Version_1_5, QGLFormat::OpenGL_Version_1_5, 6},
    {sipName_OpenGL_Version_2_0, QGLFormat::OpenGL_Version_2_0, 6},
    {sipName_OpenGL_Version_2_1, QGLFormat::OpenGL_Version_2_1, 6},
    {sipName_OpenGL_Version_3_0, QGLFormat::OpenGL_Version_3_0, 6},
    {sipName_OpenGL_Version_None, QGLFormat::OpenGL_Version_None, 6},
};


pyqt4ClassTypeDef sipTypeDef_QtOpenGL_QGLFormat = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QGLFormat,
        {0}
    },
    {
        sipNameNr_QGLFormat,
        {0, 0, 1},
        49, methods_QGLFormat,
        14, enummembers_QGLFormat,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QGLFormat,
    init_QGLFormat,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGLFormat,
    assign_QGLFormat,
    array_QGLFormat,
    copy_QGLFormat,
    release_QGLFormat,
    cast_QGLFormat,
    0,
    0,
    0
},
    0,
    0,
    0
};

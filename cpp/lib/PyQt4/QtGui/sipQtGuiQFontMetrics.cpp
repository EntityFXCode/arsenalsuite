/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:24 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 37 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 39 "sipQtGuiQFontMetrics.cpp"

#line 41 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 43 "sipQtGuiQFontMetrics.cpp"
#line 37 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 46 "sipQtGuiQFontMetrics.cpp"
#line 41 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 49 "sipQtGuiQFontMetrics.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 52 "sipQtGuiQFontMetrics.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 55 "sipQtGuiQFontMetrics.cpp"
#line 41 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 58 "sipQtGuiQFontMetrics.cpp"
#line 78 "sip/QtCore/qchar.sip"
#include <qchar.h>
#line 61 "sipQtGuiQFontMetrics.cpp"


extern "C" {static PyObject *meth_QFontMetrics_ascent(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_ascent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QFontMetrics *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QFontMetrics,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ascent();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFontMetrics,sipName_ascent);

    return NULL;
}


extern "C" {static PyObject *meth_QFontMetrics_descent(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_descent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QFontMetrics *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QFontMetrics,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->descent();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFontMetrics,sipName_descent);

    return NULL;
}


extern "C" {static PyObject *meth_QFontMetrics_height(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_height(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QFontMetrics *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QFontMetrics,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->height();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFontMetrics,sipName_height);

    return NULL;
}


extern "C" {static PyObject *meth_QFontMetrics_leading(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_leading(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QFontMetrics *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QFontMetrics,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->leading();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFontMetrics,sipName_leading);

    return NULL;
}


extern "C" {static PyObject *meth_QFontMetrics_lineSpacing(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_lineSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QFontMetrics *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QFontMetrics,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lineSpacing();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFontMetrics,sipName_lineSpacing);

    return NULL;
}


extern "C" {static PyObject *meth_QFontMetrics_minLeftBearing(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_minLeftBearing(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QFontMetrics *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QFontMetrics,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->minLeftBearing();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFontMetrics,sipName_minLeftBearing);

    return NULL;
}


extern "C" {static PyObject *meth_QFontMetrics_minRightBearing(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_minRightBearing(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QFontMetrics *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QFontMetrics,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->minRightBearing();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFontMetrics,sipName_minRightBearing);

    return NULL;
}


extern "C" {static PyObject *meth_QFontMetrics_maxWidth(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_maxWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QFontMetrics *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QFontMetrics,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->maxWidth();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFontMetrics,sipName_maxWidth);

    return NULL;
}


extern "C" {static PyObject *meth_QFontMetrics_xHeight(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_xHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QFontMetrics *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QFontMetrics,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->xHeight();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFontMetrics,sipName_xHeight);

    return NULL;
}


extern "C" {static PyObject *meth_QFontMetrics_inFont(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_inFont(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar * a0;
        int a0State = 0;
        QFontMetrics *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QFontMetrics,&sipCpp,sipType_QChar,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->inFont(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QChar,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFontMetrics,sipName_inFont);

    return NULL;
}


extern "C" {static PyObject *meth_QFontMetrics_leftBearing(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_leftBearing(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar * a0;
        int a0State = 0;
        QFontMetrics *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QFontMetrics,&sipCpp,sipType_QChar,&a0,&a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->leftBearing(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QChar,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFontMetrics,sipName_leftBearing);

    return NULL;
}


extern "C" {static PyObject *meth_QFontMetrics_rightBearing(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_rightBearing(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar * a0;
        int a0State = 0;
        QFontMetrics *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QFontMetrics,&sipCpp,sipType_QChar,&a0,&a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rightBearing(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QChar,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFontMetrics,sipName_rightBearing);

    return NULL;
}


extern "C" {static PyObject *meth_QFontMetrics_widthChar(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_widthChar(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    if (sipIsAPIEnabled(sipName_QString, 2, 0))
    {
        QChar * a0;
        int a0State = 0;
        QFontMetrics *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QFontMetrics,&sipCpp,sipType_QChar,&a0,&a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->width(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QChar,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFontMetrics,sipName_widthChar);

    return NULL;
}


extern "C" {static PyObject *meth_QFontMetrics_width(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_width(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        QChar * a0;
        int a0State = 0;
        QFontMetrics *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QFontMetrics,&sipCpp,sipType_QChar,&a0,&a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->width(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QChar,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        int a1 = -1;
        QFontMetrics *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|i",&sipSelf,sipType_QFontMetrics,&sipCpp,sipType_QString,&a0,&a0State,&a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->width(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFontMetrics,sipName_width);

    return NULL;
}


extern "C" {static PyObject *meth_QFontMetrics_charWidth(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_charWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        int a1;
        QFontMetrics *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1i",&sipSelf,sipType_QFontMetrics,&sipCpp,sipType_QString,&a0,&a0State,&a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->charWidth(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFontMetrics,sipName_charWidth);

    return NULL;
}


extern "C" {static PyObject *meth_QFontMetrics_boundingRectChar(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_boundingRectChar(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    if (sipIsAPIEnabled(sipName_QString, 2, 0))
    {
        QChar * a0;
        int a0State = 0;
        QFontMetrics *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QFontMetrics,&sipCpp,sipType_QChar,&a0,&a0State))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->boundingRect(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QChar,a0State);

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFontMetrics,sipName_boundingRectChar);

    return NULL;
}


extern "C" {static PyObject *meth_QFontMetrics_boundingRect(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_boundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        QChar * a0;
        int a0State = 0;
        QFontMetrics *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QFontMetrics,&sipCpp,sipType_QChar,&a0,&a0State))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->boundingRect(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QChar,a0State);

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        QFontMetrics *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QFontMetrics,&sipCpp,sipType_QString,&a0,&a0State))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->boundingRect(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    {
        const QRect * a0;
        int a1;
        const QString * a2;
        int a2State = 0;
        int a3 = 0;
        PyObject * a4 = 0;
        QFontMetrics *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9iJ1|iN",&sipSelf,sipType_QFontMetrics,&sipCpp,sipType_QRect,&a0,&a1,sipType_QString,&a2,&a2State,&a3,&PyList_Type,&a4))
        {
            QRect *sipRes = 0;

#line 66 "sip/QtGui/qfontmetrics.sip"
        int *tabarray = qtgui_tabarray(a4);
        
        sipRes = new QRect(sipCpp->boundingRect(*a0, a1, *a2, a3, tabarray));
        
        if (!tabarray)
            delete[] tabarray;
#line 612 "sipQtGuiQFontMetrics.cpp"

            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        const QString * a5;
        int a5State = 0;
        int a6 = 0;
        PyObject * a7 = 0;
        QFontMetrics *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiiiiiJ1|iN",&sipSelf,sipType_QFontMetrics,&sipCpp,&a0,&a1,&a2,&a3,&a4,sipType_QString,&a5,&a5State,&a6,&PyList_Type,&a7))
        {
            QRect *sipRes = 0;

#line 76 "sip/QtGui/qfontmetrics.sip"
        int *tabarray = qtgui_tabarray(a7);
        
        sipRes = new QRect(sipCpp->boundingRect(a0, a1, a2, a3, a4, *a5, a6, tabarray));
        
        if (!tabarray)
            delete[] tabarray;
#line 643 "sipQtGuiQFontMetrics.cpp"

            sipReleaseType(const_cast<QString *>(a5),sipType_QString,a5State);

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFontMetrics,sipName_boundingRect);

    return NULL;
}


extern "C" {static PyObject *meth_QFontMetrics_size(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_size(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        const QString * a1;
        int a1State = 0;
        int a2 = 0;
        PyObject * a3 = 0;
        QFontMetrics *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiJ1|iN",&sipSelf,sipType_QFontMetrics,&sipCpp,&a0,sipType_QString,&a1,&a1State,&a2,&PyList_Type,&a3))
        {
            QSize *sipRes = 0;

#line 86 "sip/QtGui/qfontmetrics.sip"
        int *tabarray = qtgui_tabarray(a3);
        
        sipRes = new QSize(sipCpp->size(a0, *a1, a2, tabarray));
        
        if (!tabarray)
            delete[] tabarray;
#line 682 "sipQtGuiQFontMetrics.cpp"

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFontMetrics,sipName_size);

    return NULL;
}


extern "C" {static PyObject *meth_QFontMetrics_underlinePos(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_underlinePos(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QFontMetrics *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QFontMetrics,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->underlinePos();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFontMetrics,sipName_underlinePos);

    return NULL;
}


extern "C" {static PyObject *meth_QFontMetrics_overlinePos(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_overlinePos(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QFontMetrics *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QFontMetrics,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->overlinePos();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFontMetrics,sipName_overlinePos);

    return NULL;
}


extern "C" {static PyObject *meth_QFontMetrics_strikeOutPos(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_strikeOutPos(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QFontMetrics *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QFontMetrics,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->strikeOutPos();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFontMetrics,sipName_strikeOutPos);

    return NULL;
}


extern "C" {static PyObject *meth_QFontMetrics_lineWidth(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_lineWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QFontMetrics *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QFontMetrics,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lineWidth();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFontMetrics,sipName_lineWidth);

    return NULL;
}


extern "C" {static PyObject *meth_QFontMetrics_averageCharWidth(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_averageCharWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QFontMetrics *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QFontMetrics,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->averageCharWidth();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFontMetrics,sipName_averageCharWidth);

    return NULL;
}


extern "C" {static PyObject *meth_QFontMetrics_elidedText(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_elidedText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        Qt::TextElideMode a1;
        int a2;
        int a3 = 0;
        QFontMetrics *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1Ei|i",&sipSelf,sipType_QFontMetrics,&sipCpp,sipType_QString,&a0,&a0State,sipType_Qt_TextElideMode,&a1,&a2,&a3))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->elidedText(*a0,a1,a2,a3));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFontMetrics,sipName_elidedText);

    return NULL;
}


extern "C" {static PyObject *meth_QFontMetrics_tightBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QFontMetrics_tightBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QFontMetrics *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QFontMetrics,&sipCpp,sipType_QString,&a0,&a0State))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->tightBoundingRect(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFontMetrics,sipName_tightBoundingRect);

    return NULL;
}


extern "C" {static PyObject *slot_QFontMetrics___ne__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QFontMetrics___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QFontMetrics *sipCpp = reinterpret_cast<QFontMetrics *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFontMetrics));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QFontMetrics * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QFontMetrics,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QFontMetrics::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtGui,ne_slot,sipType_QFontMetrics,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QFontMetrics___eq__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QFontMetrics___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QFontMetrics *sipCpp = reinterpret_cast<QFontMetrics *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QFontMetrics));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QFontMetrics * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QFontMetrics,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QFontMetrics::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtGui,eq_slot,sipType_QFontMetrics,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QFontMetrics(void *, const sipTypeDef *);}
static void *cast_QFontMetrics(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QFontMetrics)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QFontMetrics(void *, int);}
static void release_QFontMetrics(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QFontMetrics *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QFontMetrics(sipSimpleWrapper *);}
static void dealloc_QFontMetrics(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QFontMetrics(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QFontMetrics(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QFontMetrics(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QFontMetrics *sipCpp = 0;

    if (!sipCpp)
    {
        const QFont * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QFont,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QFontMetrics(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QFont * a0;
        QPaintDevice * a1;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9J8",sipType_QFont,&a0,sipType_QPaintDevice,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QFontMetrics(*a0,a1);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QFontMetrics * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QFontMetrics,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QFontMetrics(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    return sipCpp;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QFontMetrics[] = {
    {(void *)slot_QFontMetrics___ne__, ne_slot},
    {(void *)slot_QFontMetrics___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QFontMetrics[] = {
    {SIP_MLNAME_CAST(sipName_ascent), meth_QFontMetrics_ascent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_averageCharWidth), meth_QFontMetrics_averageCharWidth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_boundingRect), meth_QFontMetrics_boundingRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_boundingRectChar), meth_QFontMetrics_boundingRectChar, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_charWidth), meth_QFontMetrics_charWidth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_descent), meth_QFontMetrics_descent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_elidedText), meth_QFontMetrics_elidedText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_height), meth_QFontMetrics_height, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_inFont), meth_QFontMetrics_inFont, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_leading), meth_QFontMetrics_leading, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_leftBearing), meth_QFontMetrics_leftBearing, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lineSpacing), meth_QFontMetrics_lineSpacing, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lineWidth), meth_QFontMetrics_lineWidth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_maxWidth), meth_QFontMetrics_maxWidth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_minLeftBearing), meth_QFontMetrics_minLeftBearing, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_minRightBearing), meth_QFontMetrics_minRightBearing, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_overlinePos), meth_QFontMetrics_overlinePos, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rightBearing), meth_QFontMetrics_rightBearing, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_size), meth_QFontMetrics_size, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_strikeOutPos), meth_QFontMetrics_strikeOutPos, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_tightBoundingRect), meth_QFontMetrics_tightBoundingRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_underlinePos), meth_QFontMetrics_underlinePos, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_width), meth_QFontMetrics_width, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_widthChar), meth_QFontMetrics_widthChar, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_xHeight), meth_QFontMetrics_xHeight, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QFontMetrics = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QFontMetrics,
        {0}
    },
    {
        sipNameNr_QFontMetrics,
        {0, 0, 1},
        25, methods_QFontMetrics,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QFontMetrics,
    init_QFontMetrics,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QFontMetrics,
    0,
    0,
    0,
    release_QFontMetrics,
    cast_QFontMetrics,
    0,
    0,
    0
},
    0,
    0,
    0
};

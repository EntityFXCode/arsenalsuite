/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:22 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 37 "sip/QtGui/qtreeview.sip"
#include <qtreeview.h>
#line 39 "sipQtGuiQTreeView.cpp"

#line 41 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 43 "sipQtGuiQTreeView.cpp"
#line 37 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 46 "sipQtGuiQTreeView.cpp"
#line 156 "sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 49 "sipQtGuiQTreeView.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 52 "sipQtGuiQTreeView.cpp"
#line 528 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 55 "sipQtGuiQTreeView.cpp"
#line 291 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 58 "sipQtGuiQTreeView.cpp"
#line 179 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 61 "sipQtGuiQTreeView.cpp"
#line 41 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 64 "sipQtGuiQTreeView.cpp"
#line 41 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 67 "sipQtGuiQTreeView.cpp"
#line 41 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 70 "sipQtGuiQTreeView.cpp"
#line 831 "sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 73 "sipQtGuiQTreeView.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 76 "sipQtGuiQTreeView.cpp"
#line 340 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 79 "sipQtGuiQTreeView.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 82 "sipQtGuiQTreeView.cpp"
#line 82 "sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 85 "sipQtGuiQTreeView.cpp"
#line 41 "sip/QtGui/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 88 "sipQtGuiQTreeView.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 91 "sipQtGuiQTreeView.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 94 "sipQtGuiQTreeView.cpp"
#line 41 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 97 "sipQtGuiQTreeView.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 100 "sipQtGuiQTreeView.cpp"
#line 37 "sip/QtGui/qheaderview.sip"
#include <qheaderview.h>
#line 103 "sipQtGuiQTreeView.cpp"
#line 82 "sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 106 "sipQtGuiQTreeView.cpp"
#line 128 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 109 "sipQtGuiQTreeView.cpp"
#line 461 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 477 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 114 "sipQtGuiQTreeView.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 117 "sipQtGuiQTreeView.cpp"
#line 37 "sip/QtGui/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 120 "sipQtGuiQTreeView.cpp"
#line 369 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 123 "sipQtGuiQTreeView.cpp"
#line 320 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 126 "sipQtGuiQTreeView.cpp"
#line 503 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 129 "sipQtGuiQTreeView.cpp"
#line 557 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 132 "sipQtGuiQTreeView.cpp"
#line 545 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 135 "sipQtGuiQTreeView.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 138 "sipQtGuiQTreeView.cpp"
#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 141 "sipQtGuiQTreeView.cpp"
#line 41 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 144 "sipQtGuiQTreeView.cpp"
#line 41 "sip/QtGui/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 147 "sipQtGuiQTreeView.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 150 "sipQtGuiQTreeView.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 153 "sipQtGuiQTreeView.cpp"
#line 37 "sip/QtGui/qscrollbar.sip"
#include <qscrollbar.h>
#line 156 "sipQtGuiQTreeView.cpp"
#line 431 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "sipQtGuiQTreeView.cpp"
#line 220 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "sipQtGuiQTreeView.cpp"
#line 37 "sip/QtGui/qframe.sip"
#include <qframe.h>
#line 165 "sipQtGuiQTreeView.cpp"
#line 39 "sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 168 "sipQtGuiQTreeView.cpp"
#line 41 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 171 "sipQtGuiQTreeView.cpp"
#line 37 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 174 "sipQtGuiQTreeView.cpp"
#line 41 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 177 "sipQtGuiQTreeView.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 180 "sipQtGuiQTreeView.cpp"
#line 37 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 183 "sipQtGuiQTreeView.cpp"
#line 37 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 186 "sipQtGuiQTreeView.cpp"
#line 41 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 189 "sipQtGuiQTreeView.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 192 "sipQtGuiQTreeView.cpp"
#line 41 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 195 "sipQtGuiQTreeView.cpp"
#line 419 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 198 "sipQtGuiQTreeView.cpp"
#line 407 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 201 "sipQtGuiQTreeView.cpp"
#line 613 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 204 "sipQtGuiQTreeView.cpp"
#line 242 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 207 "sipQtGuiQTreeView.cpp"
#line 383 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 210 "sipQtGuiQTreeView.cpp"
#line 355 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 213 "sipQtGuiQTreeView.cpp"
#line 37 "sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 216 "sipQtGuiQTreeView.cpp"
#line 69 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 219 "sipQtGuiQTreeView.cpp"
#line 42 "sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 222 "sipQtGuiQTreeView.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 225 "sipQtGuiQTreeView.cpp"
#line 37 "sip/QtGui/qaction.sip"
#include <qaction.h>
#line 228 "sipQtGuiQTreeView.cpp"
#line 37 "sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 231 "sipQtGuiQTreeView.cpp"
#line 41 "sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 234 "sipQtGuiQTreeView.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 237 "sipQtGuiQTreeView.cpp"
#line 41 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 240 "sipQtGuiQTreeView.cpp"
#line 41 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 243 "sipQtGuiQTreeView.cpp"
#line 41 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 246 "sipQtGuiQTreeView.cpp"
#line 41 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 249 "sipQtGuiQTreeView.cpp"
#line 41 "sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 252 "sipQtGuiQTreeView.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 255 "sipQtGuiQTreeView.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 258 "sipQtGuiQTreeView.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 261 "sipQtGuiQTreeView.cpp"
#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 264 "sipQtGuiQTreeView.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 267 "sipQtGuiQTreeView.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 270 "sipQtGuiQTreeView.cpp"


class sipQTreeView : public QTreeView
{
public:
    sipQTreeView(QWidget *);
    virtual ~sipQTreeView();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /* Expose this protected enum. */
    enum sipDropIndicatorPosition {
        OnItem = QAbstractItemView::OnItem,
        AboveItem = QAbstractItemView::AboveItem,
        BelowItem = QAbstractItemView::BelowItem,
        OnViewport = QAbstractItemView::OnViewport
    };

    /* Expose this protected enum. */
    enum sipState {
        NoState = QAbstractItemView::NoState,
        DraggingState = QAbstractItemView::DraggingState,
        DragSelectingState = QAbstractItemView::DragSelectingState,
        EditingState = QAbstractItemView::EditingState,
        ExpandingState = QAbstractItemView::ExpandingState,
        CollapsingState = QAbstractItemView::CollapsingState,
        AnimatingState = QAbstractItemView::AnimatingState
    };

    /* Expose this protected enum. */
    enum sipCursorAction {
        MoveUp = QAbstractItemView::MoveUp,
        MoveDown = QAbstractItemView::MoveDown,
        MoveLeft = QAbstractItemView::MoveLeft,
        MoveRight = QAbstractItemView::MoveRight,
        MoveHome = QAbstractItemView::MoveHome,
        MoveEnd = QAbstractItemView::MoveEnd,
        MovePageUp = QAbstractItemView::MovePageUp,
        MovePageDown = QAbstractItemView::MovePageDown,
        MoveNext = QAbstractItemView::MoveNext,
        MovePrevious = QAbstractItemView::MovePrevious
    };

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    void sipProtectVirt_keyReleaseEvent(bool,QKeyEvent *);
    void sipProtectVirt_enterEvent(bool,QEvent *);
    void sipProtectVirt_leaveEvent(bool,QEvent *);
    void sipProtectVirt_moveEvent(bool,QMoveEvent *);
    void sipProtectVirt_closeEvent(bool,QCloseEvent *);
    void sipProtectVirt_tabletEvent(bool,QTabletEvent *);
    void sipProtectVirt_actionEvent(bool,QActionEvent *);
    void sipProtectVirt_showEvent(bool,QShowEvent *);
    void sipProtectVirt_hideEvent(bool,QHideEvent *);
    int sipProtectVirt_metric(bool,QPaintDevice::PaintDeviceMetric) const;
    void sipProtect_resetInputContext();
    void sipProtect_updateMicroFocus();
    void sipProtect_create(WId,bool,bool);
    void sipProtect_destroy(bool,bool);
    bool sipProtect_focusNextChild();
    bool sipProtect_focusPreviousChild();
    void sipProtectVirt_enabledChange(bool,bool);
    void sipProtectVirt_paletteChange(bool,const QPalette&);
    void sipProtectVirt_fontChange(bool,const QFont&);
    void sipProtectVirt_windowActivationChange(bool,bool);
    void sipProtectVirt_languageChange(bool);
    void sipProtectVirt_changeEvent(bool,QEvent *);
    void sipProtect_drawFrame(QPainter *);
    void sipProtect_setViewportMargins(int,int,int,int);
    void sipProtectVirt_wheelEvent(bool,QWheelEvent *);
    void sipProtectVirt_contextMenuEvent(bool,QContextMenuEvent *);
    void sipProtect_setupViewport(QWidget *);
    bool sipProtectVirt_edit(bool,const QModelIndex&,QAbstractItemView::EditTrigger,QEvent *);
    void sipProtectVirt_updateEditorData(bool);
    void sipProtectVirt_updateEditorGeometries(bool);
    void sipProtectVirt_verticalScrollbarAction(bool,int);
    void sipProtectVirt_verticalScrollbarValueChanged(bool,int);
    void sipProtectVirt_horizontalScrollbarValueChanged(bool,int);
    void sipProtectVirt_closeEditor(bool,QWidget *,QAbstractItemDelegate::EndEditHint);
    void sipProtectVirt_commitData(bool,QWidget *);
    void sipProtectVirt_editorDestroyed(bool,QObject *);
    void sipProtect_setHorizontalStepsPerItem(int);
    int sipProtect_horizontalStepsPerItem() const;
    void sipProtect_setVerticalStepsPerItem(int);
    int sipProtect_verticalStepsPerItem() const;
    QItemSelectionModel::SelectionFlags sipProtectVirt_selectionCommand(bool,const QModelIndex&,const QEvent *) const;
    void sipProtectVirt_startDrag(bool,Qt::DropActions);
    QStyleOptionViewItem sipProtectVirt_viewOptions(bool) const;
    int sipProtect_state() const;
    void sipProtect_setState(int);
    void sipProtect_scheduleDelayedItemsLayout();
    void sipProtect_executeDelayedItemsLayout();
    void sipProtect_scrollDirtyRegion(int,int);
    void sipProtect_setDirtyRegion(const QRegion&);
    QPoint sipProtect_dirtyRegionOffset() const;
    bool sipProtectVirt_event(bool,QEvent *);
    void sipProtectVirt_dragEnterEvent(bool,QDragEnterEvent *);
    void sipProtectVirt_dragLeaveEvent(bool,QDragLeaveEvent *);
    void sipProtectVirt_dropEvent(bool,QDropEvent *);
    void sipProtectVirt_focusInEvent(bool,QFocusEvent *);
    void sipProtectVirt_focusOutEvent(bool,QFocusEvent *);
    void sipProtectVirt_resizeEvent(bool,QResizeEvent *);
    int sipProtect_dropIndicatorPosition() const;
    bool sipProtectVirt_focusNextPrevChild(bool,bool);
    void sipProtectVirt_inputMethodEvent(bool,QInputMethodEvent *);
    void sipProtect_columnResized(int,int,int);
    void sipProtect_columnCountChanged(int,int);
    void sipProtect_columnMoved();
    void sipProtect_reexpand();
    void sipProtect_rowsRemoved(const QModelIndex&,int,int);
    void sipProtectVirt_scrollContentsBy(bool,int,int);
    void sipProtectVirt_rowsInserted(bool,const QModelIndex&,int,int);
    void sipProtectVirt_rowsAboutToBeRemoved(bool,const QModelIndex&,int,int);
    QModelIndex sipProtectVirt_moveCursor(bool,int,Qt::KeyboardModifiers);
    int sipProtectVirt_horizontalOffset(bool) const;
    int sipProtectVirt_verticalOffset(bool) const;
    void sipProtectVirt_setSelection(bool,const QRect&,QItemSelectionModel::SelectionFlags);
    QRegion sipProtectVirt_visualRegionForSelection(bool,const QItemSelection&) const;
    QModelIndexList sipProtectVirt_selectedIndexes(bool) const;
    void sipProtectVirt_paintEvent(bool,QPaintEvent *);
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_mouseReleaseEvent(bool,QMouseEvent *);
    void sipProtectVirt_drawRow(bool,QPainter *,const QStyleOptionViewItem&,const QModelIndex&) const;
    void sipProtectVirt_drawBranches(bool,QPainter *,const QRect&,const QModelIndex&) const;
    void sipProtect_drawTree(QPainter *,const QRegion&) const;
    void sipProtectVirt_mousePressEvent(bool,QMouseEvent *);
    void sipProtectVirt_mouseMoveEvent(bool,QMouseEvent *);
    void sipProtectVirt_mouseDoubleClickEvent(bool,QMouseEvent *);
    void sipProtectVirt_keyPressEvent(bool,QKeyEvent *);
    void sipProtectVirt_updateGeometries(bool);
    int sipProtectVirt_sizeHintForColumn(bool,int) const;
    int sipProtect_indexRowSizeHint(const QModelIndex&) const;
    void sipProtectVirt_horizontalScrollbarAction(bool,int);
    bool sipProtectVirt_isIndexHidden(bool,const QModelIndex&) const;
    void sipProtectVirt_dragMoveEvent(bool,QDragMoveEvent *);
    bool sipProtectVirt_viewportEvent(bool,QEvent *);
    int sipProtect_rowHeight(const QModelIndex&) const;
    void sipProtectVirt_selectionChanged(bool,const QItemSelection&,const QItemSelection&);
    void sipProtectVirt_currentChanged(bool,const QModelIndex&,const QModelIndex&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void setModel(QAbstractItemModel *);
    void setRootIndex(const QModelIndex&);
    void setSelectionModel(QItemSelectionModel *);
    void keyboardSearch(const QString&);
    QRect visualRect(const QModelIndex&) const;
    void scrollTo(const QModelIndex&,QAbstractItemView::ScrollHint);
    QModelIndex indexAt(const QPoint&) const;
    void doItemsLayout();
    void reset();
    void dataChanged(const QModelIndex&,const QModelIndex&);
    void selectAll();
    void scrollContentsBy(int,int);
    void rowsInserted(const QModelIndex&,int,int);
    void rowsAboutToBeRemoved(const QModelIndex&,int,int);
    QModelIndex moveCursor(QAbstractItemView::CursorAction,Qt::KeyboardModifiers);
    int horizontalOffset() const;
    int verticalOffset() const;
    void setSelection(const QRect&,QItemSelectionModel::SelectionFlags);
    QRegion visualRegionForSelection(const QItemSelection&) const;
    QModelIndexList selectedIndexes() const;
    void paintEvent(QPaintEvent *);
    void timerEvent(QTimerEvent *);
    void mouseReleaseEvent(QMouseEvent *);
    void drawRow(QPainter *,const QStyleOptionViewItem&,const QModelIndex&) const;
    void drawBranches(QPainter *,const QRect&,const QModelIndex&) const;
    void mousePressEvent(QMouseEvent *);
    void mouseMoveEvent(QMouseEvent *);
    void mouseDoubleClickEvent(QMouseEvent *);
    void keyPressEvent(QKeyEvent *);
    void updateGeometries();
    int sizeHintForColumn(int) const;
    void horizontalScrollbarAction(int);
    bool isIndexHidden(const QModelIndex&) const;
    void dragMoveEvent(QDragMoveEvent *);
    bool viewportEvent(QEvent *);
    void selectionChanged(const QItemSelection&,const QItemSelection&);
    void currentChanged(const QModelIndex&,const QModelIndex&);
    int sizeHintForRow(int) const;
    void updateEditorData();
    void updateEditorGeometries();
    void verticalScrollbarAction(int);
    void verticalScrollbarValueChanged(int);
    void horizontalScrollbarValueChanged(int);
    void closeEditor(QWidget *,QAbstractItemDelegate::EndEditHint);
    void commitData(QWidget *);
    void editorDestroyed(QObject *);
    bool edit(const QModelIndex&,QAbstractItemView::EditTrigger,QEvent *);
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex&,const QEvent *) const;
    void startDrag(Qt::DropActions);
    QStyleOptionViewItem viewOptions() const;
    bool event(QEvent *);
    void dragEnterEvent(QDragEnterEvent *);
    void dragLeaveEvent(QDragLeaveEvent *);
    void dropEvent(QDropEvent *);
    void focusInEvent(QFocusEvent *);
    void focusOutEvent(QFocusEvent *);
    void resizeEvent(QResizeEvent *);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    bool focusNextPrevChild(bool);
    void inputMethodEvent(QInputMethodEvent *);
    QSize minimumSizeHint() const;
    QSize sizeHint() const;
    void wheelEvent(QWheelEvent *);
    void contextMenuEvent(QContextMenuEvent *);
    void changeEvent(QEvent *);
    int devType() const;
    void setVisible(bool);
    int heightForWidth(int) const;
    QPaintEngine * paintEngine() const;
    void keyReleaseEvent(QKeyEvent *);
    void enterEvent(QEvent *);
    void leaveEvent(QEvent *);
    void moveEvent(QMoveEvent *);
    void closeEvent(QCloseEvent *);
    void tabletEvent(QTabletEvent *);
    void actionEvent(QActionEvent *);
    void showEvent(QShowEvent *);
    void hideEvent(QHideEvent *);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void enabledChange(bool);
    void paletteChange(const QPalette&);
    void fontChange(const QFont&);
    void windowActivationChange(bool);
    void languageChange();
    bool eventFilter(QObject *,QEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTreeView(const sipQTreeView &);
    sipQTreeView &operator = (const sipQTreeView &);

    char sipPyMethods[89];
};

sipQTreeView::sipQTreeView(QWidget *a0): QTreeView(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTreeView::~sipQTreeView()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQTreeView::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QTreeView);
}

int sipQTreeView::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QTreeView::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QTreeView,_c,_id,_a);

    return _id;
}

void *sipQTreeView::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QTreeView,_clname)) ? this : QTreeView::qt_metacast(_clname);
}

void sipQTreeView::setModel(QAbstractItemModel *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_setModel);

    if (!meth)
    {
        QTreeView::setModel(a0);
        return;
    }

    extern void sipVH_QtGui_37(sip_gilstate_t,PyObject *,bool*,QAbstractItemModel *);

    sipVH_QtGui_37(sipGILState,meth,0,a0);
}

void sipQTreeView::setRootIndex(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_setRootIndex);

    if (!meth)
    {
        QTreeView::setRootIndex(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t,PyObject *,bool*,const QModelIndex&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtGui_QtCore->em_virthandlers[46]))(sipGILState,meth,0,a0);
}

void sipQTreeView::setSelectionModel(QItemSelectionModel *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_setSelectionModel);

    if (!meth)
    {
        QTreeView::setSelectionModel(a0);
        return;
    }

    extern void sipVH_QtGui_38(sip_gilstate_t,PyObject *,bool*,QItemSelectionModel *);

    sipVH_QtGui_38(sipGILState,meth,0,a0);
}

void sipQTreeView::keyboardSearch(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_keyboardSearch);

    if (!meth)
    {
        QTreeView::keyboardSearch(a0);
        return;
    }

    typedef void (*sipVH_QtCore_28)(sip_gilstate_t,PyObject *,bool*,const QString&);

    ((sipVH_QtCore_28)(sipModuleAPI_QtGui_QtCore->em_virthandlers[28]))(sipGILState,meth,0,a0);
}

QRect sipQTreeView::visualRect(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_visualRect);

    if (!meth)
        return QTreeView::visualRect(a0);

    extern QRect sipVH_QtGui_57(sip_gilstate_t,PyObject *,bool*,const QModelIndex&);

    return sipVH_QtGui_57(sipGILState,meth,0,a0);
}

void sipQTreeView::scrollTo(const QModelIndex& a0,QAbstractItemView::ScrollHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_scrollTo);

    if (!meth)
    {
        QTreeView::scrollTo(a0,a1);
        return;
    }

    extern void sipVH_QtGui_56(sip_gilstate_t,PyObject *,bool*,const QModelIndex&,QAbstractItemView::ScrollHint);

    sipVH_QtGui_56(sipGILState,meth,0,a0,a1);
}

QModelIndex sipQTreeView::indexAt(const QPoint& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_indexAt);

    if (!meth)
        return QTreeView::indexAt(a0);

    extern QModelIndex sipVH_QtGui_55(sip_gilstate_t,PyObject *,bool*,const QPoint&);

    return sipVH_QtGui_55(sipGILState,meth,0,a0);
}

void sipQTreeView::doItemsLayout()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_doItemsLayout);

    if (!meth)
    {
        QTreeView::doItemsLayout();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

void sipQTreeView::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_reset);

    if (!meth)
    {
        QTreeView::reset();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

void sipQTreeView::dataChanged(const QModelIndex& a0,const QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_dataChanged);

    if (!meth)
    {
        QTreeView::dataChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_46(sip_gilstate_t,PyObject *,bool*,const QModelIndex&,const QModelIndex&);

    sipVH_QtGui_46(sipGILState,meth,0,a0,a1);
}

void sipQTreeView::selectAll()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_selectAll);

    if (!meth)
    {
        QTreeView::selectAll();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

void sipQTreeView::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!meth)
    {
        QTreeView::scrollContentsBy(a0,a1);
        return;
    }

    extern void sipVH_QtGui_33(sip_gilstate_t,PyObject *,bool*,int,int);

    sipVH_QtGui_33(sipGILState,meth,0,a0,a1);
}

void sipQTreeView::rowsInserted(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_rowsInserted);

    if (!meth)
    {
        QTreeView::rowsInserted(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_54(sip_gilstate_t,PyObject *,bool*,const QModelIndex&,int,int);

    sipVH_QtGui_54(sipGILState,meth,0,a0,a1,a2);
}

void sipQTreeView::rowsAboutToBeRemoved(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_rowsAboutToBeRemoved);

    if (!meth)
    {
        QTreeView::rowsAboutToBeRemoved(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_54(sip_gilstate_t,PyObject *,bool*,const QModelIndex&,int,int);

    sipVH_QtGui_54(sipGILState,meth,0,a0,a1,a2);
}

QModelIndex sipQTreeView::moveCursor(QAbstractItemView::CursorAction a0,Qt::KeyboardModifiers a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_moveCursor);

    if (!meth)
        return QTreeView::moveCursor(a0,a1);

    extern QModelIndex sipVH_QtGui_53(sip_gilstate_t,PyObject *,bool*,int,Qt::KeyboardModifiers);

    return sipVH_QtGui_53(sipGILState,meth,0,(int)a0,a1);
}

int sipQTreeView::horizontalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_horizontalOffset);

    if (!meth)
        return QTreeView::horizontalOffset();

    typedef int (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtGui_QtCore->em_virthandlers[7]))(sipGILState,meth,0);
}

int sipQTreeView::verticalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_verticalOffset);

    if (!meth)
        return QTreeView::verticalOffset();

    typedef int (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtGui_QtCore->em_virthandlers[7]))(sipGILState,meth,0);
}

void sipQTreeView::setSelection(const QRect& a0,QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_setSelection);

    if (!meth)
    {
        QTreeView::setSelection(a0,a1);
        return;
    }

    extern void sipVH_QtGui_52(sip_gilstate_t,PyObject *,bool*,const QRect&,QItemSelectionModel::SelectionFlags);

    sipVH_QtGui_52(sipGILState,meth,0,a0,a1);
}

QRegion sipQTreeView::visualRegionForSelection(const QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_visualRegionForSelection);

    if (!meth)
        return QTreeView::visualRegionForSelection(a0);

    extern QRegion sipVH_QtGui_51(sip_gilstate_t,PyObject *,bool*,const QItemSelection&);

    return sipVH_QtGui_51(sipGILState,meth,0,a0);
}

QModelIndexList sipQTreeView::selectedIndexes() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_selectedIndexes);

    if (!meth)
        return QTreeView::selectedIndexes();

    extern QList<QModelIndex> sipVH_QtGui_50(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_50(sipGILState,meth,0);
}

void sipQTreeView::paintEvent(QPaintEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_paintEvent);

    if (!meth)
    {
        QTreeView::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t,PyObject *,bool*,QPaintEvent *);

    sipVH_QtGui_3(sipGILState,meth,0,a0);
}

void sipQTreeView::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QTreeView::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_3)(sip_gilstate_t,PyObject *,bool*,QTimerEvent *);

    ((sipVH_QtCore_3)(sipModuleAPI_QtGui_QtCore->em_virthandlers[3]))(sipGILState,meth,0,a0);
}

void sipQTreeView::mouseReleaseEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!meth)
    {
        QTreeView::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_27(sip_gilstate_t,PyObject *,bool*,QMouseEvent *);

    sipVH_QtGui_27(sipGILState,meth,0,a0);
}

void sipQTreeView::drawRow(QPainter *a0,const QStyleOptionViewItem& a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_drawRow);

    if (!meth)
    {
        QTreeView::drawRow(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_49(sip_gilstate_t,PyObject *,bool*,QPainter *,const QStyleOptionViewItem&,const QModelIndex&);

    sipVH_QtGui_49(sipGILState,meth,0,a0,a1,a2);
}

void sipQTreeView::drawBranches(QPainter *a0,const QRect& a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_drawBranches);

    if (!meth)
    {
        QTreeView::drawBranches(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_48(sip_gilstate_t,PyObject *,bool*,QPainter *,const QRect&,const QModelIndex&);

    sipVH_QtGui_48(sipGILState,meth,0,a0,a1,a2);
}

void sipQTreeView::mousePressEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_mousePressEvent);

    if (!meth)
    {
        QTreeView::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_27(sip_gilstate_t,PyObject *,bool*,QMouseEvent *);

    sipVH_QtGui_27(sipGILState,meth,0,a0);
}

void sipQTreeView::mouseMoveEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!meth)
    {
        QTreeView::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_27(sip_gilstate_t,PyObject *,bool*,QMouseEvent *);

    sipVH_QtGui_27(sipGILState,meth,0,a0);
}

void sipQTreeView::mouseDoubleClickEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!meth)
    {
        QTreeView::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_27(sip_gilstate_t,PyObject *,bool*,QMouseEvent *);

    sipVH_QtGui_27(sipGILState,meth,0,a0);
}

void sipQTreeView::keyPressEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_keyPressEvent);

    if (!meth)
    {
        QTreeView::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,bool*,QKeyEvent *);

    sipVH_QtGui_26(sipGILState,meth,0,a0);
}

void sipQTreeView::updateGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_updateGeometries);

    if (!meth)
    {
        QTreeView::updateGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

int sipQTreeView::sizeHintForColumn(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_sizeHintForColumn);

    if (!meth)
        return QTreeView::sizeHintForColumn(a0);

    extern int sipVH_QtGui_29(sip_gilstate_t,PyObject *,bool*,int);

    return sipVH_QtGui_29(sipGILState,meth,0,a0);
}

void sipQTreeView::horizontalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_horizontalScrollbarAction);

    if (!meth)
    {
        QTreeView::horizontalScrollbarAction(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool*,int);

    sipVH_QtGui_6(sipGILState,meth,0,a0);
}

bool sipQTreeView::isIndexHidden(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,NULL,sipName_isIndexHidden);

    if (!meth)
        return QTreeView::isIndexHidden(a0);

    typedef bool (*sipVH_QtCore_37)(sip_gilstate_t,PyObject *,bool*,const QModelIndex&);

    return ((sipVH_QtCore_37)(sipModuleAPI_QtGui_QtCore->em_virthandlers[37]))(sipGILState,meth,0,a0);
}

void sipQTreeView::dragMoveEvent(QDragMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!meth)
    {
        QTreeView::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t,PyObject *,bool*,QDragMoveEvent *);

    sipVH_QtGui_18(sipGILState,meth,0,a0);
}

bool sipQTreeView::viewportEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_viewportEvent);

    if (!meth)
        return QTreeView::viewportEvent(a0);

    typedef bool (*sipVH_QtCore_12)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return ((sipVH_QtCore_12)(sipModuleAPI_QtGui_QtCore->em_virthandlers[12]))(sipGILState,meth,0,a0);
}

void sipQTreeView::selectionChanged(const QItemSelection& a0,const QItemSelection& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_selectionChanged);

    if (!meth)
    {
        QTreeView::selectionChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_47(sip_gilstate_t,PyObject *,bool*,const QItemSelection&,const QItemSelection&);

    sipVH_QtGui_47(sipGILState,meth,0,a0,a1);
}

void sipQTreeView::currentChanged(const QModelIndex& a0,const QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_currentChanged);

    if (!meth)
    {
        QTreeView::currentChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_46(sip_gilstate_t,PyObject *,bool*,const QModelIndex&,const QModelIndex&);

    sipVH_QtGui_46(sipGILState,meth,0,a0,a1);
}

int sipQTreeView::sizeHintForRow(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_sizeHintForRow);

    if (!meth)
        return QAbstractItemView::sizeHintForRow(a0);

    extern int sipVH_QtGui_29(sip_gilstate_t,PyObject *,bool*,int);

    return sipVH_QtGui_29(sipGILState,meth,0,a0);
}

void sipQTreeView::updateEditorData()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_updateEditorData);

    if (!meth)
    {
        QAbstractItemView::updateEditorData();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

void sipQTreeView::updateEditorGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_updateEditorGeometries);

    if (!meth)
    {
        QAbstractItemView::updateEditorGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

void sipQTreeView::verticalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_verticalScrollbarAction);

    if (!meth)
    {
        QAbstractItemView::verticalScrollbarAction(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool*,int);

    sipVH_QtGui_6(sipGILState,meth,0,a0);
}

void sipQTreeView::verticalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_verticalScrollbarValueChanged);

    if (!meth)
    {
        QAbstractItemView::verticalScrollbarValueChanged(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool*,int);

    sipVH_QtGui_6(sipGILState,meth,0,a0);
}

void sipQTreeView::horizontalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_horizontalScrollbarValueChanged);

    if (!meth)
    {
        QAbstractItemView::horizontalScrollbarValueChanged(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool*,int);

    sipVH_QtGui_6(sipGILState,meth,0,a0);
}

void sipQTreeView::closeEditor(QWidget *a0,QAbstractItemDelegate::EndEditHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_closeEditor);

    if (!meth)
    {
        QAbstractItemView::closeEditor(a0,a1);
        return;
    }

    extern void sipVH_QtGui_233(sip_gilstate_t,PyObject *,bool*,QWidget *,QAbstractItemDelegate::EndEditHint);

    sipVH_QtGui_233(sipGILState,meth,0,a0,a1);
}

void sipQTreeView::commitData(QWidget *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_commitData);

    if (!meth)
    {
        QAbstractItemView::commitData(a0);
        return;
    }

    extern void sipVH_QtGui_8(sip_gilstate_t,PyObject *,bool*,QWidget *);

    sipVH_QtGui_8(sipGILState,meth,0,a0);
}

void sipQTreeView::editorDestroyed(QObject *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_editorDestroyed);

    if (!meth)
    {
        QAbstractItemView::editorDestroyed(a0);
        return;
    }

    extern void sipVH_QtGui_232(sip_gilstate_t,PyObject *,bool*,QObject *);

    sipVH_QtGui_232(sipGILState,meth,0,a0);
}

bool sipQTreeView::edit(const QModelIndex& a0,QAbstractItemView::EditTrigger a1,QEvent *a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_edit);

    if (!meth)
        return QAbstractItemView::edit(a0,a1,a2);

    extern bool sipVH_QtGui_231(sip_gilstate_t,PyObject *,bool*,const QModelIndex&,QAbstractItemView::EditTrigger,QEvent *);

    return sipVH_QtGui_231(sipGILState,meth,0,a0,a1,a2);
}

QItemSelectionModel::SelectionFlags sipQTreeView::selectionCommand(const QModelIndex& a0,const QEvent *a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[47]),sipPySelf,NULL,sipName_selectionCommand);

    if (!meth)
        return QAbstractItemView::selectionCommand(a0,a1);

    extern QItemSelectionModel::SelectionFlags sipVH_QtGui_230(sip_gilstate_t,PyObject *,bool*,const QModelIndex&,const QEvent *);

    return sipVH_QtGui_230(sipGILState,meth,0,a0,a1);
}

void sipQTreeView::startDrag(Qt::DropActions a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_startDrag);

    if (!meth)
    {
        QAbstractItemView::startDrag(a0);
        return;
    }

    extern void sipVH_QtGui_154(sip_gilstate_t,PyObject *,bool*,Qt::DropActions);

    sipVH_QtGui_154(sipGILState,meth,0,a0);
}

QStyleOptionViewItem sipQTreeView::viewOptions() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[49]),sipPySelf,NULL,sipName_viewOptions);

    if (!meth)
        return QAbstractItemView::viewOptions();

    extern QStyleOptionViewItem sipVH_QtGui_72(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_72(sipGILState,meth,0);
}

bool sipQTreeView::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QAbstractItemView::event(a0);

    typedef bool (*sipVH_QtCore_12)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return ((sipVH_QtCore_12)(sipModuleAPI_QtGui_QtCore->em_virthandlers[12]))(sipGILState,meth,0,a0);
}

void sipQTreeView::dragEnterEvent(QDragEnterEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!meth)
    {
        QAbstractItemView::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t,PyObject *,bool*,QDragEnterEvent *);

    sipVH_QtGui_19(sipGILState,meth,0,a0);
}

void sipQTreeView::dragLeaveEvent(QDragLeaveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!meth)
    {
        QAbstractItemView::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t,PyObject *,bool*,QDragLeaveEvent *);

    sipVH_QtGui_17(sipGILState,meth,0,a0);
}

void sipQTreeView::dropEvent(QDropEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,NULL,sipName_dropEvent);

    if (!meth)
    {
        QAbstractItemView::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t,PyObject *,bool*,QDropEvent *);

    sipVH_QtGui_16(sipGILState,meth,0,a0);
}

void sipQTreeView::focusInEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[54],sipPySelf,NULL,sipName_focusInEvent);

    if (!meth)
    {
        QAbstractItemView::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,bool*,QFocusEvent *);

    sipVH_QtGui_25(sipGILState,meth,0,a0);
}

void sipQTreeView::focusOutEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[55],sipPySelf,NULL,sipName_focusOutEvent);

    if (!meth)
    {
        QAbstractItemView::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,bool*,QFocusEvent *);

    sipVH_QtGui_25(sipGILState,meth,0,a0);
}

void sipQTreeView::resizeEvent(QResizeEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[56],sipPySelf,NULL,sipName_resizeEvent);

    if (!meth)
    {
        QAbstractItemView::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t,PyObject *,bool*,QResizeEvent *);

    sipVH_QtGui_2(sipGILState,meth,0,a0);
}

QVariant sipQTreeView::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[57]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!meth)
        return QAbstractItemView::inputMethodQuery(a0);

    extern QVariant sipVH_QtGui_13(sip_gilstate_t,PyObject *,bool*,Qt::InputMethodQuery);

    return sipVH_QtGui_13(sipGILState,meth,0,a0);
}

bool sipQTreeView::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[58],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!meth)
        return QAbstractItemView::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_12(sip_gilstate_t,PyObject *,bool*,bool);

    return sipVH_QtGui_12(sipGILState,meth,0,a0);
}

void sipQTreeView::inputMethodEvent(QInputMethodEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[59],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!meth)
    {
        QAbstractItemView::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_14(sip_gilstate_t,PyObject *,bool*,QInputMethodEvent *);

    sipVH_QtGui_14(sipGILState,meth,0,a0);
}

QSize sipQTreeView::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[60]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!meth)
        return QAbstractScrollArea::minimumSizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_4(sipGILState,meth,0);
}

QSize sipQTreeView::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[61]),sipPySelf,NULL,sipName_sizeHint);

    if (!meth)
        return QAbstractScrollArea::sizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_4(sipGILState,meth,0);
}

void sipQTreeView::wheelEvent(QWheelEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[62],sipPySelf,NULL,sipName_wheelEvent);

    if (!meth)
    {
        QAbstractScrollArea::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t,PyObject *,bool*,QWheelEvent *);

    sipVH_QtGui_5(sipGILState,meth,0,a0);
}

void sipQTreeView::contextMenuEvent(QContextMenuEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[63],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!meth)
    {
        QAbstractScrollArea::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t,PyObject *,bool*,QContextMenuEvent *);

    sipVH_QtGui_22(sipGILState,meth,0,a0);
}

void sipQTreeView::changeEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[64],sipPySelf,NULL,sipName_changeEvent);

    if (!meth)
    {
        QFrame::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

int sipQTreeView::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[65]),sipPySelf,NULL,sipName_devType);

    if (!meth)
        return QWidget::devType();

    typedef int (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtGui_QtCore->em_virthandlers[7]))(sipGILState,meth,0);
}

void sipQTreeView::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[66],sipPySelf,NULL,sipName_setVisible);

    if (!meth)
    {
        QWidget::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t,PyObject *,bool*,bool);

    sipVH_QtGui_7(sipGILState,meth,0,a0);
}

int sipQTreeView::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[67]),sipPySelf,NULL,sipName_heightForWidth);

    if (!meth)
        return QWidget::heightForWidth(a0);

    extern int sipVH_QtGui_29(sip_gilstate_t,PyObject *,bool*,int);

    return sipVH_QtGui_29(sipGILState,meth,0,a0);
}

QPaintEngine * sipQTreeView::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[68]),sipPySelf,NULL,sipName_paintEngine);

    if (!meth)
        return QWidget::paintEngine();

    extern QPaintEngine * sipVH_QtGui_28(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_28(sipGILState,meth,0);
}

void sipQTreeView::keyReleaseEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[69],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!meth)
    {
        QWidget::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,bool*,QKeyEvent *);

    sipVH_QtGui_26(sipGILState,meth,0,a0);
}

void sipQTreeView::enterEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[70],sipPySelf,NULL,sipName_enterEvent);

    if (!meth)
    {
        QWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQTreeView::leaveEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[71],sipPySelf,NULL,sipName_leaveEvent);

    if (!meth)
    {
        QWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQTreeView::moveEvent(QMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[72],sipPySelf,NULL,sipName_moveEvent);

    if (!meth)
    {
        QWidget::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t,PyObject *,bool*,QMoveEvent *);

    sipVH_QtGui_24(sipGILState,meth,0,a0);
}

void sipQTreeView::closeEvent(QCloseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[73],sipPySelf,NULL,sipName_closeEvent);

    if (!meth)
    {
        QWidget::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t,PyObject *,bool*,QCloseEvent *);

    sipVH_QtGui_23(sipGILState,meth,0,a0);
}

void sipQTreeView::tabletEvent(QTabletEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[74],sipPySelf,NULL,sipName_tabletEvent);

    if (!meth)
    {
        QWidget::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t,PyObject *,bool*,QTabletEvent *);

    sipVH_QtGui_21(sipGILState,meth,0,a0);
}

void sipQTreeView::actionEvent(QActionEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[75],sipPySelf,NULL,sipName_actionEvent);

    if (!meth)
    {
        QWidget::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t,PyObject *,bool*,QActionEvent *);

    sipVH_QtGui_20(sipGILState,meth,0,a0);
}

void sipQTreeView::showEvent(QShowEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[76],sipPySelf,NULL,sipName_showEvent);

    if (!meth)
    {
        QWidget::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t,PyObject *,bool*,QShowEvent *);

    sipVH_QtGui_1(sipGILState,meth,0,a0);
}

void sipQTreeView::hideEvent(QHideEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[77],sipPySelf,NULL,sipName_hideEvent);

    if (!meth)
    {
        QWidget::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t,PyObject *,bool*,QHideEvent *);

    sipVH_QtGui_0(sipGILState,meth,0,a0);
}

int sipQTreeView::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[78]),sipPySelf,NULL,sipName_metric);

    if (!meth)
        return QWidget::metric(a0);

    extern int sipVH_QtGui_15(sip_gilstate_t,PyObject *,bool*,QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_15(sipGILState,meth,0,a0);
}

void sipQTreeView::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[79],sipPySelf,NULL,sipName_enabledChange);

    if (!meth)
    {
        QWidget::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t,PyObject *,bool*,bool);

    sipVH_QtGui_7(sipGILState,meth,0,a0);
}

void sipQTreeView::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[80],sipPySelf,NULL,sipName_paletteChange);

    if (!meth)
    {
        QWidget::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_11(sip_gilstate_t,PyObject *,bool*,const QPalette&);

    sipVH_QtGui_11(sipGILState,meth,0,a0);
}

void sipQTreeView::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[81],sipPySelf,NULL,sipName_fontChange);

    if (!meth)
    {
        QWidget::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t,PyObject *,bool*,const QFont&);

    sipVH_QtGui_10(sipGILState,meth,0,a0);
}

void sipQTreeView::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[82],sipPySelf,NULL,sipName_windowActivationChange);

    if (!meth)
    {
        QWidget::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t,PyObject *,bool*,bool);

    sipVH_QtGui_7(sipGILState,meth,0,a0);
}

void sipQTreeView::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[83],sipPySelf,NULL,sipName_languageChange);

    if (!meth)
    {
        QWidget::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

bool sipQTreeView::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[84],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t,PyObject *,bool*,QObject *,QEvent *);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtGui_QtCore->em_virthandlers[20]))(sipGILState,meth,0,a0,a1);
}

void sipQTreeView::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[85],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_19)(sip_gilstate_t,PyObject *,bool*,QChildEvent *);

    ((sipVH_QtCore_19)(sipModuleAPI_QtGui_QtCore->em_virthandlers[19]))(sipGILState,meth,0,a0);
}

void sipQTreeView::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[86],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQTreeView::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[87],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

void sipQTreeView::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[88],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

int sipQTreeView::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQTreeView::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQTreeView::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQTreeView::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQTreeView::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

void sipQTreeView::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg,QKeyEvent *a0)
{
    (sipSelfWasArg ? QWidget::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQTreeView::sipProtectVirt_enterEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QWidget::enterEvent(a0) : enterEvent(a0));
}

void sipQTreeView::sipProtectVirt_leaveEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QWidget::leaveEvent(a0) : leaveEvent(a0));
}

void sipQTreeView::sipProtectVirt_moveEvent(bool sipSelfWasArg,QMoveEvent *a0)
{
    (sipSelfWasArg ? QWidget::moveEvent(a0) : moveEvent(a0));
}

void sipQTreeView::sipProtectVirt_closeEvent(bool sipSelfWasArg,QCloseEvent *a0)
{
    (sipSelfWasArg ? QWidget::closeEvent(a0) : closeEvent(a0));
}

void sipQTreeView::sipProtectVirt_tabletEvent(bool sipSelfWasArg,QTabletEvent *a0)
{
    (sipSelfWasArg ? QWidget::tabletEvent(a0) : tabletEvent(a0));
}

void sipQTreeView::sipProtectVirt_actionEvent(bool sipSelfWasArg,QActionEvent *a0)
{
    (sipSelfWasArg ? QWidget::actionEvent(a0) : actionEvent(a0));
}

void sipQTreeView::sipProtectVirt_showEvent(bool sipSelfWasArg,QShowEvent *a0)
{
    (sipSelfWasArg ? QWidget::showEvent(a0) : showEvent(a0));
}

void sipQTreeView::sipProtectVirt_hideEvent(bool sipSelfWasArg,QHideEvent *a0)
{
    (sipSelfWasArg ? QWidget::hideEvent(a0) : hideEvent(a0));
}

int sipQTreeView::sipProtectVirt_metric(bool sipSelfWasArg,QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ? QWidget::metric(a0) : metric(a0));
}

void sipQTreeView::sipProtect_resetInputContext()
{
    QWidget::resetInputContext();
}

void sipQTreeView::sipProtect_updateMicroFocus()
{
    QWidget::updateMicroFocus();
}

void sipQTreeView::sipProtect_create(WId a0,bool a1,bool a2)
{
    QWidget::create(a0,a1,a2);
}

void sipQTreeView::sipProtect_destroy(bool a0,bool a1)
{
    QWidget::destroy(a0,a1);
}

bool sipQTreeView::sipProtect_focusNextChild()
{
    return QWidget::focusNextChild();
}

bool sipQTreeView::sipProtect_focusPreviousChild()
{
    return QWidget::focusPreviousChild();
}

void sipQTreeView::sipProtectVirt_enabledChange(bool sipSelfWasArg,bool a0)
{
    (sipSelfWasArg ? QWidget::enabledChange(a0) : enabledChange(a0));
}

void sipQTreeView::sipProtectVirt_paletteChange(bool sipSelfWasArg,const QPalette& a0)
{
    (sipSelfWasArg ? QWidget::paletteChange(a0) : paletteChange(a0));
}

void sipQTreeView::sipProtectVirt_fontChange(bool sipSelfWasArg,const QFont& a0)
{
    (sipSelfWasArg ? QWidget::fontChange(a0) : fontChange(a0));
}

void sipQTreeView::sipProtectVirt_windowActivationChange(bool sipSelfWasArg,bool a0)
{
    (sipSelfWasArg ? QWidget::windowActivationChange(a0) : windowActivationChange(a0));
}

void sipQTreeView::sipProtectVirt_languageChange(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QWidget::languageChange() : languageChange());
}

void sipQTreeView::sipProtectVirt_changeEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QFrame::changeEvent(a0) : changeEvent(a0));
}

void sipQTreeView::sipProtect_drawFrame(QPainter *a0)
{
    QFrame::drawFrame(a0);
}

void sipQTreeView::sipProtect_setViewportMargins(int a0,int a1,int a2,int a3)
{
    QAbstractScrollArea::setViewportMargins(a0,a1,a2,a3);
}

void sipQTreeView::sipProtectVirt_wheelEvent(bool sipSelfWasArg,QWheelEvent *a0)
{
    (sipSelfWasArg ? QAbstractScrollArea::wheelEvent(a0) : wheelEvent(a0));
}

void sipQTreeView::sipProtectVirt_contextMenuEvent(bool sipSelfWasArg,QContextMenuEvent *a0)
{
    (sipSelfWasArg ? QAbstractScrollArea::contextMenuEvent(a0) : contextMenuEvent(a0));
}

void sipQTreeView::sipProtect_setupViewport(QWidget *a0)
{
    QAbstractScrollArea::setupViewport(a0);
}

bool sipQTreeView::sipProtectVirt_edit(bool sipSelfWasArg,const QModelIndex& a0,QAbstractItemView::EditTrigger a1,QEvent *a2)
{
    return (sipSelfWasArg ? QAbstractItemView::edit(a0,a1,a2) : edit(a0,a1,a2));
}

void sipQTreeView::sipProtectVirt_updateEditorData(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QAbstractItemView::updateEditorData() : updateEditorData());
}

void sipQTreeView::sipProtectVirt_updateEditorGeometries(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QAbstractItemView::updateEditorGeometries() : updateEditorGeometries());
}

void sipQTreeView::sipProtectVirt_verticalScrollbarAction(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QAbstractItemView::verticalScrollbarAction(a0) : verticalScrollbarAction(a0));
}

void sipQTreeView::sipProtectVirt_verticalScrollbarValueChanged(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QAbstractItemView::verticalScrollbarValueChanged(a0) : verticalScrollbarValueChanged(a0));
}

void sipQTreeView::sipProtectVirt_horizontalScrollbarValueChanged(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QAbstractItemView::horizontalScrollbarValueChanged(a0) : horizontalScrollbarValueChanged(a0));
}

void sipQTreeView::sipProtectVirt_closeEditor(bool sipSelfWasArg,QWidget *a0,QAbstractItemDelegate::EndEditHint a1)
{
    (sipSelfWasArg ? QAbstractItemView::closeEditor(a0,a1) : closeEditor(a0,a1));
}

void sipQTreeView::sipProtectVirt_commitData(bool sipSelfWasArg,QWidget *a0)
{
    (sipSelfWasArg ? QAbstractItemView::commitData(a0) : commitData(a0));
}

void sipQTreeView::sipProtectVirt_editorDestroyed(bool sipSelfWasArg,QObject *a0)
{
    (sipSelfWasArg ? QAbstractItemView::editorDestroyed(a0) : editorDestroyed(a0));
}

void sipQTreeView::sipProtect_setHorizontalStepsPerItem(int a0)
{
    QAbstractItemView::setHorizontalStepsPerItem(a0);
}

int sipQTreeView::sipProtect_horizontalStepsPerItem() const
{
    return QAbstractItemView::horizontalStepsPerItem();
}

void sipQTreeView::sipProtect_setVerticalStepsPerItem(int a0)
{
    QAbstractItemView::setVerticalStepsPerItem(a0);
}

int sipQTreeView::sipProtect_verticalStepsPerItem() const
{
    return QAbstractItemView::verticalStepsPerItem();
}

QItemSelectionModel::SelectionFlags sipQTreeView::sipProtectVirt_selectionCommand(bool sipSelfWasArg,const QModelIndex& a0,const QEvent *a1) const
{
    return (sipSelfWasArg ? QAbstractItemView::selectionCommand(a0,a1) : selectionCommand(a0,a1));
}

void sipQTreeView::sipProtectVirt_startDrag(bool sipSelfWasArg,Qt::DropActions a0)
{
    (sipSelfWasArg ? QAbstractItemView::startDrag(a0) : startDrag(a0));
}

QStyleOptionViewItem sipQTreeView::sipProtectVirt_viewOptions(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QAbstractItemView::viewOptions() : viewOptions());
}

int sipQTreeView::sipProtect_state() const
{
    return (int)QAbstractItemView::state();
}

void sipQTreeView::sipProtect_setState(int a0)
{
    QAbstractItemView::setState((QAbstractItemView::State)a0);
}

void sipQTreeView::sipProtect_scheduleDelayedItemsLayout()
{
    QAbstractItemView::scheduleDelayedItemsLayout();
}

void sipQTreeView::sipProtect_executeDelayedItemsLayout()
{
    QAbstractItemView::executeDelayedItemsLayout();
}

void sipQTreeView::sipProtect_scrollDirtyRegion(int a0,int a1)
{
    QAbstractItemView::scrollDirtyRegion(a0,a1);
}

void sipQTreeView::sipProtect_setDirtyRegion(const QRegion& a0)
{
    QAbstractItemView::setDirtyRegion(a0);
}

QPoint sipQTreeView::sipProtect_dirtyRegionOffset() const
{
    return QAbstractItemView::dirtyRegionOffset();
}

bool sipQTreeView::sipProtectVirt_event(bool sipSelfWasArg,QEvent *a0)
{
    return (sipSelfWasArg ? QAbstractItemView::event(a0) : event(a0));
}

void sipQTreeView::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg,QDragEnterEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQTreeView::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg,QDragLeaveEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQTreeView::sipProtectVirt_dropEvent(bool sipSelfWasArg,QDropEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::dropEvent(a0) : dropEvent(a0));
}

void sipQTreeView::sipProtectVirt_focusInEvent(bool sipSelfWasArg,QFocusEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::focusInEvent(a0) : focusInEvent(a0));
}

void sipQTreeView::sipProtectVirt_focusOutEvent(bool sipSelfWasArg,QFocusEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQTreeView::sipProtectVirt_resizeEvent(bool sipSelfWasArg,QResizeEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::resizeEvent(a0) : resizeEvent(a0));
}

int sipQTreeView::sipProtect_dropIndicatorPosition() const
{
    return (int)QAbstractItemView::dropIndicatorPosition();
}

bool sipQTreeView::sipProtectVirt_focusNextPrevChild(bool sipSelfWasArg,bool a0)
{
    return (sipSelfWasArg ? QAbstractItemView::focusNextPrevChild(a0) : focusNextPrevChild(a0));
}

void sipQTreeView::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg,QInputMethodEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::inputMethodEvent(a0) : inputMethodEvent(a0));
}

void sipQTreeView::sipProtect_columnResized(int a0,int a1,int a2)
{
    QTreeView::columnResized(a0,a1,a2);
}

void sipQTreeView::sipProtect_columnCountChanged(int a0,int a1)
{
    QTreeView::columnCountChanged(a0,a1);
}

void sipQTreeView::sipProtect_columnMoved()
{
    QTreeView::columnMoved();
}

void sipQTreeView::sipProtect_reexpand()
{
    QTreeView::reexpand();
}

void sipQTreeView::sipProtect_rowsRemoved(const QModelIndex& a0,int a1,int a2)
{
    QTreeView::rowsRemoved(a0,a1,a2);
}

void sipQTreeView::sipProtectVirt_scrollContentsBy(bool sipSelfWasArg,int a0,int a1)
{
    (sipSelfWasArg ? QTreeView::scrollContentsBy(a0,a1) : scrollContentsBy(a0,a1));
}

void sipQTreeView::sipProtectVirt_rowsInserted(bool sipSelfWasArg,const QModelIndex& a0,int a1,int a2)
{
    (sipSelfWasArg ? QTreeView::rowsInserted(a0,a1,a2) : rowsInserted(a0,a1,a2));
}

void sipQTreeView::sipProtectVirt_rowsAboutToBeRemoved(bool sipSelfWasArg,const QModelIndex& a0,int a1,int a2)
{
    (sipSelfWasArg ? QTreeView::rowsAboutToBeRemoved(a0,a1,a2) : rowsAboutToBeRemoved(a0,a1,a2));
}

QModelIndex sipQTreeView::sipProtectVirt_moveCursor(bool sipSelfWasArg,int a0,Qt::KeyboardModifiers a1)
{
    return (sipSelfWasArg ? QTreeView::moveCursor((QAbstractItemView::CursorAction)a0,a1) : moveCursor((QAbstractItemView::CursorAction)a0,a1));
}

int sipQTreeView::sipProtectVirt_horizontalOffset(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QTreeView::horizontalOffset() : horizontalOffset());
}

int sipQTreeView::sipProtectVirt_verticalOffset(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QTreeView::verticalOffset() : verticalOffset());
}

void sipQTreeView::sipProtectVirt_setSelection(bool sipSelfWasArg,const QRect& a0,QItemSelectionModel::SelectionFlags a1)
{
    (sipSelfWasArg ? QTreeView::setSelection(a0,a1) : setSelection(a0,a1));
}

QRegion sipQTreeView::sipProtectVirt_visualRegionForSelection(bool sipSelfWasArg,const QItemSelection& a0) const
{
    return (sipSelfWasArg ? QTreeView::visualRegionForSelection(a0) : visualRegionForSelection(a0));
}

QModelIndexList sipQTreeView::sipProtectVirt_selectedIndexes(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QTreeView::selectedIndexes() : selectedIndexes());
}

void sipQTreeView::sipProtectVirt_paintEvent(bool sipSelfWasArg,QPaintEvent *a0)
{
    (sipSelfWasArg ? QTreeView::paintEvent(a0) : paintEvent(a0));
}

void sipQTreeView::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QTreeView::timerEvent(a0) : timerEvent(a0));
}

void sipQTreeView::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QTreeView::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQTreeView::sipProtectVirt_drawRow(bool sipSelfWasArg,QPainter *a0,const QStyleOptionViewItem& a1,const QModelIndex& a2) const
{
    (sipSelfWasArg ? QTreeView::drawRow(a0,a1,a2) : drawRow(a0,a1,a2));
}

void sipQTreeView::sipProtectVirt_drawBranches(bool sipSelfWasArg,QPainter *a0,const QRect& a1,const QModelIndex& a2) const
{
    (sipSelfWasArg ? QTreeView::drawBranches(a0,a1,a2) : drawBranches(a0,a1,a2));
}

void sipQTreeView::sipProtect_drawTree(QPainter *a0,const QRegion& a1) const
{
    QTreeView::drawTree(a0,a1);
}

void sipQTreeView::sipProtectVirt_mousePressEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QTreeView::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQTreeView::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QTreeView::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQTreeView::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QTreeView::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQTreeView::sipProtectVirt_keyPressEvent(bool sipSelfWasArg,QKeyEvent *a0)
{
    (sipSelfWasArg ? QTreeView::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQTreeView::sipProtectVirt_updateGeometries(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QTreeView::updateGeometries() : updateGeometries());
}

int sipQTreeView::sipProtectVirt_sizeHintForColumn(bool sipSelfWasArg,int a0) const
{
    return (sipSelfWasArg ? QTreeView::sizeHintForColumn(a0) : sizeHintForColumn(a0));
}

int sipQTreeView::sipProtect_indexRowSizeHint(const QModelIndex& a0) const
{
    return QTreeView::indexRowSizeHint(a0);
}

void sipQTreeView::sipProtectVirt_horizontalScrollbarAction(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QTreeView::horizontalScrollbarAction(a0) : horizontalScrollbarAction(a0));
}

bool sipQTreeView::sipProtectVirt_isIndexHidden(bool sipSelfWasArg,const QModelIndex& a0) const
{
    return (sipSelfWasArg ? QTreeView::isIndexHidden(a0) : isIndexHidden(a0));
}

void sipQTreeView::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg,QDragMoveEvent *a0)
{
    (sipSelfWasArg ? QTreeView::dragMoveEvent(a0) : dragMoveEvent(a0));
}

bool sipQTreeView::sipProtectVirt_viewportEvent(bool sipSelfWasArg,QEvent *a0)
{
    return (sipSelfWasArg ? QTreeView::viewportEvent(a0) : viewportEvent(a0));
}

int sipQTreeView::sipProtect_rowHeight(const QModelIndex& a0) const
{
    return QTreeView::rowHeight(a0);
}

void sipQTreeView::sipProtectVirt_selectionChanged(bool sipSelfWasArg,const QItemSelection& a0,const QItemSelection& a1)
{
    (sipSelfWasArg ? QTreeView::selectionChanged(a0,a1) : selectionChanged(a0,a1));
}

void sipQTreeView::sipProtectVirt_currentChanged(bool sipSelfWasArg,const QModelIndex& a0,const QModelIndex& a1)
{
    (sipSelfWasArg ? QTreeView::currentChanged(a0,a1) : currentChanged(a0,a1));
}


extern "C" {static PyObject *meth_QTreeView_receivers(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        char * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            int sipRes = 0;

#line 480 "sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
#line 2606 "sipQtGuiQTreeView.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_receivers);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QChildEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_childEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_customEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_connectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_disconnectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QKeyEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_keyReleaseEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_enterEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_enterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_enterEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_enterEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_leaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_leaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_leaveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_leaveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_moveEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_moveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMoveEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QMoveEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_moveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_closeEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_closeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QCloseEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QCloseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_closeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_closeEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_tabletEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_tabletEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTabletEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QTabletEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_tabletEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_tabletEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_actionEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_actionEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QActionEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QActionEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_actionEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_actionEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QShowEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_showEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_hideEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_hideEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QHideEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_hideEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_metric(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_metric(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pE",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QPaintDevice_PaintDeviceMetric,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_metric);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_resetInputContext(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_resetInputContext(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_resetInputContext();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_resetInputContext);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_updateMicroFocus(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_updateMicroFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_updateMicroFocus();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_updateMicroFocus);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_create(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_create(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        WId a0 = 0;
        bool a1 = 1;
        bool a2 = 1;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p|mbb",&sipSelf,sipType_QTreeView,&sipCpp,&a0,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_create(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_create);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_destroy(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0 = 1;
        bool a1 = 1;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p|bb",&sipSelf,sipType_QTreeView,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_destroy(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_destroy);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_focusNextChild(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_focusNextChild(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_focusNextChild();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_focusNextChild);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_focusPreviousChild(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_focusPreviousChild(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_focusPreviousChild();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_focusPreviousChild);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_enabledChange(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_enabledChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pb",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_enabledChange(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_enabledChange);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_paletteChange(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_paletteChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPalette * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QPalette,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_paletteChange(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_paletteChange);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_fontChange(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_fontChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QFont * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QFont,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_fontChange(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_fontChange);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_windowActivationChange(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_windowActivationChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pb",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_windowActivationChange(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_windowActivationChange);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_languageChange(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_languageChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_languageChange(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_languageChange);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_changeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_changeEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_drawFrame(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_drawFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPainter * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QPainter,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_drawFrame(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_drawFrame);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_setViewportMargins(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setViewportMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"piiii",&sipSelf,sipType_QTreeView,&sipCpp,&a0,&a1,&a2,&a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setViewportMargins(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_setViewportMargins);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QWheelEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_wheelEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QContextMenuEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_contextMenuEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_contextMenuEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_setupViewport(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setupViewport(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWidget * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QWidget,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setupViewport(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_setupViewport);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_edit(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_edit(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QModelIndex,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->edit(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QModelIndex * a0;
        QAbstractItemView::EditTrigger a1;
        QEvent * a2;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9EJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QModelIndex,&a0,sipType_QAbstractItemView_EditTrigger,&a1,sipType_QEvent,&a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_edit(sipSelfWasArg,*a0,a1,a2);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_edit);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_updateEditorData(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_updateEditorData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_updateEditorData(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_updateEditorData);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_updateEditorGeometries(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_updateEditorGeometries(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_updateEditorGeometries(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_updateEditorGeometries);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_verticalScrollbarAction(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_verticalScrollbarAction(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pi",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_verticalScrollbarAction(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_verticalScrollbarAction);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_verticalScrollbarValueChanged(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_verticalScrollbarValueChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pi",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_verticalScrollbarValueChanged(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_verticalScrollbarValueChanged);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_horizontalScrollbarValueChanged(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_horizontalScrollbarValueChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pi",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_horizontalScrollbarValueChanged(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_horizontalScrollbarValueChanged);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_closeEditor(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_closeEditor(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget * a0;
        QAbstractItemDelegate::EndEditHint a1;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8E",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QWidget,&a0,sipType_QAbstractItemDelegate_EndEditHint,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_closeEditor(sipSelfWasArg,a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_closeEditor);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_commitData(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_commitData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QWidget,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_commitData(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_commitData);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_editorDestroyed(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_editorDestroyed(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QObject,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_editorDestroyed(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_editorDestroyed);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_setHorizontalStepsPerItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setHorizontalStepsPerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pi",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setHorizontalStepsPerItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_setHorizontalStepsPerItem);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_horizontalStepsPerItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_horizontalStepsPerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_horizontalStepsPerItem();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_horizontalStepsPerItem);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_setVerticalStepsPerItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setVerticalStepsPerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pi",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setVerticalStepsPerItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_setVerticalStepsPerItem);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_verticalStepsPerItem(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_verticalStepsPerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_verticalStepsPerItem();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_verticalStepsPerItem);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_selectionCommand(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_selectionCommand(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        const QEvent * a1 = 0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9|J8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QModelIndex,&a0,sipType_QEvent,&a1))
        {
            QItemSelectionModel::SelectionFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QItemSelectionModel::SelectionFlags(sipCpp->sipProtectVirt_selectionCommand(sipSelfWasArg,*a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QItemSelectionModel_SelectionFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_selectionCommand);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_startDrag(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_startDrag(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::DropActions * a0;
        int a0State = 0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ1",&sipSelf,sipType_QTreeView,&sipCpp,sipType_Qt_DropActions,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_startDrag(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_Qt_DropActions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_startDrag);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_viewOptions(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_viewOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            QStyleOptionViewItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStyleOptionViewItem(sipCpp->sipProtectVirt_viewOptions(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStyleOptionViewItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_viewOptions);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_state(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_state(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_state();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QAbstractItemView_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_state);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_setState(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setState(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pE",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QAbstractItemView_State,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setState(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_setState);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_scheduleDelayedItemsLayout(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_scheduleDelayedItemsLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_scheduleDelayedItemsLayout();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_scheduleDelayedItemsLayout);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_executeDelayedItemsLayout(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_executeDelayedItemsLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_executeDelayedItemsLayout();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_executeDelayedItemsLayout);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_scrollDirtyRegion(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_scrollDirtyRegion(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pii",&sipSelf,sipType_QTreeView,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_scrollDirtyRegion(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_scrollDirtyRegion);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_setDirtyRegion(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setDirtyRegion(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QRegion * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QRegion,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setDirtyRegion(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_setDirtyRegion);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_dirtyRegionOffset(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_dirtyRegionOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            QPoint *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint(sipCpp->sipProtect_dirtyRegionOffset());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_dirtyRegionOffset);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_event(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_event(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QEvent,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_event);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_dragEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QDragEnterEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_dragEnterEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_dragLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QDragLeaveEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_dragLeaveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QDropEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_dropEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QFocusEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_focusInEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QFocusEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_focusOutEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QResizeEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_resizeEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_dropIndicatorPosition(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_dropIndicatorPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_dropIndicatorPosition();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QAbstractItemView_DropIndicatorPosition);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_dropIndicatorPosition);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pb",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_focusNextPrevChild(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_focusNextPrevChild);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_inputMethodEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QInputMethodEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_inputMethodEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_setModel(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setModel(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemModel * a0;
        PyObject *a0Keep;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B@J8",&sipSelf,sipType_QTreeView,&sipCpp,&a0Keep,sipType_QAbstractItemModel,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::setModel(a0) : sipCpp->setModel(a0));
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, 38, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_setModel);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_setRootIndex(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setRootIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QModelIndex,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::setRootIndex(*a0) : sipCpp->setRootIndex(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_setRootIndex);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_setSelectionModel(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setSelectionModel(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QItemSelectionModel * a0;
        PyObject *a0Keep;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B@J8",&sipSelf,sipType_QTreeView,&sipCpp,&a0Keep,sipType_QItemSelectionModel,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::setSelectionModel(a0) : sipCpp->setSelectionModel(a0));
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, 39, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_setSelectionModel);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_header(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_header(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            QHeaderView *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->header();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QHeaderView,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_header);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_setHeader(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setHeader(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHeaderView * a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QHeaderView,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHeader(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_setHeader);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_indentation(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_indentation(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indentation();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_indentation);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_setIndentation(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setIndentation(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIndentation(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_setIndentation);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_rootIsDecorated(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_rootIsDecorated(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rootIsDecorated();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_rootIsDecorated);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_setRootIsDecorated(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setRootIsDecorated(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRootIsDecorated(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_setRootIsDecorated);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_uniformRowHeights(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_uniformRowHeights(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->uniformRowHeights();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_uniformRowHeights);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_setUniformRowHeights(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setUniformRowHeights(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUniformRowHeights(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_setUniformRowHeights);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_itemsExpandable(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_itemsExpandable(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemsExpandable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_itemsExpandable);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_setItemsExpandable(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setItemsExpandable(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItemsExpandable(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_setItemsExpandable);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_columnViewportPosition(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_columnViewportPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->columnViewportPosition(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_columnViewportPosition);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_columnWidth(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_columnWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->columnWidth(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_columnWidth);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_columnAt(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_columnAt(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->columnAt(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_columnAt);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_isColumnHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isColumnHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isColumnHidden(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_isColumnHidden);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_setColumnHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setColumnHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        bool a1;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bib",&sipSelf,sipType_QTreeView,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setColumnHidden(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_setColumnHidden);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_isRowHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isRowHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        const QModelIndex * a1;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiJ9",&sipSelf,sipType_QTreeView,&sipCpp,&a0,sipType_QModelIndex,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isRowHidden(a0,*a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_isRowHidden);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_setRowHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setRowHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        const QModelIndex * a1;
        bool a2;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiJ9b",&sipSelf,sipType_QTreeView,&sipCpp,&a0,sipType_QModelIndex,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRowHidden(a0,*a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_setRowHidden);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_isExpanded(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isExpanded(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QModelIndex,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isExpanded(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_isExpanded);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_setExpanded(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setExpanded(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;
        bool a1;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9b",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QModelIndex,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setExpanded(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_setExpanded);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_keyboardSearch(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_keyboardSearch(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::keyboardSearch(*a0) : sipCpp->keyboardSearch(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_keyboardSearch);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_visualRect(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_visualRect(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QModelIndex,&a0))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect((sipSelfWasArg ? sipCpp->QTreeView::visualRect(*a0) : sipCpp->visualRect(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_visualRect);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_scrollTo(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_scrollTo(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QAbstractItemView::ScrollHint a1 = QAbstractItemView::EnsureVisible;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9|E",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QModelIndex,&a0,sipType_QAbstractItemView_ScrollHint,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::scrollTo(*a0,a1) : sipCpp->scrollTo(*a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_scrollTo);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_indexAt(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_indexAt(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPoint * a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QPoint,&a0))
        {
            QModelIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QTreeView::indexAt(*a0) : sipCpp->indexAt(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_indexAt);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_indexAbove(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_indexAbove(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QModelIndex,&a0))
        {
            QModelIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->indexAbove(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_indexAbove);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_indexBelow(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_indexBelow(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QModelIndex,&a0))
        {
            QModelIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->indexBelow(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_indexBelow);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_doItemsLayout(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_doItemsLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::doItemsLayout() : sipCpp->doItemsLayout());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_doItemsLayout);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_reset(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::reset() : sipCpp->reset());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_reset);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_dataChanged(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_dataChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        const QModelIndex * a1;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9J9",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QModelIndex,&a0,sipType_QModelIndex,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::dataChanged(*a0,*a1) : sipCpp->dataChanged(*a0,*a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_dataChanged);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_hideColumn(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_hideColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->hideColumn(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_hideColumn);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_showColumn(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_showColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->showColumn(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_showColumn);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_expand(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_expand(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QModelIndex,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->expand(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_expand);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_expandAll(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_expandAll(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->expandAll();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_expandAll);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_collapse(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_collapse(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QModelIndex,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->collapse(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_collapse);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_collapseAll(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_collapseAll(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->collapseAll();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_collapseAll);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_resizeColumnToContents(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_resizeColumnToContents(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resizeColumnToContents(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_resizeColumnToContents);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_sortByColumn(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_sortByColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sortByColumn(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        Qt::SortOrder a1;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiE",&sipSelf,sipType_QTreeView,&sipCpp,&a0,sipType_Qt_SortOrder,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sortByColumn(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_sortByColumn);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_selectAll(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_selectAll(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QTreeView::selectAll() : sipCpp->selectAll());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_selectAll);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_columnResized(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_columnResized(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        int a2;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"piii",&sipSelf,sipType_QTreeView,&sipCpp,&a0,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_columnResized(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_columnResized);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_columnCountChanged(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_columnCountChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pii",&sipSelf,sipType_QTreeView,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_columnCountChanged(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_columnCountChanged);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_columnMoved(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_columnMoved(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_columnMoved();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_columnMoved);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_reexpand(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_reexpand(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_reexpand();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_reexpand);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_rowsRemoved(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_rowsRemoved(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;
        int a1;
        int a2;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9ii",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QModelIndex,&a0,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_rowsRemoved(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_rowsRemoved);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_scrollContentsBy(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_scrollContentsBy(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pii",&sipSelf,sipType_QTreeView,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_scrollContentsBy(sipSelfWasArg,a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_scrollContentsBy);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_rowsInserted(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_rowsInserted(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        int a1;
        int a2;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9ii",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QModelIndex,&a0,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_rowsInserted(sipSelfWasArg,*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_rowsInserted);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_rowsAboutToBeRemoved(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_rowsAboutToBeRemoved(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        int a1;
        int a2;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9ii",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QModelIndex,&a0,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_rowsAboutToBeRemoved(sipSelfWasArg,*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_rowsAboutToBeRemoved);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_moveCursor(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_moveCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        Qt::KeyboardModifiers * a1;
        int a1State = 0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pEJ1",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QAbstractItemView_CursorAction,&a0,sipType_Qt_KeyboardModifiers,&a1,&a1State))
        {
            QModelIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->sipProtectVirt_moveCursor(sipSelfWasArg,a0,*a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_Qt_KeyboardModifiers,a1State);

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_moveCursor);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_horizontalOffset(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_horizontalOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_horizontalOffset(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_horizontalOffset);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_verticalOffset(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_verticalOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_verticalOffset(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_verticalOffset);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_setSelection(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRect * a0;
        QItemSelectionModel::SelectionFlags * a1;
        int a1State = 0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9J1",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QRect,&a0,sipType_QItemSelectionModel_SelectionFlags,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_setSelection(sipSelfWasArg,*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_setSelection);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_visualRegionForSelection(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_visualRegionForSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QItemSelection,&a0))
        {
            QRegion *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRegion(sipCpp->sipProtectVirt_visualRegionForSelection(sipSelfWasArg,*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRegion,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_visualRegionForSelection);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_selectedIndexes(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_selectedIndexes(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            QModelIndexList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndexList(sipCpp->sipProtectVirt_selectedIndexes(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_selectedIndexes);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QPaintEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_paintEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_paintEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QTimerEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_timerEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QMouseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_mouseReleaseEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_drawRow(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_drawRow(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter * a0;
        const QStyleOptionViewItem * a1;
        const QModelIndex * a2;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8J9J9",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QPainter,&a0,sipType_QStyleOptionViewItem,&a1,sipType_QModelIndex,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_drawRow(sipSelfWasArg,a0,*a1,*a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_drawRow);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_drawBranches(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_drawBranches(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter * a0;
        const QRect * a1;
        const QModelIndex * a2;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8J9J9",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QPainter,&a0,sipType_QRect,&a1,sipType_QModelIndex,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_drawBranches(sipSelfWasArg,a0,*a1,*a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_drawBranches);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_drawTree(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_drawTree(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPainter * a0;
        const QRegion * a1;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8J9",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QPainter,&a0,sipType_QRegion,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_drawTree(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_drawTree);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QMouseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_mousePressEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QMouseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_mouseMoveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QMouseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_mouseDoubleClickEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QKeyEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_keyPressEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_updateGeometries(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_updateGeometries(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_updateGeometries(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_updateGeometries);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_sizeHintForColumn(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_sizeHintForColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pi",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_sizeHintForColumn(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_sizeHintForColumn);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_indexRowSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_indexRowSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QModelIndex,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_indexRowSizeHint(*a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_indexRowSizeHint);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_horizontalScrollbarAction(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_horizontalScrollbarAction(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pi",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_horizontalScrollbarAction(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_horizontalScrollbarAction);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_isIndexHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isIndexHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QModelIndex,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_isIndexHidden(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_isIndexHidden);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_setColumnWidth(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setColumnWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii",&sipSelf,sipType_QTreeView,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setColumnWidth(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_setColumnWidth);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_setSortingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setSortingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSortingEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_setSortingEnabled);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_isSortingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isSortingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSortingEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_isSortingEnabled);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_setAnimated(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setAnimated(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAnimated(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_setAnimated);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_isAnimated(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isAnimated(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isAnimated();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_isAnimated);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_setAllColumnsShowFocus(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setAllColumnsShowFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAllColumnsShowFocus(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_setAllColumnsShowFocus);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_allColumnsShowFocus(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_allColumnsShowFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->allColumnsShowFocus();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_allColumnsShowFocus);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_autoExpandDelay(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_autoExpandDelay(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoExpandDelay();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_autoExpandDelay);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_setAutoExpandDelay(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setAutoExpandDelay(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoExpandDelay(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_setAutoExpandDelay);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_isFirstColumnSpanned(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isFirstColumnSpanned(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        const QModelIndex * a1;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiJ9",&sipSelf,sipType_QTreeView,&sipCpp,&a0,sipType_QModelIndex,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isFirstColumnSpanned(a0,*a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_isFirstColumnSpanned);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_setFirstColumnSpanned(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setFirstColumnSpanned(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        const QModelIndex * a1;
        bool a2;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiJ9b",&sipSelf,sipType_QTreeView,&sipCpp,&a0,sipType_QModelIndex,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFirstColumnSpanned(a0,*a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_setFirstColumnSpanned);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_setWordWrap(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setWordWrap(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWordWrap(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_setWordWrap);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_wordWrap(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_wordWrap(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->wordWrap();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_wordWrap);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_expandToDepth(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_expandToDepth(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->expandToDepth(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_expandToDepth);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QDragMoveEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_dragMoveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_viewportEvent(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_viewportEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QEvent,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_viewportEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_viewportEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_rowHeight(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_rowHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QModelIndex,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_rowHeight(*a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_rowHeight);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_selectionChanged(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_selectionChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection * a0;
        const QItemSelection * a1;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9J9",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QItemSelection,&a0,sipType_QItemSelection,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_selectionChanged(sipSelfWasArg,*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_selectionChanged);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_currentChanged(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_currentChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        const QModelIndex * a1;
        sipQTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9J9",&sipSelf,sipType_QTreeView,&sipCpp,sipType_QModelIndex,&a0,sipType_QModelIndex,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_currentChanged(sipSelfWasArg,*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_currentChanged);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_expandsOnDoubleClick(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_expandsOnDoubleClick(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->expandsOnDoubleClick();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_expandsOnDoubleClick);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_setExpandsOnDoubleClick(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setExpandsOnDoubleClick(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setExpandsOnDoubleClick(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_setExpandsOnDoubleClick);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_isHeaderHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_isHeaderHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTreeView,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isHeaderHidden();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_isHeaderHidden);

    return NULL;
}


extern "C" {static PyObject *meth_QTreeView_setHeaderHidden(PyObject *, PyObject *);}
static PyObject *meth_QTreeView_setHeaderHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QTreeView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QTreeView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHeaderHidden(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTreeView,sipName_setHeaderHidden);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTreeView(void *, const sipTypeDef *);}
static void *cast_QTreeView(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTreeView)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractItemView)->ctd_cast((QAbstractItemView *)(QTreeView *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTreeView(void *, int);}
static void release_QTreeView(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQTreeView *>(sipCppV);
    else
        delete reinterpret_cast<QTreeView *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QTreeView(sipSimpleWrapper *);}
static void dealloc_QTreeView(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTreeView *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTreeView(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QTreeView(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QTreeView(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **sipOwner, int *sipArgsParsed)
{
    sipQTreeView *sipCpp = 0;

    if (!sipCpp)
    {
        QWidget * a0 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"|JH",sipType_QWidget,&a0,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTreeView(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTreeView[] = {{5, 255, 1}};


static PyMethodDef methods_QTreeView[] = {
    {SIP_MLNAME_CAST(sipName_actionEvent), meth_QTreeView_actionEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_allColumnsShowFocus), meth_QTreeView_allColumnsShowFocus, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_autoExpandDelay), meth_QTreeView_autoExpandDelay, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QTreeView_changeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QTreeView_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_closeEditor), meth_QTreeView_closeEditor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_closeEvent), meth_QTreeView_closeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_collapse), meth_QTreeView_collapse, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_collapseAll), meth_QTreeView_collapseAll, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_columnAt), meth_QTreeView_columnAt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_columnCountChanged), meth_QTreeView_columnCountChanged, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_columnMoved), meth_QTreeView_columnMoved, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_columnResized), meth_QTreeView_columnResized, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_columnViewportPosition), meth_QTreeView_columnViewportPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_columnWidth), meth_QTreeView_columnWidth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_commitData), meth_QTreeView_commitData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QTreeView_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), meth_QTreeView_contextMenuEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_create), meth_QTreeView_create, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentChanged), meth_QTreeView_currentChanged, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QTreeView_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dataChanged), meth_QTreeView_dataChanged, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_destroy), meth_QTreeView_destroy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dirtyRegionOffset), meth_QTreeView_dirtyRegionOffset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QTreeView_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_doItemsLayout), meth_QTreeView_doItemsLayout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), meth_QTreeView_dragEnterEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), meth_QTreeView_dragLeaveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), meth_QTreeView_dragMoveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawBranches), meth_QTreeView_drawBranches, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawFrame), meth_QTreeView_drawFrame, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawRow), meth_QTreeView_drawRow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawTree), meth_QTreeView_drawTree, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dropEvent), meth_QTreeView_dropEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dropIndicatorPosition), meth_QTreeView_dropIndicatorPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_edit), meth_QTreeView_edit, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_editorDestroyed), meth_QTreeView_editorDestroyed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_enabledChange), meth_QTreeView_enabledChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_enterEvent), meth_QTreeView_enterEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_event), meth_QTreeView_event, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_executeDelayedItemsLayout), meth_QTreeView_executeDelayedItemsLayout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_expand), meth_QTreeView_expand, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_expandAll), meth_QTreeView_expandAll, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_expandToDepth), meth_QTreeView_expandToDepth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_expandsOnDoubleClick), meth_QTreeView_expandsOnDoubleClick, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QTreeView_focusInEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextChild), meth_QTreeView_focusNextChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), meth_QTreeView_focusNextPrevChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QTreeView_focusOutEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusPreviousChild), meth_QTreeView_focusPreviousChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fontChange), meth_QTreeView_fontChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_header), meth_QTreeView_header, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hideColumn), meth_QTreeView_hideColumn, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hideEvent), meth_QTreeView_hideEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_horizontalOffset), meth_QTreeView_horizontalOffset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_horizontalScrollbarAction), meth_QTreeView_horizontalScrollbarAction, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_horizontalScrollbarValueChanged), meth_QTreeView_horizontalScrollbarValueChanged, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_horizontalStepsPerItem), meth_QTreeView_horizontalStepsPerItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_indentation), meth_QTreeView_indentation, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_indexAbove), meth_QTreeView_indexAbove, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_indexAt), meth_QTreeView_indexAt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_indexBelow), meth_QTreeView_indexBelow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_indexRowSizeHint), meth_QTreeView_indexRowSizeHint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), meth_QTreeView_inputMethodEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isAnimated), meth_QTreeView_isAnimated, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isColumnHidden), meth_QTreeView_isColumnHidden, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isExpanded), meth_QTreeView_isExpanded, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isFirstColumnSpanned), meth_QTreeView_isFirstColumnSpanned, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isHeaderHidden), meth_QTreeView_isHeaderHidden, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isIndexHidden), meth_QTreeView_isIndexHidden, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isRowHidden), meth_QTreeView_isRowHidden, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isSortingEnabled), meth_QTreeView_isSortingEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_itemsExpandable), meth_QTreeView_itemsExpandable, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QTreeView_keyPressEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), meth_QTreeView_keyReleaseEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_keyboardSearch), meth_QTreeView_keyboardSearch, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_languageChange), meth_QTreeView_languageChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_leaveEvent), meth_QTreeView_leaveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_metric), meth_QTreeView_metric, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), meth_QTreeView_mouseDoubleClickEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QTreeView_mouseMoveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QTreeView_mousePressEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QTreeView_mouseReleaseEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveCursor), meth_QTreeView_moveCursor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveEvent), meth_QTreeView_moveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QTreeView_paintEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paletteChange), meth_QTreeView_paletteChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QTreeView_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_reexpand), meth_QTreeView_reexpand, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_reset), meth_QTreeView_reset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resetInputContext), meth_QTreeView_resetInputContext, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resizeColumnToContents), meth_QTreeView_resizeColumnToContents, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QTreeView_resizeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rootIsDecorated), meth_QTreeView_rootIsDecorated, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rowHeight), meth_QTreeView_rowHeight, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rowsAboutToBeRemoved), meth_QTreeView_rowsAboutToBeRemoved, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rowsInserted), meth_QTreeView_rowsInserted, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rowsRemoved), meth_QTreeView_rowsRemoved, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scheduleDelayedItemsLayout), meth_QTreeView_scheduleDelayedItemsLayout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scrollContentsBy), meth_QTreeView_scrollContentsBy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scrollDirtyRegion), meth_QTreeView_scrollDirtyRegion, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scrollTo), meth_QTreeView_scrollTo, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_selectAll), meth_QTreeView_selectAll, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_selectedIndexes), meth_QTreeView_selectedIndexes, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_selectionChanged), meth_QTreeView_selectionChanged, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_selectionCommand), meth_QTreeView_selectionCommand, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAllColumnsShowFocus), meth_QTreeView_setAllColumnsShowFocus, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAnimated), meth_QTreeView_setAnimated, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAutoExpandDelay), meth_QTreeView_setAutoExpandDelay, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setColumnHidden), meth_QTreeView_setColumnHidden, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setColumnWidth), meth_QTreeView_setColumnWidth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDirtyRegion), meth_QTreeView_setDirtyRegion, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setExpanded), meth_QTreeView_setExpanded, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setExpandsOnDoubleClick), meth_QTreeView_setExpandsOnDoubleClick, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFirstColumnSpanned), meth_QTreeView_setFirstColumnSpanned, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setHeader), meth_QTreeView_setHeader, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setHeaderHidden), meth_QTreeView_setHeaderHidden, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setHorizontalStepsPerItem), meth_QTreeView_setHorizontalStepsPerItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setIndentation), meth_QTreeView_setIndentation, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setItemsExpandable), meth_QTreeView_setItemsExpandable, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setModel), meth_QTreeView_setModel, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRootIndex), meth_QTreeView_setRootIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRootIsDecorated), meth_QTreeView_setRootIsDecorated, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRowHidden), meth_QTreeView_setRowHidden, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSelection), meth_QTreeView_setSelection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSelectionModel), meth_QTreeView_setSelectionModel, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSortingEnabled), meth_QTreeView_setSortingEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setState), meth_QTreeView_setState, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setUniformRowHeights), meth_QTreeView_setUniformRowHeights, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setVerticalStepsPerItem), meth_QTreeView_setVerticalStepsPerItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setViewportMargins), meth_QTreeView_setViewportMargins, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setWordWrap), meth_QTreeView_setWordWrap, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setupViewport), meth_QTreeView_setupViewport, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_showColumn), meth_QTreeView_showColumn, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_showEvent), meth_QTreeView_showEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sizeHintForColumn), meth_QTreeView_sizeHintForColumn, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sortByColumn), meth_QTreeView_sortByColumn, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_startDrag), meth_QTreeView_startDrag, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_state), meth_QTreeView_state, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_tabletEvent), meth_QTreeView_tabletEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QTreeView_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_uniformRowHeights), meth_QTreeView_uniformRowHeights, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateEditorData), meth_QTreeView_updateEditorData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateEditorGeometries), meth_QTreeView_updateEditorGeometries, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateGeometries), meth_QTreeView_updateGeometries, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateMicroFocus), meth_QTreeView_updateMicroFocus, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_verticalOffset), meth_QTreeView_verticalOffset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_verticalScrollbarAction), meth_QTreeView_verticalScrollbarAction, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_verticalScrollbarValueChanged), meth_QTreeView_verticalScrollbarValueChanged, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_verticalStepsPerItem), meth_QTreeView_verticalStepsPerItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_viewOptions), meth_QTreeView_viewOptions, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_viewportEvent), meth_QTreeView_viewportEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_visualRect), meth_QTreeView_visualRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_visualRegionForSelection), meth_QTreeView_visualRegionForSelection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_wheelEvent), meth_QTreeView_wheelEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_windowActivationChange), meth_QTreeView_windowActivationChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_wordWrap), meth_QTreeView_wordWrap, METH_VARARGS, NULL}
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QTreeView[] = {
    {"collapsed(const QModelIndex&)", 0},
    {"expanded(const QModelIndex&)", 0},
    {0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QTreeView = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QTreeView,
        {0}
    },
    {
        sipNameNr_QTreeView,
        {0, 0, 1},
        157, methods_QTreeView,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QTreeView,
    0,
    init_QTreeView,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTreeView,
    0,
    0,
    0,
    release_QTreeView,
    cast_QTreeView,
    0,
    0,
    0
},
    &QTreeView::staticMetaObject,
    0,
    pyqt4_signals_QTreeView
};

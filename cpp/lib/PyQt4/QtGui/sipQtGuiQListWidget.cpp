/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:23 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 141 "sip/QtGui/qlistwidget.sip"
#include <qlistwidget.h>
#line 39 "sipQtGuiQListWidget.cpp"

#line 41 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 43 "sipQtGuiQListWidget.cpp"
#line 128 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 46 "sipQtGuiQListWidget.cpp"
#line 41 "sip/QtGui/qlistwidget.sip"
#include <qlistwidget.h>
#line 49 "sipQtGuiQListWidget.cpp"
#line 503 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 52 "sipQtGuiQListWidget.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 55 "sipQtGuiQListWidget.cpp"
#line 37 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 58 "sipQtGuiQListWidget.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 61 "sipQtGuiQListWidget.cpp"
#line 37 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 64 "sipQtGuiQListWidget.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 67 "sipQtGuiQListWidget.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 70 "sipQtGuiQListWidget.cpp"
#line 41 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 73 "sipQtGuiQListWidget.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 76 "sipQtGuiQListWidget.cpp"
#line 41 "sip/QtGui/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 79 "sipQtGuiQListWidget.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 82 "sipQtGuiQListWidget.cpp"
#line 41 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 85 "sipQtGuiQListWidget.cpp"
#line 41 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 88 "sipQtGuiQListWidget.cpp"
#line 82 "sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 91 "sipQtGuiQListWidget.cpp"
#line 156 "sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 94 "sipQtGuiQListWidget.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 97 "sipQtGuiQListWidget.cpp"
#line 41 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 100 "sipQtGuiQListWidget.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 103 "sipQtGuiQListWidget.cpp"
#line 340 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 106 "sipQtGuiQListWidget.cpp"
#line 831 "sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 109 "sipQtGuiQListWidget.cpp"
#line 557 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 112 "sipQtGuiQListWidget.cpp"
#line 528 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 115 "sipQtGuiQListWidget.cpp"
#line 369 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 118 "sipQtGuiQListWidget.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 121 "sipQtGuiQListWidget.cpp"
#line 179 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 124 "sipQtGuiQListWidget.cpp"
#line 37 "sip/QtGui/qlistview.sip"
#include <qlistview.h>
#line 127 "sipQtGuiQListWidget.cpp"
#line 41 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 130 "sipQtGuiQListWidget.cpp"
#line 461 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 477 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 135 "sipQtGuiQListWidget.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 138 "sipQtGuiQListWidget.cpp"
#line 37 "sip/QtGui/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 141 "sipQtGuiQListWidget.cpp"
#line 291 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 144 "sipQtGuiQListWidget.cpp"
#line 320 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "sipQtGuiQListWidget.cpp"
#line 545 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "sipQtGuiQListWidget.cpp"
#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 153 "sipQtGuiQListWidget.cpp"
#line 41 "sip/QtGui/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 156 "sipQtGuiQListWidget.cpp"
#line 82 "sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 159 "sipQtGuiQListWidget.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 162 "sipQtGuiQListWidget.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 165 "sipQtGuiQListWidget.cpp"
#line 37 "sip/QtGui/qscrollbar.sip"
#include <qscrollbar.h>
#line 168 "sipQtGuiQListWidget.cpp"
#line 431 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "sipQtGuiQListWidget.cpp"
#line 220 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "sipQtGuiQListWidget.cpp"
#line 41 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 177 "sipQtGuiQListWidget.cpp"
#line 37 "sip/QtGui/qframe.sip"
#include <qframe.h>
#line 180 "sipQtGuiQListWidget.cpp"
#line 39 "sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 183 "sipQtGuiQListWidget.cpp"
#line 41 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 186 "sipQtGuiQListWidget.cpp"
#line 37 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 189 "sipQtGuiQListWidget.cpp"
#line 41 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 192 "sipQtGuiQListWidget.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 195 "sipQtGuiQListWidget.cpp"
#line 37 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 198 "sipQtGuiQListWidget.cpp"
#line 37 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 201 "sipQtGuiQListWidget.cpp"
#line 41 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 204 "sipQtGuiQListWidget.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 207 "sipQtGuiQListWidget.cpp"
#line 41 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 210 "sipQtGuiQListWidget.cpp"
#line 419 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 213 "sipQtGuiQListWidget.cpp"
#line 407 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 216 "sipQtGuiQListWidget.cpp"
#line 613 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 219 "sipQtGuiQListWidget.cpp"
#line 242 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 222 "sipQtGuiQListWidget.cpp"
#line 383 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 225 "sipQtGuiQListWidget.cpp"
#line 355 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 228 "sipQtGuiQListWidget.cpp"
#line 37 "sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 231 "sipQtGuiQListWidget.cpp"
#line 69 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 234 "sipQtGuiQListWidget.cpp"
#line 42 "sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 237 "sipQtGuiQListWidget.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 240 "sipQtGuiQListWidget.cpp"
#line 37 "sip/QtGui/qaction.sip"
#include <qaction.h>
#line 243 "sipQtGuiQListWidget.cpp"
#line 37 "sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 246 "sipQtGuiQListWidget.cpp"
#line 41 "sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 249 "sipQtGuiQListWidget.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 252 "sipQtGuiQListWidget.cpp"
#line 41 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 255 "sipQtGuiQListWidget.cpp"
#line 41 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 258 "sipQtGuiQListWidget.cpp"
#line 41 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 261 "sipQtGuiQListWidget.cpp"
#line 41 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 264 "sipQtGuiQListWidget.cpp"
#line 41 "sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 267 "sipQtGuiQListWidget.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 270 "sipQtGuiQListWidget.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 273 "sipQtGuiQListWidget.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 276 "sipQtGuiQListWidget.cpp"
#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 279 "sipQtGuiQListWidget.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 282 "sipQtGuiQListWidget.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 285 "sipQtGuiQListWidget.cpp"


class sipQListWidget : public QListWidget
{
public:
    sipQListWidget(QWidget *);
    virtual ~sipQListWidget();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /* Expose this protected enum. */
    enum sipDropIndicatorPosition {
        OnItem = QAbstractItemView::OnItem,
        AboveItem = QAbstractItemView::AboveItem,
        BelowItem = QAbstractItemView::BelowItem,
        OnViewport = QAbstractItemView::OnViewport
    };

    /* Expose this protected enum. */
    enum sipState {
        NoState = QAbstractItemView::NoState,
        DraggingState = QAbstractItemView::DraggingState,
        DragSelectingState = QAbstractItemView::DragSelectingState,
        EditingState = QAbstractItemView::EditingState,
        ExpandingState = QAbstractItemView::ExpandingState,
        CollapsingState = QAbstractItemView::CollapsingState,
        AnimatingState = QAbstractItemView::AnimatingState
    };

    /* Expose this protected enum. */
    enum sipCursorAction {
        MoveUp = QAbstractItemView::MoveUp,
        MoveDown = QAbstractItemView::MoveDown,
        MoveLeft = QAbstractItemView::MoveLeft,
        MoveRight = QAbstractItemView::MoveRight,
        MoveHome = QAbstractItemView::MoveHome,
        MoveEnd = QAbstractItemView::MoveEnd,
        MovePageUp = QAbstractItemView::MovePageUp,
        MovePageDown = QAbstractItemView::MovePageDown,
        MoveNext = QAbstractItemView::MoveNext,
        MovePrevious = QAbstractItemView::MovePrevious
    };

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    void sipProtectVirt_keyReleaseEvent(bool,QKeyEvent *);
    void sipProtectVirt_enterEvent(bool,QEvent *);
    void sipProtectVirt_leaveEvent(bool,QEvent *);
    void sipProtectVirt_moveEvent(bool,QMoveEvent *);
    void sipProtectVirt_closeEvent(bool,QCloseEvent *);
    void sipProtectVirt_tabletEvent(bool,QTabletEvent *);
    void sipProtectVirt_actionEvent(bool,QActionEvent *);
    void sipProtectVirt_showEvent(bool,QShowEvent *);
    void sipProtectVirt_hideEvent(bool,QHideEvent *);
    int sipProtectVirt_metric(bool,QPaintDevice::PaintDeviceMetric) const;
    void sipProtect_resetInputContext();
    void sipProtect_updateMicroFocus();
    void sipProtect_create(WId,bool,bool);
    void sipProtect_destroy(bool,bool);
    bool sipProtect_focusNextChild();
    bool sipProtect_focusPreviousChild();
    void sipProtectVirt_enabledChange(bool,bool);
    void sipProtectVirt_paletteChange(bool,const QPalette&);
    void sipProtectVirt_fontChange(bool,const QFont&);
    void sipProtectVirt_windowActivationChange(bool,bool);
    void sipProtectVirt_languageChange(bool);
    void sipProtectVirt_changeEvent(bool,QEvent *);
    void sipProtect_drawFrame(QPainter *);
    void sipProtect_setViewportMargins(int,int,int,int);
    void sipProtectVirt_wheelEvent(bool,QWheelEvent *);
    void sipProtectVirt_contextMenuEvent(bool,QContextMenuEvent *);
    void sipProtect_setupViewport(QWidget *);
    bool sipProtectVirt_edit(bool,const QModelIndex&,QAbstractItemView::EditTrigger,QEvent *);
    void sipProtectVirt_updateEditorData(bool);
    void sipProtectVirt_updateEditorGeometries(bool);
    void sipProtectVirt_verticalScrollbarAction(bool,int);
    void sipProtectVirt_horizontalScrollbarAction(bool,int);
    void sipProtectVirt_verticalScrollbarValueChanged(bool,int);
    void sipProtectVirt_horizontalScrollbarValueChanged(bool,int);
    void sipProtectVirt_closeEditor(bool,QWidget *,QAbstractItemDelegate::EndEditHint);
    void sipProtectVirt_commitData(bool,QWidget *);
    void sipProtectVirt_editorDestroyed(bool,QObject *);
    void sipProtect_setHorizontalStepsPerItem(int);
    int sipProtect_horizontalStepsPerItem() const;
    void sipProtect_setVerticalStepsPerItem(int);
    int sipProtect_verticalStepsPerItem() const;
    QItemSelectionModel::SelectionFlags sipProtectVirt_selectionCommand(bool,const QModelIndex&,const QEvent *) const;
    int sipProtect_state() const;
    void sipProtect_setState(int);
    void sipProtect_scheduleDelayedItemsLayout();
    void sipProtect_executeDelayedItemsLayout();
    void sipProtect_scrollDirtyRegion(int,int);
    void sipProtect_setDirtyRegion(const QRegion&);
    QPoint sipProtect_dirtyRegionOffset() const;
    bool sipProtectVirt_viewportEvent(bool,QEvent *);
    void sipProtectVirt_mousePressEvent(bool,QMouseEvent *);
    void sipProtectVirt_mouseDoubleClickEvent(bool,QMouseEvent *);
    void sipProtectVirt_dragEnterEvent(bool,QDragEnterEvent *);
    void sipProtectVirt_focusInEvent(bool,QFocusEvent *);
    void sipProtectVirt_focusOutEvent(bool,QFocusEvent *);
    void sipProtectVirt_keyPressEvent(bool,QKeyEvent *);
    int sipProtect_dropIndicatorPosition() const;
    bool sipProtectVirt_focusNextPrevChild(bool,bool);
    void sipProtectVirt_inputMethodEvent(bool,QInputMethodEvent *);
    void sipProtectVirt_scrollContentsBy(bool,int,int);
    void sipProtectVirt_dataChanged(bool,const QModelIndex&,const QModelIndex&);
    void sipProtectVirt_rowsInserted(bool,const QModelIndex&,int,int);
    void sipProtectVirt_rowsAboutToBeRemoved(bool,const QModelIndex&,int,int);
    void sipProtectVirt_mouseMoveEvent(bool,QMouseEvent *);
    void sipProtectVirt_mouseReleaseEvent(bool,QMouseEvent *);
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_resizeEvent(bool,QResizeEvent *);
    void sipProtectVirt_dragMoveEvent(bool,QDragMoveEvent *);
    void sipProtectVirt_dragLeaveEvent(bool,QDragLeaveEvent *);
    void sipProtectVirt_startDrag(bool,Qt::DropActions);
    QStyleOptionViewItem sipProtectVirt_viewOptions(bool) const;
    void sipProtectVirt_paintEvent(bool,QPaintEvent *);
    int sipProtectVirt_horizontalOffset(bool) const;
    int sipProtectVirt_verticalOffset(bool) const;
    QModelIndex sipProtectVirt_moveCursor(bool,int,Qt::KeyboardModifiers);
    QRect sipProtect_rectForIndex(const QModelIndex&) const;
    void sipProtect_setPositionForIndex(const QPoint&,const QModelIndex&);
    void sipProtectVirt_setSelection(bool,const QRect&,QItemSelectionModel::SelectionFlags);
    QRegion sipProtectVirt_visualRegionForSelection(bool,const QItemSelection&) const;
    QModelIndexList sipProtectVirt_selectedIndexes(bool) const;
    void sipProtectVirt_updateGeometries(bool);
    bool sipProtectVirt_isIndexHidden(bool,const QModelIndex&) const;
    void sipProtectVirt_selectionChanged(bool,const QItemSelection&,const QItemSelection&);
    void sipProtectVirt_currentChanged(bool,const QModelIndex&,const QModelIndex&);
    QStringList sipProtectVirt_mimeTypes(bool) const;
    QMimeData * sipProtectVirt_mimeData(bool,const QList<QListWidgetItem *>) const;
    bool sipProtectVirt_dropMimeData(bool,int,const QMimeData *,Qt::DropAction);
    Qt::DropActions sipProtectVirt_supportedDropActions(bool) const;
    QList<QListWidgetItem *> sipProtect_items(const QMimeData *) const;
    QModelIndex sipProtect_indexFromItem(QListWidgetItem *) const;
    QListWidgetItem * sipProtect_itemFromIndex(const QModelIndex&) const;
    bool sipProtectVirt_event(bool,QEvent *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QStringList mimeTypes() const;
    QMimeData * mimeData(const QList<QListWidgetItem *>) const;
    bool dropMimeData(int,const QMimeData *,Qt::DropAction);
    Qt::DropActions supportedDropActions() const;
    bool event(QEvent *);
    void dropEvent(QDropEvent *);
    QRect visualRect(const QModelIndex&) const;
    void scrollTo(const QModelIndex&,QAbstractItemView::ScrollHint);
    QModelIndex indexAt(const QPoint&) const;
    void doItemsLayout();
    void reset();
    void setRootIndex(const QModelIndex&);
    void scrollContentsBy(int,int);
    void dataChanged(const QModelIndex&,const QModelIndex&);
    void rowsInserted(const QModelIndex&,int,int);
    void rowsAboutToBeRemoved(const QModelIndex&,int,int);
    void mouseMoveEvent(QMouseEvent *);
    void mouseReleaseEvent(QMouseEvent *);
    void timerEvent(QTimerEvent *);
    void resizeEvent(QResizeEvent *);
    void dragMoveEvent(QDragMoveEvent *);
    void dragLeaveEvent(QDragLeaveEvent *);
    void startDrag(Qt::DropActions);
    QStyleOptionViewItem viewOptions() const;
    void paintEvent(QPaintEvent *);
    int horizontalOffset() const;
    int verticalOffset() const;
    QModelIndex moveCursor(QAbstractItemView::CursorAction,Qt::KeyboardModifiers);
    void setSelection(const QRect&,QItemSelectionModel::SelectionFlags);
    QRegion visualRegionForSelection(const QItemSelection&) const;
    QModelIndexList selectedIndexes() const;
    void updateGeometries();
    bool isIndexHidden(const QModelIndex&) const;
    void selectionChanged(const QItemSelection&,const QItemSelection&);
    void currentChanged(const QModelIndex&,const QModelIndex&);
    void setSelectionModel(QItemSelectionModel *);
    void keyboardSearch(const QString&);
    int sizeHintForRow(int) const;
    int sizeHintForColumn(int) const;
    void selectAll();
    void updateEditorData();
    void updateEditorGeometries();
    void verticalScrollbarAction(int);
    void horizontalScrollbarAction(int);
    void verticalScrollbarValueChanged(int);
    void horizontalScrollbarValueChanged(int);
    void closeEditor(QWidget *,QAbstractItemDelegate::EndEditHint);
    void commitData(QWidget *);
    void editorDestroyed(QObject *);
    bool edit(const QModelIndex&,QAbstractItemView::EditTrigger,QEvent *);
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex&,const QEvent *) const;
    bool viewportEvent(QEvent *);
    void mousePressEvent(QMouseEvent *);
    void mouseDoubleClickEvent(QMouseEvent *);
    void dragEnterEvent(QDragEnterEvent *);
    void focusInEvent(QFocusEvent *);
    void focusOutEvent(QFocusEvent *);
    void keyPressEvent(QKeyEvent *);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    bool focusNextPrevChild(bool);
    void inputMethodEvent(QInputMethodEvent *);
    QSize minimumSizeHint() const;
    QSize sizeHint() const;
    void wheelEvent(QWheelEvent *);
    void contextMenuEvent(QContextMenuEvent *);
    void changeEvent(QEvent *);
    int devType() const;
    void setVisible(bool);
    int heightForWidth(int) const;
    QPaintEngine * paintEngine() const;
    void keyReleaseEvent(QKeyEvent *);
    void enterEvent(QEvent *);
    void leaveEvent(QEvent *);
    void moveEvent(QMoveEvent *);
    void closeEvent(QCloseEvent *);
    void tabletEvent(QTabletEvent *);
    void actionEvent(QActionEvent *);
    void showEvent(QShowEvent *);
    void hideEvent(QHideEvent *);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void enabledChange(bool);
    void paletteChange(const QPalette&);
    void fontChange(const QFont&);
    void windowActivationChange(bool);
    void languageChange();
    bool eventFilter(QObject *,QEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQListWidget(const sipQListWidget &);
    sipQListWidget &operator = (const sipQListWidget &);

    char sipPyMethods[90];
};

sipQListWidget::sipQListWidget(QWidget *a0): QListWidget(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQListWidget::~sipQListWidget()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQListWidget::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QListWidget);
}

int sipQListWidget::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QListWidget::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QListWidget,_c,_id,_a);

    return _id;
}

void *sipQListWidget::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QListWidget,_clname)) ? this : QListWidget::qt_metacast(_clname);
}

QStringList sipQListWidget::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_mimeTypes);

    if (!meth)
        return QListWidget::mimeTypes();

    typedef QStringList (*sipVH_QtCore_22)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_22)(sipModuleAPI_QtGui_QtCore->em_virthandlers[22]))(sipGILState,meth,0);
}

QMimeData * sipQListWidget::mimeData(const QList<QListWidgetItem *> a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_mimeData);

    if (!meth)
        return QListWidget::mimeData(a0);

    extern QMimeData * sipVH_QtGui_150(sip_gilstate_t,PyObject *,bool*,const QList<QListWidgetItem *>);

    return sipVH_QtGui_150(sipGILState,meth,0,a0);
}

bool sipQListWidget::dropMimeData(int a0,const QMimeData *a1,Qt::DropAction a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_dropMimeData);

    if (!meth)
        return QListWidget::dropMimeData(a0,a1,a2);

    extern bool sipVH_QtGui_149(sip_gilstate_t,PyObject *,bool*,int,const QMimeData *,Qt::DropAction);

    return sipVH_QtGui_149(sipGILState,meth,0,a0,a1,a2);
}

Qt::DropActions sipQListWidget::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_supportedDropActions);

    if (!meth)
        return QListWidget::supportedDropActions();

    typedef Qt::DropActions (*sipVH_QtCore_48)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_48)(sipModuleAPI_QtGui_QtCore->em_virthandlers[48]))(sipGILState,meth,0);
}

bool sipQListWidget::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QListWidget::event(a0);

    typedef bool (*sipVH_QtCore_12)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return ((sipVH_QtCore_12)(sipModuleAPI_QtGui_QtCore->em_virthandlers[12]))(sipGILState,meth,0,a0);
}

void sipQListWidget::dropEvent(QDropEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_dropEvent);

    if (!meth)
    {
        QListWidget::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t,PyObject *,bool*,QDropEvent *);

    sipVH_QtGui_16(sipGILState,meth,0,a0);
}

QRect sipQListWidget::visualRect(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_visualRect);

    if (!meth)
        return QListView::visualRect(a0);

    extern QRect sipVH_QtGui_57(sip_gilstate_t,PyObject *,bool*,const QModelIndex&);

    return sipVH_QtGui_57(sipGILState,meth,0,a0);
}

void sipQListWidget::scrollTo(const QModelIndex& a0,QAbstractItemView::ScrollHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_scrollTo);

    if (!meth)
    {
        QListView::scrollTo(a0,a1);
        return;
    }

    extern void sipVH_QtGui_56(sip_gilstate_t,PyObject *,bool*,const QModelIndex&,QAbstractItemView::ScrollHint);

    sipVH_QtGui_56(sipGILState,meth,0,a0,a1);
}

QModelIndex sipQListWidget::indexAt(const QPoint& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_indexAt);

    if (!meth)
        return QListView::indexAt(a0);

    extern QModelIndex sipVH_QtGui_55(sip_gilstate_t,PyObject *,bool*,const QPoint&);

    return sipVH_QtGui_55(sipGILState,meth,0,a0);
}

void sipQListWidget::doItemsLayout()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_doItemsLayout);

    if (!meth)
    {
        QListView::doItemsLayout();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

void sipQListWidget::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_reset);

    if (!meth)
    {
        QListView::reset();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

void sipQListWidget::setRootIndex(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_setRootIndex);

    if (!meth)
    {
        QListView::setRootIndex(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t,PyObject *,bool*,const QModelIndex&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtGui_QtCore->em_virthandlers[46]))(sipGILState,meth,0,a0);
}

void sipQListWidget::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!meth)
    {
        QListView::scrollContentsBy(a0,a1);
        return;
    }

    extern void sipVH_QtGui_33(sip_gilstate_t,PyObject *,bool*,int,int);

    sipVH_QtGui_33(sipGILState,meth,0,a0,a1);
}

void sipQListWidget::dataChanged(const QModelIndex& a0,const QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_dataChanged);

    if (!meth)
    {
        QListView::dataChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_46(sip_gilstate_t,PyObject *,bool*,const QModelIndex&,const QModelIndex&);

    sipVH_QtGui_46(sipGILState,meth,0,a0,a1);
}

void sipQListWidget::rowsInserted(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_rowsInserted);

    if (!meth)
    {
        QListView::rowsInserted(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_54(sip_gilstate_t,PyObject *,bool*,const QModelIndex&,int,int);

    sipVH_QtGui_54(sipGILState,meth,0,a0,a1,a2);
}

void sipQListWidget::rowsAboutToBeRemoved(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_rowsAboutToBeRemoved);

    if (!meth)
    {
        QListView::rowsAboutToBeRemoved(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_54(sip_gilstate_t,PyObject *,bool*,const QModelIndex&,int,int);

    sipVH_QtGui_54(sipGILState,meth,0,a0,a1,a2);
}

void sipQListWidget::mouseMoveEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!meth)
    {
        QListView::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_27(sip_gilstate_t,PyObject *,bool*,QMouseEvent *);

    sipVH_QtGui_27(sipGILState,meth,0,a0);
}

void sipQListWidget::mouseReleaseEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!meth)
    {
        QListView::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_27(sip_gilstate_t,PyObject *,bool*,QMouseEvent *);

    sipVH_QtGui_27(sipGILState,meth,0,a0);
}

void sipQListWidget::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QListView::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_3)(sip_gilstate_t,PyObject *,bool*,QTimerEvent *);

    ((sipVH_QtCore_3)(sipModuleAPI_QtGui_QtCore->em_virthandlers[3]))(sipGILState,meth,0,a0);
}

void sipQListWidget::resizeEvent(QResizeEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_resizeEvent);

    if (!meth)
    {
        QListView::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t,PyObject *,bool*,QResizeEvent *);

    sipVH_QtGui_2(sipGILState,meth,0,a0);
}

void sipQListWidget::dragMoveEvent(QDragMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!meth)
    {
        QListView::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t,PyObject *,bool*,QDragMoveEvent *);

    sipVH_QtGui_18(sipGILState,meth,0,a0);
}

void sipQListWidget::dragLeaveEvent(QDragLeaveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!meth)
    {
        QListView::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t,PyObject *,bool*,QDragLeaveEvent *);

    sipVH_QtGui_17(sipGILState,meth,0,a0);
}

void sipQListWidget::startDrag(Qt::DropActions a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_startDrag);

    if (!meth)
    {
        QListView::startDrag(a0);
        return;
    }

    extern void sipVH_QtGui_154(sip_gilstate_t,PyObject *,bool*,Qt::DropActions);

    sipVH_QtGui_154(sipGILState,meth,0,a0);
}

QStyleOptionViewItem sipQListWidget::viewOptions() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_viewOptions);

    if (!meth)
        return QListView::viewOptions();

    extern QStyleOptionViewItem sipVH_QtGui_72(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_72(sipGILState,meth,0);
}

void sipQListWidget::paintEvent(QPaintEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_paintEvent);

    if (!meth)
    {
        QListView::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t,PyObject *,bool*,QPaintEvent *);

    sipVH_QtGui_3(sipGILState,meth,0,a0);
}

int sipQListWidget::horizontalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_horizontalOffset);

    if (!meth)
        return QListView::horizontalOffset();

    typedef int (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtGui_QtCore->em_virthandlers[7]))(sipGILState,meth,0);
}

int sipQListWidget::verticalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_verticalOffset);

    if (!meth)
        return QListView::verticalOffset();

    typedef int (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtGui_QtCore->em_virthandlers[7]))(sipGILState,meth,0);
}

QModelIndex sipQListWidget::moveCursor(QAbstractItemView::CursorAction a0,Qt::KeyboardModifiers a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_moveCursor);

    if (!meth)
        return QListView::moveCursor(a0,a1);

    extern QModelIndex sipVH_QtGui_53(sip_gilstate_t,PyObject *,bool*,int,Qt::KeyboardModifiers);

    return sipVH_QtGui_53(sipGILState,meth,0,(int)a0,a1);
}

void sipQListWidget::setSelection(const QRect& a0,QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_setSelection);

    if (!meth)
    {
        QListView::setSelection(a0,a1);
        return;
    }

    extern void sipVH_QtGui_52(sip_gilstate_t,PyObject *,bool*,const QRect&,QItemSelectionModel::SelectionFlags);

    sipVH_QtGui_52(sipGILState,meth,0,a0,a1);
}

QRegion sipQListWidget::visualRegionForSelection(const QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_visualRegionForSelection);

    if (!meth)
        return QListView::visualRegionForSelection(a0);

    extern QRegion sipVH_QtGui_51(sip_gilstate_t,PyObject *,bool*,const QItemSelection&);

    return sipVH_QtGui_51(sipGILState,meth,0,a0);
}

QModelIndexList sipQListWidget::selectedIndexes() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_selectedIndexes);

    if (!meth)
        return QListView::selectedIndexes();

    extern QList<QModelIndex> sipVH_QtGui_50(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_50(sipGILState,meth,0);
}

void sipQListWidget::updateGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_updateGeometries);

    if (!meth)
    {
        QListView::updateGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

bool sipQListWidget::isIndexHidden(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,NULL,sipName_isIndexHidden);

    if (!meth)
        return QListView::isIndexHidden(a0);

    typedef bool (*sipVH_QtCore_37)(sip_gilstate_t,PyObject *,bool*,const QModelIndex&);

    return ((sipVH_QtCore_37)(sipModuleAPI_QtGui_QtCore->em_virthandlers[37]))(sipGILState,meth,0,a0);
}

void sipQListWidget::selectionChanged(const QItemSelection& a0,const QItemSelection& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_selectionChanged);

    if (!meth)
    {
        QListView::selectionChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_47(sip_gilstate_t,PyObject *,bool*,const QItemSelection&,const QItemSelection&);

    sipVH_QtGui_47(sipGILState,meth,0,a0,a1);
}

void sipQListWidget::currentChanged(const QModelIndex& a0,const QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_currentChanged);

    if (!meth)
    {
        QListView::currentChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_46(sip_gilstate_t,PyObject *,bool*,const QModelIndex&,const QModelIndex&);

    sipVH_QtGui_46(sipGILState,meth,0,a0,a1);
}

void sipQListWidget::setSelectionModel(QItemSelectionModel *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_setSelectionModel);

    if (!meth)
    {
        QAbstractItemView::setSelectionModel(a0);
        return;
    }

    extern void sipVH_QtGui_38(sip_gilstate_t,PyObject *,bool*,QItemSelectionModel *);

    sipVH_QtGui_38(sipGILState,meth,0,a0);
}

void sipQListWidget::keyboardSearch(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_keyboardSearch);

    if (!meth)
    {
        QAbstractItemView::keyboardSearch(a0);
        return;
    }

    typedef void (*sipVH_QtCore_28)(sip_gilstate_t,PyObject *,bool*,const QString&);

    ((sipVH_QtCore_28)(sipModuleAPI_QtGui_QtCore->em_virthandlers[28]))(sipGILState,meth,0,a0);
}

int sipQListWidget::sizeHintForRow(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_sizeHintForRow);

    if (!meth)
        return QAbstractItemView::sizeHintForRow(a0);

    extern int sipVH_QtGui_29(sip_gilstate_t,PyObject *,bool*,int);

    return sipVH_QtGui_29(sipGILState,meth,0,a0);
}

int sipQListWidget::sizeHintForColumn(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_sizeHintForColumn);

    if (!meth)
        return QAbstractItemView::sizeHintForColumn(a0);

    extern int sipVH_QtGui_29(sip_gilstate_t,PyObject *,bool*,int);

    return sipVH_QtGui_29(sipGILState,meth,0,a0);
}

void sipQListWidget::selectAll()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_selectAll);

    if (!meth)
    {
        QAbstractItemView::selectAll();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

void sipQListWidget::updateEditorData()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_updateEditorData);

    if (!meth)
    {
        QAbstractItemView::updateEditorData();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

void sipQListWidget::updateEditorGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_updateEditorGeometries);

    if (!meth)
    {
        QAbstractItemView::updateEditorGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

void sipQListWidget::verticalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_verticalScrollbarAction);

    if (!meth)
    {
        QAbstractItemView::verticalScrollbarAction(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool*,int);

    sipVH_QtGui_6(sipGILState,meth,0,a0);
}

void sipQListWidget::horizontalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_horizontalScrollbarAction);

    if (!meth)
    {
        QAbstractItemView::horizontalScrollbarAction(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool*,int);

    sipVH_QtGui_6(sipGILState,meth,0,a0);
}

void sipQListWidget::verticalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_verticalScrollbarValueChanged);

    if (!meth)
    {
        QAbstractItemView::verticalScrollbarValueChanged(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool*,int);

    sipVH_QtGui_6(sipGILState,meth,0,a0);
}

void sipQListWidget::horizontalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_horizontalScrollbarValueChanged);

    if (!meth)
    {
        QAbstractItemView::horizontalScrollbarValueChanged(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool*,int);

    sipVH_QtGui_6(sipGILState,meth,0,a0);
}

void sipQListWidget::closeEditor(QWidget *a0,QAbstractItemDelegate::EndEditHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_closeEditor);

    if (!meth)
    {
        QAbstractItemView::closeEditor(a0,a1);
        return;
    }

    extern void sipVH_QtGui_233(sip_gilstate_t,PyObject *,bool*,QWidget *,QAbstractItemDelegate::EndEditHint);

    sipVH_QtGui_233(sipGILState,meth,0,a0,a1);
}

void sipQListWidget::commitData(QWidget *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_commitData);

    if (!meth)
    {
        QAbstractItemView::commitData(a0);
        return;
    }

    extern void sipVH_QtGui_8(sip_gilstate_t,PyObject *,bool*,QWidget *);

    sipVH_QtGui_8(sipGILState,meth,0,a0);
}

void sipQListWidget::editorDestroyed(QObject *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_editorDestroyed);

    if (!meth)
    {
        QAbstractItemView::editorDestroyed(a0);
        return;
    }

    extern void sipVH_QtGui_232(sip_gilstate_t,PyObject *,bool*,QObject *);

    sipVH_QtGui_232(sipGILState,meth,0,a0);
}

bool sipQListWidget::edit(const QModelIndex& a0,QAbstractItemView::EditTrigger a1,QEvent *a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_edit);

    if (!meth)
        return QAbstractItemView::edit(a0,a1,a2);

    extern bool sipVH_QtGui_231(sip_gilstate_t,PyObject *,bool*,const QModelIndex&,QAbstractItemView::EditTrigger,QEvent *);

    return sipVH_QtGui_231(sipGILState,meth,0,a0,a1,a2);
}

QItemSelectionModel::SelectionFlags sipQListWidget::selectionCommand(const QModelIndex& a0,const QEvent *a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[50]),sipPySelf,NULL,sipName_selectionCommand);

    if (!meth)
        return QAbstractItemView::selectionCommand(a0,a1);

    extern QItemSelectionModel::SelectionFlags sipVH_QtGui_230(sip_gilstate_t,PyObject *,bool*,const QModelIndex&,const QEvent *);

    return sipVH_QtGui_230(sipGILState,meth,0,a0,a1);
}

bool sipQListWidget::viewportEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_viewportEvent);

    if (!meth)
        return QAbstractItemView::viewportEvent(a0);

    typedef bool (*sipVH_QtCore_12)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return ((sipVH_QtCore_12)(sipModuleAPI_QtGui_QtCore->em_virthandlers[12]))(sipGILState,meth,0,a0);
}

void sipQListWidget::mousePressEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,NULL,sipName_mousePressEvent);

    if (!meth)
    {
        QAbstractItemView::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_27(sip_gilstate_t,PyObject *,bool*,QMouseEvent *);

    sipVH_QtGui_27(sipGILState,meth,0,a0);
}

void sipQListWidget::mouseDoubleClickEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!meth)
    {
        QAbstractItemView::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_27(sip_gilstate_t,PyObject *,bool*,QMouseEvent *);

    sipVH_QtGui_27(sipGILState,meth,0,a0);
}

void sipQListWidget::dragEnterEvent(QDragEnterEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[54],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!meth)
    {
        QAbstractItemView::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t,PyObject *,bool*,QDragEnterEvent *);

    sipVH_QtGui_19(sipGILState,meth,0,a0);
}

void sipQListWidget::focusInEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[55],sipPySelf,NULL,sipName_focusInEvent);

    if (!meth)
    {
        QAbstractItemView::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,bool*,QFocusEvent *);

    sipVH_QtGui_25(sipGILState,meth,0,a0);
}

void sipQListWidget::focusOutEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[56],sipPySelf,NULL,sipName_focusOutEvent);

    if (!meth)
    {
        QAbstractItemView::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,bool*,QFocusEvent *);

    sipVH_QtGui_25(sipGILState,meth,0,a0);
}

void sipQListWidget::keyPressEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[57],sipPySelf,NULL,sipName_keyPressEvent);

    if (!meth)
    {
        QAbstractItemView::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,bool*,QKeyEvent *);

    sipVH_QtGui_26(sipGILState,meth,0,a0);
}

QVariant sipQListWidget::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[58]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!meth)
        return QAbstractItemView::inputMethodQuery(a0);

    extern QVariant sipVH_QtGui_13(sip_gilstate_t,PyObject *,bool*,Qt::InputMethodQuery);

    return sipVH_QtGui_13(sipGILState,meth,0,a0);
}

bool sipQListWidget::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[59],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!meth)
        return QAbstractItemView::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_12(sip_gilstate_t,PyObject *,bool*,bool);

    return sipVH_QtGui_12(sipGILState,meth,0,a0);
}

void sipQListWidget::inputMethodEvent(QInputMethodEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[60],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!meth)
    {
        QAbstractItemView::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_14(sip_gilstate_t,PyObject *,bool*,QInputMethodEvent *);

    sipVH_QtGui_14(sipGILState,meth,0,a0);
}

QSize sipQListWidget::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[61]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!meth)
        return QAbstractScrollArea::minimumSizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_4(sipGILState,meth,0);
}

QSize sipQListWidget::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[62]),sipPySelf,NULL,sipName_sizeHint);

    if (!meth)
        return QAbstractScrollArea::sizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_4(sipGILState,meth,0);
}

void sipQListWidget::wheelEvent(QWheelEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[63],sipPySelf,NULL,sipName_wheelEvent);

    if (!meth)
    {
        QAbstractScrollArea::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t,PyObject *,bool*,QWheelEvent *);

    sipVH_QtGui_5(sipGILState,meth,0,a0);
}

void sipQListWidget::contextMenuEvent(QContextMenuEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[64],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!meth)
    {
        QAbstractScrollArea::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t,PyObject *,bool*,QContextMenuEvent *);

    sipVH_QtGui_22(sipGILState,meth,0,a0);
}

void sipQListWidget::changeEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[65],sipPySelf,NULL,sipName_changeEvent);

    if (!meth)
    {
        QFrame::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

int sipQListWidget::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[66]),sipPySelf,NULL,sipName_devType);

    if (!meth)
        return QWidget::devType();

    typedef int (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtGui_QtCore->em_virthandlers[7]))(sipGILState,meth,0);
}

void sipQListWidget::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[67],sipPySelf,NULL,sipName_setVisible);

    if (!meth)
    {
        QWidget::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t,PyObject *,bool*,bool);

    sipVH_QtGui_7(sipGILState,meth,0,a0);
}

int sipQListWidget::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[68]),sipPySelf,NULL,sipName_heightForWidth);

    if (!meth)
        return QWidget::heightForWidth(a0);

    extern int sipVH_QtGui_29(sip_gilstate_t,PyObject *,bool*,int);

    return sipVH_QtGui_29(sipGILState,meth,0,a0);
}

QPaintEngine * sipQListWidget::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[69]),sipPySelf,NULL,sipName_paintEngine);

    if (!meth)
        return QWidget::paintEngine();

    extern QPaintEngine * sipVH_QtGui_28(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_28(sipGILState,meth,0);
}

void sipQListWidget::keyReleaseEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[70],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!meth)
    {
        QWidget::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,bool*,QKeyEvent *);

    sipVH_QtGui_26(sipGILState,meth,0,a0);
}

void sipQListWidget::enterEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[71],sipPySelf,NULL,sipName_enterEvent);

    if (!meth)
    {
        QWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQListWidget::leaveEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[72],sipPySelf,NULL,sipName_leaveEvent);

    if (!meth)
    {
        QWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQListWidget::moveEvent(QMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[73],sipPySelf,NULL,sipName_moveEvent);

    if (!meth)
    {
        QWidget::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t,PyObject *,bool*,QMoveEvent *);

    sipVH_QtGui_24(sipGILState,meth,0,a0);
}

void sipQListWidget::closeEvent(QCloseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[74],sipPySelf,NULL,sipName_closeEvent);

    if (!meth)
    {
        QWidget::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t,PyObject *,bool*,QCloseEvent *);

    sipVH_QtGui_23(sipGILState,meth,0,a0);
}

void sipQListWidget::tabletEvent(QTabletEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[75],sipPySelf,NULL,sipName_tabletEvent);

    if (!meth)
    {
        QWidget::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t,PyObject *,bool*,QTabletEvent *);

    sipVH_QtGui_21(sipGILState,meth,0,a0);
}

void sipQListWidget::actionEvent(QActionEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[76],sipPySelf,NULL,sipName_actionEvent);

    if (!meth)
    {
        QWidget::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t,PyObject *,bool*,QActionEvent *);

    sipVH_QtGui_20(sipGILState,meth,0,a0);
}

void sipQListWidget::showEvent(QShowEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[77],sipPySelf,NULL,sipName_showEvent);

    if (!meth)
    {
        QWidget::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t,PyObject *,bool*,QShowEvent *);

    sipVH_QtGui_1(sipGILState,meth,0,a0);
}

void sipQListWidget::hideEvent(QHideEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[78],sipPySelf,NULL,sipName_hideEvent);

    if (!meth)
    {
        QWidget::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t,PyObject *,bool*,QHideEvent *);

    sipVH_QtGui_0(sipGILState,meth,0,a0);
}

int sipQListWidget::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[79]),sipPySelf,NULL,sipName_metric);

    if (!meth)
        return QWidget::metric(a0);

    extern int sipVH_QtGui_15(sip_gilstate_t,PyObject *,bool*,QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_15(sipGILState,meth,0,a0);
}

void sipQListWidget::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[80],sipPySelf,NULL,sipName_enabledChange);

    if (!meth)
    {
        QWidget::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t,PyObject *,bool*,bool);

    sipVH_QtGui_7(sipGILState,meth,0,a0);
}

void sipQListWidget::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[81],sipPySelf,NULL,sipName_paletteChange);

    if (!meth)
    {
        QWidget::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_11(sip_gilstate_t,PyObject *,bool*,const QPalette&);

    sipVH_QtGui_11(sipGILState,meth,0,a0);
}

void sipQListWidget::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[82],sipPySelf,NULL,sipName_fontChange);

    if (!meth)
    {
        QWidget::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t,PyObject *,bool*,const QFont&);

    sipVH_QtGui_10(sipGILState,meth,0,a0);
}

void sipQListWidget::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[83],sipPySelf,NULL,sipName_windowActivationChange);

    if (!meth)
    {
        QWidget::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t,PyObject *,bool*,bool);

    sipVH_QtGui_7(sipGILState,meth,0,a0);
}

void sipQListWidget::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[84],sipPySelf,NULL,sipName_languageChange);

    if (!meth)
    {
        QWidget::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

bool sipQListWidget::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[85],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t,PyObject *,bool*,QObject *,QEvent *);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtGui_QtCore->em_virthandlers[20]))(sipGILState,meth,0,a0,a1);
}

void sipQListWidget::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[86],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_19)(sip_gilstate_t,PyObject *,bool*,QChildEvent *);

    ((sipVH_QtCore_19)(sipModuleAPI_QtGui_QtCore->em_virthandlers[19]))(sipGILState,meth,0,a0);
}

void sipQListWidget::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[87],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQListWidget::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[88],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

void sipQListWidget::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[89],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

int sipQListWidget::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQListWidget::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQListWidget::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQListWidget::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQListWidget::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

void sipQListWidget::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg,QKeyEvent *a0)
{
    (sipSelfWasArg ? QWidget::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQListWidget::sipProtectVirt_enterEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QWidget::enterEvent(a0) : enterEvent(a0));
}

void sipQListWidget::sipProtectVirt_leaveEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QWidget::leaveEvent(a0) : leaveEvent(a0));
}

void sipQListWidget::sipProtectVirt_moveEvent(bool sipSelfWasArg,QMoveEvent *a0)
{
    (sipSelfWasArg ? QWidget::moveEvent(a0) : moveEvent(a0));
}

void sipQListWidget::sipProtectVirt_closeEvent(bool sipSelfWasArg,QCloseEvent *a0)
{
    (sipSelfWasArg ? QWidget::closeEvent(a0) : closeEvent(a0));
}

void sipQListWidget::sipProtectVirt_tabletEvent(bool sipSelfWasArg,QTabletEvent *a0)
{
    (sipSelfWasArg ? QWidget::tabletEvent(a0) : tabletEvent(a0));
}

void sipQListWidget::sipProtectVirt_actionEvent(bool sipSelfWasArg,QActionEvent *a0)
{
    (sipSelfWasArg ? QWidget::actionEvent(a0) : actionEvent(a0));
}

void sipQListWidget::sipProtectVirt_showEvent(bool sipSelfWasArg,QShowEvent *a0)
{
    (sipSelfWasArg ? QWidget::showEvent(a0) : showEvent(a0));
}

void sipQListWidget::sipProtectVirt_hideEvent(bool sipSelfWasArg,QHideEvent *a0)
{
    (sipSelfWasArg ? QWidget::hideEvent(a0) : hideEvent(a0));
}

int sipQListWidget::sipProtectVirt_metric(bool sipSelfWasArg,QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ? QWidget::metric(a0) : metric(a0));
}

void sipQListWidget::sipProtect_resetInputContext()
{
    QWidget::resetInputContext();
}

void sipQListWidget::sipProtect_updateMicroFocus()
{
    QWidget::updateMicroFocus();
}

void sipQListWidget::sipProtect_create(WId a0,bool a1,bool a2)
{
    QWidget::create(a0,a1,a2);
}

void sipQListWidget::sipProtect_destroy(bool a0,bool a1)
{
    QWidget::destroy(a0,a1);
}

bool sipQListWidget::sipProtect_focusNextChild()
{
    return QWidget::focusNextChild();
}

bool sipQListWidget::sipProtect_focusPreviousChild()
{
    return QWidget::focusPreviousChild();
}

void sipQListWidget::sipProtectVirt_enabledChange(bool sipSelfWasArg,bool a0)
{
    (sipSelfWasArg ? QWidget::enabledChange(a0) : enabledChange(a0));
}

void sipQListWidget::sipProtectVirt_paletteChange(bool sipSelfWasArg,const QPalette& a0)
{
    (sipSelfWasArg ? QWidget::paletteChange(a0) : paletteChange(a0));
}

void sipQListWidget::sipProtectVirt_fontChange(bool sipSelfWasArg,const QFont& a0)
{
    (sipSelfWasArg ? QWidget::fontChange(a0) : fontChange(a0));
}

void sipQListWidget::sipProtectVirt_windowActivationChange(bool sipSelfWasArg,bool a0)
{
    (sipSelfWasArg ? QWidget::windowActivationChange(a0) : windowActivationChange(a0));
}

void sipQListWidget::sipProtectVirt_languageChange(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QWidget::languageChange() : languageChange());
}

void sipQListWidget::sipProtectVirt_changeEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QFrame::changeEvent(a0) : changeEvent(a0));
}

void sipQListWidget::sipProtect_drawFrame(QPainter *a0)
{
    QFrame::drawFrame(a0);
}

void sipQListWidget::sipProtect_setViewportMargins(int a0,int a1,int a2,int a3)
{
    QAbstractScrollArea::setViewportMargins(a0,a1,a2,a3);
}

void sipQListWidget::sipProtectVirt_wheelEvent(bool sipSelfWasArg,QWheelEvent *a0)
{
    (sipSelfWasArg ? QAbstractScrollArea::wheelEvent(a0) : wheelEvent(a0));
}

void sipQListWidget::sipProtectVirt_contextMenuEvent(bool sipSelfWasArg,QContextMenuEvent *a0)
{
    (sipSelfWasArg ? QAbstractScrollArea::contextMenuEvent(a0) : contextMenuEvent(a0));
}

void sipQListWidget::sipProtect_setupViewport(QWidget *a0)
{
    QAbstractScrollArea::setupViewport(a0);
}

bool sipQListWidget::sipProtectVirt_edit(bool sipSelfWasArg,const QModelIndex& a0,QAbstractItemView::EditTrigger a1,QEvent *a2)
{
    return (sipSelfWasArg ? QAbstractItemView::edit(a0,a1,a2) : edit(a0,a1,a2));
}

void sipQListWidget::sipProtectVirt_updateEditorData(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QAbstractItemView::updateEditorData() : updateEditorData());
}

void sipQListWidget::sipProtectVirt_updateEditorGeometries(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QAbstractItemView::updateEditorGeometries() : updateEditorGeometries());
}

void sipQListWidget::sipProtectVirt_verticalScrollbarAction(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QAbstractItemView::verticalScrollbarAction(a0) : verticalScrollbarAction(a0));
}

void sipQListWidget::sipProtectVirt_horizontalScrollbarAction(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QAbstractItemView::horizontalScrollbarAction(a0) : horizontalScrollbarAction(a0));
}

void sipQListWidget::sipProtectVirt_verticalScrollbarValueChanged(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QAbstractItemView::verticalScrollbarValueChanged(a0) : verticalScrollbarValueChanged(a0));
}

void sipQListWidget::sipProtectVirt_horizontalScrollbarValueChanged(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QAbstractItemView::horizontalScrollbarValueChanged(a0) : horizontalScrollbarValueChanged(a0));
}

void sipQListWidget::sipProtectVirt_closeEditor(bool sipSelfWasArg,QWidget *a0,QAbstractItemDelegate::EndEditHint a1)
{
    (sipSelfWasArg ? QAbstractItemView::closeEditor(a0,a1) : closeEditor(a0,a1));
}

void sipQListWidget::sipProtectVirt_commitData(bool sipSelfWasArg,QWidget *a0)
{
    (sipSelfWasArg ? QAbstractItemView::commitData(a0) : commitData(a0));
}

void sipQListWidget::sipProtectVirt_editorDestroyed(bool sipSelfWasArg,QObject *a0)
{
    (sipSelfWasArg ? QAbstractItemView::editorDestroyed(a0) : editorDestroyed(a0));
}

void sipQListWidget::sipProtect_setHorizontalStepsPerItem(int a0)
{
    QAbstractItemView::setHorizontalStepsPerItem(a0);
}

int sipQListWidget::sipProtect_horizontalStepsPerItem() const
{
    return QAbstractItemView::horizontalStepsPerItem();
}

void sipQListWidget::sipProtect_setVerticalStepsPerItem(int a0)
{
    QAbstractItemView::setVerticalStepsPerItem(a0);
}

int sipQListWidget::sipProtect_verticalStepsPerItem() const
{
    return QAbstractItemView::verticalStepsPerItem();
}

QItemSelectionModel::SelectionFlags sipQListWidget::sipProtectVirt_selectionCommand(bool sipSelfWasArg,const QModelIndex& a0,const QEvent *a1) const
{
    return (sipSelfWasArg ? QAbstractItemView::selectionCommand(a0,a1) : selectionCommand(a0,a1));
}

int sipQListWidget::sipProtect_state() const
{
    return (int)QAbstractItemView::state();
}

void sipQListWidget::sipProtect_setState(int a0)
{
    QAbstractItemView::setState((QAbstractItemView::State)a0);
}

void sipQListWidget::sipProtect_scheduleDelayedItemsLayout()
{
    QAbstractItemView::scheduleDelayedItemsLayout();
}

void sipQListWidget::sipProtect_executeDelayedItemsLayout()
{
    QAbstractItemView::executeDelayedItemsLayout();
}

void sipQListWidget::sipProtect_scrollDirtyRegion(int a0,int a1)
{
    QAbstractItemView::scrollDirtyRegion(a0,a1);
}

void sipQListWidget::sipProtect_setDirtyRegion(const QRegion& a0)
{
    QAbstractItemView::setDirtyRegion(a0);
}

QPoint sipQListWidget::sipProtect_dirtyRegionOffset() const
{
    return QAbstractItemView::dirtyRegionOffset();
}

bool sipQListWidget::sipProtectVirt_viewportEvent(bool sipSelfWasArg,QEvent *a0)
{
    return (sipSelfWasArg ? QAbstractItemView::viewportEvent(a0) : viewportEvent(a0));
}

void sipQListWidget::sipProtectVirt_mousePressEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQListWidget::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQListWidget::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg,QDragEnterEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQListWidget::sipProtectVirt_focusInEvent(bool sipSelfWasArg,QFocusEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::focusInEvent(a0) : focusInEvent(a0));
}

void sipQListWidget::sipProtectVirt_focusOutEvent(bool sipSelfWasArg,QFocusEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQListWidget::sipProtectVirt_keyPressEvent(bool sipSelfWasArg,QKeyEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::keyPressEvent(a0) : keyPressEvent(a0));
}

int sipQListWidget::sipProtect_dropIndicatorPosition() const
{
    return (int)QAbstractItemView::dropIndicatorPosition();
}

bool sipQListWidget::sipProtectVirt_focusNextPrevChild(bool sipSelfWasArg,bool a0)
{
    return (sipSelfWasArg ? QAbstractItemView::focusNextPrevChild(a0) : focusNextPrevChild(a0));
}

void sipQListWidget::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg,QInputMethodEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::inputMethodEvent(a0) : inputMethodEvent(a0));
}

void sipQListWidget::sipProtectVirt_scrollContentsBy(bool sipSelfWasArg,int a0,int a1)
{
    (sipSelfWasArg ? QListView::scrollContentsBy(a0,a1) : scrollContentsBy(a0,a1));
}

void sipQListWidget::sipProtectVirt_dataChanged(bool sipSelfWasArg,const QModelIndex& a0,const QModelIndex& a1)
{
    (sipSelfWasArg ? QListView::dataChanged(a0,a1) : dataChanged(a0,a1));
}

void sipQListWidget::sipProtectVirt_rowsInserted(bool sipSelfWasArg,const QModelIndex& a0,int a1,int a2)
{
    (sipSelfWasArg ? QListView::rowsInserted(a0,a1,a2) : rowsInserted(a0,a1,a2));
}

void sipQListWidget::sipProtectVirt_rowsAboutToBeRemoved(bool sipSelfWasArg,const QModelIndex& a0,int a1,int a2)
{
    (sipSelfWasArg ? QListView::rowsAboutToBeRemoved(a0,a1,a2) : rowsAboutToBeRemoved(a0,a1,a2));
}

void sipQListWidget::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QListView::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQListWidget::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QListView::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQListWidget::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QListView::timerEvent(a0) : timerEvent(a0));
}

void sipQListWidget::sipProtectVirt_resizeEvent(bool sipSelfWasArg,QResizeEvent *a0)
{
    (sipSelfWasArg ? QListView::resizeEvent(a0) : resizeEvent(a0));
}

void sipQListWidget::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg,QDragMoveEvent *a0)
{
    (sipSelfWasArg ? QListView::dragMoveEvent(a0) : dragMoveEvent(a0));
}

void sipQListWidget::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg,QDragLeaveEvent *a0)
{
    (sipSelfWasArg ? QListView::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQListWidget::sipProtectVirt_startDrag(bool sipSelfWasArg,Qt::DropActions a0)
{
    (sipSelfWasArg ? QListView::startDrag(a0) : startDrag(a0));
}

QStyleOptionViewItem sipQListWidget::sipProtectVirt_viewOptions(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QListView::viewOptions() : viewOptions());
}

void sipQListWidget::sipProtectVirt_paintEvent(bool sipSelfWasArg,QPaintEvent *a0)
{
    (sipSelfWasArg ? QListView::paintEvent(a0) : paintEvent(a0));
}

int sipQListWidget::sipProtectVirt_horizontalOffset(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QListView::horizontalOffset() : horizontalOffset());
}

int sipQListWidget::sipProtectVirt_verticalOffset(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QListView::verticalOffset() : verticalOffset());
}

QModelIndex sipQListWidget::sipProtectVirt_moveCursor(bool sipSelfWasArg,int a0,Qt::KeyboardModifiers a1)
{
    return (sipSelfWasArg ? QListView::moveCursor((QAbstractItemView::CursorAction)a0,a1) : moveCursor((QAbstractItemView::CursorAction)a0,a1));
}

QRect sipQListWidget::sipProtect_rectForIndex(const QModelIndex& a0) const
{
    return QListView::rectForIndex(a0);
}

void sipQListWidget::sipProtect_setPositionForIndex(const QPoint& a0,const QModelIndex& a1)
{
    QListView::setPositionForIndex(a0,a1);
}

void sipQListWidget::sipProtectVirt_setSelection(bool sipSelfWasArg,const QRect& a0,QItemSelectionModel::SelectionFlags a1)
{
    (sipSelfWasArg ? QListView::setSelection(a0,a1) : setSelection(a0,a1));
}

QRegion sipQListWidget::sipProtectVirt_visualRegionForSelection(bool sipSelfWasArg,const QItemSelection& a0) const
{
    return (sipSelfWasArg ? QListView::visualRegionForSelection(a0) : visualRegionForSelection(a0));
}

QModelIndexList sipQListWidget::sipProtectVirt_selectedIndexes(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QListView::selectedIndexes() : selectedIndexes());
}

void sipQListWidget::sipProtectVirt_updateGeometries(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QListView::updateGeometries() : updateGeometries());
}

bool sipQListWidget::sipProtectVirt_isIndexHidden(bool sipSelfWasArg,const QModelIndex& a0) const
{
    return (sipSelfWasArg ? QListView::isIndexHidden(a0) : isIndexHidden(a0));
}

void sipQListWidget::sipProtectVirt_selectionChanged(bool sipSelfWasArg,const QItemSelection& a0,const QItemSelection& a1)
{
    (sipSelfWasArg ? QListView::selectionChanged(a0,a1) : selectionChanged(a0,a1));
}

void sipQListWidget::sipProtectVirt_currentChanged(bool sipSelfWasArg,const QModelIndex& a0,const QModelIndex& a1)
{
    (sipSelfWasArg ? QListView::currentChanged(a0,a1) : currentChanged(a0,a1));
}

QStringList sipQListWidget::sipProtectVirt_mimeTypes(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QListWidget::mimeTypes() : mimeTypes());
}

QMimeData * sipQListWidget::sipProtectVirt_mimeData(bool sipSelfWasArg,const QList<QListWidgetItem *> a0) const
{
    return (sipSelfWasArg ? QListWidget::mimeData(a0) : mimeData(a0));
}

bool sipQListWidget::sipProtectVirt_dropMimeData(bool sipSelfWasArg,int a0,const QMimeData *a1,Qt::DropAction a2)
{
    return (sipSelfWasArg ? QListWidget::dropMimeData(a0,a1,a2) : dropMimeData(a0,a1,a2));
}

Qt::DropActions sipQListWidget::sipProtectVirt_supportedDropActions(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QListWidget::supportedDropActions() : supportedDropActions());
}

QList<QListWidgetItem *> sipQListWidget::sipProtect_items(const QMimeData *a0) const
{
    return QListWidget::items(a0);
}

QModelIndex sipQListWidget::sipProtect_indexFromItem(QListWidgetItem *a0) const
{
    return QListWidget::indexFromItem(a0);
}

QListWidgetItem * sipQListWidget::sipProtect_itemFromIndex(const QModelIndex& a0) const
{
    return QListWidget::itemFromIndex(a0);
}

bool sipQListWidget::sipProtectVirt_event(bool sipSelfWasArg,QEvent *a0)
{
    return (sipSelfWasArg ? QListWidget::event(a0) : event(a0));
}


extern "C" {static PyObject *meth_QListWidget_receivers(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        char * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QListWidget,&sipCpp,&a0))
        {
            int sipRes = 0;

#line 480 "sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
#line 2616 "sipQtGuiQListWidget.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_receivers);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QChildEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_childEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_customEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QListWidget,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_connectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QListWidget,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_disconnectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QKeyEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_keyReleaseEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_enterEvent(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_enterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_enterEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_enterEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_leaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_leaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_leaveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_leaveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_moveEvent(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_moveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMoveEvent * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QMoveEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_moveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_closeEvent(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_closeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QCloseEvent * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QCloseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_closeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_closeEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_tabletEvent(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_tabletEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTabletEvent * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QTabletEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_tabletEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_tabletEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_actionEvent(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_actionEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QActionEvent * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QActionEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_actionEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_actionEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QShowEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_showEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_hideEvent(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_hideEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QHideEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_hideEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_metric(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_metric(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pE",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QPaintDevice_PaintDeviceMetric,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_metric);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_resetInputContext(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_resetInputContext(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QListWidget,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_resetInputContext();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_resetInputContext);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_updateMicroFocus(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_updateMicroFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QListWidget,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_updateMicroFocus();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_updateMicroFocus);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_create(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_create(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        WId a0 = 0;
        bool a1 = 1;
        bool a2 = 1;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p|mbb",&sipSelf,sipType_QListWidget,&sipCpp,&a0,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_create(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_create);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_destroy(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0 = 1;
        bool a1 = 1;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p|bb",&sipSelf,sipType_QListWidget,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_destroy(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_destroy);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_focusNextChild(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_focusNextChild(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QListWidget,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_focusNextChild();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_focusNextChild);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_focusPreviousChild(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_focusPreviousChild(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QListWidget,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_focusPreviousChild();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_focusPreviousChild);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_enabledChange(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_enabledChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pb",&sipSelf,sipType_QListWidget,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_enabledChange(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_enabledChange);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_paletteChange(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_paletteChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPalette * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QPalette,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_paletteChange(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_paletteChange);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_fontChange(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_fontChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QFont * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QFont,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_fontChange(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_fontChange);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_windowActivationChange(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_windowActivationChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pb",&sipSelf,sipType_QListWidget,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_windowActivationChange(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_windowActivationChange);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_languageChange(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_languageChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QListWidget,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_languageChange(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_languageChange);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_changeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_changeEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_drawFrame(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_drawFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPainter * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QPainter,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_drawFrame(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_drawFrame);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_setViewportMargins(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_setViewportMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"piiii",&sipSelf,sipType_QListWidget,&sipCpp,&a0,&a1,&a2,&a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setViewportMargins(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_setViewportMargins);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QWheelEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_wheelEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QContextMenuEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_contextMenuEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_contextMenuEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_setupViewport(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_setupViewport(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWidget * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QWidget,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setupViewport(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_setupViewport);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_edit(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_edit(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QModelIndex,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->edit(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QModelIndex * a0;
        QAbstractItemView::EditTrigger a1;
        QEvent * a2;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9EJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QModelIndex,&a0,sipType_QAbstractItemView_EditTrigger,&a1,sipType_QEvent,&a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_edit(sipSelfWasArg,*a0,a1,a2);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_edit);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_updateEditorData(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_updateEditorData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QListWidget,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_updateEditorData(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_updateEditorData);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_updateEditorGeometries(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_updateEditorGeometries(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QListWidget,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_updateEditorGeometries(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_updateEditorGeometries);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_verticalScrollbarAction(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_verticalScrollbarAction(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pi",&sipSelf,sipType_QListWidget,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_verticalScrollbarAction(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_verticalScrollbarAction);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_horizontalScrollbarAction(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_horizontalScrollbarAction(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pi",&sipSelf,sipType_QListWidget,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_horizontalScrollbarAction(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_horizontalScrollbarAction);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_verticalScrollbarValueChanged(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_verticalScrollbarValueChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pi",&sipSelf,sipType_QListWidget,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_verticalScrollbarValueChanged(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_verticalScrollbarValueChanged);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_horizontalScrollbarValueChanged(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_horizontalScrollbarValueChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pi",&sipSelf,sipType_QListWidget,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_horizontalScrollbarValueChanged(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_horizontalScrollbarValueChanged);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_closeEditor(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_closeEditor(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget * a0;
        QAbstractItemDelegate::EndEditHint a1;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8E",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QWidget,&a0,sipType_QAbstractItemDelegate_EndEditHint,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_closeEditor(sipSelfWasArg,a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_closeEditor);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_commitData(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_commitData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QWidget,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_commitData(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_commitData);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_editorDestroyed(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_editorDestroyed(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QObject,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_editorDestroyed(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_editorDestroyed);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_setHorizontalStepsPerItem(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_setHorizontalStepsPerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pi",&sipSelf,sipType_QListWidget,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setHorizontalStepsPerItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_setHorizontalStepsPerItem);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_horizontalStepsPerItem(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_horizontalStepsPerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QListWidget,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_horizontalStepsPerItem();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_horizontalStepsPerItem);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_setVerticalStepsPerItem(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_setVerticalStepsPerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pi",&sipSelf,sipType_QListWidget,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setVerticalStepsPerItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_setVerticalStepsPerItem);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_verticalStepsPerItem(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_verticalStepsPerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QListWidget,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_verticalStepsPerItem();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_verticalStepsPerItem);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_selectionCommand(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_selectionCommand(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        const QEvent * a1 = 0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9|J8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QModelIndex,&a0,sipType_QEvent,&a1))
        {
            QItemSelectionModel::SelectionFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QItemSelectionModel::SelectionFlags(sipCpp->sipProtectVirt_selectionCommand(sipSelfWasArg,*a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QItemSelectionModel_SelectionFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_selectionCommand);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_state(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_state(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QListWidget,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_state();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QAbstractItemView_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_state);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_setState(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_setState(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pE",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QAbstractItemView_State,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setState(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_setState);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_scheduleDelayedItemsLayout(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_scheduleDelayedItemsLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QListWidget,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_scheduleDelayedItemsLayout();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_scheduleDelayedItemsLayout);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_executeDelayedItemsLayout(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_executeDelayedItemsLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QListWidget,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_executeDelayedItemsLayout();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_executeDelayedItemsLayout);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_scrollDirtyRegion(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_scrollDirtyRegion(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pii",&sipSelf,sipType_QListWidget,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_scrollDirtyRegion(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_scrollDirtyRegion);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_setDirtyRegion(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_setDirtyRegion(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QRegion * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QRegion,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setDirtyRegion(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_setDirtyRegion);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_dirtyRegionOffset(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_dirtyRegionOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QListWidget,&sipCpp))
        {
            QPoint *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint(sipCpp->sipProtect_dirtyRegionOffset());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_dirtyRegionOffset);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_viewportEvent(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_viewportEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QEvent,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_viewportEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_viewportEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QMouseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_mousePressEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QMouseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_mouseDoubleClickEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_dragEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QDragEnterEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_dragEnterEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QFocusEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_focusInEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QFocusEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_focusOutEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QKeyEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_keyPressEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_dropIndicatorPosition(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_dropIndicatorPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QListWidget,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_dropIndicatorPosition();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QAbstractItemView_DropIndicatorPosition);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_dropIndicatorPosition);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pb",&sipSelf,sipType_QListWidget,&sipCpp,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_focusNextPrevChild(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_focusNextPrevChild);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_inputMethodEvent(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QInputMethodEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_inputMethodEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_scrollContentsBy(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_scrollContentsBy(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pii",&sipSelf,sipType_QListWidget,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_scrollContentsBy(sipSelfWasArg,a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_scrollContentsBy);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_dataChanged(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_dataChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        const QModelIndex * a1;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9J9",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QModelIndex,&a0,sipType_QModelIndex,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dataChanged(sipSelfWasArg,*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_dataChanged);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_rowsInserted(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_rowsInserted(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        int a1;
        int a2;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9ii",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QModelIndex,&a0,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_rowsInserted(sipSelfWasArg,*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_rowsInserted);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_rowsAboutToBeRemoved(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_rowsAboutToBeRemoved(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        int a1;
        int a2;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9ii",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QModelIndex,&a0,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_rowsAboutToBeRemoved(sipSelfWasArg,*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_rowsAboutToBeRemoved);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QMouseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_mouseMoveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QMouseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_mouseReleaseEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QTimerEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_timerEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QResizeEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_resizeEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QDragMoveEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_dragMoveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_dragLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QDragLeaveEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_dragLeaveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_startDrag(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_startDrag(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::DropActions * a0;
        int a0State = 0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ1",&sipSelf,sipType_QListWidget,&sipCpp,sipType_Qt_DropActions,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_startDrag(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_Qt_DropActions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_startDrag);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_viewOptions(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_viewOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QListWidget,&sipCpp))
        {
            QStyleOptionViewItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStyleOptionViewItem(sipCpp->sipProtectVirt_viewOptions(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStyleOptionViewItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_viewOptions);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QPaintEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_paintEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_paintEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_horizontalOffset(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_horizontalOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QListWidget,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_horizontalOffset(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_horizontalOffset);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_verticalOffset(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_verticalOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QListWidget,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_verticalOffset(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_verticalOffset);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_moveCursor(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_moveCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        Qt::KeyboardModifiers * a1;
        int a1State = 0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pEJ1",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QAbstractItemView_CursorAction,&a0,sipType_Qt_KeyboardModifiers,&a1,&a1State))
        {
            QModelIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->sipProtectVirt_moveCursor(sipSelfWasArg,a0,*a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_Qt_KeyboardModifiers,a1State);

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_moveCursor);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_rectForIndex(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_rectForIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QModelIndex,&a0))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->sipProtect_rectForIndex(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_rectForIndex);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_setPositionForIndex(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_setPositionForIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPoint * a0;
        const QModelIndex * a1;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9J9",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QPoint,&a0,sipType_QModelIndex,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setPositionForIndex(*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_setPositionForIndex);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_setSelection(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_setSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRect * a0;
        QItemSelectionModel::SelectionFlags * a1;
        int a1State = 0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9J1",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QRect,&a0,sipType_QItemSelectionModel_SelectionFlags,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_setSelection(sipSelfWasArg,*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_setSelection);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_visualRegionForSelection(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_visualRegionForSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QItemSelection,&a0))
        {
            QRegion *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRegion(sipCpp->sipProtectVirt_visualRegionForSelection(sipSelfWasArg,*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRegion,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_visualRegionForSelection);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_selectedIndexes(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_selectedIndexes(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QListWidget,&sipCpp))
        {
            QModelIndexList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndexList(sipCpp->sipProtectVirt_selectedIndexes(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_selectedIndexes);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_updateGeometries(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_updateGeometries(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QListWidget,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_updateGeometries(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_updateGeometries);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_isIndexHidden(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_isIndexHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QModelIndex,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_isIndexHidden(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_isIndexHidden);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_selectionChanged(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_selectionChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection * a0;
        const QItemSelection * a1;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9J9",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QItemSelection,&a0,sipType_QItemSelection,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_selectionChanged(sipSelfWasArg,*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_selectionChanged);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_currentChanged(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_currentChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        const QModelIndex * a1;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9J9",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QModelIndex,&a0,sipType_QModelIndex,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_currentChanged(sipSelfWasArg,*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_currentChanged);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_item(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_item(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QListWidget,&sipCpp,&a0))
        {
            QListWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->item(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QListWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_item);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_row(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_row(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QListWidgetItem * a0;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QListWidgetItem,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->row(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_row);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_insertItem(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_insertItem(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QListWidgetItem * a1;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiJ:",&sipSelf,sipType_QListWidget,&sipCpp,&a0,sipType_QListWidgetItem,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertItem(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QString * a1;
        int a1State = 0;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiJ1",&sipSelf,sipType_QListWidget,&sipCpp,&a0,sipType_QString,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertItem(a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_insertItem);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_insertItems(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_insertItems(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        const QStringList * a1;
        int a1State = 0;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiJ1",&sipSelf,sipType_QListWidget,&sipCpp,&a0,sipType_QStringList,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertItems(a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QStringList *>(a1),sipType_QStringList,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_insertItems);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_addItem(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_addItem(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QListWidgetItem * a0;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ:",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QListWidgetItem,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addItem(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_addItem);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_addItems(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_addItems(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QStringList * a0;
        int a0State = 0;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QStringList,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addItems(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_addItems);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_takeItem(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_takeItem(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QListWidget,&sipCpp,&a0))
        {
            QListWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->takeItem(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QListWidgetItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_takeItem);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_count(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_count(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QListWidget,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_count);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_currentItem(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_currentItem(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QListWidget,&sipCpp))
        {
            QListWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentItem();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QListWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_currentItem);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_setCurrentItem(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_setCurrentItem(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QListWidgetItem * a0;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QListWidgetItem,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QListWidgetItem * a0;
        QItemSelectionModel::SelectionFlags * a1;
        int a1State = 0;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8J1",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QListWidgetItem,&a0,sipType_QItemSelectionModel_SelectionFlags,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentItem(a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_setCurrentItem);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_currentRow(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_currentRow(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QListWidget,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentRow();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_currentRow);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_setCurrentRow(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_setCurrentRow(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QListWidget,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentRow(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        QItemSelectionModel::SelectionFlags * a1;
        int a1State = 0;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiJ1",&sipSelf,sipType_QListWidget,&sipCpp,&a0,sipType_QItemSelectionModel_SelectionFlags,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentRow(a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_setCurrentRow);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_itemAt(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_itemAt(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPoint * a0;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QPoint,&a0))
        {
            QListWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemAt(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QListWidgetItem,NULL);
        }
    }

    {
        int a0;
        int a1;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii",&sipSelf,sipType_QListWidget,&sipCpp,&a0,&a1))
        {
            QListWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemAt(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QListWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_itemAt);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_itemWidget(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_itemWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QListWidgetItem * a0;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QListWidgetItem,&a0))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemWidget(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_itemWidget);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_setItemWidget(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_setItemWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QListWidgetItem * a0;
        QWidget * a1;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8J:",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QListWidgetItem,&a0,sipType_QWidget,&a1))
        {
#line 172 "sip/QtGui/qlistwidget.sip"
        // We have to break the association with any existing widget.
        QWidget *w = sipCpp->itemWidget(a0);
        
        if (w)
        {
            PyObject *wo = sipGetPyObject(w, sipType_QWidget);
        
            if (wo)
                sipTransferBreak(wo);
        }
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->setItemWidget(a0, a1);
        Py_END_ALLOW_THREADS
#line 5627 "sipQtGuiQListWidget.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_setItemWidget);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_visualItemRect(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_visualItemRect(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QListWidgetItem * a0;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QListWidgetItem,&a0))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->visualItemRect(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_visualItemRect);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_sortItems(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_sortItems(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Qt::SortOrder a0 = Qt::AscendingOrder;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|E",&sipSelf,sipType_QListWidget,&sipCpp,sipType_Qt_SortOrder,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sortItems(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_sortItems);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_editItem(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_editItem(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QListWidgetItem * a0;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QListWidgetItem,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->editItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_editItem);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_openPersistentEditor(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_openPersistentEditor(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QListWidgetItem * a0;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QListWidgetItem,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->openPersistentEditor(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_openPersistentEditor);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_closePersistentEditor(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_closePersistentEditor(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QListWidgetItem * a0;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QListWidgetItem,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->closePersistentEditor(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_closePersistentEditor);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_isItemSelected(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_isItemSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QListWidgetItem * a0;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QListWidgetItem,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isItemSelected(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_isItemSelected);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_setItemSelected(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_setItemSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QListWidgetItem * a0;
        bool a1;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8b",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QListWidgetItem,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItemSelected(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_setItemSelected);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_selectedItems(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_selectedItems(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QListWidget,&sipCpp))
        {
            QList<QListWidgetItem *> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QListWidgetItem *>(sipCpp->selectedItems());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QListWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_selectedItems);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_findItems(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_findItems(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        Qt::MatchFlags * a1;
        int a1State = 0;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QString,&a0,&a0State,sipType_Qt_MatchFlags,&a1,&a1State))
        {
            QList<QListWidgetItem *> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QListWidgetItem *>(sipCpp->findItems(*a0,*a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_Qt_MatchFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QList_0101QListWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_findItems);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_isItemHidden(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_isItemHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QListWidgetItem * a0;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QListWidgetItem,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isItemHidden(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_isItemHidden);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_setItemHidden(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_setItemHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QListWidgetItem * a0;
        bool a1;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8b",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QListWidgetItem,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItemHidden(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_setItemHidden);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_clear(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QListWidget,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_clear);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_scrollToItem(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_scrollToItem(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QListWidgetItem * a0;
        QAbstractItemView::ScrollHint a1 = QAbstractItemView::EnsureVisible;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8|E",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QListWidgetItem,&a0,sipType_QAbstractItemView_ScrollHint,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->scrollToItem(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_scrollToItem);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_mimeTypes(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_mimeTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QListWidget,&sipCpp))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->sipProtectVirt_mimeTypes(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_mimeTypes);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_mimeData(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_mimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QList<QListWidgetItem *> * a0;
        int a0State = 0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ1",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QList_0101QListWidgetItem,&a0,&a0State))
        {
            QMimeData *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_mimeData(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QList<QListWidgetItem *> *>(a0),sipType_QList_0101QListWidgetItem,a0State);

            return sipConvertFromType(sipRes,sipType_QMimeData,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_mimeData);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_dropMimeData(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_dropMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QMimeData * a1;
        Qt::DropAction a2;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"piJ8E",&sipSelf,sipType_QListWidget,&sipCpp,&a0,sipType_QMimeData,&a1,sipType_Qt_DropAction,&a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_dropMimeData(sipSelfWasArg,a0,a1,a2);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_dropMimeData);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_supportedDropActions(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_supportedDropActions(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QListWidget,&sipCpp))
        {
            Qt::DropActions *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::DropActions(sipCpp->sipProtectVirt_supportedDropActions(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_supportedDropActions);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_items(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_items(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QMimeData * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QMimeData,&a0))
        {
            QList<QListWidgetItem *> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QListWidgetItem *>(sipCpp->sipProtect_items(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QListWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_items);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_indexFromItem(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_indexFromItem(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QListWidgetItem * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QListWidgetItem,&a0))
        {
            QModelIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->sipProtect_indexFromItem(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_indexFromItem);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_itemFromIndex(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_itemFromIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QModelIndex,&a0))
        {
            QListWidgetItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_itemFromIndex(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QListWidgetItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_itemFromIndex);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_event(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_event(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QEvent,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_event);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_setSortingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_setSortingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QListWidget,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSortingEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_setSortingEnabled);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_isSortingEnabled(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_isSortingEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QListWidget,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSortingEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_isSortingEnabled);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent * a0;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QDropEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QListWidget::dropEvent(a0) : sipCpp->dropEvent(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_dropEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_removeItemWidget(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_removeItemWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QListWidgetItem * a0;
        QListWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QListWidget,&sipCpp,sipType_QListWidgetItem,&a0))
        {
#line 239 "sip/QtGui/qlistwidget.sip"
        // We have to break the association with any existing widget.
        QWidget *w = sipCpp->itemWidget(a0);
        
        if (w)
        {
            PyObject *wo = sipGetPyObject(w, sipType_QWidget);
        
            if (wo)
                sipTransferBreak(wo);
        }
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->removeItemWidget(a0);
        Py_END_ALLOW_THREADS
#line 6344 "sipQtGuiQListWidget.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QListWidget,sipName_removeItemWidget);

    return NULL;
}


extern "C" {static PyObject *meth_QListWidget_setModel(PyObject *, PyObject *);}
static PyObject *meth_QListWidget_setModel(PyObject *, PyObject *)
{

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(0,sipName_QListWidget,sipName_setModel);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QListWidget(void *, const sipTypeDef *);}
static void *cast_QListWidget(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QListWidget)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QListView)->ctd_cast((QListView *)(QListWidget *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QListWidget(void *, int);}
static void release_QListWidget(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQListWidget *>(sipCppV);
    else
        delete reinterpret_cast<QListWidget *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QListWidget(sipSimpleWrapper *);}
static void dealloc_QListWidget(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQListWidget *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QListWidget(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QListWidget(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QListWidget(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **sipOwner, int *sipArgsParsed)
{
    sipQListWidget *sipCpp = 0;

    if (!sipCpp)
    {
        QWidget * a0 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"|JH",sipType_QWidget,&a0,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQListWidget(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QListWidget[] = {{280, 255, 1}};


static PyMethodDef methods_QListWidget[] = {
    {SIP_MLNAME_CAST(sipName_actionEvent), meth_QListWidget_actionEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addItem), meth_QListWidget_addItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addItems), meth_QListWidget_addItems, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QListWidget_changeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QListWidget_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clear), meth_QListWidget_clear, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_closeEditor), meth_QListWidget_closeEditor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_closeEvent), meth_QListWidget_closeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_closePersistentEditor), meth_QListWidget_closePersistentEditor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_commitData), meth_QListWidget_commitData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QListWidget_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), meth_QListWidget_contextMenuEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_count), meth_QListWidget_count, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_create), meth_QListWidget_create, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentChanged), meth_QListWidget_currentChanged, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentItem), meth_QListWidget_currentItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentRow), meth_QListWidget_currentRow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QListWidget_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dataChanged), meth_QListWidget_dataChanged, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_destroy), meth_QListWidget_destroy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dirtyRegionOffset), meth_QListWidget_dirtyRegionOffset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QListWidget_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), meth_QListWidget_dragEnterEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), meth_QListWidget_dragLeaveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), meth_QListWidget_dragMoveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawFrame), meth_QListWidget_drawFrame, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dropEvent), meth_QListWidget_dropEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dropIndicatorPosition), meth_QListWidget_dropIndicatorPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dropMimeData), meth_QListWidget_dropMimeData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_edit), meth_QListWidget_edit, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_editItem), meth_QListWidget_editItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_editorDestroyed), meth_QListWidget_editorDestroyed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_enabledChange), meth_QListWidget_enabledChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_enterEvent), meth_QListWidget_enterEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_event), meth_QListWidget_event, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_executeDelayedItemsLayout), meth_QListWidget_executeDelayedItemsLayout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_findItems), meth_QListWidget_findItems, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QListWidget_focusInEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextChild), meth_QListWidget_focusNextChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), meth_QListWidget_focusNextPrevChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QListWidget_focusOutEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusPreviousChild), meth_QListWidget_focusPreviousChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fontChange), meth_QListWidget_fontChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hideEvent), meth_QListWidget_hideEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_horizontalOffset), meth_QListWidget_horizontalOffset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_horizontalScrollbarAction), meth_QListWidget_horizontalScrollbarAction, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_horizontalScrollbarValueChanged), meth_QListWidget_horizontalScrollbarValueChanged, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_horizontalStepsPerItem), meth_QListWidget_horizontalStepsPerItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_indexFromItem), meth_QListWidget_indexFromItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), meth_QListWidget_inputMethodEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertItem), meth_QListWidget_insertItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertItems), meth_QListWidget_insertItems, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isIndexHidden), meth_QListWidget_isIndexHidden, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isItemHidden), meth_QListWidget_isItemHidden, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isItemSelected), meth_QListWidget_isItemSelected, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isSortingEnabled), meth_QListWidget_isSortingEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_item), meth_QListWidget_item, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_itemAt), meth_QListWidget_itemAt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_itemFromIndex), meth_QListWidget_itemFromIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_itemWidget), meth_QListWidget_itemWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_items), meth_QListWidget_items, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QListWidget_keyPressEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), meth_QListWidget_keyReleaseEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_languageChange), meth_QListWidget_languageChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_leaveEvent), meth_QListWidget_leaveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_metric), meth_QListWidget_metric, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mimeData), meth_QListWidget_mimeData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mimeTypes), meth_QListWidget_mimeTypes, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), meth_QListWidget_mouseDoubleClickEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QListWidget_mouseMoveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QListWidget_mousePressEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QListWidget_mouseReleaseEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveCursor), meth_QListWidget_moveCursor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveEvent), meth_QListWidget_moveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_openPersistentEditor), meth_QListWidget_openPersistentEditor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QListWidget_paintEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paletteChange), meth_QListWidget_paletteChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QListWidget_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rectForIndex), meth_QListWidget_rectForIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeItemWidget), meth_QListWidget_removeItemWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resetInputContext), meth_QListWidget_resetInputContext, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QListWidget_resizeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_row), meth_QListWidget_row, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rowsAboutToBeRemoved), meth_QListWidget_rowsAboutToBeRemoved, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rowsInserted), meth_QListWidget_rowsInserted, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scheduleDelayedItemsLayout), meth_QListWidget_scheduleDelayedItemsLayout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scrollContentsBy), meth_QListWidget_scrollContentsBy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scrollDirtyRegion), meth_QListWidget_scrollDirtyRegion, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scrollToItem), meth_QListWidget_scrollToItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_selectedIndexes), meth_QListWidget_selectedIndexes, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_selectedItems), meth_QListWidget_selectedItems, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_selectionChanged), meth_QListWidget_selectionChanged, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_selectionCommand), meth_QListWidget_selectionCommand, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCurrentItem), meth_QListWidget_setCurrentItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCurrentRow), meth_QListWidget_setCurrentRow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDirtyRegion), meth_QListWidget_setDirtyRegion, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setHorizontalStepsPerItem), meth_QListWidget_setHorizontalStepsPerItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setItemHidden), meth_QListWidget_setItemHidden, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setItemSelected), meth_QListWidget_setItemSelected, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setItemWidget), meth_QListWidget_setItemWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setModel), meth_QListWidget_setModel, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPositionForIndex), meth_QListWidget_setPositionForIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSelection), meth_QListWidget_setSelection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSortingEnabled), meth_QListWidget_setSortingEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setState), meth_QListWidget_setState, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setVerticalStepsPerItem), meth_QListWidget_setVerticalStepsPerItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setViewportMargins), meth_QListWidget_setViewportMargins, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setupViewport), meth_QListWidget_setupViewport, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_showEvent), meth_QListWidget_showEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sortItems), meth_QListWidget_sortItems, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_startDrag), meth_QListWidget_startDrag, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_state), meth_QListWidget_state, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_supportedDropActions), meth_QListWidget_supportedDropActions, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_tabletEvent), meth_QListWidget_tabletEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_takeItem), meth_QListWidget_takeItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QListWidget_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateEditorData), meth_QListWidget_updateEditorData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateEditorGeometries), meth_QListWidget_updateEditorGeometries, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateGeometries), meth_QListWidget_updateGeometries, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateMicroFocus), meth_QListWidget_updateMicroFocus, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_verticalOffset), meth_QListWidget_verticalOffset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_verticalScrollbarAction), meth_QListWidget_verticalScrollbarAction, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_verticalScrollbarValueChanged), meth_QListWidget_verticalScrollbarValueChanged, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_verticalStepsPerItem), meth_QListWidget_verticalStepsPerItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_viewOptions), meth_QListWidget_viewOptions, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_viewportEvent), meth_QListWidget_viewportEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_visualItemRect), meth_QListWidget_visualItemRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_visualRegionForSelection), meth_QListWidget_visualRegionForSelection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_wheelEvent), meth_QListWidget_wheelEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_windowActivationChange), meth_QListWidget_windowActivationChange, METH_VARARGS, NULL}
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QListWidget[] = {
    {"itemSelectionChanged()", 0},
    {"currentRowChanged(int)", 0},
    {"currentTextChanged(const QString&)", 0},
    {"currentItemChanged(QListWidgetItem *,QListWidgetItem *)", 0},
    {"itemChanged(QListWidgetItem *)", 0},
    {"itemEntered(QListWidgetItem *)", 0},
    {"itemActivated(QListWidgetItem *)", 0},
    {"itemDoubleClicked(QListWidgetItem *)", 0},
    {"itemClicked(QListWidgetItem *)", 0},
    {"itemPressed(QListWidgetItem *)", 0},
    {0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QListWidget = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QListWidget,
        {0}
    },
    {
        sipNameNr_QListWidget,
        {0, 0, 1},
        130, methods_QListWidget,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QListWidget,
    0,
    init_QListWidget,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QListWidget,
    0,
    0,
    0,
    release_QListWidget,
    cast_QListWidget,
    0,
    0,
    0
},
    &QListWidget::staticMetaObject,
    0,
    pyqt4_signals_QListWidget
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:23 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 197 "sip/QtGui/qstandarditemmodel.sip"
#include <qstandarditemmodel.h>
#line 39 "sipQtGuiQStandardItem.cpp"

#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 43 "sipQtGuiQStandardItem.cpp"
#line 41 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 46 "sipQtGuiQStandardItem.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 49 "sipQtGuiQStandardItem.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 52 "sipQtGuiQStandardItem.cpp"
#line 41 "sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 55 "sipQtGuiQStandardItem.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 58 "sipQtGuiQStandardItem.cpp"
#line 41 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 61 "sipQtGuiQStandardItem.cpp"
#line 41 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 64 "sipQtGuiQStandardItem.cpp"
#line 37 "sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 67 "sipQtGuiQStandardItem.cpp"
#line 41 "sip/QtGui/qstandarditemmodel.sip"
#include <qstandarditemmodel.h>
#line 70 "sipQtGuiQStandardItem.cpp"
#line 37 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 73 "sipQtGuiQStandardItem.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 76 "sipQtGuiQStandardItem.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 79 "sipQtGuiQStandardItem.cpp"


class sipQStandardItem : public QStandardItem
{
public:
    sipQStandardItem();
    sipQStandardItem(const QString&);
    sipQStandardItem(const QIcon&,const QString&);
    sipQStandardItem(int,int);
    sipQStandardItem(const QStandardItem&);
    virtual ~sipQStandardItem();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_emitDataChanged();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QVariant data(int) const;
    void setData(const QVariant&,int);
    QStandardItem * clone() const;
    int type() const;
    void read(QDataStream&);
    void write(QDataStream&) const;
    bool operator<(const QStandardItem&) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQStandardItem(const sipQStandardItem &);
    sipQStandardItem &operator = (const sipQStandardItem &);

    char sipPyMethods[7];
};

sipQStandardItem::sipQStandardItem(): QStandardItem(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStandardItem::sipQStandardItem(const QString& a0): QStandardItem(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStandardItem::sipQStandardItem(const QIcon& a0,const QString& a1): QStandardItem(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStandardItem::sipQStandardItem(int a0,int a1): QStandardItem(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStandardItem::sipQStandardItem(const QStandardItem& a0): QStandardItem(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQStandardItem::~sipQStandardItem()
{
    sipCommonDtor(sipPySelf);
}

QVariant sipQStandardItem::data(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_data);

    if (!meth)
        return QStandardItem::data(a0);

    extern QVariant sipVH_QtGui_70(sip_gilstate_t,PyObject *,bool*,int);

    return sipVH_QtGui_70(sipGILState,meth,0,a0);
}

void sipQStandardItem::setData(const QVariant& a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_setData);

    if (!meth)
    {
        QStandardItem::setData(a0,a1);
        return;
    }

    extern void sipVH_QtGui_102(sip_gilstate_t,PyObject *,bool*,const QVariant&,int);

    sipVH_QtGui_102(sipGILState,meth,0,a0,a1);
}

QStandardItem * sipQStandardItem::clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_clone);

    if (!meth)
        return QStandardItem::clone();

    extern QStandardItem * sipVH_QtGui_101(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_101(sipGILState,meth,0);
}

int sipQStandardItem::type() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_type);

    if (!meth)
        return QStandardItem::type();

    typedef int (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtGui_QtCore->em_virthandlers[7]))(sipGILState,meth,0);
}

void sipQStandardItem::read(QDataStream& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_read);

    if (!meth)
    {
        QStandardItem::read(a0);
        return;
    }

    extern void sipVH_QtGui_41(sip_gilstate_t,PyObject *,bool*,QDataStream&);

    sipVH_QtGui_41(sipGILState,meth,0,a0);
}

void sipQStandardItem::write(QDataStream& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_write);

    if (!meth)
    {
        QStandardItem::write(a0);
        return;
    }

    extern void sipVH_QtGui_41(sip_gilstate_t,PyObject *,bool*,QDataStream&);

    sipVH_QtGui_41(sipGILState,meth,0,a0);
}

bool sipQStandardItem::operator<(const QStandardItem& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName___lt__);

    if (!meth)
        return QStandardItem::operator<(a0);

    extern bool sipVH_QtGui_100(sip_gilstate_t,PyObject *,bool*,const QStandardItem&);

    return sipVH_QtGui_100(sipGILState,meth,0,a0);
}

void sipQStandardItem::sipProtect_emitDataChanged()
{
    QStandardItem::emitDataChanged();
}


extern "C" {static PyObject *meth_QStandardItem_data(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_data(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0 = Qt::UserRole + 1;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|i",&sipSelf,sipType_QStandardItem,&sipCpp,&a0))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QStandardItem::data(a0) : sipCpp->data(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_data);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_setData(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QVariant * a0;
        int a0State = 0;
        int a1 = Qt::UserRole + 1;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|i",&sipSelf,sipType_QStandardItem,&sipCpp,sipType_QVariant,&a0,&a0State,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QStandardItem::setData(*a0,a1) : sipCpp->setData(*a0,a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_setData);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_text(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_text(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->text());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_text);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_icon(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            QIcon *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QIcon(sipCpp->icon());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_icon);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_toolTip(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_toolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toolTip());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_toolTip);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_statusTip(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_statusTip(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->statusTip());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_statusTip);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_whatsThis(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_whatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->whatsThis());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_whatsThis);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->sizeHint());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_sizeHint);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_font(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_font(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            QFont *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFont(sipCpp->font());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_font);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_textAlignment(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_textAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            Qt::Alignment *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::Alignment(sipCpp->textAlignment());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_textAlignment);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_background(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_background(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->background());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_background);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_foreground(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_foreground(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->foreground());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_foreground);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_checkState(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_checkState(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            Qt::CheckState sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->checkState();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_CheckState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_checkState);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_accessibleText(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_accessibleText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->accessibleText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_accessibleText);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_accessibleDescription(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_accessibleDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->accessibleDescription());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_accessibleDescription);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_flags(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            Qt::ItemFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::ItemFlags(sipCpp->flags());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_flags);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_setFlags(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Qt::ItemFlags * a0;
        int a0State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QStandardItem,&sipCpp,sipType_Qt_ItemFlags,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFlags(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_Qt_ItemFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_setFlags);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_isEnabled(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_isEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_isEnabled);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_setEnabled(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QStandardItem,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_setEnabled);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_isEditable(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_isEditable(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEditable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_isEditable);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_setEditable(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setEditable(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QStandardItem,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEditable(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_setEditable);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_isSelectable(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_isSelectable(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSelectable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_isSelectable);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_setSelectable(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setSelectable(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QStandardItem,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSelectable(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_setSelectable);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_isCheckable(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_isCheckable(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isCheckable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_isCheckable);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_setCheckable(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setCheckable(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QStandardItem,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCheckable(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_setCheckable);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_isTristate(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_isTristate(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isTristate();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_isTristate);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_setTristate(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setTristate(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QStandardItem,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTristate(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_setTristate);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_isDragEnabled(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_isDragEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isDragEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_isDragEnabled);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_setDragEnabled(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setDragEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QStandardItem,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDragEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_setDragEnabled);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_isDropEnabled(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_isDropEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isDropEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_isDropEnabled);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_setDropEnabled(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setDropEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QStandardItem,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDropEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_setDropEnabled);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_parent(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            QStandardItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->parent();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QStandardItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_parent);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_row(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_row(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->row();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_row);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_column(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_column(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->column();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_column);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_index(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_index(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            QModelIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->index());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_index);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_model(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_model(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            QStandardItemModel *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->model();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QStandardItemModel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_model);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_rowCount(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_rowCount(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rowCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_rowCount);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_setRowCount(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setRowCount(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QStandardItem,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRowCount(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_setRowCount);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_columnCount(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_columnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->columnCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_columnCount);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_setColumnCount(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setColumnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QStandardItem,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setColumnCount(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_setColumnCount);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_hasChildren(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_hasChildren(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasChildren();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_hasChildren);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_child(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_child(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1 = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi|i",&sipSelf,sipType_QStandardItem,&sipCpp,&a0,&a1))
        {
            QStandardItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->child(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QStandardItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_child);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_setChild(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setChild(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        QStandardItem * a2;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiiJ:",&sipSelf,sipType_QStandardItem,&sipCpp,&a0,&a1,sipType_QStandardItem,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setChild(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        QStandardItem * a1;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiJ:",&sipSelf,sipType_QStandardItem,&sipCpp,&a0,sipType_QStandardItem,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setChild(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_setChild);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_insertRow(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_insertRow(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        const QList<QStandardItem *> * a1;
        int a1State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiJ3",&sipSelf,sipType_QStandardItem,&sipCpp,&a0,sipType_QList_0101QStandardItem,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertRow(a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QList<QStandardItem *> *>(a1),sipType_QList_0101QStandardItem,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        QStandardItem * a1;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiJ:",&sipSelf,sipType_QStandardItem,&sipCpp,&a0,sipType_QStandardItem,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertRow(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_insertRow);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_insertRows(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_insertRows(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii",&sipSelf,sipType_QStandardItem,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertRows(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        const QList<QStandardItem *> * a1;
        int a1State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiJ3",&sipSelf,sipType_QStandardItem,&sipCpp,&a0,sipType_QList_0101QStandardItem,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertRows(a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QList<QStandardItem *> *>(a1),sipType_QList_0101QStandardItem,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_insertRows);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_insertColumn(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_insertColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        const QList<QStandardItem *> * a1;
        int a1State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiJ3",&sipSelf,sipType_QStandardItem,&sipCpp,&a0,sipType_QList_0101QStandardItem,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertColumn(a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QList<QStandardItem *> *>(a1),sipType_QList_0101QStandardItem,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_insertColumn);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_insertColumns(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_insertColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii",&sipSelf,sipType_QStandardItem,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertColumns(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_insertColumns);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_removeRow(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_removeRow(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QStandardItem,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeRow(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_removeRow);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_removeColumn(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_removeColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QStandardItem,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeColumn(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_removeColumn);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_removeRows(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_removeRows(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii",&sipSelf,sipType_QStandardItem,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeRows(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_removeRows);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_removeColumns(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_removeColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii",&sipSelf,sipType_QStandardItem,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeColumns(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_removeColumns);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_takeChild(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_takeChild(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1 = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi|i",&sipSelf,sipType_QStandardItem,&sipCpp,&a0,&a1))
        {
            QStandardItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->takeChild(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QStandardItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_takeChild);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_takeRow(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_takeRow(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QStandardItem,&sipCpp,&a0))
        {
            QList<QStandardItem *> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QStandardItem *>(sipCpp->takeRow(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QStandardItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_takeRow);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_takeColumn(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_takeColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QStandardItem,&sipCpp,&a0))
        {
            QList<QStandardItem *> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QStandardItem *>(sipCpp->takeColumn(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QStandardItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_takeColumn);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_sortChildren(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_sortChildren(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        Qt::SortOrder a1 = Qt::AscendingOrder;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi|E",&sipSelf,sipType_QStandardItem,&sipCpp,&a0,sipType_Qt_SortOrder,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sortChildren(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_sortChildren);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_clone(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_clone(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            QStandardItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QStandardItem::clone() : sipCpp->clone());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStandardItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_clone);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_type(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_type(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QStandardItem::type() : sipCpp->type());
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_type);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_read(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_read(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDataStream * a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QStandardItem,&sipCpp,sipType_QDataStream,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QStandardItem::read(*a0) : sipCpp->read(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_read);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_write(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_write(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDataStream * a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QStandardItem,&sipCpp,sipType_QDataStream,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QStandardItem::write(*a0) : sipCpp->write(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_write);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_setText(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QStandardItem,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setText(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_setText);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_setIcon(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QIcon * a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QStandardItem,&sipCpp,sipType_QIcon,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIcon(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_setIcon);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_setToolTip(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setToolTip(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QStandardItem,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setToolTip(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_setToolTip);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_setStatusTip(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setStatusTip(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QStandardItem,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStatusTip(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_setStatusTip);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_setWhatsThis(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setWhatsThis(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QStandardItem,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWhatsThis(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_setWhatsThis);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_setSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QSize * a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QStandardItem,&sipCpp,sipType_QSize,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSizeHint(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_setSizeHint);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_setFont(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setFont(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QFont * a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QStandardItem,&sipCpp,sipType_QFont,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFont(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_setFont);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_setTextAlignment(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setTextAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Qt::Alignment * a0;
        int a0State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QStandardItem,&sipCpp,sipType_Qt_Alignment,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextAlignment(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_setTextAlignment);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_setBackground(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QBrush * a0;
        int a0State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QStandardItem,&sipCpp,sipType_QBrush,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBackground(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_setBackground);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_setForeground(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setForeground(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QBrush * a0;
        int a0State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QStandardItem,&sipCpp,sipType_QBrush,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setForeground(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QBrush *>(a0),sipType_QBrush,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_setForeground);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_setCheckState(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setCheckState(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Qt::CheckState a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QStandardItem,&sipCpp,sipType_Qt_CheckState,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCheckState(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_setCheckState);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_setAccessibleText(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setAccessibleText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QStandardItem,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAccessibleText(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_setAccessibleText);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_setAccessibleDescription(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_setAccessibleDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QStandardItem,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAccessibleDescription(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_setAccessibleDescription);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_appendRow(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_appendRow(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QList<QStandardItem *> * a0;
        int a0State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ3",&sipSelf,sipType_QStandardItem,&sipCpp,sipType_QList_0101QStandardItem,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->appendRow(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QList<QStandardItem *> *>(a0),sipType_QList_0101QStandardItem,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QStandardItem * a0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ:",&sipSelf,sipType_QStandardItem,&sipCpp,sipType_QStandardItem,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->appendRow(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_appendRow);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_appendColumn(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_appendColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QList<QStandardItem *> * a0;
        int a0State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ3",&sipSelf,sipType_QStandardItem,&sipCpp,sipType_QList_0101QStandardItem,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->appendColumn(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QList<QStandardItem *> *>(a0),sipType_QList_0101QStandardItem,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_appendColumn);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_appendRows(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_appendRows(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QList<QStandardItem *> * a0;
        int a0State = 0;
        QStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ3",&sipSelf,sipType_QStandardItem,&sipCpp,sipType_QList_0101QStandardItem,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->appendRows(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QList<QStandardItem *> *>(a0),sipType_QList_0101QStandardItem,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_appendRows);

    return NULL;
}


extern "C" {static PyObject *meth_QStandardItem_emitDataChanged(PyObject *, PyObject *);}
static PyObject *meth_QStandardItem_emitDataChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQStandardItem *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QStandardItem,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_emitDataChanged();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStandardItem,sipName_emitDataChanged);

    return NULL;
}


extern "C" {static PyObject *slot_QStandardItem___ge__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QStandardItem___ge__(PyObject *sipSelf,PyObject *sipArg)
{
    QStandardItem *sipCpp = reinterpret_cast<QStandardItem *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStandardItem));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QStandardItem * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QStandardItem,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = !sipCpp->QStandardItem::operator<(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtGui,ge_slot,sipType_QStandardItem,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QStandardItem___lt__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QStandardItem___lt__(PyObject *sipSelf,PyObject *sipArg)
{
    QStandardItem *sipCpp = reinterpret_cast<QStandardItem *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStandardItem));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QStandardItem * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QStandardItem,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QStandardItem::operator<(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtGui,lt_slot,sipType_QStandardItem,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QStandardItem(void *, const sipTypeDef *);}
static void *cast_QStandardItem(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QStandardItem)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QStandardItem(void *, int);}
static void release_QStandardItem(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQStandardItem *>(sipCppV);
    else
        delete reinterpret_cast<QStandardItem *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QStandardItem(sipSimpleWrapper *);}
static void dealloc_QStandardItem(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQStandardItem *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QStandardItem(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QStandardItem(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QStandardItem(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    sipQStandardItem *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQStandardItem();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1",sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQStandardItem(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
        }
    }

    if (!sipCpp)
    {
        const QIcon * a0;
        const QString * a1;
        int a1State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9J1",sipType_QIcon,&a0,sipType_QString,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQStandardItem(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
        }
    }

    if (!sipCpp)
    {
        int a0;
        int a1 = 1;

        if (sipParseArgs(sipArgsParsed,sipArgs,"i|i",&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQStandardItem(a0,a1);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QStandardItem * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QStandardItem,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQStandardItem(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QStandardItem[] = {
    {(void *)slot_QStandardItem___ge__, ge_slot},
    {(void *)slot_QStandardItem___lt__, lt_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QStandardItem[] = {
    {SIP_MLNAME_CAST(sipName_accessibleDescription), meth_QStandardItem_accessibleDescription, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_accessibleText), meth_QStandardItem_accessibleText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_appendColumn), meth_QStandardItem_appendColumn, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_appendRow), meth_QStandardItem_appendRow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_appendRows), meth_QStandardItem_appendRows, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_background), meth_QStandardItem_background, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_checkState), meth_QStandardItem_checkState, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_child), meth_QStandardItem_child, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clone), meth_QStandardItem_clone, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_column), meth_QStandardItem_column, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_columnCount), meth_QStandardItem_columnCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_data), meth_QStandardItem_data, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_emitDataChanged), meth_QStandardItem_emitDataChanged, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_flags), meth_QStandardItem_flags, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_font), meth_QStandardItem_font, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_foreground), meth_QStandardItem_foreground, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasChildren), meth_QStandardItem_hasChildren, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_icon), meth_QStandardItem_icon, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_index), meth_QStandardItem_index, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertColumn), meth_QStandardItem_insertColumn, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertColumns), meth_QStandardItem_insertColumns, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertRow), meth_QStandardItem_insertRow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertRows), meth_QStandardItem_insertRows, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isCheckable), meth_QStandardItem_isCheckable, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isDragEnabled), meth_QStandardItem_isDragEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isDropEnabled), meth_QStandardItem_isDropEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isEditable), meth_QStandardItem_isEditable, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isEnabled), meth_QStandardItem_isEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isSelectable), meth_QStandardItem_isSelectable, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isTristate), meth_QStandardItem_isTristate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_model), meth_QStandardItem_model, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_parent), meth_QStandardItem_parent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_read), meth_QStandardItem_read, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeColumn), meth_QStandardItem_removeColumn, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeColumns), meth_QStandardItem_removeColumns, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeRow), meth_QStandardItem_removeRow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeRows), meth_QStandardItem_removeRows, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_row), meth_QStandardItem_row, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rowCount), meth_QStandardItem_rowCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAccessibleDescription), meth_QStandardItem_setAccessibleDescription, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAccessibleText), meth_QStandardItem_setAccessibleText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBackground), meth_QStandardItem_setBackground, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCheckState), meth_QStandardItem_setCheckState, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCheckable), meth_QStandardItem_setCheckable, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setChild), meth_QStandardItem_setChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setColumnCount), meth_QStandardItem_setColumnCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setData), meth_QStandardItem_setData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDragEnabled), meth_QStandardItem_setDragEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDropEnabled), meth_QStandardItem_setDropEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setEditable), meth_QStandardItem_setEditable, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setEnabled), meth_QStandardItem_setEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFlags), meth_QStandardItem_setFlags, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFont), meth_QStandardItem_setFont, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setForeground), meth_QStandardItem_setForeground, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setIcon), meth_QStandardItem_setIcon, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRowCount), meth_QStandardItem_setRowCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSelectable), meth_QStandardItem_setSelectable, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSizeHint), meth_QStandardItem_setSizeHint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setStatusTip), meth_QStandardItem_setStatusTip, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setText), meth_QStandardItem_setText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTextAlignment), meth_QStandardItem_setTextAlignment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setToolTip), meth_QStandardItem_setToolTip, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTristate), meth_QStandardItem_setTristate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setWhatsThis), meth_QStandardItem_setWhatsThis, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QStandardItem_sizeHint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sortChildren), meth_QStandardItem_sortChildren, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_statusTip), meth_QStandardItem_statusTip, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_takeChild), meth_QStandardItem_takeChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_takeColumn), meth_QStandardItem_takeColumn, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_takeRow), meth_QStandardItem_takeRow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_text), meth_QStandardItem_text, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_textAlignment), meth_QStandardItem_textAlignment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toolTip), meth_QStandardItem_toolTip, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_type), meth_QStandardItem_type, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_whatsThis), meth_QStandardItem_whatsThis, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_write), meth_QStandardItem_write, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QStandardItem[] = {
    {sipName_Type, QStandardItem::Type, 411},
    {sipName_UserType, QStandardItem::UserType, 411},
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QStandardItem = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QStandardItem,
        {0}
    },
    {
        sipNameNr_QStandardItem,
        {0, 0, 1},
        76, methods_QStandardItem,
        2, enummembers_QStandardItem,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    0,
    slots_QStandardItem,
    init_QStandardItem,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QStandardItem,
    0,
    0,
    0,
    release_QStandardItem,
    cast_QStandardItem,
    0,
    0,
    0
},
    0,
    0,
    0
};

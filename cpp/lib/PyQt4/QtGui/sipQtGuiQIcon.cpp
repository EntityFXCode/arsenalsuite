/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:24 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 41 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 39 "sipQtGuiQIcon.cpp"

#line 41 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 43 "sipQtGuiQIcon.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 46 "sipQtGuiQIcon.cpp"
#line 37 "sip/QtGui/qiconengine.sip"
#include <qiconengine.h>
#line 49 "sipQtGuiQIcon.cpp"
#line 55 "sip/QtGui/qiconengine.sip"
#include <qiconengine.h>
#line 77 "sip/QtGui/qiconengine.sip"
#include <qiconengine.h>
#line 54 "sipQtGuiQIcon.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 57 "sipQtGuiQIcon.cpp"
#line 41 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 60 "sipQtGuiQIcon.cpp"
#line 41 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 63 "sipQtGuiQIcon.cpp"
#line 41 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 66 "sipQtGuiQIcon.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 69 "sipQtGuiQIcon.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 72 "sipQtGuiQIcon.cpp"


extern "C" {static PyObject *meth_QIcon_pixmap(PyObject *, PyObject *);}
static PyObject *meth_QIcon_pixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QSize * a0;
        QIcon::Mode a1 = QIcon::Normal;
        QIcon::State a2 = QIcon::Off;
        QIcon *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9|EE",&sipSelf,sipType_QIcon,&sipCpp,sipType_QSize,&a0,sipType_QIcon_Mode,&a1,sipType_QIcon_State,&a2))
        {
            QPixmap *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(sipCpp->pixmap(*a0,a1,a2));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    {
        int a0;
        int a1;
        QIcon::Mode a2 = QIcon::Normal;
        QIcon::State a3 = QIcon::Off;
        QIcon *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii|EE",&sipSelf,sipType_QIcon,&sipCpp,&a0,&a1,sipType_QIcon_Mode,&a2,sipType_QIcon_State,&a3))
        {
            QPixmap *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(sipCpp->pixmap(a0,a1,a2,a3));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    {
        int a0;
        QIcon::Mode a1 = QIcon::Normal;
        QIcon::State a2 = QIcon::Off;
        QIcon *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi|EE",&sipSelf,sipType_QIcon,&sipCpp,&a0,sipType_QIcon_Mode,&a1,sipType_QIcon_State,&a2))
        {
            QPixmap *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(sipCpp->pixmap(a0,a1,a2));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QIcon,sipName_pixmap);

    return NULL;
}


extern "C" {static PyObject *meth_QIcon_actualSize(PyObject *, PyObject *);}
static PyObject *meth_QIcon_actualSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QSize * a0;
        QIcon::Mode a1 = QIcon::Normal;
        QIcon::State a2 = QIcon::Off;
        QIcon *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9|EE",&sipSelf,sipType_QIcon,&sipCpp,sipType_QSize,&a0,sipType_QIcon_Mode,&a1,sipType_QIcon_State,&a2))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->actualSize(*a0,a1,a2));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QIcon,sipName_actualSize);

    return NULL;
}


extern "C" {static PyObject *meth_QIcon_availableSizes(PyObject *, PyObject *);}
static PyObject *meth_QIcon_availableSizes(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QIcon::Mode a0 = QIcon::Normal;
        QIcon::State a1 = QIcon::Off;
        QIcon *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|EE",&sipSelf,sipType_QIcon,&sipCpp,sipType_QIcon_Mode,&a0,sipType_QIcon_State,&a1))
        {
            QList<QSize> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QSize>(sipCpp->availableSizes(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QIcon,sipName_availableSizes);

    return NULL;
}


extern "C" {static PyObject *meth_QIcon_paint(PyObject *, PyObject *);}
static PyObject *meth_QIcon_paint(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPainter * a0;
        const QRect * a1;
        Qt::Alignment a2def = Qt::AlignCenter;
        Qt::Alignment * a2 = &a2def;
        int a2State = 0;
        QIcon::Mode a3 = QIcon::Normal;
        QIcon::State a4 = QIcon::Off;
        QIcon *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8J9|J1EE",&sipSelf,sipType_QIcon,&sipCpp,sipType_QPainter,&a0,sipType_QRect,&a1,sipType_Qt_Alignment,&a2,&a2State,sipType_QIcon_Mode,&a3,sipType_QIcon_State,&a4))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->paint(a0,*a1,*a2,a3,a4);
            Py_END_ALLOW_THREADS

            sipReleaseType(a2,sipType_Qt_Alignment,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QPainter * a0;
        int a1;
        int a2;
        int a3;
        int a4;
        Qt::Alignment a5def = Qt::AlignCenter;
        Qt::Alignment * a5 = &a5def;
        int a5State = 0;
        QIcon::Mode a6 = QIcon::Normal;
        QIcon::State a7 = QIcon::Off;
        QIcon *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8iiii|J1EE",&sipSelf,sipType_QIcon,&sipCpp,sipType_QPainter,&a0,&a1,&a2,&a3,&a4,sipType_Qt_Alignment,&a5,&a5State,sipType_QIcon_Mode,&a6,sipType_QIcon_State,&a7))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->paint(a0,a1,a2,a3,a4,*a5,a6,a7);
            Py_END_ALLOW_THREADS

            sipReleaseType(a5,sipType_Qt_Alignment,a5State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QIcon,sipName_paint);

    return NULL;
}


extern "C" {static PyObject *meth_QIcon_isNull(PyObject *, PyObject *);}
static PyObject *meth_QIcon_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QIcon *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QIcon,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNull();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QIcon,sipName_isNull);

    return NULL;
}


extern "C" {static PyObject *meth_QIcon_isDetached(PyObject *, PyObject *);}
static PyObject *meth_QIcon_isDetached(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QIcon *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QIcon,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isDetached();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QIcon,sipName_isDetached);

    return NULL;
}


extern "C" {static PyObject *meth_QIcon_serialNumber(PyObject *, PyObject *);}
static PyObject *meth_QIcon_serialNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QIcon *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QIcon,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->serialNumber();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QIcon,sipName_serialNumber);

    return NULL;
}


extern "C" {static PyObject *meth_QIcon_addPixmap(PyObject *, PyObject *);}
static PyObject *meth_QIcon_addPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPixmap * a0;
        QIcon::Mode a1 = QIcon::Normal;
        QIcon::State a2 = QIcon::Off;
        QIcon *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9|EE",&sipSelf,sipType_QIcon,&sipCpp,sipType_QPixmap,&a0,sipType_QIcon_Mode,&a1,sipType_QIcon_State,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addPixmap(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QIcon,sipName_addPixmap);

    return NULL;
}


extern "C" {static PyObject *meth_QIcon_addFile(PyObject *, PyObject *);}
static PyObject *meth_QIcon_addFile(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        const QSize& a1def = QSize();
        const QSize * a1 = &a1def;
        QIcon::Mode a2 = QIcon::Normal;
        QIcon::State a3 = QIcon::Off;
        QIcon *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|J9EE",&sipSelf,sipType_QIcon,&sipCpp,sipType_QString,&a0,&a0State,sipType_QSize,&a1,sipType_QIcon_Mode,&a2,sipType_QIcon_State,&a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addFile(*a0,*a1,a2,a3);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QIcon,sipName_addFile);

    return NULL;
}


extern "C" {static PyObject *meth_QIcon_cacheKey(PyObject *, PyObject *);}
static PyObject *meth_QIcon_cacheKey(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QIcon *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QIcon,&sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cacheKey();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QIcon,sipName_cacheKey);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QIcon(void *, const sipTypeDef *);}
static void *cast_QIcon(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QIcon)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QIcon(void *, int);}
static void release_QIcon(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QIcon *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QIcon(void *, SIP_SSIZE_T, const void *);}
static void assign_QIcon(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QIcon *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QIcon *>(sipSrc);
}


extern "C" {static void *array_QIcon(SIP_SSIZE_T);}
static void *array_QIcon(SIP_SSIZE_T sipNrElem)
{
    return new QIcon[sipNrElem];
}


extern "C" {static void *copy_QIcon(const void *, SIP_SSIZE_T);}
static void *copy_QIcon(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QIcon(reinterpret_cast<const QIcon *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QIcon(sipSimpleWrapper *);}
static void dealloc_QIcon(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QIcon(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QIcon(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QIcon(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QIcon *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QIcon();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QPixmap * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QPixmap,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QIcon(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QIcon * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QIcon,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QIcon(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1",sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QIcon(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
        }
    }

    if (!sipCpp)
    {
        QIconEngine * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J:",sipType_QIconEngine,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QIcon(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        QIconEngineV2 * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J:",sipType_QIconEngineV2,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QIcon(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QVariant * a0;
        int a0State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1",sipType_QVariant,&a0,&a0State))
        {
#line 71 "sip/QtGui/qicon.sip"
        sipCpp = new QIcon(qVariantValue<QIcon>(*a0));
#line 574 "sipQtGuiQIcon.cpp"

            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);
        }
    }

    return sipCpp;
}


static PyMethodDef methods_QIcon[] = {
    {SIP_MLNAME_CAST(sipName_actualSize), meth_QIcon_actualSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addFile), meth_QIcon_addFile, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addPixmap), meth_QIcon_addPixmap, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_availableSizes), meth_QIcon_availableSizes, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_cacheKey), meth_QIcon_cacheKey, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isDetached), meth_QIcon_isDetached, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QIcon_isNull, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paint), meth_QIcon_paint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_pixmap), meth_QIcon_pixmap, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_serialNumber), meth_QIcon_serialNumber, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QIcon[] = {
    {sipName_Active, QIcon::Active, 200},
    {sipName_Disabled, QIcon::Disabled, 200},
    {sipName_Normal, QIcon::Normal, 200},
    {sipName_Off, QIcon::Off, 201},
    {sipName_On, QIcon::On, 201},
    {sipName_Selected, QIcon::Selected, 200},
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QIcon = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QIcon,
        {0}
    },
    {
        sipNameNr_QIcon,
        {0, 0, 1},
        10, methods_QIcon,
        6, enummembers_QIcon,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    0,
    0,
    init_QIcon,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QIcon,
    assign_QIcon,
    array_QIcon,
    copy_QIcon,
    release_QIcon,
    cast_QIcon,
    0,
    0,
    0
},
    0,
    0,
    0
};

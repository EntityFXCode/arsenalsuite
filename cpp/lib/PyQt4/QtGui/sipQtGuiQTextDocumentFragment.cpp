/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:22 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 37 "sip/QtGui/qtextdocumentfragment.sip"
#include <qtextdocumentfragment.h>
#line 39 "sipQtGuiQTextDocumentFragment.cpp"

#line 66 "sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 43 "sipQtGuiQTextDocumentFragment.cpp"
#line 37 "sip/QtGui/qtextcursor.sip"
#include <qtextcursor.h>
#line 46 "sipQtGuiQTextDocumentFragment.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 49 "sipQtGuiQTextDocumentFragment.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 52 "sipQtGuiQTextDocumentFragment.cpp"


extern "C" {static PyObject *meth_QTextDocumentFragment_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QTextDocumentFragment_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextDocumentFragment *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextDocumentFragment,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEmpty();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextDocumentFragment,sipName_isEmpty);

    return NULL;
}


extern "C" {static PyObject *meth_QTextDocumentFragment_toPlainText(PyObject *, PyObject *);}
static PyObject *meth_QTextDocumentFragment_toPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextDocumentFragment *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextDocumentFragment,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toPlainText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextDocumentFragment,sipName_toPlainText);

    return NULL;
}


extern "C" {static PyObject *meth_QTextDocumentFragment_toHtml(PyObject *, PyObject *);}
static PyObject *meth_QTextDocumentFragment_toHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextDocumentFragment *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextDocumentFragment,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toHtml());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QByteArray * a0;
        int a0State = 0;
        QTextDocumentFragment *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QTextDocumentFragment,&sipCpp,sipType_QByteArray,&a0,&a0State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toHtml(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextDocumentFragment,sipName_toHtml);

    return NULL;
}


extern "C" {static PyObject *meth_QTextDocumentFragment_fromPlainText(PyObject *, PyObject *);}
static PyObject *meth_QTextDocumentFragment_fromPlainText(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1",sipType_QString,&a0,&a0State))
        {
            QTextDocumentFragment *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextDocumentFragment(QTextDocumentFragment::fromPlainText(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextDocumentFragment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextDocumentFragment,sipName_fromPlainText);

    return NULL;
}


extern "C" {static PyObject *meth_QTextDocumentFragment_fromHtml(PyObject *, PyObject *);}
static PyObject *meth_QTextDocumentFragment_fromHtml(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1",sipType_QString,&a0,&a0State))
        {
            QTextDocumentFragment *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextDocumentFragment(QTextDocumentFragment::fromHtml(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextDocumentFragment,NULL);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QTextDocument * a1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1J8",sipType_QString,&a0,&a0State,sipType_QTextDocument,&a1))
        {
            QTextDocumentFragment *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextDocumentFragment(QTextDocumentFragment::fromHtml(*a0,a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextDocumentFragment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextDocumentFragment,sipName_fromHtml);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTextDocumentFragment(void *, const sipTypeDef *);}
static void *cast_QTextDocumentFragment(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QTextDocumentFragment)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextDocumentFragment(void *, int);}
static void release_QTextDocumentFragment(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QTextDocumentFragment *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QTextDocumentFragment(void *, SIP_SSIZE_T, const void *);}
static void assign_QTextDocumentFragment(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QTextDocumentFragment *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QTextDocumentFragment *>(sipSrc);
}


extern "C" {static void *array_QTextDocumentFragment(SIP_SSIZE_T);}
static void *array_QTextDocumentFragment(SIP_SSIZE_T sipNrElem)
{
    return new QTextDocumentFragment[sipNrElem];
}


extern "C" {static void *copy_QTextDocumentFragment(const void *, SIP_SSIZE_T);}
static void *copy_QTextDocumentFragment(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QTextDocumentFragment(reinterpret_cast<const QTextDocumentFragment *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextDocumentFragment(sipSimpleWrapper *);}
static void dealloc_QTextDocumentFragment(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QTextDocumentFragment(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QTextDocumentFragment(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QTextDocumentFragment(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QTextDocumentFragment *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextDocumentFragment();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QTextDocument * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J8",sipType_QTextDocument,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextDocumentFragment(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QTextCursor * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QTextCursor,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextDocumentFragment(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QTextDocumentFragment * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QTextDocumentFragment,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextDocumentFragment(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    return sipCpp;
}


static PyMethodDef methods_QTextDocumentFragment[] = {
    {SIP_MLNAME_CAST(sipName_fromHtml), meth_QTextDocumentFragment_fromHtml, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromPlainText), meth_QTextDocumentFragment_fromPlainText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QTextDocumentFragment_isEmpty, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toHtml), meth_QTextDocumentFragment_toHtml, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toPlainText), meth_QTextDocumentFragment_toPlainText, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QTextDocumentFragment = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QTextDocumentFragment,
        {0}
    },
    {
        sipNameNr_QTextDocumentFragment,
        {0, 0, 1},
        5, methods_QTextDocumentFragment,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QTextDocumentFragment,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextDocumentFragment,
    assign_QTextDocumentFragment,
    array_QTextDocumentFragment,
    copy_QTextDocumentFragment,
    release_QTextDocumentFragment,
    cast_QTextDocumentFragment,
    0,
    0,
    0
},
    0,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:23 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 41 "sip/QtGui/qmessagebox.sip"
#include <qmessagebox.h>
#line 39 "sipQtGuiQMessageBox.cpp"

#line 41 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 43 "sipQtGuiQMessageBox.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 46 "sipQtGuiQMessageBox.cpp"
#line 41 "sip/QtGui/qmessagebox.sip"
#include <qmessagebox.h>
#line 49 "sipQtGuiQMessageBox.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 52 "sipQtGuiQMessageBox.cpp"
#line 37 "sip/QtGui/qabstractbutton.sip"
#include <qabstractbutton.h>
#line 55 "sipQtGuiQMessageBox.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 58 "sipQtGuiQMessageBox.cpp"
#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 61 "sipQtGuiQMessageBox.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 64 "sipQtGuiQMessageBox.cpp"
#line 37 "sip/QtGui/qpushbutton.sip"
#include <qpushbutton.h>
#line 67 "sipQtGuiQMessageBox.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 70 "sipQtGuiQMessageBox.cpp"
#line 291 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 73 "sipQtGuiQMessageBox.cpp"
#line 383 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 76 "sipQtGuiQMessageBox.cpp"
#line 407 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 79 "sipQtGuiQMessageBox.cpp"
#line 369 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 82 "sipQtGuiQMessageBox.cpp"
#line 41 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 85 "sipQtGuiQMessageBox.cpp"
#line 41 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 88 "sipQtGuiQMessageBox.cpp"
#line 431 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 91 "sipQtGuiQMessageBox.cpp"
#line 39 "sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 94 "sipQtGuiQMessageBox.cpp"
#line 41 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 97 "sipQtGuiQMessageBox.cpp"
#line 37 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 100 "sipQtGuiQMessageBox.cpp"
#line 41 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 103 "sipQtGuiQMessageBox.cpp"
#line 41 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 106 "sipQtGuiQMessageBox.cpp"
#line 41 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 109 "sipQtGuiQMessageBox.cpp"
#line 41 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 112 "sipQtGuiQMessageBox.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 115 "sipQtGuiQMessageBox.cpp"
#line 41 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 118 "sipQtGuiQMessageBox.cpp"
#line 37 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 121 "sipQtGuiQMessageBox.cpp"
#line 37 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 124 "sipQtGuiQMessageBox.cpp"
#line 41 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 127 "sipQtGuiQMessageBox.cpp"
#line 41 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 130 "sipQtGuiQMessageBox.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 133 "sipQtGuiQMessageBox.cpp"
#line 461 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 477 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 138 "sipQtGuiQMessageBox.cpp"
#line 419 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 141 "sipQtGuiQMessageBox.cpp"
#line 503 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 144 "sipQtGuiQMessageBox.cpp"
#line 557 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 147 "sipQtGuiQMessageBox.cpp"
#line 528 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 150 "sipQtGuiQMessageBox.cpp"
#line 545 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "sipQtGuiQMessageBox.cpp"
#line 613 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "sipQtGuiQMessageBox.cpp"
#line 242 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "sipQtGuiQMessageBox.cpp"
#line 355 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 162 "sipQtGuiQMessageBox.cpp"
#line 340 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 165 "sipQtGuiQMessageBox.cpp"
#line 320 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 168 "sipQtGuiQMessageBox.cpp"
#line 220 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 171 "sipQtGuiQMessageBox.cpp"
#line 179 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "sipQtGuiQMessageBox.cpp"
#line 37 "sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 177 "sipQtGuiQMessageBox.cpp"
#line 69 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 180 "sipQtGuiQMessageBox.cpp"
#line 42 "sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 183 "sipQtGuiQMessageBox.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 186 "sipQtGuiQMessageBox.cpp"
#line 37 "sip/QtGui/qaction.sip"
#include <qaction.h>
#line 189 "sipQtGuiQMessageBox.cpp"
#line 37 "sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 192 "sipQtGuiQMessageBox.cpp"
#line 41 "sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 195 "sipQtGuiQMessageBox.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 198 "sipQtGuiQMessageBox.cpp"
#line 41 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 201 "sipQtGuiQMessageBox.cpp"
#line 41 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 204 "sipQtGuiQMessageBox.cpp"
#line 41 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 207 "sipQtGuiQMessageBox.cpp"
#line 41 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 210 "sipQtGuiQMessageBox.cpp"
#line 41 "sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 213 "sipQtGuiQMessageBox.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 216 "sipQtGuiQMessageBox.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 219 "sipQtGuiQMessageBox.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 222 "sipQtGuiQMessageBox.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 225 "sipQtGuiQMessageBox.cpp"
#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 228 "sipQtGuiQMessageBox.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 231 "sipQtGuiQMessageBox.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 234 "sipQtGuiQMessageBox.cpp"


class sipQMessageBox : public QMessageBox
{
public:
    sipQMessageBox(QWidget *);
    sipQMessageBox(QMessageBox::Icon,const QString&,const QString&,QMessageBox::StandardButtons,QWidget *,Qt::WindowFlags);
    sipQMessageBox(const QString&,const QString&,QMessageBox::Icon,int,int,int,QWidget *,Qt::WindowFlags);
    virtual ~sipQMessageBox();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    void sipProtectVirt_mousePressEvent(bool,QMouseEvent *);
    void sipProtectVirt_mouseReleaseEvent(bool,QMouseEvent *);
    void sipProtectVirt_mouseDoubleClickEvent(bool,QMouseEvent *);
    void sipProtectVirt_mouseMoveEvent(bool,QMouseEvent *);
    void sipProtectVirt_wheelEvent(bool,QWheelEvent *);
    void sipProtectVirt_keyReleaseEvent(bool,QKeyEvent *);
    void sipProtectVirt_focusInEvent(bool,QFocusEvent *);
    void sipProtectVirt_focusOutEvent(bool,QFocusEvent *);
    void sipProtectVirt_enterEvent(bool,QEvent *);
    void sipProtectVirt_leaveEvent(bool,QEvent *);
    void sipProtectVirt_paintEvent(bool,QPaintEvent *);
    void sipProtectVirt_moveEvent(bool,QMoveEvent *);
    void sipProtectVirt_tabletEvent(bool,QTabletEvent *);
    void sipProtectVirt_actionEvent(bool,QActionEvent *);
    void sipProtectVirt_dragEnterEvent(bool,QDragEnterEvent *);
    void sipProtectVirt_dragMoveEvent(bool,QDragMoveEvent *);
    void sipProtectVirt_dragLeaveEvent(bool,QDragLeaveEvent *);
    void sipProtectVirt_dropEvent(bool,QDropEvent *);
    void sipProtectVirt_hideEvent(bool,QHideEvent *);
    int sipProtectVirt_metric(bool,QPaintDevice::PaintDeviceMetric) const;
    void sipProtectVirt_inputMethodEvent(bool,QInputMethodEvent *);
    void sipProtect_resetInputContext();
    void sipProtect_updateMicroFocus();
    void sipProtect_create(WId,bool,bool);
    void sipProtect_destroy(bool,bool);
    bool sipProtectVirt_focusNextPrevChild(bool,bool);
    bool sipProtect_focusNextChild();
    bool sipProtect_focusPreviousChild();
    void sipProtectVirt_enabledChange(bool,bool);
    void sipProtectVirt_paletteChange(bool,const QPalette&);
    void sipProtectVirt_fontChange(bool,const QFont&);
    void sipProtectVirt_windowActivationChange(bool,bool);
    void sipProtectVirt_languageChange(bool);
    void sipProtectVirt_contextMenuEvent(bool,QContextMenuEvent *);
    bool sipProtectVirt_eventFilter(bool,QObject *,QEvent *);
    bool sipProtectVirt_event(bool,QEvent *);
    void sipProtectVirt_resizeEvent(bool,QResizeEvent *);
    void sipProtectVirt_showEvent(bool,QShowEvent *);
    void sipProtectVirt_closeEvent(bool,QCloseEvent *);
    void sipProtectVirt_keyPressEvent(bool,QKeyEvent *);
    void sipProtectVirt_changeEvent(bool,QEvent *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QSize sizeHint() const;
    bool event(QEvent *);
    void resizeEvent(QResizeEvent *);
    void showEvent(QShowEvent *);
    void closeEvent(QCloseEvent *);
    void keyPressEvent(QKeyEvent *);
    void changeEvent(QEvent *);
    void setVisible(bool);
    QSize minimumSizeHint() const;
    void done(int);
    void accept();
    void reject();
    void contextMenuEvent(QContextMenuEvent *);
    bool eventFilter(QObject *,QEvent *);
    int devType() const;
    int heightForWidth(int) const;
    QPaintEngine * paintEngine() const;
    void mousePressEvent(QMouseEvent *);
    void mouseReleaseEvent(QMouseEvent *);
    void mouseDoubleClickEvent(QMouseEvent *);
    void mouseMoveEvent(QMouseEvent *);
    void wheelEvent(QWheelEvent *);
    void keyReleaseEvent(QKeyEvent *);
    void focusInEvent(QFocusEvent *);
    void focusOutEvent(QFocusEvent *);
    void enterEvent(QEvent *);
    void leaveEvent(QEvent *);
    void paintEvent(QPaintEvent *);
    void moveEvent(QMoveEvent *);
    void tabletEvent(QTabletEvent *);
    void actionEvent(QActionEvent *);
    void dragEnterEvent(QDragEnterEvent *);
    void dragMoveEvent(QDragMoveEvent *);
    void dragLeaveEvent(QDragLeaveEvent *);
    void dropEvent(QDropEvent *);
    void hideEvent(QHideEvent *);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void inputMethodEvent(QInputMethodEvent *);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    bool focusNextPrevChild(bool);
    void enabledChange(bool);
    void paletteChange(const QPalette&);
    void fontChange(const QFont&);
    void windowActivationChange(bool);
    void languageChange();
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQMessageBox(const sipQMessageBox &);
    sipQMessageBox &operator = (const sipQMessageBox &);

    char sipPyMethods[50];
};

sipQMessageBox::sipQMessageBox(QWidget *a0): QMessageBox(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMessageBox::sipQMessageBox(QMessageBox::Icon a0,const QString& a1,const QString& a2,QMessageBox::StandardButtons a3,QWidget *a4,Qt::WindowFlags a5): QMessageBox(a0,a1,a2,a3,a4,a5), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMessageBox::sipQMessageBox(const QString& a0,const QString& a1,QMessageBox::Icon a2,int a3,int a4,int a5,QWidget *a6,Qt::WindowFlags a7): QMessageBox(a0,a1,a2,a3,a4,a5,a6,a7), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQMessageBox::~sipQMessageBox()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQMessageBox::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QMessageBox);
}

int sipQMessageBox::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QMessageBox::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QMessageBox,_c,_id,_a);

    return _id;
}

void *sipQMessageBox::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QMessageBox,_clname)) ? this : QMessageBox::qt_metacast(_clname);
}

QSize sipQMessageBox::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_sizeHint);

    if (!meth)
        return QMessageBox::sizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_4(sipGILState,meth,0);
}

bool sipQMessageBox::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QMessageBox::event(a0);

    typedef bool (*sipVH_QtCore_12)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return ((sipVH_QtCore_12)(sipModuleAPI_QtGui_QtCore->em_virthandlers[12]))(sipGILState,meth,0,a0);
}

void sipQMessageBox::resizeEvent(QResizeEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_resizeEvent);

    if (!meth)
    {
        QMessageBox::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t,PyObject *,bool*,QResizeEvent *);

    sipVH_QtGui_2(sipGILState,meth,0,a0);
}

void sipQMessageBox::showEvent(QShowEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_showEvent);

    if (!meth)
    {
        QMessageBox::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t,PyObject *,bool*,QShowEvent *);

    sipVH_QtGui_1(sipGILState,meth,0,a0);
}

void sipQMessageBox::closeEvent(QCloseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_closeEvent);

    if (!meth)
    {
        QMessageBox::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t,PyObject *,bool*,QCloseEvent *);

    sipVH_QtGui_23(sipGILState,meth,0,a0);
}

void sipQMessageBox::keyPressEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_keyPressEvent);

    if (!meth)
    {
        QMessageBox::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,bool*,QKeyEvent *);

    sipVH_QtGui_26(sipGILState,meth,0,a0);
}

void sipQMessageBox::changeEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_changeEvent);

    if (!meth)
    {
        QMessageBox::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQMessageBox::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_setVisible);

    if (!meth)
    {
        QDialog::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t,PyObject *,bool*,bool);

    sipVH_QtGui_7(sipGILState,meth,0,a0);
}

QSize sipQMessageBox::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!meth)
        return QDialog::minimumSizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_4(sipGILState,meth,0);
}

void sipQMessageBox::done(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_done);

    if (!meth)
    {
        QDialog::done(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool*,int);

    sipVH_QtGui_6(sipGILState,meth,0,a0);
}

void sipQMessageBox::accept()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_accept);

    if (!meth)
    {
        QDialog::accept();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

void sipQMessageBox::reject()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_reject);

    if (!meth)
    {
        QDialog::reject();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

void sipQMessageBox::contextMenuEvent(QContextMenuEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!meth)
    {
        QDialog::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t,PyObject *,bool*,QContextMenuEvent *);

    sipVH_QtGui_22(sipGILState,meth,0,a0);
}

bool sipQMessageBox::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QDialog::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t,PyObject *,bool*,QObject *,QEvent *);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtGui_QtCore->em_virthandlers[20]))(sipGILState,meth,0,a0,a1);
}

int sipQMessageBox::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_devType);

    if (!meth)
        return QWidget::devType();

    typedef int (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtGui_QtCore->em_virthandlers[7]))(sipGILState,meth,0);
}

int sipQMessageBox::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_heightForWidth);

    if (!meth)
        return QWidget::heightForWidth(a0);

    extern int sipVH_QtGui_29(sip_gilstate_t,PyObject *,bool*,int);

    return sipVH_QtGui_29(sipGILState,meth,0,a0);
}

QPaintEngine * sipQMessageBox::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_paintEngine);

    if (!meth)
        return QWidget::paintEngine();

    extern QPaintEngine * sipVH_QtGui_28(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_28(sipGILState,meth,0);
}

void sipQMessageBox::mousePressEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_mousePressEvent);

    if (!meth)
    {
        QWidget::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_27(sip_gilstate_t,PyObject *,bool*,QMouseEvent *);

    sipVH_QtGui_27(sipGILState,meth,0,a0);
}

void sipQMessageBox::mouseReleaseEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!meth)
    {
        QWidget::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_27(sip_gilstate_t,PyObject *,bool*,QMouseEvent *);

    sipVH_QtGui_27(sipGILState,meth,0,a0);
}

void sipQMessageBox::mouseDoubleClickEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!meth)
    {
        QWidget::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_27(sip_gilstate_t,PyObject *,bool*,QMouseEvent *);

    sipVH_QtGui_27(sipGILState,meth,0,a0);
}

void sipQMessageBox::mouseMoveEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!meth)
    {
        QWidget::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_27(sip_gilstate_t,PyObject *,bool*,QMouseEvent *);

    sipVH_QtGui_27(sipGILState,meth,0,a0);
}

void sipQMessageBox::wheelEvent(QWheelEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_wheelEvent);

    if (!meth)
    {
        QWidget::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t,PyObject *,bool*,QWheelEvent *);

    sipVH_QtGui_5(sipGILState,meth,0,a0);
}

void sipQMessageBox::keyReleaseEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!meth)
    {
        QWidget::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,bool*,QKeyEvent *);

    sipVH_QtGui_26(sipGILState,meth,0,a0);
}

void sipQMessageBox::focusInEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_focusInEvent);

    if (!meth)
    {
        QWidget::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,bool*,QFocusEvent *);

    sipVH_QtGui_25(sipGILState,meth,0,a0);
}

void sipQMessageBox::focusOutEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_focusOutEvent);

    if (!meth)
    {
        QWidget::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,bool*,QFocusEvent *);

    sipVH_QtGui_25(sipGILState,meth,0,a0);
}

void sipQMessageBox::enterEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_enterEvent);

    if (!meth)
    {
        QWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQMessageBox::leaveEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_leaveEvent);

    if (!meth)
    {
        QWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQMessageBox::paintEvent(QPaintEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_paintEvent);

    if (!meth)
    {
        QWidget::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t,PyObject *,bool*,QPaintEvent *);

    sipVH_QtGui_3(sipGILState,meth,0,a0);
}

void sipQMessageBox::moveEvent(QMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_moveEvent);

    if (!meth)
    {
        QWidget::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t,PyObject *,bool*,QMoveEvent *);

    sipVH_QtGui_24(sipGILState,meth,0,a0);
}

void sipQMessageBox::tabletEvent(QTabletEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_tabletEvent);

    if (!meth)
    {
        QWidget::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t,PyObject *,bool*,QTabletEvent *);

    sipVH_QtGui_21(sipGILState,meth,0,a0);
}

void sipQMessageBox::actionEvent(QActionEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_actionEvent);

    if (!meth)
    {
        QWidget::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t,PyObject *,bool*,QActionEvent *);

    sipVH_QtGui_20(sipGILState,meth,0,a0);
}

void sipQMessageBox::dragEnterEvent(QDragEnterEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!meth)
    {
        QWidget::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t,PyObject *,bool*,QDragEnterEvent *);

    sipVH_QtGui_19(sipGILState,meth,0,a0);
}

void sipQMessageBox::dragMoveEvent(QDragMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!meth)
    {
        QWidget::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t,PyObject *,bool*,QDragMoveEvent *);

    sipVH_QtGui_18(sipGILState,meth,0,a0);
}

void sipQMessageBox::dragLeaveEvent(QDragLeaveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!meth)
    {
        QWidget::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t,PyObject *,bool*,QDragLeaveEvent *);

    sipVH_QtGui_17(sipGILState,meth,0,a0);
}

void sipQMessageBox::dropEvent(QDropEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_dropEvent);

    if (!meth)
    {
        QWidget::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t,PyObject *,bool*,QDropEvent *);

    sipVH_QtGui_16(sipGILState,meth,0,a0);
}

void sipQMessageBox::hideEvent(QHideEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_hideEvent);

    if (!meth)
    {
        QWidget::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t,PyObject *,bool*,QHideEvent *);

    sipVH_QtGui_0(sipGILState,meth,0,a0);
}

int sipQMessageBox::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_metric);

    if (!meth)
        return QWidget::metric(a0);

    extern int sipVH_QtGui_15(sip_gilstate_t,PyObject *,bool*,QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_15(sipGILState,meth,0,a0);
}

void sipQMessageBox::inputMethodEvent(QInputMethodEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!meth)
    {
        QWidget::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_14(sip_gilstate_t,PyObject *,bool*,QInputMethodEvent *);

    sipVH_QtGui_14(sipGILState,meth,0,a0);
}

QVariant sipQMessageBox::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!meth)
        return QWidget::inputMethodQuery(a0);

    extern QVariant sipVH_QtGui_13(sip_gilstate_t,PyObject *,bool*,Qt::InputMethodQuery);

    return sipVH_QtGui_13(sipGILState,meth,0,a0);
}

bool sipQMessageBox::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!meth)
        return QWidget::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_12(sip_gilstate_t,PyObject *,bool*,bool);

    return sipVH_QtGui_12(sipGILState,meth,0,a0);
}

void sipQMessageBox::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_enabledChange);

    if (!meth)
    {
        QWidget::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t,PyObject *,bool*,bool);

    sipVH_QtGui_7(sipGILState,meth,0,a0);
}

void sipQMessageBox::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_paletteChange);

    if (!meth)
    {
        QWidget::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_11(sip_gilstate_t,PyObject *,bool*,const QPalette&);

    sipVH_QtGui_11(sipGILState,meth,0,a0);
}

void sipQMessageBox::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_fontChange);

    if (!meth)
    {
        QWidget::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t,PyObject *,bool*,const QFont&);

    sipVH_QtGui_10(sipGILState,meth,0,a0);
}

void sipQMessageBox::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_windowActivationChange);

    if (!meth)
    {
        QWidget::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t,PyObject *,bool*,bool);

    sipVH_QtGui_7(sipGILState,meth,0,a0);
}

void sipQMessageBox::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_languageChange);

    if (!meth)
    {
        QWidget::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

void sipQMessageBox::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_3)(sip_gilstate_t,PyObject *,bool*,QTimerEvent *);

    ((sipVH_QtCore_3)(sipModuleAPI_QtGui_QtCore->em_virthandlers[3]))(sipGILState,meth,0,a0);
}

void sipQMessageBox::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_19)(sip_gilstate_t,PyObject *,bool*,QChildEvent *);

    ((sipVH_QtCore_19)(sipModuleAPI_QtGui_QtCore->em_virthandlers[19]))(sipGILState,meth,0,a0);
}

void sipQMessageBox::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQMessageBox::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

void sipQMessageBox::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

int sipQMessageBox::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQMessageBox::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQMessageBox::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQMessageBox::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQMessageBox::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQMessageBox::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

void sipQMessageBox::sipProtectVirt_mousePressEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QWidget::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQMessageBox::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QWidget::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQMessageBox::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QWidget::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQMessageBox::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QWidget::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQMessageBox::sipProtectVirt_wheelEvent(bool sipSelfWasArg,QWheelEvent *a0)
{
    (sipSelfWasArg ? QWidget::wheelEvent(a0) : wheelEvent(a0));
}

void sipQMessageBox::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg,QKeyEvent *a0)
{
    (sipSelfWasArg ? QWidget::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQMessageBox::sipProtectVirt_focusInEvent(bool sipSelfWasArg,QFocusEvent *a0)
{
    (sipSelfWasArg ? QWidget::focusInEvent(a0) : focusInEvent(a0));
}

void sipQMessageBox::sipProtectVirt_focusOutEvent(bool sipSelfWasArg,QFocusEvent *a0)
{
    (sipSelfWasArg ? QWidget::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQMessageBox::sipProtectVirt_enterEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QWidget::enterEvent(a0) : enterEvent(a0));
}

void sipQMessageBox::sipProtectVirt_leaveEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QWidget::leaveEvent(a0) : leaveEvent(a0));
}

void sipQMessageBox::sipProtectVirt_paintEvent(bool sipSelfWasArg,QPaintEvent *a0)
{
    (sipSelfWasArg ? QWidget::paintEvent(a0) : paintEvent(a0));
}

void sipQMessageBox::sipProtectVirt_moveEvent(bool sipSelfWasArg,QMoveEvent *a0)
{
    (sipSelfWasArg ? QWidget::moveEvent(a0) : moveEvent(a0));
}

void sipQMessageBox::sipProtectVirt_tabletEvent(bool sipSelfWasArg,QTabletEvent *a0)
{
    (sipSelfWasArg ? QWidget::tabletEvent(a0) : tabletEvent(a0));
}

void sipQMessageBox::sipProtectVirt_actionEvent(bool sipSelfWasArg,QActionEvent *a0)
{
    (sipSelfWasArg ? QWidget::actionEvent(a0) : actionEvent(a0));
}

void sipQMessageBox::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg,QDragEnterEvent *a0)
{
    (sipSelfWasArg ? QWidget::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQMessageBox::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg,QDragMoveEvent *a0)
{
    (sipSelfWasArg ? QWidget::dragMoveEvent(a0) : dragMoveEvent(a0));
}

void sipQMessageBox::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg,QDragLeaveEvent *a0)
{
    (sipSelfWasArg ? QWidget::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQMessageBox::sipProtectVirt_dropEvent(bool sipSelfWasArg,QDropEvent *a0)
{
    (sipSelfWasArg ? QWidget::dropEvent(a0) : dropEvent(a0));
}

void sipQMessageBox::sipProtectVirt_hideEvent(bool sipSelfWasArg,QHideEvent *a0)
{
    (sipSelfWasArg ? QWidget::hideEvent(a0) : hideEvent(a0));
}

int sipQMessageBox::sipProtectVirt_metric(bool sipSelfWasArg,QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ? QWidget::metric(a0) : metric(a0));
}

void sipQMessageBox::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg,QInputMethodEvent *a0)
{
    (sipSelfWasArg ? QWidget::inputMethodEvent(a0) : inputMethodEvent(a0));
}

void sipQMessageBox::sipProtect_resetInputContext()
{
    QWidget::resetInputContext();
}

void sipQMessageBox::sipProtect_updateMicroFocus()
{
    QWidget::updateMicroFocus();
}

void sipQMessageBox::sipProtect_create(WId a0,bool a1,bool a2)
{
    QWidget::create(a0,a1,a2);
}

void sipQMessageBox::sipProtect_destroy(bool a0,bool a1)
{
    QWidget::destroy(a0,a1);
}

bool sipQMessageBox::sipProtectVirt_focusNextPrevChild(bool sipSelfWasArg,bool a0)
{
    return (sipSelfWasArg ? QWidget::focusNextPrevChild(a0) : focusNextPrevChild(a0));
}

bool sipQMessageBox::sipProtect_focusNextChild()
{
    return QWidget::focusNextChild();
}

bool sipQMessageBox::sipProtect_focusPreviousChild()
{
    return QWidget::focusPreviousChild();
}

void sipQMessageBox::sipProtectVirt_enabledChange(bool sipSelfWasArg,bool a0)
{
    (sipSelfWasArg ? QWidget::enabledChange(a0) : enabledChange(a0));
}

void sipQMessageBox::sipProtectVirt_paletteChange(bool sipSelfWasArg,const QPalette& a0)
{
    (sipSelfWasArg ? QWidget::paletteChange(a0) : paletteChange(a0));
}

void sipQMessageBox::sipProtectVirt_fontChange(bool sipSelfWasArg,const QFont& a0)
{
    (sipSelfWasArg ? QWidget::fontChange(a0) : fontChange(a0));
}

void sipQMessageBox::sipProtectVirt_windowActivationChange(bool sipSelfWasArg,bool a0)
{
    (sipSelfWasArg ? QWidget::windowActivationChange(a0) : windowActivationChange(a0));
}

void sipQMessageBox::sipProtectVirt_languageChange(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QWidget::languageChange() : languageChange());
}

void sipQMessageBox::sipProtectVirt_contextMenuEvent(bool sipSelfWasArg,QContextMenuEvent *a0)
{
    (sipSelfWasArg ? QDialog::contextMenuEvent(a0) : contextMenuEvent(a0));
}

bool sipQMessageBox::sipProtectVirt_eventFilter(bool sipSelfWasArg,QObject *a0,QEvent *a1)
{
    return (sipSelfWasArg ? QDialog::eventFilter(a0,a1) : eventFilter(a0,a1));
}

bool sipQMessageBox::sipProtectVirt_event(bool sipSelfWasArg,QEvent *a0)
{
    return (sipSelfWasArg ? QMessageBox::event(a0) : event(a0));
}

void sipQMessageBox::sipProtectVirt_resizeEvent(bool sipSelfWasArg,QResizeEvent *a0)
{
    (sipSelfWasArg ? QMessageBox::resizeEvent(a0) : resizeEvent(a0));
}

void sipQMessageBox::sipProtectVirt_showEvent(bool sipSelfWasArg,QShowEvent *a0)
{
    (sipSelfWasArg ? QMessageBox::showEvent(a0) : showEvent(a0));
}

void sipQMessageBox::sipProtectVirt_closeEvent(bool sipSelfWasArg,QCloseEvent *a0)
{
    (sipSelfWasArg ? QMessageBox::closeEvent(a0) : closeEvent(a0));
}

void sipQMessageBox::sipProtectVirt_keyPressEvent(bool sipSelfWasArg,QKeyEvent *a0)
{
    (sipSelfWasArg ? QMessageBox::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQMessageBox::sipProtectVirt_changeEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QMessageBox::changeEvent(a0) : changeEvent(a0));
}


extern "C" {static PyObject *meth_QMessageBox_receivers(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        char * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QMessageBox,&sipCpp,&a0))
        {
            int sipRes = 0;

#line 480 "sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
#line 1538 "sipQtGuiQMessageBox.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_receivers);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QTimerEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_timerEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QChildEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_childEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_customEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QMessageBox,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_connectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QMessageBox,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_disconnectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QMouseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_mousePressEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QMouseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_mouseReleaseEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QMouseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_mouseDoubleClickEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QMouseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_mouseMoveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QWheelEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_wheelEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QKeyEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_keyReleaseEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QFocusEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_focusInEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QFocusEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_focusOutEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_enterEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_enterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_enterEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_enterEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_leaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_leaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_leaveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_leaveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QPaintEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_paintEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_paintEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_moveEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_moveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMoveEvent * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QMoveEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_moveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_tabletEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_tabletEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTabletEvent * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QTabletEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_tabletEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_tabletEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_actionEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_actionEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QActionEvent * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QActionEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_actionEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_actionEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_dragEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QDragEnterEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_dragEnterEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QDragMoveEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_dragMoveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_dragLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QDragLeaveEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_dragLeaveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QDropEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_dropEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_hideEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_hideEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QHideEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_hideEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_metric(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_metric(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pE",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QPaintDevice_PaintDeviceMetric,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_metric);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_inputMethodEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QInputMethodEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_inputMethodEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_resetInputContext(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_resetInputContext(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QMessageBox,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_resetInputContext();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_resetInputContext);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_updateMicroFocus(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_updateMicroFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QMessageBox,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_updateMicroFocus();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_updateMicroFocus);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_create(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_create(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        WId a0 = 0;
        bool a1 = 1;
        bool a2 = 1;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p|mbb",&sipSelf,sipType_QMessageBox,&sipCpp,&a0,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_create(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_create);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_destroy(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0 = 1;
        bool a1 = 1;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p|bb",&sipSelf,sipType_QMessageBox,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_destroy(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_destroy);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pb",&sipSelf,sipType_QMessageBox,&sipCpp,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_focusNextPrevChild(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_focusNextPrevChild);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_focusNextChild(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_focusNextChild(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QMessageBox,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_focusNextChild();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_focusNextChild);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_focusPreviousChild(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_focusPreviousChild(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QMessageBox,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_focusPreviousChild();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_focusPreviousChild);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_enabledChange(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_enabledChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pb",&sipSelf,sipType_QMessageBox,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_enabledChange(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_enabledChange);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_paletteChange(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_paletteChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPalette * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QPalette,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_paletteChange(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_paletteChange);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_fontChange(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_fontChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QFont * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QFont,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_fontChange(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_fontChange);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_windowActivationChange(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_windowActivationChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pb",&sipSelf,sipType_QMessageBox,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_windowActivationChange(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_windowActivationChange);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_languageChange(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_languageChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QMessageBox,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_languageChange(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_languageChange);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QContextMenuEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_contextMenuEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_contextMenuEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_eventFilter(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_eventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject * a0;
        QEvent * a1;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8J8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QObject,&a0,sipType_QEvent,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_eventFilter(sipSelfWasArg,a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_eventFilter);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_text(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_text(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QMessageBox,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->text());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_text);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_setText(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setText(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_setText);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_icon(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QMessageBox,&sipCpp))
        {
            QMessageBox::Icon sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->icon();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QMessageBox_Icon);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_icon);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_setIcon(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setIcon(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QMessageBox::Icon a0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QMessageBox_Icon,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIcon(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_setIcon);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_iconPixmap(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_iconPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QMessageBox,&sipCpp))
        {
            QPixmap *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(sipCpp->iconPixmap());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_iconPixmap);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_setIconPixmap(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setIconPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPixmap * a0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QPixmap,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIconPixmap(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_setIconPixmap);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_buttonText(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_buttonText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QMessageBox,&sipCpp,&a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->buttonText(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_buttonText);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_setButtonText(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setButtonText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        const QString * a1;
        int a1State = 0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiJ1",&sipSelf,sipType_QMessageBox,&sipCpp,&a0,sipType_QString,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setButtonText(a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_setButtonText);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_textFormat(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_textFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QMessageBox,&sipCpp))
        {
            Qt::TextFormat sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->textFormat();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_TextFormat);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_textFormat);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_setTextFormat(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setTextFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Qt::TextFormat a0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_Qt_TextFormat,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextFormat(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_setTextFormat);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_information(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_information(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWidget * a0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        QMessageBox::StandardButtons a3def = QMessageBox::Ok;
        QMessageBox::StandardButtons * a3 = &a3def;
        int a3State = 0;
        QMessageBox::StandardButton a4 = QMessageBox::NoButton;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8J1J1|J1E",sipType_QWidget,&a0,sipType_QString,&a1,&a1State,sipType_QString,&a2,&a2State,sipType_QMessageBox_StandardButtons,&a3,&a3State,sipType_QMessageBox_StandardButton,&a4))
        {
            QMessageBox::StandardButton sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QMessageBox::information(a0,*a1,*a2,*a3,a4);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(a3,sipType_QMessageBox_StandardButtons,a3State);

            return sipConvertFromEnum(sipRes,sipType_QMessageBox_StandardButton);
        }
    }

    {
        QWidget * a0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        int a3;
        int a4 = 0;
        int a5 = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8J1J1i|ii",sipType_QWidget,&a0,sipType_QString,&a1,&a1State,sipType_QString,&a2,&a2State,&a3,&a4,&a5))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QMessageBox::information(a0,*a1,*a2,a3,a4,a5);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        QWidget * a0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        const QString * a3;
        int a3State = 0;
        const QString& a4def = QString();
        const QString * a4 = &a4def;
        int a4State = 0;
        const QString& a5def = QString();
        const QString * a5 = &a5def;
        int a5State = 0;
        int a6 = 0;
        int a7 = -1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8J1J1J1|J1J1ii",sipType_QWidget,&a0,sipType_QString,&a1,&a1State,sipType_QString,&a2,&a2State,sipType_QString,&a3,&a3State,sipType_QString,&a4,&a4State,sipType_QString,&a5,&a5State,&a6,&a7))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QMessageBox::information(a0,*a1,*a2,*a3,*a4,*a5,a6,a7);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast<QString *>(a4),sipType_QString,a4State);
            sipReleaseType(const_cast<QString *>(a5),sipType_QString,a5State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_information);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_question(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_question(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWidget * a0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        QMessageBox::StandardButtons a3def = QMessageBox::Ok;
        QMessageBox::StandardButtons * a3 = &a3def;
        int a3State = 0;
        QMessageBox::StandardButton a4 = QMessageBox::NoButton;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8J1J1|J1E",sipType_QWidget,&a0,sipType_QString,&a1,&a1State,sipType_QString,&a2,&a2State,sipType_QMessageBox_StandardButtons,&a3,&a3State,sipType_QMessageBox_StandardButton,&a4))
        {
            QMessageBox::StandardButton sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QMessageBox::question(a0,*a1,*a2,*a3,a4);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(a3,sipType_QMessageBox_StandardButtons,a3State);

            return sipConvertFromEnum(sipRes,sipType_QMessageBox_StandardButton);
        }
    }

    {
        QWidget * a0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        int a3;
        int a4 = 0;
        int a5 = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8J1J1i|ii",sipType_QWidget,&a0,sipType_QString,&a1,&a1State,sipType_QString,&a2,&a2State,&a3,&a4,&a5))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QMessageBox::question(a0,*a1,*a2,a3,a4,a5);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        QWidget * a0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        const QString * a3;
        int a3State = 0;
        const QString& a4def = QString();
        const QString * a4 = &a4def;
        int a4State = 0;
        const QString& a5def = QString();
        const QString * a5 = &a5def;
        int a5State = 0;
        int a6 = 0;
        int a7 = -1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8J1J1J1|J1J1ii",sipType_QWidget,&a0,sipType_QString,&a1,&a1State,sipType_QString,&a2,&a2State,sipType_QString,&a3,&a3State,sipType_QString,&a4,&a4State,sipType_QString,&a5,&a5State,&a6,&a7))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QMessageBox::question(a0,*a1,*a2,*a3,*a4,*a5,a6,a7);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast<QString *>(a4),sipType_QString,a4State);
            sipReleaseType(const_cast<QString *>(a5),sipType_QString,a5State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_question);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_warning(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_warning(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWidget * a0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        QMessageBox::StandardButtons a3def = QMessageBox::Ok;
        QMessageBox::StandardButtons * a3 = &a3def;
        int a3State = 0;
        QMessageBox::StandardButton a4 = QMessageBox::NoButton;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8J1J1|J1E",sipType_QWidget,&a0,sipType_QString,&a1,&a1State,sipType_QString,&a2,&a2State,sipType_QMessageBox_StandardButtons,&a3,&a3State,sipType_QMessageBox_StandardButton,&a4))
        {
            QMessageBox::StandardButton sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QMessageBox::warning(a0,*a1,*a2,*a3,a4);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(a3,sipType_QMessageBox_StandardButtons,a3State);

            return sipConvertFromEnum(sipRes,sipType_QMessageBox_StandardButton);
        }
    }

    {
        QWidget * a0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        int a3;
        int a4;
        int a5 = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8J1J1ii|i",sipType_QWidget,&a0,sipType_QString,&a1,&a1State,sipType_QString,&a2,&a2State,&a3,&a4,&a5))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QMessageBox::warning(a0,*a1,*a2,a3,a4,a5);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        QWidget * a0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        const QString * a3;
        int a3State = 0;
        const QString& a4def = QString();
        const QString * a4 = &a4def;
        int a4State = 0;
        const QString& a5def = QString();
        const QString * a5 = &a5def;
        int a5State = 0;
        int a6 = 0;
        int a7 = -1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8J1J1J1|J1J1ii",sipType_QWidget,&a0,sipType_QString,&a1,&a1State,sipType_QString,&a2,&a2State,sipType_QString,&a3,&a3State,sipType_QString,&a4,&a4State,sipType_QString,&a5,&a5State,&a6,&a7))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QMessageBox::warning(a0,*a1,*a2,*a3,*a4,*a5,a6,a7);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast<QString *>(a4),sipType_QString,a4State);
            sipReleaseType(const_cast<QString *>(a5),sipType_QString,a5State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_warning);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_critical(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_critical(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWidget * a0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        QMessageBox::StandardButtons a3def = QMessageBox::Ok;
        QMessageBox::StandardButtons * a3 = &a3def;
        int a3State = 0;
        QMessageBox::StandardButton a4 = QMessageBox::NoButton;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8J1J1|J1E",sipType_QWidget,&a0,sipType_QString,&a1,&a1State,sipType_QString,&a2,&a2State,sipType_QMessageBox_StandardButtons,&a3,&a3State,sipType_QMessageBox_StandardButton,&a4))
        {
            QMessageBox::StandardButton sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QMessageBox::critical(a0,*a1,*a2,*a3,a4);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(a3,sipType_QMessageBox_StandardButtons,a3State);

            return sipConvertFromEnum(sipRes,sipType_QMessageBox_StandardButton);
        }
    }

    {
        QWidget * a0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        int a3;
        int a4;
        int a5 = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8J1J1ii|i",sipType_QWidget,&a0,sipType_QString,&a1,&a1State,sipType_QString,&a2,&a2State,&a3,&a4,&a5))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QMessageBox::critical(a0,*a1,*a2,a3,a4,a5);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        QWidget * a0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        const QString * a3;
        int a3State = 0;
        const QString& a4def = QString();
        const QString * a4 = &a4def;
        int a4State = 0;
        const QString& a5def = QString();
        const QString * a5 = &a5def;
        int a5State = 0;
        int a6 = 0;
        int a7 = -1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8J1J1J1|J1J1ii",sipType_QWidget,&a0,sipType_QString,&a1,&a1State,sipType_QString,&a2,&a2State,sipType_QString,&a3,&a3State,sipType_QString,&a4,&a4State,sipType_QString,&a5,&a5State,&a6,&a7))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QMessageBox::critical(a0,*a1,*a2,*a3,*a4,*a5,a6,a7);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast<QString *>(a4),sipType_QString,a4State);
            sipReleaseType(const_cast<QString *>(a5),sipType_QString,a5State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_critical);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_about(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_about(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWidget * a0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8J1J1",sipType_QWidget,&a0,sipType_QString,&a1,&a1State,sipType_QString,&a2,&a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            QMessageBox::about(a0,*a1,*a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_about);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_aboutQt(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_aboutQt(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWidget * a0;
        const QString& a1def = QString();
        const QString * a1 = &a1def;
        int a1State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8|J1",sipType_QWidget,&a0,sipType_QString,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            QMessageBox::aboutQt(a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_aboutQt);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QMessageBox,&sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QMessageBox::sizeHint() : sipCpp->sizeHint()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_sizeHint);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_standardIcon(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_standardIcon(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QMessageBox::Icon a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"E",sipType_QMessageBox_Icon,&a0))
        {
            QPixmap *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(QMessageBox::standardIcon(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_standardIcon);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_event(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_event(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QEvent,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_event);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QResizeEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_resizeEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QShowEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_showEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_closeEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_closeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QCloseEvent * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QCloseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_closeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_closeEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QKeyEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_keyPressEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_changeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_changeEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_addButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_addButton(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QAbstractButton * a0;
        QMessageBox::ButtonRole a1;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ:E",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QAbstractButton,&a0,sipType_QMessageBox_ButtonRole,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addButton(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        QMessageBox::ButtonRole a1;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1E",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QString,&a0,&a0State,sipType_QMessageBox_ButtonRole,&a1))
        {
            QPushButton *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->addButton(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QPushButton,sipSelf);
        }
    }

    {
        QMessageBox::StandardButton a0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QMessageBox_StandardButton,&a0))
        {
            QPushButton *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->addButton(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QPushButton,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_addButton);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_removeButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_removeButton(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QAbstractButton * a0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ<",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QAbstractButton,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeButton(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_removeButton);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_setStandardButtons(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setStandardButtons(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QMessageBox::StandardButtons * a0;
        int a0State = 0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QMessageBox_StandardButtons,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStandardButtons(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QMessageBox_StandardButtons,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_setStandardButtons);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_standardButtons(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_standardButtons(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QMessageBox,&sipCpp))
        {
            QMessageBox::StandardButtons *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMessageBox::StandardButtons(sipCpp->standardButtons());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMessageBox_StandardButtons,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_standardButtons);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_standardButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_standardButton(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QAbstractButton * a0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QAbstractButton,&a0))
        {
            QMessageBox::StandardButton sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->standardButton(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QMessageBox_StandardButton);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_standardButton);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_button(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_button(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QMessageBox::StandardButton a0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QMessageBox_StandardButton,&a0))
        {
            QAbstractButton *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->button(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractButton,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_button);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_defaultButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_defaultButton(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QMessageBox,&sipCpp))
        {
            QPushButton *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->defaultButton();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QPushButton,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_defaultButton);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_setDefaultButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setDefaultButton(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPushButton * a0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QPushButton,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDefaultButton(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QMessageBox::StandardButton a0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QMessageBox_StandardButton,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDefaultButton(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_setDefaultButton);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_escapeButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_escapeButton(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QMessageBox,&sipCpp))
        {
            QAbstractButton *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->escapeButton();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractButton,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_escapeButton);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_setEscapeButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setEscapeButton(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QAbstractButton * a0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QAbstractButton,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEscapeButton(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QMessageBox::StandardButton a0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QMessageBox_StandardButton,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEscapeButton(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_setEscapeButton);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_clickedButton(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_clickedButton(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QMessageBox,&sipCpp))
        {
            QAbstractButton *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->clickedButton();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractButton,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_clickedButton);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_informativeText(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_informativeText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QMessageBox,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->informativeText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_informativeText);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_setInformativeText(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setInformativeText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setInformativeText(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_setInformativeText);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_detailedText(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_detailedText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QMessageBox,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->detailedText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_detailedText);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_setDetailedText(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setDetailedText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDetailedText(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_setDetailedText);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_setWindowTitle(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setWindowTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWindowTitle(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_setWindowTitle);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_setWindowModality(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_setWindowModality(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Qt::WindowModality a0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_Qt_WindowModality,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWindowModality(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_setWindowModality);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_open(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_open(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QMessageBox,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->open();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QObject * a0;
        char * a1;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BqS",&sipSelf,sipType_QMessageBox,&sipCpp,"()",&a0,&a1,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->open(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QObject * a0;
        char * a1;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"By",&sipSelf,sipType_QMessageBox,&sipCpp,"()",&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->open(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_open);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_buttons(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_buttons(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QMessageBox,&sipCpp))
        {
            QList<QAbstractButton *> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QAbstractButton *>(sipCpp->buttons());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QAbstractButton,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_buttons);

    return NULL;
}


extern "C" {static PyObject *meth_QMessageBox_buttonRole(PyObject *, PyObject *);}
static PyObject *meth_QMessageBox_buttonRole(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QAbstractButton * a0;
        QMessageBox *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QMessageBox,&sipCpp,sipType_QAbstractButton,&a0))
        {
            QMessageBox::ButtonRole sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->buttonRole(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QMessageBox_ButtonRole);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMessageBox,sipName_buttonRole);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QMessageBox(void *, const sipTypeDef *);}
static void *cast_QMessageBox(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QMessageBox)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QDialog)->ctd_cast((QDialog *)(QMessageBox *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMessageBox(void *, int);}
static void release_QMessageBox(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQMessageBox *>(sipCppV);
    else
        delete reinterpret_cast<QMessageBox *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QMessageBox(sipSimpleWrapper *);}
static void dealloc_QMessageBox(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQMessageBox *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QMessageBox(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QMessageBox(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QMessageBox(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **sipOwner, int *sipArgsParsed)
{
    sipQMessageBox *sipCpp = 0;

    if (!sipCpp)
    {
        QWidget * a0 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"|JH",sipType_QWidget,&a0,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQMessageBox(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        QMessageBox::Icon a0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        QMessageBox::StandardButtons a3def = QMessageBox::NoButton;
        QMessageBox::StandardButtons * a3 = &a3def;
        int a3State = 0;
        QWidget * a4 = 0;
        Qt::WindowFlags a5def = Qt::Dialog | Qt::MSWindowsFixedSizeDialogHint;
        Qt::WindowFlags * a5 = &a5def;
        int a5State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"EJ1J1|J1JHJ1",sipType_QMessageBox_Icon,&a0,sipType_QString,&a1,&a1State,sipType_QString,&a2,&a2State,sipType_QMessageBox_StandardButtons,&a3,&a3State,sipType_QWidget,&a4,sipOwner,sipType_Qt_WindowFlags,&a5,&a5State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQMessageBox(a0,*a1,*a2,*a3,a4,*a5);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(a3,sipType_QMessageBox_StandardButtons,a3State);
            sipReleaseType(a5,sipType_Qt_WindowFlags,a5State);
        }
    }

    if (!sipCpp)
    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QMessageBox::Icon a2;
        int a3;
        int a4;
        int a5;
        QWidget * a6 = 0;
        Qt::WindowFlags a7def = Qt::Dialog | Qt::MSWindowsFixedSizeDialogHint;
        Qt::WindowFlags * a7 = &a7def;
        int a7State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1J1Eiii|JHJ1",sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State,sipType_QMessageBox_Icon,&a2,&a3,&a4,&a5,sipType_QWidget,&a6,sipOwner,sipType_Qt_WindowFlags,&a7,&a7State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQMessageBox(*a0,*a1,a2,a3,a4,a5,a6,*a7);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(a7,sipType_Qt_WindowFlags,a7State);
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QMessageBox[] = {{81, 255, 1}};


static PyMethodDef methods_QMessageBox[] = {
    {SIP_MLNAME_CAST(sipName_about), meth_QMessageBox_about, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_aboutQt), meth_QMessageBox_aboutQt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_actionEvent), meth_QMessageBox_actionEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addButton), meth_QMessageBox_addButton, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_button), meth_QMessageBox_button, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_buttonRole), meth_QMessageBox_buttonRole, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_buttonText), meth_QMessageBox_buttonText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_buttons), meth_QMessageBox_buttons, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QMessageBox_changeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QMessageBox_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clickedButton), meth_QMessageBox_clickedButton, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_closeEvent), meth_QMessageBox_closeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QMessageBox_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), meth_QMessageBox_contextMenuEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_create), meth_QMessageBox_create, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_critical), meth_QMessageBox_critical, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QMessageBox_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_defaultButton), meth_QMessageBox_defaultButton, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_destroy), meth_QMessageBox_destroy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_detailedText), meth_QMessageBox_detailedText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QMessageBox_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), meth_QMessageBox_dragEnterEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), meth_QMessageBox_dragLeaveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), meth_QMessageBox_dragMoveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dropEvent), meth_QMessageBox_dropEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_enabledChange), meth_QMessageBox_enabledChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_enterEvent), meth_QMessageBox_enterEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_escapeButton), meth_QMessageBox_escapeButton, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_event), meth_QMessageBox_event, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_eventFilter), meth_QMessageBox_eventFilter, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QMessageBox_focusInEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextChild), meth_QMessageBox_focusNextChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), meth_QMessageBox_focusNextPrevChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QMessageBox_focusOutEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusPreviousChild), meth_QMessageBox_focusPreviousChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fontChange), meth_QMessageBox_fontChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hideEvent), meth_QMessageBox_hideEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_icon), meth_QMessageBox_icon, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_iconPixmap), meth_QMessageBox_iconPixmap, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_information), meth_QMessageBox_information, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_informativeText), meth_QMessageBox_informativeText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), meth_QMessageBox_inputMethodEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QMessageBox_keyPressEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), meth_QMessageBox_keyReleaseEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_languageChange), meth_QMessageBox_languageChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_leaveEvent), meth_QMessageBox_leaveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_metric), meth_QMessageBox_metric, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), meth_QMessageBox_mouseDoubleClickEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QMessageBox_mouseMoveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QMessageBox_mousePressEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QMessageBox_mouseReleaseEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveEvent), meth_QMessageBox_moveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_open), meth_QMessageBox_open, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QMessageBox_paintEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paletteChange), meth_QMessageBox_paletteChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_question), meth_QMessageBox_question, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QMessageBox_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeButton), meth_QMessageBox_removeButton, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resetInputContext), meth_QMessageBox_resetInputContext, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QMessageBox_resizeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setButtonText), meth_QMessageBox_setButtonText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDefaultButton), meth_QMessageBox_setDefaultButton, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDetailedText), meth_QMessageBox_setDetailedText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setEscapeButton), meth_QMessageBox_setEscapeButton, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setIcon), meth_QMessageBox_setIcon, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setIconPixmap), meth_QMessageBox_setIconPixmap, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setInformativeText), meth_QMessageBox_setInformativeText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setStandardButtons), meth_QMessageBox_setStandardButtons, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setText), meth_QMessageBox_setText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTextFormat), meth_QMessageBox_setTextFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setWindowModality), meth_QMessageBox_setWindowModality, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setWindowTitle), meth_QMessageBox_setWindowTitle, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_showEvent), meth_QMessageBox_showEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QMessageBox_sizeHint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_standardButton), meth_QMessageBox_standardButton, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_standardButtons), meth_QMessageBox_standardButtons, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_standardIcon), meth_QMessageBox_standardIcon, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_tabletEvent), meth_QMessageBox_tabletEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_text), meth_QMessageBox_text, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_textFormat), meth_QMessageBox_textFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QMessageBox_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateMicroFocus), meth_QMessageBox_updateMicroFocus, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_warning), meth_QMessageBox_warning, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_wheelEvent), meth_QMessageBox_wheelEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_windowActivationChange), meth_QMessageBox_windowActivationChange, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QMessageBox[] = {
    {sipName_Abort, QMessageBox::Abort, 307},
    {sipName_AcceptRole, QMessageBox::AcceptRole, 305},
    {sipName_ActionRole, QMessageBox::ActionRole, 305},
    {sipName_Apply, QMessageBox::Apply, 307},
    {sipName_ApplyRole, QMessageBox::ApplyRole, 305},
    {sipName_ButtonMask, QMessageBox::ButtonMask, 307},
    {sipName_Cancel, QMessageBox::Cancel, 307},
    {sipName_Close, QMessageBox::Close, 307},
    {sipName_Critical, QMessageBox::Critical, 306},
    {sipName_Default, QMessageBox::Default, 307},
    {sipName_DestructiveRole, QMessageBox::DestructiveRole, 305},
    {sipName_Discard, QMessageBox::Discard, 307},
    {sipName_Escape, QMessageBox::Escape, 307},
    {sipName_FirstButton, QMessageBox::FirstButton, 307},
    {sipName_FlagMask, QMessageBox::FlagMask, 307},
    {sipName_Help, QMessageBox::Help, 307},
    {sipName_HelpRole, QMessageBox::HelpRole, 305},
    {sipName_Ignore, QMessageBox::Ignore, 307},
    {sipName_Information, QMessageBox::Information, 306},
    {sipName_InvalidRole, QMessageBox::InvalidRole, 305},
    {sipName_LastButton, QMessageBox::LastButton, 307},
    {sipName_No, QMessageBox::No, 307},
    {sipName_NoAll, QMessageBox::NoAll, 307},
    {sipName_NoButton, QMessageBox::NoButton, 307},
    {sipName_NoIcon, QMessageBox::NoIcon, 306},
    {sipName_NoRole, QMessageBox::NoRole, 305},
    {sipName_NoToAll, QMessageBox::NoToAll, 307},
    {sipName_Ok, QMessageBox::Ok, 307},
    {sipName_Open, QMessageBox::Open, 307},
    {sipName_Question, QMessageBox::Question, 306},
    {sipName_RejectRole, QMessageBox::RejectRole, 305},
    {sipName_Reset, QMessageBox::Reset, 307},
    {sipName_ResetRole, QMessageBox::ResetRole, 305},
    {sipName_RestoreDefaults, QMessageBox::RestoreDefaults, 307},
    {sipName_Retry, QMessageBox::Retry, 307},
    {sipName_Save, QMessageBox::Save, 307},
    {sipName_SaveAll, QMessageBox::SaveAll, 307},
    {sipName_Warning, QMessageBox::Warning, 306},
    {sipName_Yes, QMessageBox::Yes, 307},
    {sipName_YesAll, QMessageBox::YesAll, 307},
    {sipName_YesRole, QMessageBox::YesRole, 305},
    {sipName_YesToAll, QMessageBox::YesToAll, 307},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QMessageBox[] = {
    {"buttonClicked(QAbstractButton *)", 0},
    {0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QMessageBox = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QMessageBox,
        {0}
    },
    {
        sipNameNr_QMessageBox,
        {0, 0, 1},
        85, methods_QMessageBox,
        42, enummembers_QMessageBox,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QMessageBox,
    0,
    init_QMessageBox,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMessageBox,
    0,
    0,
    0,
    release_QMessageBox,
    cast_QMessageBox,
    0,
    0,
    0
},
    &QMessageBox::staticMetaObject,
    0,
    pyqt4_signals_QMessageBox
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:24 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 37 "sip/QtGui/qimagewriter.sip"
#include <qimagewriter.h>
#line 39 "sipQtGuiQImageWriter.cpp"

#line 41 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 43 "sipQtGuiQImageWriter.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 46 "sipQtGuiQImageWriter.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 49 "sipQtGuiQImageWriter.cpp"
#line 37 "sip/QtGui/qimageiohandler.sip"
#include <qimageiohandler.h>
#line 52 "sipQtGuiQImageWriter.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 55 "sipQtGuiQImageWriter.cpp"
#line 41 "sip/QtGui/qimage.sip"
#include <qimage.h>
#line 58 "sipQtGuiQImageWriter.cpp"


extern "C" {static PyObject *meth_QImageWriter_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QByteArray * a0;
        int a0State = 0;
        QImageWriter *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QImageWriter,&sipCpp,sipType_QByteArray,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFormat(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageWriter,sipName_setFormat);

    return NULL;
}


extern "C" {static PyObject *meth_QImageWriter_format(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_format(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageWriter *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageWriter,&sipCpp))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->format());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageWriter,sipName_format);

    return NULL;
}


extern "C" {static PyObject *meth_QImageWriter_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QIODevice * a0;
        QImageWriter *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QImageWriter,&sipCpp,sipType_QIODevice,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDevice(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageWriter,sipName_setDevice);

    return NULL;
}


extern "C" {static PyObject *meth_QImageWriter_device(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_device(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageWriter *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageWriter,&sipCpp))
        {
            QIODevice *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->device();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageWriter,sipName_device);

    return NULL;
}


extern "C" {static PyObject *meth_QImageWriter_setFileName(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_setFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QImageWriter *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QImageWriter,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFileName(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageWriter,sipName_setFileName);

    return NULL;
}


extern "C" {static PyObject *meth_QImageWriter_fileName(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageWriter *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageWriter,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->fileName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageWriter,sipName_fileName);

    return NULL;
}


extern "C" {static PyObject *meth_QImageWriter_setQuality(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_setQuality(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QImageWriter *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QImageWriter,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setQuality(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageWriter,sipName_setQuality);

    return NULL;
}


extern "C" {static PyObject *meth_QImageWriter_quality(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_quality(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageWriter *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageWriter,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->quality();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageWriter,sipName_quality);

    return NULL;
}


extern "C" {static PyObject *meth_QImageWriter_setGamma(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_setGamma(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        float a0;
        QImageWriter *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bf",&sipSelf,sipType_QImageWriter,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setGamma(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageWriter,sipName_setGamma);

    return NULL;
}


extern "C" {static PyObject *meth_QImageWriter_gamma(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_gamma(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageWriter *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageWriter,&sipCpp))
        {
            float sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->gamma();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageWriter,sipName_gamma);

    return NULL;
}


extern "C" {static PyObject *meth_QImageWriter_setDescription(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_setDescription(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QImageWriter *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QImageWriter,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDescription(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageWriter,sipName_setDescription);

    return NULL;
}


extern "C" {static PyObject *meth_QImageWriter_description(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_description(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageWriter *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageWriter,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->description());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageWriter,sipName_description);

    return NULL;
}


extern "C" {static PyObject *meth_QImageWriter_canWrite(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_canWrite(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageWriter *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageWriter,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->canWrite();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageWriter,sipName_canWrite);

    return NULL;
}


extern "C" {static PyObject *meth_QImageWriter_write(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_write(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QImage * a0;
        QImageWriter *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QImageWriter,&sipCpp,sipType_QImage,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->write(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageWriter,sipName_write);

    return NULL;
}


extern "C" {static PyObject *meth_QImageWriter_error(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_error(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageWriter *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageWriter,&sipCpp))
        {
            QImageWriter::ImageWriterError sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->error();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QImageWriter_ImageWriterError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageWriter,sipName_error);

    return NULL;
}


extern "C" {static PyObject *meth_QImageWriter_errorString(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageWriter *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageWriter,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->errorString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageWriter,sipName_errorString);

    return NULL;
}


extern "C" {static PyObject *meth_QImageWriter_supportedImageFormats(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_supportedImageFormats(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QList<QByteArray> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QByteArray>(QImageWriter::supportedImageFormats());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageWriter,sipName_supportedImageFormats);

    return NULL;
}


extern "C" {static PyObject *meth_QImageWriter_setText(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QImageWriter *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1",&sipSelf,sipType_QImageWriter,&sipCpp,sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setText(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageWriter,sipName_setText);

    return NULL;
}


extern "C" {static PyObject *meth_QImageWriter_supportsOption(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_supportsOption(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageIOHandler::ImageOption a0;
        QImageWriter *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QImageWriter,&sipCpp,sipType_QImageIOHandler_ImageOption,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->supportsOption(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageWriter,sipName_supportsOption);

    return NULL;
}


extern "C" {static PyObject *meth_QImageWriter_setCompression(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_setCompression(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QImageWriter *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QImageWriter,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCompression(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageWriter,sipName_setCompression);

    return NULL;
}


extern "C" {static PyObject *meth_QImageWriter_compression(PyObject *, PyObject *);}
static PyObject *meth_QImageWriter_compression(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageWriter *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageWriter,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->compression();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageWriter,sipName_compression);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QImageWriter(void *, const sipTypeDef *);}
static void *cast_QImageWriter(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QImageWriter)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QImageWriter(void *, int);}
static void release_QImageWriter(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QImageWriter *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QImageWriter(sipSimpleWrapper *);}
static void dealloc_QImageWriter(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QImageWriter(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QImageWriter(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QImageWriter(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QImageWriter *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QImageWriter();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        QIODevice * a0;
        const QByteArray * a1;
        int a1State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J8J1",sipType_QIODevice,&a0,sipType_QByteArray,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QImageWriter(a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);
        }
    }

    if (!sipCpp)
    {
        const QString * a0;
        int a0State = 0;
        const QByteArray& a1def = QByteArray();
        const QByteArray * a1 = &a1def;
        int a1State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1|J1",sipType_QString,&a0,&a0State,sipType_QByteArray,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QImageWriter(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);
        }
    }

    return sipCpp;
}


static PyMethodDef methods_QImageWriter[] = {
    {SIP_MLNAME_CAST(sipName_canWrite), meth_QImageWriter_canWrite, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_compression), meth_QImageWriter_compression, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_description), meth_QImageWriter_description, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_device), meth_QImageWriter_device, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_error), meth_QImageWriter_error, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QImageWriter_errorString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QImageWriter_fileName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_format), meth_QImageWriter_format, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_gamma), meth_QImageWriter_gamma, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_quality), meth_QImageWriter_quality, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCompression), meth_QImageWriter_setCompression, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDescription), meth_QImageWriter_setDescription, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDevice), meth_QImageWriter_setDevice, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFileName), meth_QImageWriter_setFileName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QImageWriter_setFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setGamma), meth_QImageWriter_setGamma, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setQuality), meth_QImageWriter_setQuality, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setText), meth_QImageWriter_setText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_supportedImageFormats), meth_QImageWriter_supportedImageFormats, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_supportsOption), meth_QImageWriter_supportsOption, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_write), meth_QImageWriter_write, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QImageWriter[] = {
    {sipName_DeviceError, QImageWriter::DeviceError, 215},
    {sipName_UnknownError, QImageWriter::UnknownError, 215},
    {sipName_UnsupportedFormatError, QImageWriter::UnsupportedFormatError, 215},
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QImageWriter = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QImageWriter,
        {0}
    },
    {
        sipNameNr_QImageWriter,
        {0, 0, 1},
        21, methods_QImageWriter,
        3, enummembers_QImageWriter,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QImageWriter,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QImageWriter,
    0,
    0,
    0,
    release_QImageWriter,
    cast_QImageWriter,
    0,
    0,
    0
},
    0,
    0,
    0
};

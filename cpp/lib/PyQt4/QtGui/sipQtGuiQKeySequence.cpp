/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:24 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 41 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 39 "sipQtGuiQKeySequence.cpp"

#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 43 "sipQtGuiQKeySequence.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 46 "sipQtGuiQKeySequence.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 49 "sipQtGuiQKeySequence.cpp"


extern "C" {static PyObject *meth_QKeySequence_count(PyObject *, PyObject *);}
static PyObject *meth_QKeySequence_count(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QKeySequence *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QKeySequence,&sipCpp))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QKeySequence,sipName_count);

    return NULL;
}


extern "C" {static PyObject *meth_QKeySequence_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QKeySequence_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QKeySequence *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QKeySequence,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEmpty();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QKeySequence,sipName_isEmpty);

    return NULL;
}


extern "C" {static PyObject *meth_QKeySequence_matches(PyObject *, PyObject *);}
static PyObject *meth_QKeySequence_matches(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QKeySequence * a0;
        int a0State = 0;
        QKeySequence *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QKeySequence,&sipCpp,sipType_QKeySequence,&a0,&a0State))
        {
            QKeySequence::SequenceMatch sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->matches(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QKeySequence *>(a0),sipType_QKeySequence,a0State);

            return sipConvertFromEnum(sipRes,sipType_QKeySequence_SequenceMatch);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QKeySequence,sipName_matches);

    return NULL;
}


extern "C" {static PyObject *meth_QKeySequence_mnemonic(PyObject *, PyObject *);}
static PyObject *meth_QKeySequence_mnemonic(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1",sipType_QString,&a0,&a0State))
        {
            QKeySequence *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QKeySequence(QKeySequence::mnemonic(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QKeySequence,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QKeySequence,sipName_mnemonic);

    return NULL;
}


extern "C" {static PyObject *meth_QKeySequence_isDetached(PyObject *, PyObject *);}
static PyObject *meth_QKeySequence_isDetached(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QKeySequence *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QKeySequence,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isDetached();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QKeySequence,sipName_isDetached);

    return NULL;
}


extern "C" {static PyObject *meth_QKeySequence_toString(PyObject *, PyObject *);}
static PyObject *meth_QKeySequence_toString(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QKeySequence::SequenceFormat a0 = QKeySequence::PortableText;
        QKeySequence *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|E",&sipSelf,sipType_QKeySequence,&sipCpp,sipType_QKeySequence_SequenceFormat,&a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QKeySequence,sipName_toString);

    return NULL;
}


extern "C" {static PyObject *meth_QKeySequence_fromString(PyObject *, PyObject *);}
static PyObject *meth_QKeySequence_fromString(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QKeySequence::SequenceFormat a1 = QKeySequence::PortableText;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1|E",sipType_QString,&a0,&a0State,sipType_QKeySequence_SequenceFormat,&a1))
        {
            QKeySequence *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QKeySequence(QKeySequence::fromString(*a0,a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QKeySequence,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QKeySequence,sipName_fromString);

    return NULL;
}


extern "C" {static PyObject *meth_QKeySequence_keyBindings(PyObject *, PyObject *);}
static PyObject *meth_QKeySequence_keyBindings(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QKeySequence::StandardKey a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"E",sipType_QKeySequence_StandardKey,&a0))
        {
            QList<QKeySequence> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QKeySequence>(QKeySequence::keyBindings(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QKeySequence,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QKeySequence,sipName_keyBindings);

    return NULL;
}


extern "C" {static PyObject *slot_QKeySequence___ge__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QKeySequence___ge__(PyObject *sipSelf,PyObject *sipArg)
{
    QKeySequence *sipCpp = reinterpret_cast<QKeySequence *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QKeySequence));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QKeySequence * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QKeySequence,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QKeySequence::operator>=(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QKeySequence *>(a0),sipType_QKeySequence,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtGui,ge_slot,sipType_QKeySequence,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QKeySequence___le__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QKeySequence___le__(PyObject *sipSelf,PyObject *sipArg)
{
    QKeySequence *sipCpp = reinterpret_cast<QKeySequence *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QKeySequence));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QKeySequence * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QKeySequence,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QKeySequence::operator<=(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QKeySequence *>(a0),sipType_QKeySequence,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtGui,le_slot,sipType_QKeySequence,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QKeySequence___gt__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QKeySequence___gt__(PyObject *sipSelf,PyObject *sipArg)
{
    QKeySequence *sipCpp = reinterpret_cast<QKeySequence *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QKeySequence));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QKeySequence * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QKeySequence,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QKeySequence::operator>(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QKeySequence *>(a0),sipType_QKeySequence,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtGui,gt_slot,sipType_QKeySequence,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QKeySequence___lt__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QKeySequence___lt__(PyObject *sipSelf,PyObject *sipArg)
{
    QKeySequence *sipCpp = reinterpret_cast<QKeySequence *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QKeySequence));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QKeySequence * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QKeySequence,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QKeySequence::operator<(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QKeySequence *>(a0),sipType_QKeySequence,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtGui,lt_slot,sipType_QKeySequence,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QKeySequence___ne__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QKeySequence___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QKeySequence *sipCpp = reinterpret_cast<QKeySequence *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QKeySequence));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QKeySequence * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QKeySequence,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QKeySequence::operator!=(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QKeySequence *>(a0),sipType_QKeySequence,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtGui,ne_slot,sipType_QKeySequence,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QKeySequence___eq__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QKeySequence___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QKeySequence *sipCpp = reinterpret_cast<QKeySequence *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QKeySequence));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QKeySequence * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QKeySequence,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QKeySequence::operator==(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QKeySequence *>(a0),sipType_QKeySequence,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtGui,eq_slot,sipType_QKeySequence,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QKeySequence___getitem__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QKeySequence___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
    QKeySequence *sipCpp = reinterpret_cast<QKeySequence *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QKeySequence));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        int a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1i",&a0))
        {
            int sipRes = 0;
            int sipIsErr = 0;

#line 221 "sip/QtGui/qkeysequence.sip"
        SIP_SSIZE_T idx = sipConvertFromSequenceIndex(a0, sipCpp->count());
        
        if (idx < 0)
            sipIsErr = 1;
        else
            sipRes = sipCpp->operator[]((uint)idx);
#line 497 "sipQtGuiQKeySequence.cpp"

            if (sipIsErr)
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QKeySequence,sipName___getitem__);

    return 0;
}


extern "C" {static PyObject *slot_QKeySequence___int__(PyObject *sipSelf);}
static PyObject *slot_QKeySequence___int__(PyObject *sipSelf)
{
    QKeySequence *sipCpp = reinterpret_cast<QKeySequence *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QKeySequence));

    if (!sipCpp)
        return 0;


    {
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = *sipCpp;
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QKeySequence(void *, const sipTypeDef *);}
static void *cast_QKeySequence(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QKeySequence)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QKeySequence(void *, int);}
static void release_QKeySequence(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QKeySequence *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static PyObject *pickle_QKeySequence(void *);}
static PyObject *pickle_QKeySequence(void *sipCppV)
{
    QKeySequence *sipCpp = reinterpret_cast<QKeySequence *>(sipCppV);
    PyObject *sipRes;

#line 110 "sip/QtGui/qkeysequence.sip"
    sipRes = Py_BuildValue((char *)"iiii", sipCpp->operator[](0), sipCpp->operator[](1), sipCpp->operator[](2), sipCpp->operator[](3));
#line 567 "sipQtGuiQKeySequence.cpp"

    return sipRes;
}


extern "C" {static void assign_QKeySequence(void *, SIP_SSIZE_T, const void *);}
static void assign_QKeySequence(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QKeySequence *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QKeySequence *>(sipSrc);
}


extern "C" {static void *array_QKeySequence(SIP_SSIZE_T);}
static void *array_QKeySequence(SIP_SSIZE_T sipNrElem)
{
    return new QKeySequence[sipNrElem];
}


extern "C" {static void *copy_QKeySequence(const void *, SIP_SSIZE_T);}
static void *copy_QKeySequence(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QKeySequence(reinterpret_cast<const QKeySequence *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QKeySequence(sipSimpleWrapper *);}
static void dealloc_QKeySequence(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QKeySequence(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QKeySequence(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QKeySequence(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QKeySequence *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QKeySequence();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QKeySequence * a0;
        int a0State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1",sipType_QKeySequence,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QKeySequence(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QKeySequence *>(a0),sipType_QKeySequence,a0State);
        }
    }

    if (!sipCpp)
    {
        int a0;
        int a1 = 0;
        int a2 = 0;
        int a3 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"i|iii",&a0,&a1,&a2,&a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QKeySequence(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QVariant * a0;
        int a0State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1",sipType_QVariant,&a0,&a0State))
        {
#line 209 "sip/QtGui/qkeysequence.sip"
        sipCpp = new QKeySequence(qVariantValue<QKeySequence>(*a0));
#line 658 "sipQtGuiQKeySequence.cpp"

            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);
        }
    }

    return sipCpp;
}


extern "C" {static int convertTo_QKeySequence(PyObject *, void **, int *, PyObject *);}
static int convertTo_QKeySequence(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QKeySequence **sipCppPtr = reinterpret_cast<QKeySequence **>(sipCppPtrV);

#line 45 "sip/QtGui/qkeysequence.sip"
// Allow a StandardKey, QString or an integer whenever a QKeySequence is
// expected.

if (sipIsErr == NULL)
{
    if (sipCanConvertToType(sipPy, sipType_QKeySequence, SIP_NO_CONVERTORS))
        return 1;

#if QT_VERSION >= 0x040200
    if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QKeySequence_StandardKey)))
        return 1;
#endif

    if (sipCanConvertToType(sipPy, sipType_QString, 0))
        return 1;

    PyErr_Clear();

    SIPLong_AsLong(sipPy);

    return !PyErr_Occurred();
}

if (sipCanConvertToType(sipPy, sipType_QKeySequence, SIP_NO_CONVERTORS))
{
    *sipCppPtr = reinterpret_cast<QKeySequence *>(sipConvertToType(sipPy, sipType_QKeySequence, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

    return 0;
}

#if QT_VERSION >= 0x040200
if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QKeySequence_StandardKey)))
{
    *sipCppPtr = new QKeySequence((QKeySequence::StandardKey)SIPLong_AsLong(sipPy));

    return sipGetState(sipTransferObj);
}
#endif

if (sipCanConvertToType(sipPy, sipType_QString, 0))
{
    int state;
    QString *qs = reinterpret_cast<QString *>(sipConvertToType(sipPy, sipType_QString, 0, 0, &state, sipIsErr));

    if (*sipIsErr)
    {
        sipReleaseType(qs, sipType_QString, state);
        return 0;
    }

    *sipCppPtr = new QKeySequence(*qs);

    sipReleaseType(qs, sipType_QString, state);

    return sipGetState(sipTransferObj);
}

int key = SIPLong_AsLong(sipPy);

*sipCppPtr = new QKeySequence(key);

return sipGetState(sipTransferObj);
#line 736 "sipQtGuiQKeySequence.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QKeySequence[] = {
    {(void *)slot_QKeySequence___ge__, ge_slot},
    {(void *)slot_QKeySequence___le__, le_slot},
    {(void *)slot_QKeySequence___gt__, gt_slot},
    {(void *)slot_QKeySequence___lt__, lt_slot},
    {(void *)slot_QKeySequence___ne__, ne_slot},
    {(void *)slot_QKeySequence___eq__, eq_slot},
    {(void *)slot_QKeySequence___getitem__, getitem_slot},
    {(void *)slot_QKeySequence___int__, int_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QKeySequence[] = {
    {SIP_MLNAME_CAST(sipName_count), meth_QKeySequence_count, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromString), meth_QKeySequence_fromString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isDetached), meth_QKeySequence_isDetached, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QKeySequence_isEmpty, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_keyBindings), meth_QKeySequence_keyBindings, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_matches), meth_QKeySequence_matches, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mnemonic), meth_QKeySequence_mnemonic, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toString), meth_QKeySequence_toString, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QKeySequence[] = {
    {sipName_AddTab, QKeySequence::AddTab, 240},
    {sipName_Back, QKeySequence::Back, 240},
    {sipName_Bold, QKeySequence::Bold, 240},
    {sipName_Close, QKeySequence::Close, 240},
    {sipName_Copy, QKeySequence::Copy, 240},
    {sipName_Cut, QKeySequence::Cut, 240},
    {sipName_Delete, QKeySequence::Delete, 240},
    {sipName_DeleteEndOfLine, QKeySequence::DeleteEndOfLine, 240},
    {sipName_DeleteEndOfWord, QKeySequence::DeleteEndOfWord, 240},
    {sipName_DeleteStartOfWord, QKeySequence::DeleteStartOfWord, 240},
    {sipName_ExactMatch, QKeySequence::ExactMatch, 239},
    {sipName_Find, QKeySequence::Find, 240},
    {sipName_FindNext, QKeySequence::FindNext, 240},
    {sipName_FindPrevious, QKeySequence::FindPrevious, 240},
    {sipName_Forward, QKeySequence::Forward, 240},
    {sipName_HelpContents, QKeySequence::HelpContents, 240},
    {sipName_InsertLineSeparator, QKeySequence::InsertLineSeparator, 240},
    {sipName_InsertParagraphSeparator, QKeySequence::InsertParagraphSeparator, 240},
    {sipName_Italic, QKeySequence::Italic, 240},
    {sipName_MoveToEndOfBlock, QKeySequence::MoveToEndOfBlock, 240},
    {sipName_MoveToEndOfDocument, QKeySequence::MoveToEndOfDocument, 240},
    {sipName_MoveToEndOfLine, QKeySequence::MoveToEndOfLine, 240},
    {sipName_MoveToNextChar, QKeySequence::MoveToNextChar, 240},
    {sipName_MoveToNextLine, QKeySequence::MoveToNextLine, 240},
    {sipName_MoveToNextPage, QKeySequence::MoveToNextPage, 240},
    {sipName_MoveToNextWord, QKeySequence::MoveToNextWord, 240},
    {sipName_MoveToPreviousChar, QKeySequence::MoveToPreviousChar, 240},
    {sipName_MoveToPreviousLine, QKeySequence::MoveToPreviousLine, 240},
    {sipName_MoveToPreviousPage, QKeySequence::MoveToPreviousPage, 240},
    {sipName_MoveToPreviousWord, QKeySequence::MoveToPreviousWord, 240},
    {sipName_MoveToStartOfBlock, QKeySequence::MoveToStartOfBlock, 240},
    {sipName_MoveToStartOfDocument, QKeySequence::MoveToStartOfDocument, 240},
    {sipName_MoveToStartOfLine, QKeySequence::MoveToStartOfLine, 240},
    {sipName_NativeText, QKeySequence::NativeText, 238},
    {sipName_New, QKeySequence::New, 240},
    {sipName_NextChild, QKeySequence::NextChild, 240},
    {sipName_NoMatch, QKeySequence::NoMatch, 239},
    {sipName_Open, QKeySequence::Open, 240},
    {sipName_PartialMatch, QKeySequence::PartialMatch, 239},
    {sipName_Paste, QKeySequence::Paste, 240},
    {sipName_PortableText, QKeySequence::PortableText, 238},
    {sipName_PreviousChild, QKeySequence::PreviousChild, 240},
    {sipName_Print, QKeySequence::Print, 240},
    {sipName_Redo, QKeySequence::Redo, 240},
    {sipName_Refresh, QKeySequence::Refresh, 240},
    {sipName_Replace, QKeySequence::Replace, 240},
    {sipName_Save, QKeySequence::Save, 240},
    {sipName_SaveAs, QKeySequence::SaveAs, 240},
    {sipName_SelectAll, QKeySequence::SelectAll, 240},
    {sipName_SelectEndOfBlock, QKeySequence::SelectEndOfBlock, 240},
    {sipName_SelectEndOfDocument, QKeySequence::SelectEndOfDocument, 240},
    {sipName_SelectEndOfLine, QKeySequence::SelectEndOfLine, 240},
    {sipName_SelectNextChar, QKeySequence::SelectNextChar, 240},
    {sipName_SelectNextLine, QKeySequence::SelectNextLine, 240},
    {sipName_SelectNextPage, QKeySequence::SelectNextPage, 240},
    {sipName_SelectNextWord, QKeySequence::SelectNextWord, 240},
    {sipName_SelectPreviousChar, QKeySequence::SelectPreviousChar, 240},
    {sipName_SelectPreviousLine, QKeySequence::SelectPreviousLine, 240},
    {sipName_SelectPreviousPage, QKeySequence::SelectPreviousPage, 240},
    {sipName_SelectPreviousWord, QKeySequence::SelectPreviousWord, 240},
    {sipName_SelectStartOfBlock, QKeySequence::SelectStartOfBlock, 240},
    {sipName_SelectStartOfDocument, QKeySequence::SelectStartOfDocument, 240},
    {sipName_SelectStartOfLine, QKeySequence::SelectStartOfLine, 240},
    {sipName_Underline, QKeySequence::Underline, 240},
    {sipName_Undo, QKeySequence::Undo, 240},
    {sipName_UnknownKey, QKeySequence::UnknownKey, 240},
    {sipName_WhatsThis, QKeySequence::WhatsThis, 240},
    {sipName_ZoomIn, QKeySequence::ZoomIn, 240},
    {sipName_ZoomOut, QKeySequence::ZoomOut, 240},
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QKeySequence = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QKeySequence,
        {0}
    },
    {
        sipNameNr_QKeySequence,
        {0, 0, 1},
        8, methods_QKeySequence,
        69, enummembers_QKeySequence,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QKeySequence,
    init_QKeySequence,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QKeySequence,
    assign_QKeySequence,
    array_QKeySequence,
    copy_QKeySequence,
    release_QKeySequence,
    cast_QKeySequence,
    convertTo_QKeySequence,
    0,
    pickle_QKeySequence
},
    0,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:24 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 39 "sip/QtGui/qdatawidgetmapper.sip"
#include <qdatawidgetmapper.h>
#line 39 "sipQtGuiQDataWidgetMapper.cpp"

#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtGuiQDataWidgetMapper.cpp"
#line 37 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 46 "sipQtGuiQDataWidgetMapper.cpp"
#line 41 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 49 "sipQtGuiQDataWidgetMapper.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 52 "sipQtGuiQDataWidgetMapper.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 55 "sipQtGuiQDataWidgetMapper.cpp"
#line 37 "sip/QtGui/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 58 "sipQtGuiQDataWidgetMapper.cpp"
#line 128 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 61 "sipQtGuiQDataWidgetMapper.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 64 "sipQtGuiQDataWidgetMapper.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 67 "sipQtGuiQDataWidgetMapper.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 70 "sipQtGuiQDataWidgetMapper.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 73 "sipQtGuiQDataWidgetMapper.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 76 "sipQtGuiQDataWidgetMapper.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 79 "sipQtGuiQDataWidgetMapper.cpp"
#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 82 "sipQtGuiQDataWidgetMapper.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 85 "sipQtGuiQDataWidgetMapper.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 88 "sipQtGuiQDataWidgetMapper.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 91 "sipQtGuiQDataWidgetMapper.cpp"


class sipQDataWidgetMapper : public QDataWidgetMapper
{
public:
    sipQDataWidgetMapper(QObject *);
    virtual ~sipQDataWidgetMapper();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void setCurrentIndex(int);
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDataWidgetMapper(const sipQDataWidgetMapper &);
    sipQDataWidgetMapper &operator = (const sipQDataWidgetMapper &);

    char sipPyMethods[8];
};

sipQDataWidgetMapper::sipQDataWidgetMapper(QObject *a0): QDataWidgetMapper(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDataWidgetMapper::~sipQDataWidgetMapper()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQDataWidgetMapper::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QDataWidgetMapper);
}

int sipQDataWidgetMapper::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QDataWidgetMapper::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QDataWidgetMapper,_c,_id,_a);

    return _id;
}

void *sipQDataWidgetMapper::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QDataWidgetMapper,_clname)) ? this : QDataWidgetMapper::qt_metacast(_clname);
}

void sipQDataWidgetMapper::setCurrentIndex(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_setCurrentIndex);

    if (!meth)
    {
        QDataWidgetMapper::setCurrentIndex(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool*,int);

    sipVH_QtGui_6(sipGILState,meth,0,a0);
}

bool sipQDataWidgetMapper::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_12)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return ((sipVH_QtCore_12)(sipModuleAPI_QtGui_QtCore->em_virthandlers[12]))(sipGILState,meth,0,a0);
}

bool sipQDataWidgetMapper::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t,PyObject *,bool*,QObject *,QEvent *);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtGui_QtCore->em_virthandlers[20]))(sipGILState,meth,0,a0,a1);
}

void sipQDataWidgetMapper::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_3)(sip_gilstate_t,PyObject *,bool*,QTimerEvent *);

    ((sipVH_QtCore_3)(sipModuleAPI_QtGui_QtCore->em_virthandlers[3]))(sipGILState,meth,0,a0);
}

void sipQDataWidgetMapper::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_19)(sip_gilstate_t,PyObject *,bool*,QChildEvent *);

    ((sipVH_QtCore_19)(sipModuleAPI_QtGui_QtCore->em_virthandlers[19]))(sipGILState,meth,0,a0);
}

void sipQDataWidgetMapper::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQDataWidgetMapper::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

void sipQDataWidgetMapper::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

int sipQDataWidgetMapper::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQDataWidgetMapper::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQDataWidgetMapper::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQDataWidgetMapper::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQDataWidgetMapper::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQDataWidgetMapper::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}


extern "C" {static PyObject *meth_QDataWidgetMapper_receivers(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        char * a0;
        sipQDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QDataWidgetMapper,&sipCpp,&a0))
        {
            int sipRes = 0;

#line 480 "sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
#line 363 "sipQtGuiQDataWidgetMapper.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_receivers);

    return NULL;
}


extern "C" {static PyObject *meth_QDataWidgetMapper_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QDataWidgetMapper,&sipCpp,sipType_QTimerEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_timerEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QDataWidgetMapper_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QDataWidgetMapper,&sipCpp,sipType_QChildEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_childEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QDataWidgetMapper_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QDataWidgetMapper,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_customEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QDataWidgetMapper_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QDataWidgetMapper,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_connectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QDataWidgetMapper_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QDataWidgetMapper,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_disconnectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QDataWidgetMapper_setModel(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_setModel(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QAbstractItemModel * a0;
        PyObject *a0Keep;
        QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B@J8",&sipSelf,sipType_QDataWidgetMapper,&sipCpp,&a0Keep,sipType_QAbstractItemModel,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setModel(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, 13, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_setModel);

    return NULL;
}


extern "C" {static PyObject *meth_QDataWidgetMapper_model(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_model(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataWidgetMapper,&sipCpp))
        {
            QAbstractItemModel *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->model();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractItemModel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_model);

    return NULL;
}


extern "C" {static PyObject *meth_QDataWidgetMapper_setItemDelegate(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_setItemDelegate(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QAbstractItemDelegate * a0;
        PyObject *a0Keep;
        QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B@J8",&sipSelf,sipType_QDataWidgetMapper,&sipCpp,&a0Keep,sipType_QAbstractItemDelegate,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItemDelegate(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, 14, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_setItemDelegate);

    return NULL;
}


extern "C" {static PyObject *meth_QDataWidgetMapper_itemDelegate(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_itemDelegate(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataWidgetMapper,&sipCpp))
        {
            QAbstractItemDelegate *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemDelegate();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractItemDelegate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_itemDelegate);

    return NULL;
}


extern "C" {static PyObject *meth_QDataWidgetMapper_setRootIndex(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_setRootIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;
        QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QDataWidgetMapper,&sipCpp,sipType_QModelIndex,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRootIndex(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_setRootIndex);

    return NULL;
}


extern "C" {static PyObject *meth_QDataWidgetMapper_rootIndex(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_rootIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataWidgetMapper,&sipCpp))
        {
            QModelIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->rootIndex());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_rootIndex);

    return NULL;
}


extern "C" {static PyObject *meth_QDataWidgetMapper_setOrientation(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_setOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Qt::Orientation a0;
        QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QDataWidgetMapper,&sipCpp,sipType_Qt_Orientation,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOrientation(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_setOrientation);

    return NULL;
}


extern "C" {static PyObject *meth_QDataWidgetMapper_orientation(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_orientation(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataWidgetMapper,&sipCpp))
        {
            Qt::Orientation sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->orientation();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_Orientation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_orientation);

    return NULL;
}


extern "C" {static PyObject *meth_QDataWidgetMapper_setSubmitPolicy(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_setSubmitPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataWidgetMapper::SubmitPolicy a0;
        QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QDataWidgetMapper,&sipCpp,sipType_QDataWidgetMapper_SubmitPolicy,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSubmitPolicy(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_setSubmitPolicy);

    return NULL;
}


extern "C" {static PyObject *meth_QDataWidgetMapper_submitPolicy(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_submitPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataWidgetMapper,&sipCpp))
        {
            QDataWidgetMapper::SubmitPolicy sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->submitPolicy();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QDataWidgetMapper_SubmitPolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_submitPolicy);

    return NULL;
}


extern "C" {static PyObject *meth_QDataWidgetMapper_addMapping(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_addMapping(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWidget * a0;
        int a1;
        QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8i",&sipSelf,sipType_QDataWidgetMapper,&sipCpp,sipType_QWidget,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addMapping(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QWidget * a0;
        int a1;
        const QByteArray * a2;
        int a2State = 0;
        QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8iJ1",&sipSelf,sipType_QDataWidgetMapper,&sipCpp,sipType_QWidget,&a0,&a1,sipType_QByteArray,&a2,&a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addMapping(a0,a1,*a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QByteArray *>(a2),sipType_QByteArray,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_addMapping);

    return NULL;
}


extern "C" {static PyObject *meth_QDataWidgetMapper_removeMapping(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_removeMapping(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWidget * a0;
        QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QDataWidgetMapper,&sipCpp,sipType_QWidget,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeMapping(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_removeMapping);

    return NULL;
}


extern "C" {static PyObject *meth_QDataWidgetMapper_mappedPropertyName(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_mappedPropertyName(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWidget * a0;
        QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QDataWidgetMapper,&sipCpp,sipType_QWidget,&a0))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->mappedPropertyName(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_mappedPropertyName);

    return NULL;
}


extern "C" {static PyObject *meth_QDataWidgetMapper_mappedSection(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_mappedSection(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWidget * a0;
        QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QDataWidgetMapper,&sipCpp,sipType_QWidget,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->mappedSection(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_mappedSection);

    return NULL;
}


extern "C" {static PyObject *meth_QDataWidgetMapper_mappedWidgetAt(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_mappedWidgetAt(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QDataWidgetMapper,&sipCpp,&a0))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->mappedWidgetAt(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_mappedWidgetAt);

    return NULL;
}


extern "C" {static PyObject *meth_QDataWidgetMapper_clearMapping(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_clearMapping(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataWidgetMapper,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearMapping();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_clearMapping);

    return NULL;
}


extern "C" {static PyObject *meth_QDataWidgetMapper_currentIndex(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_currentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataWidgetMapper,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentIndex();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_currentIndex);

    return NULL;
}


extern "C" {static PyObject *meth_QDataWidgetMapper_revert(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_revert(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataWidgetMapper,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->revert();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_revert);

    return NULL;
}


extern "C" {static PyObject *meth_QDataWidgetMapper_setCurrentIndex(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_setCurrentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QDataWidgetMapper,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QDataWidgetMapper::setCurrentIndex(a0) : sipCpp->setCurrentIndex(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_setCurrentIndex);

    return NULL;
}


extern "C" {static PyObject *meth_QDataWidgetMapper_setCurrentModelIndex(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_setCurrentModelIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;
        QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QDataWidgetMapper,&sipCpp,sipType_QModelIndex,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentModelIndex(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_setCurrentModelIndex);

    return NULL;
}


extern "C" {static PyObject *meth_QDataWidgetMapper_submit(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_submit(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataWidgetMapper,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->submit();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_submit);

    return NULL;
}


extern "C" {static PyObject *meth_QDataWidgetMapper_toFirst(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_toFirst(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataWidgetMapper,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->toFirst();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_toFirst);

    return NULL;
}


extern "C" {static PyObject *meth_QDataWidgetMapper_toLast(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_toLast(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataWidgetMapper,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->toLast();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_toLast);

    return NULL;
}


extern "C" {static PyObject *meth_QDataWidgetMapper_toNext(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_toNext(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataWidgetMapper,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->toNext();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_toNext);

    return NULL;
}


extern "C" {static PyObject *meth_QDataWidgetMapper_toPrevious(PyObject *, PyObject *);}
static PyObject *meth_QDataWidgetMapper_toPrevious(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataWidgetMapper *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataWidgetMapper,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->toPrevious();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataWidgetMapper,sipName_toPrevious);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDataWidgetMapper(void *, const sipTypeDef *);}
static void *cast_QDataWidgetMapper(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QDataWidgetMapper)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QDataWidgetMapper *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDataWidgetMapper(void *, int);}
static void release_QDataWidgetMapper(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQDataWidgetMapper *>(sipCppV);
    else
        delete reinterpret_cast<QDataWidgetMapper *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QDataWidgetMapper(sipSimpleWrapper *);}
static void dealloc_QDataWidgetMapper(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQDataWidgetMapper *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QDataWidgetMapper(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QDataWidgetMapper(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QDataWidgetMapper(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **sipOwner, int *sipArgsParsed)
{
    sipQDataWidgetMapper *sipCpp = 0;

    if (!sipCpp)
    {
        QObject * a0 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"|JH",sipType_QObject,&a0,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDataWidgetMapper(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDataWidgetMapper[] = {{111, 0, 1}};


static PyMethodDef methods_QDataWidgetMapper[] = {
    {SIP_MLNAME_CAST(sipName_addMapping), meth_QDataWidgetMapper_addMapping, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QDataWidgetMapper_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clearMapping), meth_QDataWidgetMapper_clearMapping, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QDataWidgetMapper_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentIndex), meth_QDataWidgetMapper_currentIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QDataWidgetMapper_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QDataWidgetMapper_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_itemDelegate), meth_QDataWidgetMapper_itemDelegate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mappedPropertyName), meth_QDataWidgetMapper_mappedPropertyName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mappedSection), meth_QDataWidgetMapper_mappedSection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mappedWidgetAt), meth_QDataWidgetMapper_mappedWidgetAt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_model), meth_QDataWidgetMapper_model, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_orientation), meth_QDataWidgetMapper_orientation, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QDataWidgetMapper_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeMapping), meth_QDataWidgetMapper_removeMapping, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_revert), meth_QDataWidgetMapper_revert, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rootIndex), meth_QDataWidgetMapper_rootIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCurrentIndex), meth_QDataWidgetMapper_setCurrentIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCurrentModelIndex), meth_QDataWidgetMapper_setCurrentModelIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setItemDelegate), meth_QDataWidgetMapper_setItemDelegate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setModel), meth_QDataWidgetMapper_setModel, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setOrientation), meth_QDataWidgetMapper_setOrientation, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRootIndex), meth_QDataWidgetMapper_setRootIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSubmitPolicy), meth_QDataWidgetMapper_setSubmitPolicy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_submit), meth_QDataWidgetMapper_submit, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_submitPolicy), meth_QDataWidgetMapper_submitPolicy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QDataWidgetMapper_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toFirst), meth_QDataWidgetMapper_toFirst, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toLast), meth_QDataWidgetMapper_toLast, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toNext), meth_QDataWidgetMapper_toNext, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toPrevious), meth_QDataWidgetMapper_toPrevious, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QDataWidgetMapper[] = {
    {sipName_AutoSubmit, QDataWidgetMapper::AutoSubmit, 72},
    {sipName_ManualSubmit, QDataWidgetMapper::ManualSubmit, 72},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QDataWidgetMapper[] = {
    {"currentIndexChanged(int)", 0},
    {0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QDataWidgetMapper = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QDataWidgetMapper,
        {0}
    },
    {
        sipNameNr_QDataWidgetMapper,
        {0, 0, 1},
        31, methods_QDataWidgetMapper,
        2, enummembers_QDataWidgetMapper,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QDataWidgetMapper,
    0,
    init_QDataWidgetMapper,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDataWidgetMapper,
    0,
    0,
    0,
    release_QDataWidgetMapper,
    cast_QDataWidgetMapper,
    0,
    0,
    0
},
    &QDataWidgetMapper::staticMetaObject,
    0,
    pyqt4_signals_QDataWidgetMapper
};

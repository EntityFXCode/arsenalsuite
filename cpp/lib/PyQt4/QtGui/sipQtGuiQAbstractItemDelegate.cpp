/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:25 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 37 "sip/QtGui/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 39 "sipQtGuiQAbstractItemDelegate.cpp"

#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtGuiQAbstractItemDelegate.cpp"
#line 37 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 46 "sipQtGuiQAbstractItemDelegate.cpp"
#line 41 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 49 "sipQtGuiQAbstractItemDelegate.cpp"
#line 569 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 52 "sipQtGuiQAbstractItemDelegate.cpp"
#line 41 "sip/QtGui/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 55 "sipQtGuiQAbstractItemDelegate.cpp"
#line 831 "sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 58 "sipQtGuiQAbstractItemDelegate.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 61 "sipQtGuiQAbstractItemDelegate.cpp"
#line 37 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 64 "sipQtGuiQAbstractItemDelegate.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 67 "sipQtGuiQAbstractItemDelegate.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 70 "sipQtGuiQAbstractItemDelegate.cpp"
#line 128 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 73 "sipQtGuiQAbstractItemDelegate.cpp"
#line 41 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 76 "sipQtGuiQAbstractItemDelegate.cpp"
#line 41 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 79 "sipQtGuiQAbstractItemDelegate.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 82 "sipQtGuiQAbstractItemDelegate.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 85 "sipQtGuiQAbstractItemDelegate.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 88 "sipQtGuiQAbstractItemDelegate.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 91 "sipQtGuiQAbstractItemDelegate.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 94 "sipQtGuiQAbstractItemDelegate.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 97 "sipQtGuiQAbstractItemDelegate.cpp"
#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 100 "sipQtGuiQAbstractItemDelegate.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 103 "sipQtGuiQAbstractItemDelegate.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 106 "sipQtGuiQAbstractItemDelegate.cpp"


class sipQAbstractItemDelegate : public QAbstractItemDelegate
{
public:
    sipQAbstractItemDelegate(QObject *);
    virtual ~sipQAbstractItemDelegate();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void paint(QPainter *,const QStyleOptionViewItem&,const QModelIndex&) const;
    QSize sizeHint(const QStyleOptionViewItem&,const QModelIndex&) const;
    QWidget * createEditor(QWidget *,const QStyleOptionViewItem&,const QModelIndex&) const;
    void setEditorData(QWidget *,const QModelIndex&) const;
    void setModelData(QWidget *,QAbstractItemModel *,const QModelIndex&) const;
    void updateEditorGeometry(QWidget *,const QStyleOptionViewItem&,const QModelIndex&) const;
    bool editorEvent(QEvent *,QAbstractItemModel *,const QStyleOptionViewItem&,const QModelIndex&);
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractItemDelegate(const sipQAbstractItemDelegate &);
    sipQAbstractItemDelegate &operator = (const sipQAbstractItemDelegate &);

    char sipPyMethods[14];
};

sipQAbstractItemDelegate::sipQAbstractItemDelegate(QObject *a0): QAbstractItemDelegate(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractItemDelegate::~sipQAbstractItemDelegate()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQAbstractItemDelegate::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QAbstractItemDelegate);
}

int sipQAbstractItemDelegate::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QAbstractItemDelegate::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QAbstractItemDelegate,_c,_id,_a);

    return _id;
}

void *sipQAbstractItemDelegate::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QAbstractItemDelegate,_clname)) ? this : QAbstractItemDelegate::qt_metacast(_clname);
}

void sipQAbstractItemDelegate::paint(QPainter *a0,const QStyleOptionViewItem& a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,sipName_QAbstractItemDelegate,sipName_paint);

    if (!meth)
        return;

    extern void sipVH_QtGui_49(sip_gilstate_t,PyObject *,bool*,QPainter *,const QStyleOptionViewItem&,const QModelIndex&);

    sipVH_QtGui_49(sipGILState,meth,0,a0,a1,a2);
}

QSize sipQAbstractItemDelegate::sizeHint(const QStyleOptionViewItem& a0,const QModelIndex& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,sipName_QAbstractItemDelegate,sipName_sizeHint);

    if (!meth)
        return QSize();

    extern QSize sipVH_QtGui_81(sip_gilstate_t,PyObject *,bool*,const QStyleOptionViewItem&,const QModelIndex&);

    return sipVH_QtGui_81(sipGILState,meth,0,a0,a1);
}

QWidget * sipQAbstractItemDelegate::createEditor(QWidget *a0,const QStyleOptionViewItem& a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_createEditor);

    if (!meth)
        return QAbstractItemDelegate::createEditor(a0,a1,a2);

    extern QWidget * sipVH_QtGui_80(sip_gilstate_t,PyObject *,bool*,QWidget *,const QStyleOptionViewItem&,const QModelIndex&);

    return sipVH_QtGui_80(sipGILState,meth,0,a0,a1,a2);
}

void sipQAbstractItemDelegate::setEditorData(QWidget *a0,const QModelIndex& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_setEditorData);

    if (!meth)
    {
        QAbstractItemDelegate::setEditorData(a0,a1);
        return;
    }

    extern void sipVH_QtGui_79(sip_gilstate_t,PyObject *,bool*,QWidget *,const QModelIndex&);

    sipVH_QtGui_79(sipGILState,meth,0,a0,a1);
}

void sipQAbstractItemDelegate::setModelData(QWidget *a0,QAbstractItemModel *a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_setModelData);

    if (!meth)
    {
        QAbstractItemDelegate::setModelData(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_78(sip_gilstate_t,PyObject *,bool*,QWidget *,QAbstractItemModel *,const QModelIndex&);

    sipVH_QtGui_78(sipGILState,meth,0,a0,a1,a2);
}

void sipQAbstractItemDelegate::updateEditorGeometry(QWidget *a0,const QStyleOptionViewItem& a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_updateEditorGeometry);

    if (!meth)
    {
        QAbstractItemDelegate::updateEditorGeometry(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_77(sip_gilstate_t,PyObject *,bool*,QWidget *,const QStyleOptionViewItem&,const QModelIndex&);

    sipVH_QtGui_77(sipGILState,meth,0,a0,a1,a2);
}

bool sipQAbstractItemDelegate::editorEvent(QEvent *a0,QAbstractItemModel *a1,const QStyleOptionViewItem& a2,const QModelIndex& a3)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_editorEvent);

    if (!meth)
        return QAbstractItemDelegate::editorEvent(a0,a1,a2,a3);

    extern bool sipVH_QtGui_74(sip_gilstate_t,PyObject *,bool*,QEvent *,QAbstractItemModel *,const QStyleOptionViewItem&,const QModelIndex&);

    return sipVH_QtGui_74(sipGILState,meth,0,a0,a1,a2,a3);
}

bool sipQAbstractItemDelegate::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_12)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return ((sipVH_QtCore_12)(sipModuleAPI_QtGui_QtCore->em_virthandlers[12]))(sipGILState,meth,0,a0);
}

bool sipQAbstractItemDelegate::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t,PyObject *,bool*,QObject *,QEvent *);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtGui_QtCore->em_virthandlers[20]))(sipGILState,meth,0,a0,a1);
}

void sipQAbstractItemDelegate::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_3)(sip_gilstate_t,PyObject *,bool*,QTimerEvent *);

    ((sipVH_QtCore_3)(sipModuleAPI_QtGui_QtCore->em_virthandlers[3]))(sipGILState,meth,0,a0);
}

void sipQAbstractItemDelegate::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_19)(sip_gilstate_t,PyObject *,bool*,QChildEvent *);

    ((sipVH_QtCore_19)(sipModuleAPI_QtGui_QtCore->em_virthandlers[19]))(sipGILState,meth,0,a0);
}

void sipQAbstractItemDelegate::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQAbstractItemDelegate::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

void sipQAbstractItemDelegate::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

int sipQAbstractItemDelegate::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQAbstractItemDelegate::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQAbstractItemDelegate::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQAbstractItemDelegate::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQAbstractItemDelegate::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQAbstractItemDelegate::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}


extern "C" {static PyObject *meth_QAbstractItemDelegate_receivers(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemDelegate_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        char * a0;
        sipQAbstractItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QAbstractItemDelegate,&sipCpp,&a0))
        {
            int sipRes = 0;

#line 480 "sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
#line 480 "sipQtGuiQAbstractItemDelegate.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemDelegate,sipName_receivers);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemDelegate_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemDelegate_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQAbstractItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QAbstractItemDelegate,&sipCpp,sipType_QTimerEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemDelegate,sipName_timerEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemDelegate_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemDelegate_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQAbstractItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QAbstractItemDelegate,&sipCpp,sipType_QChildEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemDelegate,sipName_childEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemDelegate_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemDelegate_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQAbstractItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QAbstractItemDelegate,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemDelegate,sipName_customEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemDelegate_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemDelegate_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQAbstractItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QAbstractItemDelegate,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemDelegate,sipName_connectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemDelegate_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemDelegate_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQAbstractItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QAbstractItemDelegate,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemDelegate,sipName_disconnectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemDelegate_paint(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemDelegate_paint(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        QPainter * a0;
        const QStyleOptionViewItem * a1;
        const QModelIndex * a2;
        QAbstractItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8J9J9",&sipSelf,sipType_QAbstractItemDelegate,&sipCpp,sipType_QPainter,&a0,sipType_QStyleOptionViewItem,&a1,sipType_QModelIndex,&a2))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemDelegate, sipName_paint);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->paint(a0,*a1,*a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemDelegate,sipName_paint);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemDelegate_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemDelegate_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QStyleOptionViewItem * a0;
        const QModelIndex * a1;
        QAbstractItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9J9",&sipSelf,sipType_QAbstractItemDelegate,&sipCpp,sipType_QStyleOptionViewItem,&a0,sipType_QModelIndex,&a1))
        {
            QSize *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemDelegate, sipName_sizeHint);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->sizeHint(*a0,*a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemDelegate,sipName_sizeHint);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemDelegate_createEditor(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemDelegate_createEditor(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget * a0;
        const QStyleOptionViewItem * a1;
        const QModelIndex * a2;
        sipWrapper *sipOwner = 0;
        QAbstractItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJHJ9J9",&sipSelf,sipType_QAbstractItemDelegate,&sipCpp,sipType_QWidget,&a0,&sipOwner,sipType_QStyleOptionViewItem,&a1,sipType_QModelIndex,&a2))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractItemDelegate::createEditor(a0,*a1,*a2) : sipCpp->createEditor(a0,*a1,*a2));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QWidget,(PyObject *)sipOwner);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemDelegate,sipName_createEditor);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemDelegate_setEditorData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemDelegate_setEditorData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget * a0;
        const QModelIndex * a1;
        QAbstractItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8J9",&sipSelf,sipType_QAbstractItemDelegate,&sipCpp,sipType_QWidget,&a0,sipType_QModelIndex,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemDelegate::setEditorData(a0,*a1) : sipCpp->setEditorData(a0,*a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemDelegate,sipName_setEditorData);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemDelegate_setModelData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemDelegate_setModelData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget * a0;
        QAbstractItemModel * a1;
        PyObject *a1Keep;
        const QModelIndex * a2;
        QAbstractItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8@J8J9",&sipSelf,sipType_QAbstractItemDelegate,&sipCpp,sipType_QWidget,&a0,&a1Keep,sipType_QAbstractItemModel,&a1,sipType_QModelIndex,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemDelegate::setModelData(a0,a1,*a2) : sipCpp->setModelData(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, 1, a1Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemDelegate,sipName_setModelData);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemDelegate_updateEditorGeometry(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemDelegate_updateEditorGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget * a0;
        const QStyleOptionViewItem * a1;
        const QModelIndex * a2;
        QAbstractItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8J9J9",&sipSelf,sipType_QAbstractItemDelegate,&sipCpp,sipType_QWidget,&a0,sipType_QStyleOptionViewItem,&a1,sipType_QModelIndex,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemDelegate::updateEditorGeometry(a0,*a1,*a2) : sipCpp->updateEditorGeometry(a0,*a1,*a2));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemDelegate,sipName_updateEditorGeometry);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemDelegate_editorEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemDelegate_editorEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        QAbstractItemModel * a1;
        const QStyleOptionViewItem * a2;
        const QModelIndex * a3;
        QAbstractItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8J8J9J9",&sipSelf,sipType_QAbstractItemDelegate,&sipCpp,sipType_QEvent,&a0,sipType_QAbstractItemModel,&a1,sipType_QStyleOptionViewItem,&a2,sipType_QModelIndex,&a3))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractItemDelegate::editorEvent(a0,a1,*a2,*a3) : sipCpp->editorEvent(a0,a1,*a2,*a3));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemDelegate,sipName_editorEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemDelegate_elidedText(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemDelegate_elidedText(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QFontMetrics * a0;
        int a1;
        Qt::TextElideMode a2;
        const QString * a3;
        int a3State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9iEJ1",sipType_QFontMetrics,&a0,&a1,sipType_Qt_TextElideMode,&a2,sipType_QString,&a3,&a3State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QAbstractItemDelegate::elidedText(*a0,a1,a2,*a3));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemDelegate,sipName_elidedText);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemDelegate_helpEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemDelegate_helpEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHelpEvent * a0;
        QAbstractItemView * a1;
        const QStyleOptionViewItem * a2;
        const QModelIndex * a3;
        QAbstractItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8J8J9J9",&sipSelf,sipType_QAbstractItemDelegate,&sipCpp,sipType_QHelpEvent,&a0,sipType_QAbstractItemView,&a1,sipType_QStyleOptionViewItem,&a2,sipType_QModelIndex,&a3))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->helpEvent(a0,a1,*a2,*a3);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemDelegate,sipName_helpEvent);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QAbstractItemDelegate(void *, const sipTypeDef *);}
static void *cast_QAbstractItemDelegate(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QAbstractItemDelegate)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QAbstractItemDelegate *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractItemDelegate(void *, int);}
static void release_QAbstractItemDelegate(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQAbstractItemDelegate *>(sipCppV);
    else
        delete reinterpret_cast<QAbstractItemDelegate *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QAbstractItemDelegate(sipSimpleWrapper *);}
static void dealloc_QAbstractItemDelegate(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQAbstractItemDelegate *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QAbstractItemDelegate(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QAbstractItemDelegate(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QAbstractItemDelegate(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **sipOwner, int *sipArgsParsed)
{
    sipQAbstractItemDelegate *sipCpp = 0;

    if (!sipCpp)
    {
        QObject * a0 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"|JH",sipType_QObject,&a0,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQAbstractItemDelegate(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractItemDelegate[] = {{111, 0, 1}};


static PyMethodDef methods_QAbstractItemDelegate[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QAbstractItemDelegate_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QAbstractItemDelegate_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createEditor), meth_QAbstractItemDelegate_createEditor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QAbstractItemDelegate_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QAbstractItemDelegate_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_editorEvent), meth_QAbstractItemDelegate_editorEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_elidedText), meth_QAbstractItemDelegate_elidedText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_helpEvent), meth_QAbstractItemDelegate_helpEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paint), meth_QAbstractItemDelegate_paint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QAbstractItemDelegate_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setEditorData), meth_QAbstractItemDelegate_setEditorData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setModelData), meth_QAbstractItemDelegate_setModelData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QAbstractItemDelegate_sizeHint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QAbstractItemDelegate_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateEditorGeometry), meth_QAbstractItemDelegate_updateEditorGeometry, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QAbstractItemDelegate[] = {
    {sipName_EditNextItem, QAbstractItemDelegate::EditNextItem, 4},
    {sipName_EditPreviousItem, QAbstractItemDelegate::EditPreviousItem, 4},
    {sipName_NoHint, QAbstractItemDelegate::NoHint, 4},
    {sipName_RevertModelCache, QAbstractItemDelegate::RevertModelCache, 4},
    {sipName_SubmitModelCache, QAbstractItemDelegate::SubmitModelCache, 4},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QAbstractItemDelegate[] = {
    {"sizeHintChanged(const QModelIndex&)", 0},
    {"closeEditor(QWidget *,QAbstractItemDelegate::EndEditHint)", 0},
    {"closeEditor(QWidget *)", 0},
    {"commitData(QWidget *)", 0},
    {0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QAbstractItemDelegate = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QAbstractItemDelegate,
        {0}
    },
    {
        sipNameNr_QAbstractItemDelegate,
        {0, 0, 1},
        15, methods_QAbstractItemDelegate,
        5, enummembers_QAbstractItemDelegate,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QAbstractItemDelegate,
    0,
    init_QAbstractItemDelegate,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAbstractItemDelegate,
    0,
    0,
    0,
    release_QAbstractItemDelegate,
    cast_QAbstractItemDelegate,
    0,
    0,
    0
},
    &QAbstractItemDelegate::staticMetaObject,
    0,
    pyqt4_signals_QAbstractItemDelegate
};

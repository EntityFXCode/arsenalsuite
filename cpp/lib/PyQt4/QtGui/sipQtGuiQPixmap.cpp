/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:25 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 41 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 39 "sipQtGuiQPixmap.cpp"

#line 41 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 43 "sipQtGuiQPixmap.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 46 "sipQtGuiQPixmap.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 49 "sipQtGuiQPixmap.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 52 "sipQtGuiQPixmap.cpp"
#line 37 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 55 "sipQtGuiQPixmap.cpp"
#line 69 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 58 "sipQtGuiQPixmap.cpp"
#line 42 "sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 61 "sipQtGuiQPixmap.cpp"
#line 41 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 64 "sipQtGuiQPixmap.cpp"
#line 41 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 67 "sipQtGuiQPixmap.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 70 "sipQtGuiQPixmap.cpp"
#line 41 "sip/QtGui/qimage.sip"
#include <qimage.h>
#line 73 "sipQtGuiQPixmap.cpp"
#line 41 "sip/QtGui/qmatrix.sip"
#include <qmatrix.h>
#line 76 "sipQtGuiQPixmap.cpp"
#line 45 "sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 79 "sipQtGuiQPixmap.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 82 "sipQtGuiQPixmap.cpp"
#line 41 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 85 "sipQtGuiQPixmap.cpp"
#line 41 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 88 "sipQtGuiQPixmap.cpp"
#line 41 "sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 91 "sipQtGuiQPixmap.cpp"
#line 41 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 94 "sipQtGuiQPixmap.cpp"


class sipQPixmap : public QPixmap
{
public:
    sipQPixmap();
    sipQPixmap(int,int);
    sipQPixmap(const QSize&);
    sipQPixmap(const QString&,const char *,Qt::ImageConversionFlags);
    sipQPixmap(const char **);
    sipQPixmap(const QPixmap&);
    virtual ~sipQPixmap();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtectVirt_metric(bool,QPaintDevice::PaintDeviceMetric) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    int devType() const;
    QPaintEngine * paintEngine() const;
    int metric(QPaintDevice::PaintDeviceMetric) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPixmap(const sipQPixmap &);
    sipQPixmap &operator = (const sipQPixmap &);

    char sipPyMethods[3];
};

sipQPixmap::sipQPixmap(): QPixmap(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPixmap::sipQPixmap(int a0,int a1): QPixmap(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPixmap::sipQPixmap(const QSize& a0): QPixmap(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPixmap::sipQPixmap(const QString& a0,const char *a1,Qt::ImageConversionFlags a2): QPixmap(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPixmap::sipQPixmap(const char **a0): QPixmap(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPixmap::sipQPixmap(const QPixmap& a0): QPixmap(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPixmap::~sipQPixmap()
{
    sipCommonDtor(sipPySelf);
}

int sipQPixmap::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_devType);

    if (!meth)
        return QPixmap::devType();

    typedef int (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtGui_QtCore->em_virthandlers[7]))(sipGILState,meth,0);
}

QPaintEngine * sipQPixmap::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_paintEngine);

    if (!meth)
        return QPixmap::paintEngine();

    extern QPaintEngine * sipVH_QtGui_28(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_28(sipGILState,meth,0);
}

int sipQPixmap::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_metric);

    if (!meth)
        return QPixmap::metric(a0);

    extern int sipVH_QtGui_15(sip_gilstate_t,PyObject *,bool*,QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_15(sipGILState,meth,0,a0);
}

int sipQPixmap::sipProtectVirt_metric(bool sipSelfWasArg,QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ? QPixmap::metric(a0) : metric(a0));
}


extern "C" {static PyObject *meth_QPixmap_isNull(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPixmap,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNull();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_isNull);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_devType(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_devType(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPixmap,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QPixmap::devType() : sipCpp->devType());
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_devType);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_width(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_width(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPixmap,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->width();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_width);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_height(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_height(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPixmap,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->height();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_height);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_size(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_size(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPixmap,&sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->size());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_size);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_rect(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_rect(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPixmap,&sipCpp))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->rect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_rect);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_depth(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_depth(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPixmap,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->depth();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_depth);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_defaultDepth(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_defaultDepth(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QPixmap::defaultDepth();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_defaultDepth);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_fill(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_fill(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QColor& a0def = Qt::white;
        const QColor * a0 = &a0def;
        int a0State = 0;
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|J1",&sipSelf,sipType_QPixmap,&sipCpp,sipType_QColor,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->fill(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QWidget * a0;
        const QPoint * a1;
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8J9",&sipSelf,sipType_QPixmap,&sipCpp,sipType_QWidget,&a0,sipType_QPoint,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->fill(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QWidget * a0;
        int a1;
        int a2;
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8ii",&sipSelf,sipType_QPixmap,&sipCpp,sipType_QWidget,&a0,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->fill(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_fill);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_mask(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_mask(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPixmap,&sipCpp))
        {
            QBitmap *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBitmap(sipCpp->mask());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBitmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_mask);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_setMask(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_setMask(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QBitmap * a0;
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QPixmap,&sipCpp,sipType_QBitmap,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMask(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_setMask);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_alphaChannel(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_alphaChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPixmap,&sipCpp))
        {
            QPixmap *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(sipCpp->alphaChannel());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_alphaChannel);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_setAlphaChannel(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_setAlphaChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPixmap * a0;
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QPixmap,&sipCpp,sipType_QPixmap,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAlphaChannel(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_setAlphaChannel);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_hasAlpha(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_hasAlpha(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPixmap,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasAlpha();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_hasAlpha);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_hasAlphaChannel(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_hasAlphaChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPixmap,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasAlphaChannel();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_hasAlphaChannel);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_createHeuristicMask(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_createHeuristicMask(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0 = 1;
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|b",&sipSelf,sipType_QPixmap,&sipCpp,&a0))
        {
            QBitmap *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBitmap(sipCpp->createHeuristicMask(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBitmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_createHeuristicMask);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_createMaskFromColor(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_createMaskFromColor(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QColor * a0;
        int a0State = 0;
        Qt::MaskMode a1;
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1E",&sipSelf,sipType_QPixmap,&sipCpp,sipType_QColor,&a0,&a0State,sipType_Qt_MaskMode,&a1))
        {
            QBitmap *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBitmap(sipCpp->createMaskFromColor(*a0,a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            return sipConvertFromNewType(sipRes,sipType_QBitmap,NULL);
        }
    }

    {
        const QColor * a0;
        int a0State = 0;
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QPixmap,&sipCpp,sipType_QColor,&a0,&a0State))
        {
            QBitmap *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBitmap(sipCpp->createMaskFromColor(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            return sipConvertFromNewType(sipRes,sipType_QBitmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_createMaskFromColor);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_grabWindow(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_grabWindow(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        WId a0;
        int a1 = 0;
        int a2 = 0;
        int a3 = -1;
        int a4 = -1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"m|iiii",&a0,&a1,&a2,&a3,&a4))
        {
            QPixmap *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(QPixmap::grabWindow(a0,a1,a2,a3,a4));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_grabWindow);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_grabWidget(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_grabWidget(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWidget * a0;
        const QRect * a1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8J9",sipType_QWidget,&a0,sipType_QRect,&a1))
        {
            QPixmap *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(QPixmap::grabWidget(a0,*a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    {
        QWidget * a0;
        int a1 = 0;
        int a2 = 0;
        int a3 = -1;
        int a4 = -1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8|iiii",sipType_QWidget,&a0,&a1,&a2,&a3,&a4))
        {
            QPixmap *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(QPixmap::grabWidget(a0,a1,a2,a3,a4));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_grabWidget);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_scaled(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_scaled(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        Qt::AspectRatioMode a2 = Qt::IgnoreAspectRatio;
        Qt::TransformationMode a3 = Qt::FastTransformation;
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii|EE",&sipSelf,sipType_QPixmap,&sipCpp,&a0,&a1,sipType_Qt_AspectRatioMode,&a2,sipType_Qt_TransformationMode,&a3))
        {
            QPixmap *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(sipCpp->scaled(a0,a1,a2,a3));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    {
        const QSize * a0;
        Qt::AspectRatioMode a1 = Qt::IgnoreAspectRatio;
        Qt::TransformationMode a2 = Qt::FastTransformation;
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9|EE",&sipSelf,sipType_QPixmap,&sipCpp,sipType_QSize,&a0,sipType_Qt_AspectRatioMode,&a1,sipType_Qt_TransformationMode,&a2))
        {
            QPixmap *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(sipCpp->scaled(*a0,a1,a2));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_scaled);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_scaledToWidth(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_scaledToWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        Qt::TransformationMode a1 = Qt::FastTransformation;
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi|E",&sipSelf,sipType_QPixmap,&sipCpp,&a0,sipType_Qt_TransformationMode,&a1))
        {
            QPixmap *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(sipCpp->scaledToWidth(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_scaledToWidth);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_scaledToHeight(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_scaledToHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        Qt::TransformationMode a1 = Qt::FastTransformation;
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi|E",&sipSelf,sipType_QPixmap,&sipCpp,&a0,sipType_Qt_TransformationMode,&a1))
        {
            QPixmap *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(sipCpp->scaledToHeight(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_scaledToHeight);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_transformed(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_transformed(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QMatrix * a0;
        Qt::TransformationMode a1 = Qt::FastTransformation;
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9|E",&sipSelf,sipType_QPixmap,&sipCpp,sipType_QMatrix,&a0,sipType_Qt_TransformationMode,&a1))
        {
            QPixmap *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(sipCpp->transformed(*a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    {
        const QTransform * a0;
        Qt::TransformationMode a1 = Qt::FastTransformation;
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9|E",&sipSelf,sipType_QPixmap,&sipCpp,sipType_QTransform,&a0,sipType_Qt_TransformationMode,&a1))
        {
            QPixmap *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(sipCpp->transformed(*a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_transformed);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_trueMatrix(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_trueMatrix(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QMatrix * a0;
        int a1;
        int a2;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9ii",sipType_QMatrix,&a0,&a1,&a2))
        {
            QMatrix *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMatrix(QPixmap::trueMatrix(*a0,a1,a2));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMatrix,NULL);
        }
    }

    {
        const QTransform * a0;
        int a1;
        int a2;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9ii",sipType_QTransform,&a0,&a1,&a2))
        {
            QTransform *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTransform(QPixmap::trueMatrix(*a0,a1,a2));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_trueMatrix);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_toImage(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_toImage(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPixmap,&sipCpp))
        {
            QImage *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QImage(sipCpp->toImage());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_toImage);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_fromImage(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_fromImage(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QImage * a0;
        Qt::ImageConversionFlags a1def = Qt::AutoColor;
        Qt::ImageConversionFlags * a1 = &a1def;
        int a1State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9|J1",sipType_QImage,&a0,sipType_Qt_ImageConversionFlags,&a1,&a1State))
        {
            QPixmap *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(QPixmap::fromImage(*a0,*a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_Qt_ImageConversionFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_fromImage);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_load(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_load(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        const char * a1 = 0;
        Qt::ImageConversionFlags a2def = Qt::AutoColor;
        Qt::ImageConversionFlags * a2 = &a2def;
        int a2State = 0;
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|sJ1",&sipSelf,sipType_QPixmap,&sipCpp,sipType_QString,&a0,&a0State,&a1,sipType_Qt_ImageConversionFlags,&a2,&a2State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->load(*a0,a1,*a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a2,sipType_Qt_ImageConversionFlags,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_load);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_loadFromData(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_loadFromData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const uchar * a0;
        SIP_SSIZE_T a1;
        const char * a2 = 0;
        Qt::ImageConversionFlags a3def = Qt::AutoColor;
        Qt::ImageConversionFlags * a3 = &a3def;
        int a3State = 0;
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bk|sJ1",&sipSelf,sipType_QPixmap,&sipCpp,&a0,&a1,&a2,sipType_Qt_ImageConversionFlags,&a3,&a3State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->loadFromData(a0,(unsigned)a1,a2,*a3);
            Py_END_ALLOW_THREADS

            sipReleaseType(a3,sipType_Qt_ImageConversionFlags,a3State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QByteArray * a0;
        int a0State = 0;
        const char * a1 = 0;
        Qt::ImageConversionFlags a2def = Qt::AutoColor;
        Qt::ImageConversionFlags * a2 = &a2def;
        int a2State = 0;
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|sJ1",&sipSelf,sipType_QPixmap,&sipCpp,sipType_QByteArray,&a0,&a0State,&a1,sipType_Qt_ImageConversionFlags,&a2,&a2State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->loadFromData(*a0,a1,*a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(a2,sipType_Qt_ImageConversionFlags,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_loadFromData);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_save(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_save(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        const char * a1 = 0;
        int a2 = -1;
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|si",&sipSelf,sipType_QPixmap,&sipCpp,sipType_QString,&a0,&a0State,&a1,&a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->save(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        QIODevice * a0;
        const char * a1 = 0;
        int a2 = -1;
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8|si",&sipSelf,sipType_QPixmap,&sipCpp,sipType_QIODevice,&a0,&a1,&a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->save(a0,a1,a2);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_save);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_copy(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_copy(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QRect& a0def = QRect();
        const QRect * a0 = &a0def;
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|J9",&sipSelf,sipType_QPixmap,&sipCpp,sipType_QRect,&a0))
        {
            QPixmap *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(sipCpp->copy(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Biiii",&sipSelf,sipType_QPixmap,&sipCpp,&a0,&a1,&a2,&a3))
        {
            QPixmap *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(sipCpp->copy(a0,a1,a2,a3));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_copy);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_serialNumber(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_serialNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPixmap,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->serialNumber();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_serialNumber);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_detach(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_detach(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPixmap,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->detach();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_detach);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_x11PictureHandle(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_x11PictureHandle(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPixmap,&sipCpp))
        {
            Qt::HANDLE sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->x11PictureHandle();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_x11PictureHandle);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_isQBitmap(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_isQBitmap(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPixmap,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isQBitmap();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_isQBitmap);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_x11Info(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_x11Info(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPixmap,&sipCpp))
        {
            QX11Info *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QX11Info(sipCpp->x11Info());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QX11Info,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_x11Info);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_handle(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_handle(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPixmap,&sipCpp))
        {
            Qt::HANDLE sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->handle();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_handle);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_paintEngine(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_paintEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPixmap,&sipCpp))
        {
            QPaintEngine *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QPixmap::paintEngine() : sipCpp->paintEngine());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QPaintEngine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_paintEngine);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_metric(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_metric(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        sipQPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pE",&sipSelf,sipType_QPixmap,&sipCpp,sipType_QPaintDevice_PaintDeviceMetric,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_metric);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_cacheKey(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_cacheKey(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPixmap *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPixmap,&sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cacheKey();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_cacheKey);

    return NULL;
}


extern "C" {static PyObject *meth_QPixmap_fromX11Pixmap(PyObject *, PyObject *);}
static PyObject *meth_QPixmap_fromX11Pixmap(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Qt::HANDLE a0;
        QPixmap::ShareMode a1 = QPixmap::ImplicitlyShared;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"m|E",&a0,sipType_QPixmap_ShareMode,&a1))
        {
            QPixmap *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(QPixmap::fromX11Pixmap(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPixmap,sipName_fromX11Pixmap);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QPixmap(void *, const sipTypeDef *);}
static void *cast_QPixmap(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QPixmap)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QPaintDevice)->ctd_cast((QPaintDevice *)(QPixmap *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPixmap(void *, int);}
static void release_QPixmap(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQPixmap *>(sipCppV);
    else
        delete reinterpret_cast<QPixmap *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QPixmap(void *, SIP_SSIZE_T, const void *);}
static void assign_QPixmap(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QPixmap *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QPixmap *>(sipSrc);
}


extern "C" {static void *array_QPixmap(SIP_SSIZE_T);}
static void *array_QPixmap(SIP_SSIZE_T sipNrElem)
{
    return new QPixmap[sipNrElem];
}


extern "C" {static void *copy_QPixmap(const void *, SIP_SSIZE_T);}
static void *copy_QPixmap(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QPixmap(reinterpret_cast<const QPixmap *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPixmap(sipSimpleWrapper *);}
static void dealloc_QPixmap(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQPixmap *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QPixmap(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QPixmap(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QPixmap(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    sipQPixmap *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQPixmap();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        int a0;
        int a1;

        if (sipParseArgs(sipArgsParsed,sipArgs,"ii",&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQPixmap(a0,a1);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QSize * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QSize,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQPixmap(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QString * a0;
        int a0State = 0;
        const char * a1 = 0;
        Qt::ImageConversionFlags a2def = Qt::AutoColor;
        Qt::ImageConversionFlags * a2 = &a2def;
        int a2State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1|sJ1",sipType_QString,&a0,&a0State,&a1,sipType_Qt_ImageConversionFlags,&a2,&a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQPixmap(*a0,a1,*a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a2,sipType_Qt_ImageConversionFlags,a2State);
        }
    }

    if (!sipCpp)
    {
        int sipIsErr = 0;
        PyObject * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"T",&PyList_Type,&a0))
        {
#line 51 "sip/QtGui/qpixmap.sip"
        // The Python interface is a list of strings that make up the image.
        
        const char **str = QtGui_ListToArray(a0);
        
        if (str)
        {
            sipCpp = new sipQPixmap(str);
            QtGui_DeleteArray(str);
        }
        else
            sipIsErr = 1;
#line 1686 "sipQtGuiQPixmap.cpp"

            if (sipIsErr)
                return 0;
        }
    }

    if (!sipCpp)
    {
        const QPixmap * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QPixmap,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQPixmap(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QVariant * a0;
        int a0State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1",sipType_QVariant,&a0,&a0State))
        {
#line 67 "sip/QtGui/qpixmap.sip"
        sipCpp = new sipQPixmap(qVariantValue<QPixmap>(*a0));
#line 1714 "sipQtGuiQPixmap.cpp"

            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPixmap[] = {{318, 255, 1}};


static PyMethodDef methods_QPixmap[] = {
    {SIP_MLNAME_CAST(sipName_alphaChannel), meth_QPixmap_alphaChannel, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_cacheKey), meth_QPixmap_cacheKey, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_copy), meth_QPixmap_copy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createHeuristicMask), meth_QPixmap_createHeuristicMask, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createMaskFromColor), meth_QPixmap_createMaskFromColor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_defaultDepth), meth_QPixmap_defaultDepth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_depth), meth_QPixmap_depth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_detach), meth_QPixmap_detach, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_devType), meth_QPixmap_devType, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fill), meth_QPixmap_fill, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromImage), meth_QPixmap_fromImage, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromX11Pixmap), meth_QPixmap_fromX11Pixmap, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_grabWidget), meth_QPixmap_grabWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_grabWindow), meth_QPixmap_grabWindow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_handle), meth_QPixmap_handle, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasAlpha), meth_QPixmap_hasAlpha, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasAlphaChannel), meth_QPixmap_hasAlphaChannel, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_height), meth_QPixmap_height, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QPixmap_isNull, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isQBitmap), meth_QPixmap_isQBitmap, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_load), meth_QPixmap_load, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_loadFromData), meth_QPixmap_loadFromData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mask), meth_QPixmap_mask, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_metric), meth_QPixmap_metric, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paintEngine), meth_QPixmap_paintEngine, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rect), meth_QPixmap_rect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_save), meth_QPixmap_save, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scaled), meth_QPixmap_scaled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scaledToHeight), meth_QPixmap_scaledToHeight, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scaledToWidth), meth_QPixmap_scaledToWidth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_serialNumber), meth_QPixmap_serialNumber, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAlphaChannel), meth_QPixmap_setAlphaChannel, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setMask), meth_QPixmap_setMask, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_size), meth_QPixmap_size, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toImage), meth_QPixmap_toImage, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_transformed), meth_QPixmap_transformed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_trueMatrix), meth_QPixmap_trueMatrix, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_width), meth_QPixmap_width, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_x11Info), meth_QPixmap_x11Info, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_x11PictureHandle), meth_QPixmap_x11PictureHandle, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QPixmap[] = {
    {sipName_ExplicitlyShared, QPixmap::ExplicitlyShared, 344},
    {sipName_ImplicitlyShared, QPixmap::ImplicitlyShared, 344},
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QPixmap = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QPixmap,
        {0}
    },
    {
        sipNameNr_QPixmap,
        {0, 0, 1},
        40, methods_QPixmap,
        2, enummembers_QPixmap,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QPixmap,
    0,
    init_QPixmap,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPixmap,
    assign_QPixmap,
    array_QPixmap,
    copy_QPixmap,
    release_QPixmap,
    cast_QPixmap,
    0,
    0,
    0
},
    0,
    0,
    0
};

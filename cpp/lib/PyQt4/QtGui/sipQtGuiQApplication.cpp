/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:25 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 118 "sip/QtGui/qapplication.sip"
#include <qapplication.h>
#line 39 "sipQtGuiQApplication.cpp"

#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 43 "sipQtGuiQApplication.cpp"
#line 41 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 46 "sipQtGuiQApplication.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 49 "sipQtGuiQApplication.cpp"
#line 41 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 52 "sipQtGuiQApplication.cpp"
#line 41 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 55 "sipQtGuiQApplication.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 58 "sipQtGuiQApplication.cpp"
#line 39 "sip/QtGui/qsessionmanager.sip"
#include <qsessionmanager.h>
#line 61 "sipQtGuiQApplication.cpp"
#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 64 "sipQtGuiQApplication.cpp"
#line 37 "sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 67 "sipQtGuiQApplication.cpp"
#line 40 "sip/QtGui/qapplication.sip"
#include <qapplication.h>
#line 70 "sipQtGuiQApplication.cpp"
#line 41 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 73 "sipQtGuiQApplication.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 76 "sipQtGuiQApplication.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 79 "sipQtGuiQApplication.cpp"
#line 41 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 82 "sipQtGuiQApplication.cpp"
#line 37 "sip/QtGui/qclipboard.sip"
#include <qclipboard.h>
#line 85 "sipQtGuiQApplication.cpp"
#line 37 "sip/QtGui/qdesktopwidget.sip"
#include <qdesktopwidget.h>
#line 88 "sipQtGuiQApplication.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 91 "sipQtGuiQApplication.cpp"
#line 41 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 94 "sipQtGuiQApplication.cpp"
#line 37 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 97 "sipQtGuiQApplication.cpp"
#line 41 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 100 "sipQtGuiQApplication.cpp"
#line 41 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 103 "sipQtGuiQApplication.cpp"
#line 41 "sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 106 "sipQtGuiQApplication.cpp"
#line 77 "sip/QtCore/qcoreapplication.sip"
#include <qcoreapplication.h>
#line 109 "sipQtGuiQApplication.cpp"
#line 37 "sip/QtCore/qtranslator.sip"
#include <qtranslator.h>
#line 112 "sipQtGuiQApplication.cpp"
#line 41 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 115 "sipQtGuiQApplication.cpp"
#line 41 "sip/QtCore/qeventloop.sip"
#include <qeventloop.h>
#line 118 "sipQtGuiQApplication.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 121 "sipQtGuiQApplication.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 124 "sipQtGuiQApplication.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 127 "sipQtGuiQApplication.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 130 "sipQtGuiQApplication.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 133 "sipQtGuiQApplication.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 136 "sipQtGuiQApplication.cpp"
#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 139 "sipQtGuiQApplication.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 142 "sipQtGuiQApplication.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 145 "sipQtGuiQApplication.cpp"


class sipQApplication : public QApplication
{
public:
    sipQApplication(int&,char **);
    sipQApplication(int&,char **,bool);
    sipQApplication(int&,char **,QApplication::Type);
    sipQApplication(Display *,Qt::HANDLE,Qt::HANDLE);
    sipQApplication(Display *,int&,char **,Qt::HANDLE,Qt::HANDLE);
    virtual ~sipQApplication();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    bool sipProtectVirt_event(bool,QEvent *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool x11EventFilter(XEvent *);
    void commitData(QSessionManager&);
    void saveState(QSessionManager&);
    bool notify(QObject *,QEvent *);
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQApplication(const sipQApplication &);
    sipQApplication &operator = (const sipQApplication &);

    char sipPyMethods[11];
};

sipQApplication::sipQApplication(int& a0,char **a1): QApplication(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQApplication::sipQApplication(int& a0,char **a1,bool a2): QApplication(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQApplication::sipQApplication(int& a0,char **a1,QApplication::Type a2): QApplication(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQApplication::sipQApplication(Display *a0,Qt::HANDLE a1,Qt::HANDLE a2): QApplication(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQApplication::sipQApplication(Display *a0,int& a1,char **a2,Qt::HANDLE a3,Qt::HANDLE a4): QApplication(a0,a1,a2,a3,a4), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQApplication::~sipQApplication()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQApplication::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QApplication);
}

int sipQApplication::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QApplication::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QApplication,_c,_id,_a);

    return _id;
}

void *sipQApplication::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QApplication,_clname)) ? this : QApplication::qt_metacast(_clname);
}

bool sipQApplication::x11EventFilter(XEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_x11EventFilter);

    if (!meth)
        return QApplication::x11EventFilter(a0);

    extern bool sipVH_QtGui_225(sip_gilstate_t,PyObject *,bool*,XEvent *);

    return sipVH_QtGui_225(sipGILState,meth,0,a0);
}

void sipQApplication::commitData(QSessionManager& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_commitData);

    if (!meth)
    {
        QApplication::commitData(a0);
        return;
    }

    extern void sipVH_QtGui_224(sip_gilstate_t,PyObject *,bool*,QSessionManager&);

    sipVH_QtGui_224(sipGILState,meth,0,a0);
}

void sipQApplication::saveState(QSessionManager& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_saveState);

    if (!meth)
    {
        QApplication::saveState(a0);
        return;
    }

    extern void sipVH_QtGui_224(sip_gilstate_t,PyObject *,bool*,QSessionManager&);

    sipVH_QtGui_224(sipGILState,meth,0,a0);
}

bool sipQApplication::notify(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_notify);

    if (!meth)
        return QApplication::notify(a0,a1);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t,PyObject *,bool*,QObject *,QEvent *);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtGui_QtCore->em_virthandlers[20]))(sipGILState,meth,0,a0,a1);
}

bool sipQApplication::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QApplication::event(a0);

    typedef bool (*sipVH_QtCore_12)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return ((sipVH_QtCore_12)(sipModuleAPI_QtGui_QtCore->em_virthandlers[12]))(sipGILState,meth,0,a0);
}

bool sipQApplication::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t,PyObject *,bool*,QObject *,QEvent *);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtGui_QtCore->em_virthandlers[20]))(sipGILState,meth,0,a0,a1);
}

void sipQApplication::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_3)(sip_gilstate_t,PyObject *,bool*,QTimerEvent *);

    ((sipVH_QtCore_3)(sipModuleAPI_QtGui_QtCore->em_virthandlers[3]))(sipGILState,meth,0,a0);
}

void sipQApplication::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_19)(sip_gilstate_t,PyObject *,bool*,QChildEvent *);

    ((sipVH_QtCore_19)(sipModuleAPI_QtGui_QtCore->em_virthandlers[19]))(sipGILState,meth,0,a0);
}

void sipQApplication::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQApplication::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

void sipQApplication::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

int sipQApplication::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQApplication::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQApplication::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQApplication::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQApplication::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQApplication::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

bool sipQApplication::sipProtectVirt_event(bool sipSelfWasArg,QEvent *a0)
{
    return (sipSelfWasArg ? QApplication::event(a0) : event(a0));
}


extern "C" {static PyObject *meth_QApplication_receivers(PyObject *, PyObject *);}
static PyObject *meth_QApplication_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        char * a0;
        sipQApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QApplication,&sipCpp,&a0))
        {
            int sipRes = 0;

#line 480 "sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
#line 498 "sipQtGuiQApplication.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_receivers);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QApplication_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QApplication,&sipCpp,sipType_QTimerEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_timerEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QApplication_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QApplication,&sipCpp,sipType_QChildEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_childEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QApplication_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QApplication,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_customEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QApplication_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QApplication,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_connectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QApplication_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QApplication,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_disconnectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_type(PyObject *, PyObject *);}
static PyObject *meth_QApplication_type(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QApplication::Type sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::type();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QApplication_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_type);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_style(PyObject *, PyObject *);}
static PyObject *meth_QApplication_style(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QStyle *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::style();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QStyle,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_style);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_setStyle(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setStyle(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStyle * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J:",sipType_QStyle,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setStyle(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1",sipType_QString,&a0,&a0State))
        {
            QStyle *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::setStyle(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QStyle,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_setStyle);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_colorSpec(PyObject *, PyObject *);}
static PyObject *meth_QApplication_colorSpec(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::colorSpec();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_colorSpec);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_setColorSpec(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setColorSpec(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"i",&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setColorSpec(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_setColorSpec);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_overrideCursor(PyObject *, PyObject *);}
static PyObject *meth_QApplication_overrideCursor(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QCursor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::overrideCursor();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QCursor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_overrideCursor);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_setOverrideCursor(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setOverrideCursor(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QCursor * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1",sipType_QCursor,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setOverrideCursor(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QCursor *>(a0),sipType_QCursor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_setOverrideCursor);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_changeOverrideCursor(PyObject *, PyObject *);}
static PyObject *meth_QApplication_changeOverrideCursor(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QCursor * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1",sipType_QCursor,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::changeOverrideCursor(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QCursor *>(a0),sipType_QCursor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_changeOverrideCursor);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_restoreOverrideCursor(PyObject *, PyObject *);}
static PyObject *meth_QApplication_restoreOverrideCursor(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::restoreOverrideCursor();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_restoreOverrideCursor);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_palette(PyObject *, PyObject *);}
static PyObject *meth_QApplication_palette(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QPalette *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPalette(QApplication::palette());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPalette,NULL);
        }
    }

    {
        const QWidget * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8",sipType_QWidget,&a0))
        {
            QPalette *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPalette(QApplication::palette(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPalette,NULL);
        }
    }

    {
        const char * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"s",&a0))
        {
            QPalette *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPalette(QApplication::palette(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPalette,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_palette);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_setPalette(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setPalette(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPalette * a0;
        const char * a1 = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9|s",sipType_QPalette,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setPalette(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_setPalette);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_setFont(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setFont(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QFont * a0;
        const char * a1 = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9|s",sipType_QFont,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setFont(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_setFont);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_fontMetrics(PyObject *, PyObject *);}
static PyObject *meth_QApplication_fontMetrics(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QFontMetrics *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFontMetrics(QApplication::fontMetrics());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFontMetrics,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_fontMetrics);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_setWindowIcon(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setWindowIcon(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QIcon * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QIcon,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setWindowIcon(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_setWindowIcon);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_windowIcon(PyObject *, PyObject *);}
static PyObject *meth_QApplication_windowIcon(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QIcon *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QIcon(QApplication::windowIcon());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_windowIcon);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_allWidgets(PyObject *, PyObject *);}
static PyObject *meth_QApplication_allWidgets(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QWidgetList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QWidgetList(QApplication::allWidgets());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_allWidgets);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_topLevelWidgets(PyObject *, PyObject *);}
static PyObject *meth_QApplication_topLevelWidgets(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QWidgetList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QWidgetList(QApplication::topLevelWidgets());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_topLevelWidgets);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_desktop(PyObject *, PyObject *);}
static PyObject *meth_QApplication_desktop(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QDesktopWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::desktop();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDesktopWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_desktop);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_activePopupWidget(PyObject *, PyObject *);}
static PyObject *meth_QApplication_activePopupWidget(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::activePopupWidget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_activePopupWidget);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_activeModalWidget(PyObject *, PyObject *);}
static PyObject *meth_QApplication_activeModalWidget(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::activeModalWidget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_activeModalWidget);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_clipboard(PyObject *, PyObject *);}
static PyObject *meth_QApplication_clipboard(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QClipboard *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::clipboard();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QClipboard,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_clipboard);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_focusWidget(PyObject *, PyObject *);}
static PyObject *meth_QApplication_focusWidget(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::focusWidget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_focusWidget);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_activeWindow(PyObject *, PyObject *);}
static PyObject *meth_QApplication_activeWindow(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::activeWindow();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_activeWindow);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_setActiveWindow(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setActiveWindow(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWidget * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8",sipType_QWidget,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setActiveWindow(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_setActiveWindow);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_widgetAt(PyObject *, PyObject *);}
static PyObject *meth_QApplication_widgetAt(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPoint * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QPoint,&a0))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::widgetAt(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    {
        int a0;
        int a1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"ii",&a0,&a1))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::widgetAt(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_widgetAt);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_topLevelAt(PyObject *, PyObject *);}
static PyObject *meth_QApplication_topLevelAt(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPoint * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QPoint,&a0))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::topLevelAt(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    {
        int a0;
        int a1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"ii",&a0,&a1))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::topLevelAt(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_topLevelAt);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_syncX(PyObject *, PyObject *);}
static PyObject *meth_QApplication_syncX(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::syncX();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_syncX);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_beep(PyObject *, PyObject *);}
static PyObject *meth_QApplication_beep(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::beep();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_beep);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_keyboardModifiers(PyObject *, PyObject *);}
static PyObject *meth_QApplication_keyboardModifiers(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            Qt::KeyboardModifiers *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::KeyboardModifiers(QApplication::keyboardModifiers());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_KeyboardModifiers,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_keyboardModifiers);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_mouseButtons(PyObject *, PyObject *);}
static PyObject *meth_QApplication_mouseButtons(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            Qt::MouseButtons *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::MouseButtons(QApplication::mouseButtons());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_MouseButtons,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_mouseButtons);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_setDesktopSettingsAware(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setDesktopSettingsAware(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"b",&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setDesktopSettingsAware(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_setDesktopSettingsAware);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_desktopSettingsAware(PyObject *, PyObject *);}
static PyObject *meth_QApplication_desktopSettingsAware(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::desktopSettingsAware();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_desktopSettingsAware);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_setCursorFlashTime(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setCursorFlashTime(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"i",&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setCursorFlashTime(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_setCursorFlashTime);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_cursorFlashTime(PyObject *, PyObject *);}
static PyObject *meth_QApplication_cursorFlashTime(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::cursorFlashTime();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_cursorFlashTime);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_setDoubleClickInterval(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setDoubleClickInterval(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"i",&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setDoubleClickInterval(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_setDoubleClickInterval);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_doubleClickInterval(PyObject *, PyObject *);}
static PyObject *meth_QApplication_doubleClickInterval(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::doubleClickInterval();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_doubleClickInterval);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_setKeyboardInputInterval(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setKeyboardInputInterval(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"i",&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setKeyboardInputInterval(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_setKeyboardInputInterval);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_keyboardInputInterval(PyObject *, PyObject *);}
static PyObject *meth_QApplication_keyboardInputInterval(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::keyboardInputInterval();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_keyboardInputInterval);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_setWheelScrollLines(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setWheelScrollLines(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"i",&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setWheelScrollLines(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_setWheelScrollLines);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_wheelScrollLines(PyObject *, PyObject *);}
static PyObject *meth_QApplication_wheelScrollLines(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::wheelScrollLines();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_wheelScrollLines);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_setGlobalStrut(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setGlobalStrut(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QSize * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QSize,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setGlobalStrut(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_setGlobalStrut);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_globalStrut(PyObject *, PyObject *);}
static PyObject *meth_QApplication_globalStrut(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(QApplication::globalStrut());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_globalStrut);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_setStartDragTime(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setStartDragTime(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"i",&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setStartDragTime(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_setStartDragTime);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_startDragTime(PyObject *, PyObject *);}
static PyObject *meth_QApplication_startDragTime(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::startDragTime();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_startDragTime);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_setStartDragDistance(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setStartDragDistance(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"i",&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setStartDragDistance(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_setStartDragDistance);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_startDragDistance(PyObject *, PyObject *);}
static PyObject *meth_QApplication_startDragDistance(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::startDragDistance();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_startDragDistance);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_setLayoutDirection(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setLayoutDirection(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Qt::LayoutDirection a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"E",sipType_Qt_LayoutDirection,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setLayoutDirection(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_setLayoutDirection);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_layoutDirection(PyObject *, PyObject *);}
static PyObject *meth_QApplication_layoutDirection(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            Qt::LayoutDirection sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::layoutDirection();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_LayoutDirection);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_layoutDirection);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_isRightToLeft(PyObject *, PyObject *);}
static PyObject *meth_QApplication_isRightToLeft(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::isRightToLeft();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_isRightToLeft);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_isLeftToRight(PyObject *, PyObject *);}
static PyObject *meth_QApplication_isLeftToRight(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::isLeftToRight();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_isLeftToRight);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_isEffectEnabled(PyObject *, PyObject *);}
static PyObject *meth_QApplication_isEffectEnabled(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Qt::UIEffect a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"E",sipType_Qt_UIEffect,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::isEffectEnabled(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_isEffectEnabled);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_setEffectEnabled(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setEffectEnabled(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Qt::UIEffect a0;
        bool a1 = 1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"E|b",sipType_Qt_UIEffect,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setEffectEnabled(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_setEffectEnabled);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_x11EventFilter(PyObject *, PyObject *);}
static PyObject *meth_QApplication_x11EventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        XEvent * a0;
        QApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ0",&sipSelf,sipType_QApplication,&sipCpp,sipType_XEvent,&a0,NULL))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QApplication::x11EventFilter(a0) : sipCpp->x11EventFilter(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_x11EventFilter);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_x11ProcessEvent(PyObject *, PyObject *);}
static PyObject *meth_QApplication_x11ProcessEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        XEvent * a0;
        QApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ0",&sipSelf,sipType_QApplication,&sipCpp,sipType_XEvent,&a0,NULL))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->x11ProcessEvent(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_x11ProcessEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_isSessionRestored(PyObject *, PyObject *);}
static PyObject *meth_QApplication_isSessionRestored(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QApplication,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSessionRestored();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_isSessionRestored);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_sessionId(PyObject *, PyObject *);}
static PyObject *meth_QApplication_sessionId(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QApplication,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->sessionId());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_sessionId);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_sessionKey(PyObject *, PyObject *);}
static PyObject *meth_QApplication_sessionKey(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QApplication,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->sessionKey());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_sessionKey);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_commitData(PyObject *, PyObject *);}
static PyObject *meth_QApplication_commitData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSessionManager * a0;
        QApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QApplication,&sipCpp,sipType_QSessionManager,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QApplication::commitData(*a0) : sipCpp->commitData(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_commitData);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_saveState(PyObject *, PyObject *);}
static PyObject *meth_QApplication_saveState(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSessionManager * a0;
        QApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QApplication,&sipCpp,sipType_QSessionManager,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QApplication::saveState(*a0) : sipCpp->saveState(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_saveState);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_setInputContext(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setInputContext(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QInputContext * a0;
        QApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QApplication,&sipCpp,sipType_QInputContext,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setInputContext(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_setInputContext);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_inputContext(PyObject *, PyObject *);}
static PyObject *meth_QApplication_inputContext(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QApplication,&sipCpp))
        {
            QInputContext *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->inputContext();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QInputContext,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_inputContext);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_exec_(PyObject *, PyObject *);}
static PyObject *meth_QApplication_exec_(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            int sipRes;

            sipCallHook("__pyQtPreEventLoopHook__");

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::exec();
            Py_END_ALLOW_THREADS


            sipCallHook("__pyQtPostEventLoopHook__");
            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_exec_);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_notify(PyObject *, PyObject *);}
static PyObject *meth_QApplication_notify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject * a0;
        QEvent * a1;
        QApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8J8",&sipSelf,sipType_QApplication,&sipCpp,sipType_QObject,&a0,sipType_QEvent,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QApplication::notify(a0,a1) : sipCpp->notify(a0,a1));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_notify);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_setQuitOnLastWindowClosed(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setQuitOnLastWindowClosed(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"b",&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setQuitOnLastWindowClosed(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_setQuitOnLastWindowClosed);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_quitOnLastWindowClosed(PyObject *, PyObject *);}
static PyObject *meth_QApplication_quitOnLastWindowClosed(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::quitOnLastWindowClosed();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_quitOnLastWindowClosed);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_aboutQt(PyObject *, PyObject *);}
static PyObject *meth_QApplication_aboutQt(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::aboutQt();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_aboutQt);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_closeAllWindows(PyObject *, PyObject *);}
static PyObject *meth_QApplication_closeAllWindows(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::closeAllWindows();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_closeAllWindows);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_setStyleSheet(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setStyleSheet(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QApplication,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStyleSheet(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_setStyleSheet);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_event(PyObject *, PyObject *);}
static PyObject *meth_QApplication_event(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QApplication,&sipCpp,sipType_QEvent,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_event);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_font(PyObject *, PyObject *);}
static PyObject *meth_QApplication_font(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QFont *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFont(QApplication::font());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    {
        const QWidget * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8",sipType_QWidget,&a0))
        {
            QFont *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFont(QApplication::font(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    {
        const char * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"s",&a0))
        {
            QFont *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFont(QApplication::font(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_font);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_keyboardInputLocale(PyObject *, PyObject *);}
static PyObject *meth_QApplication_keyboardInputLocale(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QLocale *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QLocale(QApplication::keyboardInputLocale());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QLocale,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_keyboardInputLocale);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_keyboardInputDirection(PyObject *, PyObject *);}
static PyObject *meth_QApplication_keyboardInputDirection(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            Qt::LayoutDirection sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QApplication::keyboardInputDirection();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_LayoutDirection);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_keyboardInputDirection);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_styleSheet(PyObject *, PyObject *);}
static PyObject *meth_QApplication_styleSheet(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QApplication,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->styleSheet());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_styleSheet);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_alert(PyObject *, PyObject *);}
static PyObject *meth_QApplication_alert(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWidget * a0;
        int a1 = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8|i",sipType_QWidget,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::alert(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_alert);

    return NULL;
}


extern "C" {static PyObject *meth_QApplication_setGraphicsSystem(PyObject *, PyObject *);}
static PyObject *meth_QApplication_setGraphicsSystem(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1",sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QApplication::setGraphicsSystem(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QApplication,sipName_setGraphicsSystem);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QApplication(void *, const sipTypeDef *);}
static void *cast_QApplication(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QApplication)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QCoreApplication)->ctd_cast((QCoreApplication *)(QApplication *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QApplication(void *, int);}
static void release_QApplication(void *sipCppV,int sipState)
{
#line 529 "sip/QtGui/qapplication.sip"
        // Make sure all remaining top level widgets are not owned by Python.  When a
        // PyQt script terminates we have no control over the order in which the
        // QApplication instance and the top level widgets are destroyed.  If the
        // former happens first then we get a seg. fault.  We could take the approach
        // of only pretending to delete the QApplication instance, but Qt seems to
        // allow an application to delete the QApplication instance and then create
        // another one (and it's useful for unit testing).  The approach we take is to
        // transfer ownership of all top level widgets away from Python so that the C++
        // dtor is not called if they are destroyed after the QApplication instance.
        // This might be seen as a memory leak - but if we really are terminating
        // then it doesn't matter, and if we are just deleting the QApplication
        // instance then we should have already deleted the top level widgets manually.]
        // In any event, the X server resources will be freed.
        
        QWidgetList tlw = QApplication::topLevelWidgets();
        
        for (int i = 0; i < tlw.count(); ++i)
        {
            PyObject *sw;
        
            if ((sw = sipGetPyObject(tlw.at(i), sipType_QWidget)) != NULL)
                sipTransferTo(sw, NULL);
        }
        
        
        // Handle all QObject instances that we want to make sure are deleted before
        // the QApplication is deleted.
        qtgui_delete_tracked();
#line 2763 "sipQtGuiQApplication.cpp"

    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQApplication *>(sipCppV);
    else
        delete reinterpret_cast<QApplication *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QApplication(sipSimpleWrapper *);}
static void dealloc_QApplication(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQApplication *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QApplication(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QApplication(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QApplication(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    sipQApplication *sipCpp = 0;

    if (!sipCpp)
    {
        int sipIsErr = 0;
        PyObject * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"T",&PyList_Type,&a0))
        {
#line 417 "sip/QtGui/qapplication.sip"
        // The Python interface is a list of argument strings that is modified.
        
        int argc;
        char **argv;
        
        // Convert the list.
        if ((argv = qpygui_ArgvToC(a0, argc)) == NULL)
            sipIsErr = 1;
        else
        {
            // Create it now the arguments are right.
            static int nargc;
            nargc = argc;
        
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQApplication(nargc, argv);
            Py_END_ALLOW_THREADS
        
            // Now modify the original list.
            qpygui_UpdatePyArgv(a0, argc, argv);
        }
#line 2823 "sipQtGuiQApplication.cpp"

            if (sipIsErr)
                return 0;

            sipCallHook("__pyQtQAppHook__");
        }
    }

    if (!sipCpp)
    {
        int sipIsErr = 0;
        PyObject * a0;
        bool a1;

        if (sipParseArgs(sipArgsParsed,sipArgs,"Tb",&PyList_Type,&a0,&a1))
        {
#line 442 "sip/QtGui/qapplication.sip"
        // The Python interface is a list of argument strings that is modified.
        
        int argc;
        char **argv;
        
        // Convert the list.
        if ((argv = qpygui_ArgvToC(a0, argc)) == NULL)
            sipIsErr = 1;
        else
        {
            // Create it now the arguments are right.
            static int nargc;
            nargc = argc;
        
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQApplication(nargc, argv, a1);
            Py_END_ALLOW_THREADS
        
            // Now modify the original list.
            qpygui_UpdatePyArgv(a0, argc, argv);
        }
#line 2862 "sipQtGuiQApplication.cpp"

            if (sipIsErr)
                return 0;

            sipCallHook("__pyQtQAppHook__");
        }
    }

    if (!sipCpp)
    {
        int sipIsErr = 0;
        PyObject * a0;
        QApplication::Type a1;

        if (sipParseArgs(sipArgsParsed,sipArgs,"TXE",&PyList_Type,&a0,sipType_QApplication_Type,&a1))
        {
#line 474 "sip/QtGui/qapplication.sip"
        // The Python interface is a list of argument strings that is modified.
        
        int argc;
        char **argv;
        
        // Convert the list.
        if ((argv = qpygui_ArgvToC(a0, argc)) == NULL)
            sipIsErr = 1;
        else
        {
            // Create it now the arguments are right.
            static int nargc;
            nargc = argc;
        
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQApplication(nargc, argv, a1);
            Py_END_ALLOW_THREADS
        
            // Now modify the original list.
            qpygui_UpdatePyArgv(a0, argc, argv);
        }
#line 2901 "sipQtGuiQApplication.cpp"

            if (sipIsErr)
                return 0;

            sipCallHook("__pyQtQAppHook__");
        }
    }

    if (!sipCpp)
    {
        Display * a0;
        Qt::HANDLE a1 = 0;
        Qt::HANDLE a2 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J8|mm",sipType_Display,&a0,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQApplication(a0,a1,a2);
            Py_END_ALLOW_THREADS

            sipCallHook("__pyQtQAppHook__");
        }
    }

    if (!sipCpp)
    {
        int sipIsErr = 0;
        Display * a0;
        PyObject * a1;
        Qt::HANDLE a2 = 0;
        Qt::HANDLE a3 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J8T|mm",sipType_Display,&a0,&PyList_Type,&a1,&a2,&a3))
        {
#line 503 "sip/QtGui/qapplication.sip"
        // The Python interface is a list of argument strings that is modified.
        
        int argc;
        char **argv;
        
        // Convert the list.
        if ((argv = qpygui_ArgvToC(a1, argc)) == NULL)
            sipIsErr = 1;
        else
        {
            // Create it now the arguments are right.
            static int nargc;
            nargc = argc;
        
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQApplication(a0, nargc, argv, a2, a3);
            Py_END_ALLOW_THREADS
        
            // Now modify the original list.
            qpygui_UpdatePyArgv(a1, argc, argv);
        }
#line 2958 "sipQtGuiQApplication.cpp"

            if (sipIsErr)
                return 0;

            sipCallHook("__pyQtQAppHook__");
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QApplication[] = {{26, 0, 1}};


static PyMethodDef methods_QApplication[] = {
    {SIP_MLNAME_CAST(sipName_aboutQt), meth_QApplication_aboutQt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_activeModalWidget), meth_QApplication_activeModalWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_activePopupWidget), meth_QApplication_activePopupWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_activeWindow), meth_QApplication_activeWindow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_alert), meth_QApplication_alert, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_allWidgets), meth_QApplication_allWidgets, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_beep), meth_QApplication_beep, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changeOverrideCursor), meth_QApplication_changeOverrideCursor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QApplication_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clipboard), meth_QApplication_clipboard, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_closeAllWindows), meth_QApplication_closeAllWindows, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_colorSpec), meth_QApplication_colorSpec, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_commitData), meth_QApplication_commitData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QApplication_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_cursorFlashTime), meth_QApplication_cursorFlashTime, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QApplication_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_desktop), meth_QApplication_desktop, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_desktopSettingsAware), meth_QApplication_desktopSettingsAware, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QApplication_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_doubleClickInterval), meth_QApplication_doubleClickInterval, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_event), meth_QApplication_event, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_exec_), meth_QApplication_exec_, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusWidget), meth_QApplication_focusWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_font), meth_QApplication_font, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fontMetrics), meth_QApplication_fontMetrics, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_globalStrut), meth_QApplication_globalStrut, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_inputContext), meth_QApplication_inputContext, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isEffectEnabled), meth_QApplication_isEffectEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isLeftToRight), meth_QApplication_isLeftToRight, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isRightToLeft), meth_QApplication_isRightToLeft, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isSessionRestored), meth_QApplication_isSessionRestored, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_keyboardInputDirection), meth_QApplication_keyboardInputDirection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_keyboardInputInterval), meth_QApplication_keyboardInputInterval, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_keyboardInputLocale), meth_QApplication_keyboardInputLocale, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_keyboardModifiers), meth_QApplication_keyboardModifiers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_layoutDirection), meth_QApplication_layoutDirection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseButtons), meth_QApplication_mouseButtons, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_notify), meth_QApplication_notify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_overrideCursor), meth_QApplication_overrideCursor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_palette), meth_QApplication_palette, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_quitOnLastWindowClosed), meth_QApplication_quitOnLastWindowClosed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QApplication_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_restoreOverrideCursor), meth_QApplication_restoreOverrideCursor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_saveState), meth_QApplication_saveState, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sessionId), meth_QApplication_sessionId, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sessionKey), meth_QApplication_sessionKey, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setActiveWindow), meth_QApplication_setActiveWindow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setColorSpec), meth_QApplication_setColorSpec, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCursorFlashTime), meth_QApplication_setCursorFlashTime, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDesktopSettingsAware), meth_QApplication_setDesktopSettingsAware, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDoubleClickInterval), meth_QApplication_setDoubleClickInterval, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setEffectEnabled), meth_QApplication_setEffectEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFont), meth_QApplication_setFont, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setGlobalStrut), meth_QApplication_setGlobalStrut, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setGraphicsSystem), meth_QApplication_setGraphicsSystem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setInputContext), meth_QApplication_setInputContext, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setKeyboardInputInterval), meth_QApplication_setKeyboardInputInterval, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setLayoutDirection), meth_QApplication_setLayoutDirection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setOverrideCursor), meth_QApplication_setOverrideCursor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPalette), meth_QApplication_setPalette, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setQuitOnLastWindowClosed), meth_QApplication_setQuitOnLastWindowClosed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setStartDragDistance), meth_QApplication_setStartDragDistance, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setStartDragTime), meth_QApplication_setStartDragTime, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setStyle), meth_QApplication_setStyle, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setStyleSheet), meth_QApplication_setStyleSheet, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setWheelScrollLines), meth_QApplication_setWheelScrollLines, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setWindowIcon), meth_QApplication_setWindowIcon, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_startDragDistance), meth_QApplication_startDragDistance, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_startDragTime), meth_QApplication_startDragTime, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_style), meth_QApplication_style, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_styleSheet), meth_QApplication_styleSheet, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_syncX), meth_QApplication_syncX, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QApplication_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_topLevelAt), meth_QApplication_topLevelAt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_topLevelWidgets), meth_QApplication_topLevelWidgets, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_type), meth_QApplication_type, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_wheelScrollLines), meth_QApplication_wheelScrollLines, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_widgetAt), meth_QApplication_widgetAt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_windowIcon), meth_QApplication_windowIcon, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_x11EventFilter), meth_QApplication_x11EventFilter, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_x11ProcessEvent), meth_QApplication_x11ProcessEvent, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QApplication[] = {
    {sipName_CustomColor, QApplication::CustomColor, 39},
    {sipName_GuiClient, QApplication::GuiClient, 40},
    {sipName_GuiServer, QApplication::GuiServer, 40},
    {sipName_ManyColor, QApplication::ManyColor, 39},
    {sipName_NormalColor, QApplication::NormalColor, 39},
    {sipName_Tty, QApplication::Tty, 40},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QApplication[] = {
    {"fontDatabaseChanged()", 0},
    {"saveStateRequest(QSessionManager&)", 0},
    {"lastWindowClosed()", 0},
    {"focusChanged(QWidget *,QWidget *)", 0},
    {"commitDataRequest(QSessionManager&)", 0},
    {0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QApplication = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QApplication,
        {0}
    },
    {
        sipNameNr_QApplication,
        {0, 0, 1},
        81, methods_QApplication,
        6, enummembers_QApplication,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QApplication,
    0,
    init_QApplication,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QApplication,
    0,
    0,
    0,
    release_QApplication,
    cast_QApplication,
    0,
    0,
    0
},
    &QApplication::staticMetaObject,
    0,
    pyqt4_signals_QApplication
};

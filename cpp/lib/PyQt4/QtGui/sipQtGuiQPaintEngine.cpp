/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:23 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 69 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 39 "sipQtGuiQPaintEngine.cpp"

#line 69 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 43 "sipQtGuiQPaintEngine.cpp"
#line 41 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 46 "sipQtGuiQPaintEngine.cpp"
#line 37 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 49 "sipQtGuiQPaintEngine.cpp"
#line 160 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 52 "sipQtGuiQPaintEngine.cpp"
#line 41 "sip/QtGui/qimage.sip"
#include <qimage.h>
#line 55 "sipQtGuiQPaintEngine.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 58 "sipQtGuiQPaintEngine.cpp"
#line 41 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 61 "sipQtGuiQPaintEngine.cpp"
#line 94 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 64 "sipQtGuiQPaintEngine.cpp"
#line 41 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 67 "sipQtGuiQPaintEngine.cpp"
#line 41 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 70 "sipQtGuiQPaintEngine.cpp"
#line 41 "sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 57 "sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 75 "sipQtGuiQPaintEngine.cpp"
#line 41 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 78 "sipQtGuiQPaintEngine.cpp"
#line 41 "sip/QtCore/qline.sip"
#include <qline.h>
#line 81 "sipQtGuiQPaintEngine.cpp"
#line 109 "sip/QtCore/qline.sip"
#include <qline.h>
#line 84 "sipQtGuiQPaintEngine.cpp"
#line 209 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 87 "sipQtGuiQPaintEngine.cpp"


class sipQPaintEngine : public QPaintEngine
{
public:
    sipQPaintEngine(QPaintEngine::PaintEngineFeatures);
    virtual ~sipQPaintEngine();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool begin(QPaintDevice *);
    bool end();
    void updateState(const QPaintEngineState&);
    void drawRects(const QRect *,int);
    void drawRects(const QRectF *,int);
    void drawLines(const QLine *,int);
    void drawLines(const QLineF *,int);
    void drawEllipse(const QRectF&);
    void drawEllipse(const QRect&);
    void drawPath(const QPainterPath&);
    void drawPoints(const QPointF *,int);
    void drawPoints(const QPoint *,int);
    void drawPolygon(const QPointF *,int,QPaintEngine::PolygonDrawMode);
    void drawPolygon(const QPoint *,int,QPaintEngine::PolygonDrawMode);
    void drawPixmap(const QRectF&,const QPixmap&,const QRectF&);
    void drawTextItem(const QPointF&,const QTextItem&);
    void drawTiledPixmap(const QRectF&,const QPixmap&,const QPointF&);
    void drawImage(const QRectF&,const QImage&,const QRectF&,Qt::ImageConversionFlags);
    QPaintEngine::Type type() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPaintEngine(const sipQPaintEngine &);
    sipQPaintEngine &operator = (const sipQPaintEngine &);

    char sipPyMethods[19];
};

sipQPaintEngine::sipQPaintEngine(QPaintEngine::PaintEngineFeatures a0): QPaintEngine(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPaintEngine::~sipQPaintEngine()
{
    sipCommonDtor(sipPySelf);
}

bool sipQPaintEngine::begin(QPaintDevice *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QPaintEngine,sipName_begin);

    if (!meth)
        return 0;

    extern bool sipVH_QtGui_144(sip_gilstate_t,PyObject *,bool*,QPaintDevice *);

    return sipVH_QtGui_144(sipGILState,meth,0,a0);
}

bool sipQPaintEngine::end()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,sipName_QPaintEngine,sipName_end);

    if (!meth)
        return 0;

    typedef bool (*sipVH_QtCore_1)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_1)(sipModuleAPI_QtGui_QtCore->em_virthandlers[1]))(sipGILState,meth,0);
}

void sipQPaintEngine::updateState(const QPaintEngineState& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,sipName_QPaintEngine,sipName_updateState);

    if (!meth)
        return;

    extern void sipVH_QtGui_143(sip_gilstate_t,PyObject *,bool*,const QPaintEngineState&);

    sipVH_QtGui_143(sipGILState,meth,0,a0);
}

void sipQPaintEngine::drawRects(const QRect *a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_drawRects);

    if (!meth)
    {
        QPaintEngine::drawRects(a0,a1);
        return;
    }

    extern void sipVH_QtGui_142(sip_gilstate_t,PyObject *,bool*,const QRect *,int);

    sipVH_QtGui_142(sipGILState,meth,0,a0,a1);
}

void sipQPaintEngine::drawRects(const QRectF *a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_drawRects);

    if (!meth)
    {
        QPaintEngine::drawRects(a0,a1);
        return;
    }

    extern void sipVH_QtGui_141(sip_gilstate_t,PyObject *,bool*,const QRectF *,int);

    sipVH_QtGui_141(sipGILState,meth,0,a0,a1);
}

void sipQPaintEngine::drawLines(const QLine *a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_drawLines);

    if (!meth)
    {
        QPaintEngine::drawLines(a0,a1);
        return;
    }

    extern void sipVH_QtGui_140(sip_gilstate_t,PyObject *,bool*,const QLine *,int);

    sipVH_QtGui_140(sipGILState,meth,0,a0,a1);
}

void sipQPaintEngine::drawLines(const QLineF *a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_drawLines);

    if (!meth)
    {
        QPaintEngine::drawLines(a0,a1);
        return;
    }

    extern void sipVH_QtGui_139(sip_gilstate_t,PyObject *,bool*,const QLineF *,int);

    sipVH_QtGui_139(sipGILState,meth,0,a0,a1);
}

void sipQPaintEngine::drawEllipse(const QRectF& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_drawEllipse);

    if (!meth)
    {
        QPaintEngine::drawEllipse(a0);
        return;
    }

    extern void sipVH_QtGui_138(sip_gilstate_t,PyObject *,bool*,const QRectF&);

    sipVH_QtGui_138(sipGILState,meth,0,a0);
}

void sipQPaintEngine::drawEllipse(const QRect& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_drawEllipse);

    if (!meth)
    {
        QPaintEngine::drawEllipse(a0);
        return;
    }

    extern void sipVH_QtGui_103(sip_gilstate_t,PyObject *,bool*,const QRect&);

    sipVH_QtGui_103(sipGILState,meth,0,a0);
}

void sipQPaintEngine::drawPath(const QPainterPath& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_drawPath);

    if (!meth)
    {
        QPaintEngine::drawPath(a0);
        return;
    }

    extern void sipVH_QtGui_137(sip_gilstate_t,PyObject *,bool*,const QPainterPath&);

    sipVH_QtGui_137(sipGILState,meth,0,a0);
}

void sipQPaintEngine::drawPoints(const QPointF *a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_drawPoints);

    if (!meth)
    {
        QPaintEngine::drawPoints(a0,a1);
        return;
    }

    extern void sipVH_QtGui_136(sip_gilstate_t,PyObject *,bool*,const QPointF *,int);

    sipVH_QtGui_136(sipGILState,meth,0,a0,a1);
}

void sipQPaintEngine::drawPoints(const QPoint *a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_drawPoints);

    if (!meth)
    {
        QPaintEngine::drawPoints(a0,a1);
        return;
    }

    extern void sipVH_QtGui_135(sip_gilstate_t,PyObject *,bool*,const QPoint *,int);

    sipVH_QtGui_135(sipGILState,meth,0,a0,a1);
}

void sipQPaintEngine::drawPolygon(const QPointF *a0,int a1,QPaintEngine::PolygonDrawMode a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_drawPolygon);

    if (!meth)
    {
        QPaintEngine::drawPolygon(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_134(sip_gilstate_t,PyObject *,bool*,const QPointF *,int,QPaintEngine::PolygonDrawMode);

    sipVH_QtGui_134(sipGILState,meth,0,a0,a1,a2);
}

void sipQPaintEngine::drawPolygon(const QPoint *a0,int a1,QPaintEngine::PolygonDrawMode a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_drawPolygon);

    if (!meth)
    {
        QPaintEngine::drawPolygon(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_133(sip_gilstate_t,PyObject *,bool*,const QPoint *,int,QPaintEngine::PolygonDrawMode);

    sipVH_QtGui_133(sipGILState,meth,0,a0,a1,a2);
}

void sipQPaintEngine::drawPixmap(const QRectF& a0,const QPixmap& a1,const QRectF& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,sipName_QPaintEngine,sipName_drawPixmap);

    if (!meth)
        return;

    extern void sipVH_QtGui_132(sip_gilstate_t,PyObject *,bool*,const QRectF&,const QPixmap&,const QRectF&);

    sipVH_QtGui_132(sipGILState,meth,0,a0,a1,a2);
}

void sipQPaintEngine::drawTextItem(const QPointF& a0,const QTextItem& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_drawTextItem);

    if (!meth)
    {
        QPaintEngine::drawTextItem(a0,a1);
        return;
    }

    extern void sipVH_QtGui_131(sip_gilstate_t,PyObject *,bool*,const QPointF&,const QTextItem&);

    sipVH_QtGui_131(sipGILState,meth,0,a0,a1);
}

void sipQPaintEngine::drawTiledPixmap(const QRectF& a0,const QPixmap& a1,const QPointF& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_drawTiledPixmap);

    if (!meth)
    {
        QPaintEngine::drawTiledPixmap(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_130(sip_gilstate_t,PyObject *,bool*,const QRectF&,const QPixmap&,const QPointF&);

    sipVH_QtGui_130(sipGILState,meth,0,a0,a1,a2);
}

void sipQPaintEngine::drawImage(const QRectF& a0,const QImage& a1,const QRectF& a2,Qt::ImageConversionFlags a3)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_drawImage);

    if (!meth)
    {
        QPaintEngine::drawImage(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtGui_129(sip_gilstate_t,PyObject *,bool*,const QRectF&,const QImage&,const QRectF&,Qt::ImageConversionFlags);

    sipVH_QtGui_129(sipGILState,meth,0,a0,a1,a2,a3);
}

QPaintEngine::Type sipQPaintEngine::type() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,sipName_QPaintEngine,sipName_type);

    if (!meth)
        return (QPaintEngine::Type)0;

    extern QPaintEngine::Type sipVH_QtGui_128(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_128(sipGILState,meth,0);
}


extern "C" {static PyObject *meth_QPaintEngine_isActive(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_isActive(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPaintEngine,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isActive();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPaintEngine,sipName_isActive);

    return NULL;
}


extern "C" {static PyObject *meth_QPaintEngine_setActive(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_setActive(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QPaintEngine,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setActive(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPaintEngine,sipName_setActive);

    return NULL;
}


extern "C" {static PyObject *meth_QPaintEngine_begin(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_begin(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        QPaintDevice * a0;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QPaintEngine,&sipCpp,sipType_QPaintDevice,&a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QPaintEngine, sipName_begin);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->begin(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPaintEngine,sipName_begin);

    return NULL;
}


extern "C" {static PyObject *meth_QPaintEngine_end(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_end(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPaintEngine,&sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QPaintEngine, sipName_end);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->end();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPaintEngine,sipName_end);

    return NULL;
}


extern "C" {static PyObject *meth_QPaintEngine_updateState(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_updateState(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QPaintEngineState * a0;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QPaintEngine,&sipCpp,sipType_QPaintEngineState,&a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QPaintEngine, sipName_updateState);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->updateState(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPaintEngine,sipName_updateState);

    return NULL;
}


extern "C" {static PyObject *meth_QPaintEngine_drawRects(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_drawRects(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRect * a0;
        SIP_SSIZE_T a1;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Br",&sipSelf,sipType_QPaintEngine,&sipCpp,sipType_QRect,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QPaintEngine::drawRects(a0,(int)a1) : sipCpp->drawRects(a0,(int)a1));
            Py_END_ALLOW_THREADS
            delete[] a0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRectF * a0;
        SIP_SSIZE_T a1;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Br",&sipSelf,sipType_QPaintEngine,&sipCpp,sipType_QRectF,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QPaintEngine::drawRects(a0,(int)a1) : sipCpp->drawRects(a0,(int)a1));
            Py_END_ALLOW_THREADS
            delete[] a0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPaintEngine,sipName_drawRects);

    return NULL;
}


extern "C" {static PyObject *meth_QPaintEngine_drawLines(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_drawLines(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QLine * a0;
        SIP_SSIZE_T a1;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Br",&sipSelf,sipType_QPaintEngine,&sipCpp,sipType_QLine,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QPaintEngine::drawLines(a0,(int)a1) : sipCpp->drawLines(a0,(int)a1));
            Py_END_ALLOW_THREADS
            delete[] a0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QLineF * a0;
        SIP_SSIZE_T a1;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Br",&sipSelf,sipType_QPaintEngine,&sipCpp,sipType_QLineF,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QPaintEngine::drawLines(a0,(int)a1) : sipCpp->drawLines(a0,(int)a1));
            Py_END_ALLOW_THREADS
            delete[] a0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPaintEngine,sipName_drawLines);

    return NULL;
}


extern "C" {static PyObject *meth_QPaintEngine_drawEllipse(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_drawEllipse(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRectF * a0;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QPaintEngine,&sipCpp,sipType_QRectF,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QPaintEngine::drawEllipse(*a0) : sipCpp->drawEllipse(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QRect * a0;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QPaintEngine,&sipCpp,sipType_QRect,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QPaintEngine::drawEllipse(*a0) : sipCpp->drawEllipse(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPaintEngine,sipName_drawEllipse);

    return NULL;
}


extern "C" {static PyObject *meth_QPaintEngine_drawPath(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_drawPath(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPainterPath * a0;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QPaintEngine,&sipCpp,sipType_QPainterPath,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QPaintEngine::drawPath(*a0) : sipCpp->drawPath(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPaintEngine,sipName_drawPath);

    return NULL;
}


extern "C" {static PyObject *meth_QPaintEngine_drawPoints(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_drawPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPointF * a0;
        SIP_SSIZE_T a1;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Br",&sipSelf,sipType_QPaintEngine,&sipCpp,sipType_QPointF,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QPaintEngine::drawPoints(a0,(int)a1) : sipCpp->drawPoints(a0,(int)a1));
            Py_END_ALLOW_THREADS
            delete[] a0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint * a0;
        SIP_SSIZE_T a1;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Br",&sipSelf,sipType_QPaintEngine,&sipCpp,sipType_QPoint,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QPaintEngine::drawPoints(a0,(int)a1) : sipCpp->drawPoints(a0,(int)a1));
            Py_END_ALLOW_THREADS
            delete[] a0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPaintEngine,sipName_drawPoints);

    return NULL;
}


extern "C" {static PyObject *meth_QPaintEngine_drawPolygon(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_drawPolygon(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPointF * a0;
        SIP_SSIZE_T a1;
        QPaintEngine::PolygonDrawMode a2;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BrE",&sipSelf,sipType_QPaintEngine,&sipCpp,sipType_QPointF,&a0,&a1,sipType_QPaintEngine_PolygonDrawMode,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QPaintEngine::drawPolygon(a0,(int)a1,a2) : sipCpp->drawPolygon(a0,(int)a1,a2));
            Py_END_ALLOW_THREADS
            delete[] a0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint * a0;
        SIP_SSIZE_T a1;
        QPaintEngine::PolygonDrawMode a2;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BrE",&sipSelf,sipType_QPaintEngine,&sipCpp,sipType_QPoint,&a0,&a1,sipType_QPaintEngine_PolygonDrawMode,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QPaintEngine::drawPolygon(a0,(int)a1,a2) : sipCpp->drawPolygon(a0,(int)a1,a2));
            Py_END_ALLOW_THREADS
            delete[] a0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPaintEngine,sipName_drawPolygon);

    return NULL;
}


extern "C" {static PyObject *meth_QPaintEngine_drawPixmap(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_drawPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QRectF * a0;
        const QPixmap * a1;
        const QRectF * a2;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9J9J9",&sipSelf,sipType_QPaintEngine,&sipCpp,sipType_QRectF,&a0,sipType_QPixmap,&a1,sipType_QRectF,&a2))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QPaintEngine, sipName_drawPixmap);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPixmap(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPaintEngine,sipName_drawPixmap);

    return NULL;
}


extern "C" {static PyObject *meth_QPaintEngine_drawTextItem(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_drawTextItem(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPointF * a0;
        const QTextItem * a1;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9J9",&sipSelf,sipType_QPaintEngine,&sipCpp,sipType_QPointF,&a0,sipType_QTextItem,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QPaintEngine::drawTextItem(*a0,*a1) : sipCpp->drawTextItem(*a0,*a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPaintEngine,sipName_drawTextItem);

    return NULL;
}


extern "C" {static PyObject *meth_QPaintEngine_drawTiledPixmap(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_drawTiledPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRectF * a0;
        const QPixmap * a1;
        const QPointF * a2;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9J9J9",&sipSelf,sipType_QPaintEngine,&sipCpp,sipType_QRectF,&a0,sipType_QPixmap,&a1,sipType_QPointF,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QPaintEngine::drawTiledPixmap(*a0,*a1,*a2) : sipCpp->drawTiledPixmap(*a0,*a1,*a2));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPaintEngine,sipName_drawTiledPixmap);

    return NULL;
}


extern "C" {static PyObject *meth_QPaintEngine_drawImage(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_drawImage(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRectF * a0;
        const QImage * a1;
        const QRectF * a2;
        Qt::ImageConversionFlags a3def = Qt::AutoColor;
        Qt::ImageConversionFlags * a3 = &a3def;
        int a3State = 0;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9J9J9|J1",&sipSelf,sipType_QPaintEngine,&sipCpp,sipType_QRectF,&a0,sipType_QImage,&a1,sipType_QRectF,&a2,sipType_Qt_ImageConversionFlags,&a3,&a3State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QPaintEngine::drawImage(*a0,*a1,*a2,*a3) : sipCpp->drawImage(*a0,*a1,*a2,*a3));
            Py_END_ALLOW_THREADS

            sipReleaseType(a3,sipType_Qt_ImageConversionFlags,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPaintEngine,sipName_drawImage);

    return NULL;
}


extern "C" {static PyObject *meth_QPaintEngine_setPaintDevice(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_setPaintDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPaintDevice * a0;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QPaintEngine,&sipCpp,sipType_QPaintDevice,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPaintDevice(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPaintEngine,sipName_setPaintDevice);

    return NULL;
}


extern "C" {static PyObject *meth_QPaintEngine_paintDevice(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_paintDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPaintEngine,&sipCpp))
        {
            QPaintDevice *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->paintDevice();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QPaintDevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPaintEngine,sipName_paintDevice);

    return NULL;
}


extern "C" {static PyObject *meth_QPaintEngine_type(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_type(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPaintEngine,&sipCpp))
        {
            QPaintEngine::Type sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QPaintEngine, sipName_type);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->type();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QPaintEngine_Type);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPaintEngine,sipName_type);

    return NULL;
}


extern "C" {static PyObject *meth_QPaintEngine_hasFeature(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_hasFeature(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPaintEngine::PaintEngineFeatures * a0;
        int a0State = 0;
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QPaintEngine,&sipCpp,sipType_QPaintEngine_PaintEngineFeatures,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasFeature(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QPaintEngine_PaintEngineFeatures,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPaintEngine,sipName_hasFeature);

    return NULL;
}


extern "C" {static PyObject *meth_QPaintEngine_painter(PyObject *, PyObject *);}
static PyObject *meth_QPaintEngine_painter(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPaintEngine *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPaintEngine,&sipCpp))
        {
            QPainter *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->painter();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QPainter,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPaintEngine,sipName_painter);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QPaintEngine(void *, const sipTypeDef *);}
static void *cast_QPaintEngine(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QPaintEngine)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPaintEngine(void *, int);}
static void release_QPaintEngine(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQPaintEngine *>(sipCppV);
    else
        delete reinterpret_cast<QPaintEngine *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QPaintEngine(sipSimpleWrapper *);}
static void dealloc_QPaintEngine(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQPaintEngine *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QPaintEngine(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QPaintEngine(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QPaintEngine(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    sipQPaintEngine *sipCpp = 0;

    if (!sipCpp)
    {
        QPaintEngine::PaintEngineFeatures a0def = 0;
        QPaintEngine::PaintEngineFeatures * a0 = &a0def;
        int a0State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"|J1",sipType_QPaintEngine_PaintEngineFeatures,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQPaintEngine(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QPaintEngine_PaintEngineFeatures,a0State);
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


static PyMethodDef methods_QPaintEngine[] = {
    {SIP_MLNAME_CAST(sipName_begin), meth_QPaintEngine_begin, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawEllipse), meth_QPaintEngine_drawEllipse, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawImage), meth_QPaintEngine_drawImage, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawLines), meth_QPaintEngine_drawLines, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawPath), meth_QPaintEngine_drawPath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawPixmap), meth_QPaintEngine_drawPixmap, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawPoints), meth_QPaintEngine_drawPoints, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawPolygon), meth_QPaintEngine_drawPolygon, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawRects), meth_QPaintEngine_drawRects, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawTextItem), meth_QPaintEngine_drawTextItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawTiledPixmap), meth_QPaintEngine_drawTiledPixmap, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_end), meth_QPaintEngine_end, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasFeature), meth_QPaintEngine_hasFeature, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isActive), meth_QPaintEngine_isActive, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paintDevice), meth_QPaintEngine_paintDevice, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_painter), meth_QPaintEngine_painter, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setActive), meth_QPaintEngine_setActive, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPaintDevice), meth_QPaintEngine_setPaintDevice, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_type), meth_QPaintEngine_type, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateState), meth_QPaintEngine_updateState, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QPaintEngine[] = {
    {sipName_AllDirty, QPaintEngine::AllDirty, 321},
    {sipName_AllFeatures, QPaintEngine::AllFeatures, 323},
    {sipName_AlphaBlend, QPaintEngine::AlphaBlend, 323},
    {sipName_Antialiasing, QPaintEngine::Antialiasing, 323},
    {sipName_BlendModes, QPaintEngine::BlendModes, 323},
    {sipName_BrushStroke, QPaintEngine::BrushStroke, 323},
    {sipName_ConicalGradientFill, QPaintEngine::ConicalGradientFill, 323},
    {sipName_ConstantOpacity, QPaintEngine::ConstantOpacity, 323},
    {sipName_ConvexMode, QPaintEngine::ConvexMode, 325},
    {sipName_CoreGraphics, QPaintEngine::CoreGraphics, 326},
    {sipName_Direct3D, QPaintEngine::Direct3D, 326},
    {sipName_DirtyBackground, QPaintEngine::DirtyBackground, 321},
    {sipName_DirtyBackgroundMode, QPaintEngine::DirtyBackgroundMode, 321},
    {sipName_DirtyBrush, QPaintEngine::DirtyBrush, 321},
    {sipName_DirtyBrushOrigin, QPaintEngine::DirtyBrushOrigin, 321},
    {sipName_DirtyClipEnabled, QPaintEngine::DirtyClipEnabled, 321},
    {sipName_DirtyClipPath, QPaintEngine::DirtyClipPath, 321},
    {sipName_DirtyClipRegion, QPaintEngine::DirtyClipRegion, 321},
    {sipName_DirtyCompositionMode, QPaintEngine::DirtyCompositionMode, 321},
    {sipName_DirtyFont, QPaintEngine::DirtyFont, 321},
    {sipName_DirtyHints, QPaintEngine::DirtyHints, 321},
    {sipName_DirtyOpacity, QPaintEngine::DirtyOpacity, 321},
    {sipName_DirtyPen, QPaintEngine::DirtyPen, 321},
    {sipName_DirtyTransform, QPaintEngine::DirtyTransform, 321},
    {sipName_LinearGradientFill, QPaintEngine::LinearGradientFill, 323},
    {sipName_MacPrinter, QPaintEngine::MacPrinter, 326},
    {sipName_MaskedBrush, QPaintEngine::MaskedBrush, 323},
    {sipName_MaxUser, QPaintEngine::MaxUser, 326},
    {sipName_ObjectBoundingModeGradients, QPaintEngine::ObjectBoundingModeGradients, 323},
    {sipName_OddEvenMode, QPaintEngine::OddEvenMode, 325},
    {sipName_OpenGL, QPaintEngine::OpenGL, 326},
    {sipName_OpenVG, QPaintEngine::OpenVG, 326},
    {sipName_PaintOutsidePaintEvent, QPaintEngine::PaintOutsidePaintEvent, 323},
    {sipName_PainterPaths, QPaintEngine::PainterPaths, 323},
    {sipName_PatternBrush, QPaintEngine::PatternBrush, 323},
    {sipName_PatternTransform, QPaintEngine::PatternTransform, 323},
    {sipName_Pdf, QPaintEngine::Pdf, 326},
    {sipName_PerspectiveTransform, QPaintEngine::PerspectiveTransform, 323},
    {sipName_Picture, QPaintEngine::Picture, 326},
    {sipName_PixmapTransform, QPaintEngine::PixmapTransform, 323},
    {sipName_PolylineMode, QPaintEngine::PolylineMode, 325},
    {sipName_PorterDuff, QPaintEngine::PorterDuff, 323},
    {sipName_PostScript, QPaintEngine::PostScript, 326},
    {sipName_PrimitiveTransform, QPaintEngine::PrimitiveTransform, 323},
    {sipName_QWindowSystem, QPaintEngine::QWindowSystem, 326},
    {sipName_QuickDraw, QPaintEngine::QuickDraw, 326},
    {sipName_RadialGradientFill, QPaintEngine::RadialGradientFill, 323},
    {sipName_Raster, QPaintEngine::Raster, 326},
    {sipName_RasterOpModes, QPaintEngine::RasterOpModes, 323},
    {sipName_SVG, QPaintEngine::SVG, 326},
    {sipName_User, QPaintEngine::User, 326},
    {sipName_WindingMode, QPaintEngine::WindingMode, 325},
    {sipName_Windows, QPaintEngine::Windows, 326},
    {sipName_X11, QPaintEngine::X11, 326},
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QPaintEngine = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_QPaintEngine,
        {0}
    },
    {
        sipNameNr_QPaintEngine,
        {0, 0, 1},
        20, methods_QPaintEngine,
        54, enummembers_QPaintEngine,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QPaintEngine,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPaintEngine,
    0,
    0,
    0,
    release_QPaintEngine,
    cast_QPaintEngine,
    0,
    0,
    0
},
    0,
    0,
    0
};

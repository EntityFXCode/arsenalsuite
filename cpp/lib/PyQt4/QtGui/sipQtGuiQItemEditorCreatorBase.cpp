/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:24 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 37 "sip/QtGui/qitemeditorfactory.sip"
#include <qitemeditorfactory.h>
#line 39 "sipQtGuiQItemEditorCreatorBase.cpp"

#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 43 "sipQtGuiQItemEditorCreatorBase.cpp"
#line 41 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 46 "sipQtGuiQItemEditorCreatorBase.cpp"


class sipQItemEditorCreatorBase : public QItemEditorCreatorBase
{
public:
    sipQItemEditorCreatorBase();
    sipQItemEditorCreatorBase(const QItemEditorCreatorBase&);
    virtual ~sipQItemEditorCreatorBase();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QWidget * createWidget(QWidget *) const;
    QByteArray valuePropertyName() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQItemEditorCreatorBase(const sipQItemEditorCreatorBase &);
    sipQItemEditorCreatorBase &operator = (const sipQItemEditorCreatorBase &);

    char sipPyMethods[2];
};

sipQItemEditorCreatorBase::sipQItemEditorCreatorBase(): QItemEditorCreatorBase(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQItemEditorCreatorBase::sipQItemEditorCreatorBase(const QItemEditorCreatorBase& a0): QItemEditorCreatorBase(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQItemEditorCreatorBase::~sipQItemEditorCreatorBase()
{
    sipCommonDtor(sipPySelf);
}

QWidget * sipQItemEditorCreatorBase::createWidget(QWidget *a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,sipName_QItemEditorCreatorBase,sipName_createWidget);

    if (!meth)
        return 0;

    extern QWidget * sipVH_QtGui_9(sip_gilstate_t,PyObject *,bool*,QWidget *);

    return sipVH_QtGui_9(sipGILState,meth,0,a0);
}

QByteArray sipQItemEditorCreatorBase::valuePropertyName() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,sipName_QItemEditorCreatorBase,sipName_valuePropertyName);

    if (!meth)
        return QByteArray();

    typedef QByteArray (*sipVH_QtCore_9)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_9)(sipModuleAPI_QtGui_QtCore->em_virthandlers[9]))(sipGILState,meth,0);
}


extern "C" {static PyObject *meth_QItemEditorCreatorBase_createWidget(PyObject *, PyObject *);}
static PyObject *meth_QItemEditorCreatorBase_createWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        QWidget * a0;
        sipWrapper *sipOwner = 0;
        QItemEditorCreatorBase *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJH",&sipSelf,sipType_QItemEditorCreatorBase,&sipCpp,sipType_QWidget,&a0,&sipOwner))
        {
            QWidget *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QItemEditorCreatorBase, sipName_createWidget);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->createWidget(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QWidget,(PyObject *)sipOwner);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemEditorCreatorBase,sipName_createWidget);

    return NULL;
}


extern "C" {static PyObject *meth_QItemEditorCreatorBase_valuePropertyName(PyObject *, PyObject *);}
static PyObject *meth_QItemEditorCreatorBase_valuePropertyName(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        QItemEditorCreatorBase *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QItemEditorCreatorBase,&sipCpp))
        {
            QByteArray *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QItemEditorCreatorBase, sipName_valuePropertyName);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->valuePropertyName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemEditorCreatorBase,sipName_valuePropertyName);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QItemEditorCreatorBase(void *, const sipTypeDef *);}
static void *cast_QItemEditorCreatorBase(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QItemEditorCreatorBase)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QItemEditorCreatorBase(void *, int);}
static void release_QItemEditorCreatorBase(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQItemEditorCreatorBase *>(sipCppV);
    else
        delete reinterpret_cast<QItemEditorCreatorBase *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QItemEditorCreatorBase(sipSimpleWrapper *);}
static void dealloc_QItemEditorCreatorBase(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQItemEditorCreatorBase *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QItemEditorCreatorBase(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QItemEditorCreatorBase(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QItemEditorCreatorBase(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    sipQItemEditorCreatorBase *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQItemEditorCreatorBase();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QItemEditorCreatorBase * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QItemEditorCreatorBase,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQItemEditorCreatorBase(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


static PyMethodDef methods_QItemEditorCreatorBase[] = {
    {SIP_MLNAME_CAST(sipName_createWidget), meth_QItemEditorCreatorBase_createWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_valuePropertyName), meth_QItemEditorCreatorBase_valuePropertyName, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QItemEditorCreatorBase = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_QItemEditorCreatorBase,
        {0}
    },
    {
        sipNameNr_QItemEditorCreatorBase,
        {0, 0, 1},
        2, methods_QItemEditorCreatorBase,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    -1,
    0,
    0,
    init_QItemEditorCreatorBase,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QItemEditorCreatorBase,
    0,
    0,
    0,
    release_QItemEditorCreatorBase,
    cast_QItemEditorCreatorBase,
    0,
    0,
    0
},
    0,
    0,
    0
};

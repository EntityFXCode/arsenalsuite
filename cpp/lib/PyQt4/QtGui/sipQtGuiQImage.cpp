/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:24 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 41 "sip/QtGui/qimage.sip"
#include <qimage.h>
#line 39 "sipQtGuiQImage.cpp"

#line 41 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 43 "sipQtGuiQImage.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 46 "sipQtGuiQImage.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 49 "sipQtGuiQImage.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 52 "sipQtGuiQImage.cpp"
#line 37 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 55 "sipQtGuiQImage.cpp"
#line 41 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 58 "sipQtGuiQImage.cpp"
#line 41 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 61 "sipQtGuiQImage.cpp"
#line 69 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 64 "sipQtGuiQImage.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 67 "sipQtGuiQImage.cpp"
#line 41 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 70 "sipQtGuiQImage.cpp"
#line 41 "sip/QtGui/qmatrix.sip"
#include <qmatrix.h>
#line 73 "sipQtGuiQImage.cpp"
#line 45 "sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 76 "sipQtGuiQImage.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 79 "sipQtGuiQImage.cpp"
#line 111 "sip/QtCore/qvector.sip"
#include <qvector.h>
#line 82 "sipQtGuiQImage.cpp"
#line 41 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 85 "sipQtGuiQImage.cpp"


class sipQImage : public QImage
{
public:
    sipQImage();
    sipQImage(const QSize&,QImage::Format);
    sipQImage(int,int,QImage::Format);
    sipQImage(const uchar *,int,int,QImage::Format);
    sipQImage(uchar *,int,int,QImage::Format);
    sipQImage(const uchar *,int,int,int,QImage::Format);
    sipQImage(uchar *,int,int,int,QImage::Format);
    sipQImage(const char **);
    sipQImage(const QString&,const char *);
    sipQImage(const QImage&);
    virtual ~sipQImage();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtectVirt_metric(bool,QPaintDevice::PaintDeviceMetric) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    int devType() const;
    QPaintEngine * paintEngine() const;
    int metric(QPaintDevice::PaintDeviceMetric) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQImage(const sipQImage &);
    sipQImage &operator = (const sipQImage &);

    char sipPyMethods[3];
};

sipQImage::sipQImage(): QImage(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImage::sipQImage(const QSize& a0,QImage::Format a1): QImage(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImage::sipQImage(int a0,int a1,QImage::Format a2): QImage(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImage::sipQImage(const uchar *a0,int a1,int a2,QImage::Format a3): QImage(a0,a1,a2,a3), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImage::sipQImage(uchar *a0,int a1,int a2,QImage::Format a3): QImage(a0,a1,a2,a3), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImage::sipQImage(const uchar *a0,int a1,int a2,int a3,QImage::Format a4): QImage(a0,a1,a2,a3,a4), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImage::sipQImage(uchar *a0,int a1,int a2,int a3,QImage::Format a4): QImage(a0,a1,a2,a3,a4), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImage::sipQImage(const char **a0): QImage(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImage::sipQImage(const QString& a0,const char *a1): QImage(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImage::sipQImage(const QImage& a0): QImage(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQImage::~sipQImage()
{
    sipCommonDtor(sipPySelf);
}

int sipQImage::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_devType);

    if (!meth)
        return QImage::devType();

    typedef int (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtGui_QtCore->em_virthandlers[7]))(sipGILState,meth,0);
}

QPaintEngine * sipQImage::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_paintEngine);

    if (!meth)
        return QImage::paintEngine();

    extern QPaintEngine * sipVH_QtGui_28(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_28(sipGILState,meth,0);
}

int sipQImage::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_metric);

    if (!meth)
        return QImage::metric(a0);

    extern int sipVH_QtGui_15(sip_gilstate_t,PyObject *,bool*,QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_15(sipGILState,meth,0,a0);
}

int sipQImage::sipProtectVirt_metric(bool sipSelfWasArg,QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ? QImage::metric(a0) : metric(a0));
}


extern "C" {static PyObject *meth_QImage_isNull(PyObject *, PyObject *);}
static PyObject *meth_QImage_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImage,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNull();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_isNull);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_devType(PyObject *, PyObject *);}
static PyObject *meth_QImage_devType(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImage,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QImage::devType() : sipCpp->devType());
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_devType);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_detach(PyObject *, PyObject *);}
static PyObject *meth_QImage_detach(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImage,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->detach();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_detach);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_isDetached(PyObject *, PyObject *);}
static PyObject *meth_QImage_isDetached(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImage,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isDetached();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_isDetached);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_copy(PyObject *, PyObject *);}
static PyObject *meth_QImage_copy(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QRect& a0def = QRect();
        const QRect * a0 = &a0def;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|J9",&sipSelf,sipType_QImage,&sipCpp,sipType_QRect,&a0))
        {
            QImage *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QImage(sipCpp->copy(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Biiii",&sipSelf,sipType_QImage,&sipCpp,&a0,&a1,&a2,&a3))
        {
            QImage *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QImage(sipCpp->copy(a0,a1,a2,a3));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_copy);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_format(PyObject *, PyObject *);}
static PyObject *meth_QImage_format(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImage,&sipCpp))
        {
            QImage::Format sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->format();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QImage_Format);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_format);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_convertToFormat(PyObject *, PyObject *);}
static PyObject *meth_QImage_convertToFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImage::Format a0;
        Qt::ImageConversionFlags a1def = Qt::AutoColor;
        Qt::ImageConversionFlags * a1 = &a1def;
        int a1State = 0;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE|J1",&sipSelf,sipType_QImage,&sipCpp,sipType_QImage_Format,&a0,sipType_Qt_ImageConversionFlags,&a1,&a1State))
        {
            QImage *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QImage(sipCpp->convertToFormat(a0,*a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_Qt_ImageConversionFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    {
        QImage::Format a0;
        const QVector<unsigned> * a1;
        int a1State = 0;
        Qt::ImageConversionFlags a2def = Qt::AutoColor;
        Qt::ImageConversionFlags * a2 = &a2def;
        int a2State = 0;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BEJ1|J1",&sipSelf,sipType_QImage,&sipCpp,sipType_QImage_Format,&a0,sipType_QVector_1900,&a1,&a1State,sipType_Qt_ImageConversionFlags,&a2,&a2State))
        {
            QImage *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QImage(sipCpp->convertToFormat(a0,*a1,*a2));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QVector<unsigned> *>(a1),sipType_QVector_1900,a1State);
            sipReleaseType(a2,sipType_Qt_ImageConversionFlags,a2State);

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_convertToFormat);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_width(PyObject *, PyObject *);}
static PyObject *meth_QImage_width(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImage,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->width();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_width);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_height(PyObject *, PyObject *);}
static PyObject *meth_QImage_height(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImage,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->height();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_height);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_size(PyObject *, PyObject *);}
static PyObject *meth_QImage_size(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImage,&sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->size());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_size);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_rect(PyObject *, PyObject *);}
static PyObject *meth_QImage_rect(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImage,&sipCpp))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->rect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_rect);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_depth(PyObject *, PyObject *);}
static PyObject *meth_QImage_depth(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImage,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->depth();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_depth);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_numColors(PyObject *, PyObject *);}
static PyObject *meth_QImage_numColors(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImage,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->numColors();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_numColors);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_color(PyObject *, PyObject *);}
static PyObject *meth_QImage_color(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QImage,&sipCpp,&a0))
        {
            QRgb sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->color(a0);
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_color);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_setColor(PyObject *, PyObject *);}
static PyObject *meth_QImage_setColor(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QRgb a1;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Biu",&sipSelf,sipType_QImage,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setColor(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_setColor);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_setNumColors(PyObject *, PyObject *);}
static PyObject *meth_QImage_setNumColors(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QImage,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNumColors(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_setNumColors);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_allGray(PyObject *, PyObject *);}
static PyObject *meth_QImage_allGray(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImage,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->allGray();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_allGray);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_isGrayscale(PyObject *, PyObject *);}
static PyObject *meth_QImage_isGrayscale(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImage,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isGrayscale();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_isGrayscale);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_bits(PyObject *, PyObject *);}
static PyObject *meth_QImage_bits(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImage,&sipCpp))
        {
            void *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->bits();
            Py_END_ALLOW_THREADS

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_bits);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_numBytes(PyObject *, PyObject *);}
static PyObject *meth_QImage_numBytes(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImage,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->numBytes();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_numBytes);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_scanLine(PyObject *, PyObject *);}
static PyObject *meth_QImage_scanLine(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QImage,&sipCpp,&a0))
        {
            void *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->scanLine(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromVoidPtr(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_scanLine);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_bytesPerLine(PyObject *, PyObject *);}
static PyObject *meth_QImage_bytesPerLine(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImage,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->bytesPerLine();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_bytesPerLine);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_valid(PyObject *, PyObject *);}
static PyObject *meth_QImage_valid(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPoint * a0;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QImage,&sipCpp,sipType_QPoint,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->valid(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii",&sipSelf,sipType_QImage,&sipCpp,&a0,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->valid(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_valid);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_pixelIndex(PyObject *, PyObject *);}
static PyObject *meth_QImage_pixelIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPoint * a0;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QImage,&sipCpp,sipType_QPoint,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->pixelIndex(*a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii",&sipSelf,sipType_QImage,&sipCpp,&a0,&a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->pixelIndex(a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_pixelIndex);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_pixel(PyObject *, PyObject *);}
static PyObject *meth_QImage_pixel(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPoint * a0;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QImage,&sipCpp,sipType_QPoint,&a0))
        {
            QRgb sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->pixel(*a0);
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii",&sipSelf,sipType_QImage,&sipCpp,&a0,&a1))
        {
            QRgb sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->pixel(a0,a1);
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_pixel);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_setPixel(PyObject *, PyObject *);}
static PyObject *meth_QImage_setPixel(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPoint * a0;
        uint a1;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9u",&sipSelf,sipType_QImage,&sipCpp,sipType_QPoint,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPixel(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        uint a2;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Biiu",&sipSelf,sipType_QImage,&sipCpp,&a0,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPixel(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_setPixel);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_colorTable(PyObject *, PyObject *);}
static PyObject *meth_QImage_colorTable(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImage,&sipCpp))
        {
            QVector<unsigned> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVector<unsigned>(sipCpp->colorTable());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVector_1900,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_colorTable);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_setColorTable(PyObject *, PyObject *);}
static PyObject *meth_QImage_setColorTable(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QVector<unsigned> * a0;
        int a0State = 0;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QImage,&sipCpp,sipType_QVector_1900,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setColorTable(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QVector<unsigned> *>(a0),sipType_QVector_1900,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_setColorTable);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_fill(PyObject *, PyObject *);}
static PyObject *meth_QImage_fill(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        uint a0;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bu",&sipSelf,sipType_QImage,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->fill(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_fill);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_hasAlphaChannel(PyObject *, PyObject *);}
static PyObject *meth_QImage_hasAlphaChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImage,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasAlphaChannel();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_hasAlphaChannel);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_setAlphaChannel(PyObject *, PyObject *);}
static PyObject *meth_QImage_setAlphaChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QImage * a0;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QImage,&sipCpp,sipType_QImage,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAlphaChannel(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_setAlphaChannel);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_alphaChannel(PyObject *, PyObject *);}
static PyObject *meth_QImage_alphaChannel(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImage,&sipCpp))
        {
            QImage *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QImage(sipCpp->alphaChannel());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_alphaChannel);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_createAlphaMask(PyObject *, PyObject *);}
static PyObject *meth_QImage_createAlphaMask(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Qt::ImageConversionFlags a0def = Qt::AutoColor;
        Qt::ImageConversionFlags * a0 = &a0def;
        int a0State = 0;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|J1",&sipSelf,sipType_QImage,&sipCpp,sipType_Qt_ImageConversionFlags,&a0,&a0State))
        {
            QImage *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QImage(sipCpp->createAlphaMask(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_Qt_ImageConversionFlags,a0State);

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_createAlphaMask);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_createHeuristicMask(PyObject *, PyObject *);}
static PyObject *meth_QImage_createHeuristicMask(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0 = 1;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|b",&sipSelf,sipType_QImage,&sipCpp,&a0))
        {
            QImage *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QImage(sipCpp->createHeuristicMask(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_createHeuristicMask);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_scaled(PyObject *, PyObject *);}
static PyObject *meth_QImage_scaled(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        Qt::AspectRatioMode a2 = Qt::IgnoreAspectRatio;
        Qt::TransformationMode a3 = Qt::FastTransformation;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii|EE",&sipSelf,sipType_QImage,&sipCpp,&a0,&a1,sipType_Qt_AspectRatioMode,&a2,sipType_Qt_TransformationMode,&a3))
        {
            QImage *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QImage(sipCpp->scaled(a0,a1,a2,a3));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    {
        const QSize * a0;
        Qt::AspectRatioMode a1 = Qt::IgnoreAspectRatio;
        Qt::TransformationMode a2 = Qt::FastTransformation;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9|EE",&sipSelf,sipType_QImage,&sipCpp,sipType_QSize,&a0,sipType_Qt_AspectRatioMode,&a1,sipType_Qt_TransformationMode,&a2))
        {
            QImage *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QImage(sipCpp->scaled(*a0,a1,a2));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_scaled);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_scaledToWidth(PyObject *, PyObject *);}
static PyObject *meth_QImage_scaledToWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        Qt::TransformationMode a1 = Qt::FastTransformation;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi|E",&sipSelf,sipType_QImage,&sipCpp,&a0,sipType_Qt_TransformationMode,&a1))
        {
            QImage *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QImage(sipCpp->scaledToWidth(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_scaledToWidth);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_scaledToHeight(PyObject *, PyObject *);}
static PyObject *meth_QImage_scaledToHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        Qt::TransformationMode a1 = Qt::FastTransformation;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi|E",&sipSelf,sipType_QImage,&sipCpp,&a0,sipType_Qt_TransformationMode,&a1))
        {
            QImage *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QImage(sipCpp->scaledToHeight(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_scaledToHeight);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_transformed(PyObject *, PyObject *);}
static PyObject *meth_QImage_transformed(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QMatrix * a0;
        Qt::TransformationMode a1 = Qt::FastTransformation;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9|E",&sipSelf,sipType_QImage,&sipCpp,sipType_QMatrix,&a0,sipType_Qt_TransformationMode,&a1))
        {
            QImage *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QImage(sipCpp->transformed(*a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    {
        const QTransform * a0;
        Qt::TransformationMode a1 = Qt::FastTransformation;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9|E",&sipSelf,sipType_QImage,&sipCpp,sipType_QTransform,&a0,sipType_Qt_TransformationMode,&a1))
        {
            QImage *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QImage(sipCpp->transformed(*a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_transformed);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_trueMatrix(PyObject *, PyObject *);}
static PyObject *meth_QImage_trueMatrix(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QMatrix * a0;
        int a1;
        int a2;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9ii",sipType_QMatrix,&a0,&a1,&a2))
        {
            QMatrix *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMatrix(QImage::trueMatrix(*a0,a1,a2));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMatrix,NULL);
        }
    }

    {
        const QTransform * a0;
        int a1;
        int a2;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9ii",sipType_QTransform,&a0,&a1,&a2))
        {
            QTransform *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTransform(QImage::trueMatrix(*a0,a1,a2));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTransform,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_trueMatrix);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_mirrored(PyObject *, PyObject *);}
static PyObject *meth_QImage_mirrored(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0 = 0;
        bool a1 = 1;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|bb",&sipSelf,sipType_QImage,&sipCpp,&a0,&a1))
        {
            QImage *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QImage(sipCpp->mirrored(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_mirrored);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_rgbSwapped(PyObject *, PyObject *);}
static PyObject *meth_QImage_rgbSwapped(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImage,&sipCpp))
        {
            QImage *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QImage(sipCpp->rgbSwapped());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_rgbSwapped);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_invertPixels(PyObject *, PyObject *);}
static PyObject *meth_QImage_invertPixels(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImage::InvertMode a0 = QImage::InvertRgb;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|E",&sipSelf,sipType_QImage,&sipCpp,sipType_QImage_InvertMode,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->invertPixels(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_invertPixels);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_load(PyObject *, PyObject *);}
static PyObject *meth_QImage_load(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QIODevice * a0;
        const char * a1;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8s",&sipSelf,sipType_QImage,&sipCpp,sipType_QIODevice,&a0,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->load(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const char * a1 = 0;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|s",&sipSelf,sipType_QImage,&sipCpp,sipType_QString,&a0,&a0State,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->load(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_load);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_loadFromData(PyObject *, PyObject *);}
static PyObject *meth_QImage_loadFromData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const uchar * a0;
        SIP_SSIZE_T a1;
        const char * a2 = 0;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bk|s",&sipSelf,sipType_QImage,&sipCpp,&a0,&a1,&a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->loadFromData(a0,(int)a1,a2);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QByteArray * a0;
        int a0State = 0;
        const char * a1 = 0;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|s",&sipSelf,sipType_QImage,&sipCpp,sipType_QByteArray,&a0,&a0State,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->loadFromData(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_loadFromData);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_save(PyObject *, PyObject *);}
static PyObject *meth_QImage_save(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        const char * a1 = 0;
        int a2 = -1;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|si",&sipSelf,sipType_QImage,&sipCpp,sipType_QString,&a0,&a0State,&a1,&a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->save(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        QIODevice * a0;
        const char * a1 = 0;
        int a2 = -1;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8|si",&sipSelf,sipType_QImage,&sipCpp,sipType_QIODevice,&a0,&a1,&a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->save(a0,a1,a2);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_save);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_fromData(PyObject *, PyObject *);}
static PyObject *meth_QImage_fromData(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const uchar * a0;
        SIP_SSIZE_T a1;
        const char * a2 = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"k|s",&a0,&a1,&a2))
        {
            QImage *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QImage(QImage::fromData(a0,(int)a1,a2));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    {
        const QByteArray * a0;
        int a0State = 0;
        const char * a1 = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1|s",sipType_QByteArray,&a0,&a0State,&a1))
        {
            QImage *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QImage(QImage::fromData(*a0,a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_fromData);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_serialNumber(PyObject *, PyObject *);}
static PyObject *meth_QImage_serialNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImage,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->serialNumber();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_serialNumber);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_paintEngine(PyObject *, PyObject *);}
static PyObject *meth_QImage_paintEngine(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImage,&sipCpp))
        {
            QPaintEngine *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QImage::paintEngine() : sipCpp->paintEngine());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QPaintEngine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_paintEngine);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_dotsPerMeterX(PyObject *, PyObject *);}
static PyObject *meth_QImage_dotsPerMeterX(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImage,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->dotsPerMeterX();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_dotsPerMeterX);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_dotsPerMeterY(PyObject *, PyObject *);}
static PyObject *meth_QImage_dotsPerMeterY(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImage,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->dotsPerMeterY();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_dotsPerMeterY);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_setDotsPerMeterX(PyObject *, PyObject *);}
static PyObject *meth_QImage_setDotsPerMeterX(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QImage,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDotsPerMeterX(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_setDotsPerMeterX);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_setDotsPerMeterY(PyObject *, PyObject *);}
static PyObject *meth_QImage_setDotsPerMeterY(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QImage,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDotsPerMeterY(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_setDotsPerMeterY);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_offset(PyObject *, PyObject *);}
static PyObject *meth_QImage_offset(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImage,&sipCpp))
        {
            QPoint *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint(sipCpp->offset());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_offset);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_setOffset(PyObject *, PyObject *);}
static PyObject *meth_QImage_setOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPoint * a0;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QImage,&sipCpp,sipType_QPoint,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOffset(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_setOffset);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_textKeys(PyObject *, PyObject *);}
static PyObject *meth_QImage_textKeys(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImage,&sipCpp))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->textKeys());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_textKeys);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_text(PyObject *, PyObject *);}
static PyObject *meth_QImage_text(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString& a0def = QString();
        const QString * a0 = &a0def;
        int a0State = 0;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|J1",&sipSelf,sipType_QImage,&sipCpp,sipType_QString,&a0,&a0State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->text(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_text);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_setText(PyObject *, PyObject *);}
static PyObject *meth_QImage_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1",&sipSelf,sipType_QImage,&sipCpp,sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setText(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_setText);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_metric(PyObject *, PyObject *);}
static PyObject *meth_QImage_metric(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        sipQImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pE",&sipSelf,sipType_QImage,&sipCpp,sipType_QPaintDevice_PaintDeviceMetric,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_metric);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_createMaskFromColor(PyObject *, PyObject *);}
static PyObject *meth_QImage_createMaskFromColor(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QRgb a0;
        Qt::MaskMode a1 = Qt::MaskInColor;
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bu|E",&sipSelf,sipType_QImage,&sipCpp,&a0,sipType_Qt_MaskMode,&a1))
        {
            QImage *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QImage(sipCpp->createMaskFromColor(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_createMaskFromColor);

    return NULL;
}


extern "C" {static PyObject *meth_QImage_cacheKey(PyObject *, PyObject *);}
static PyObject *meth_QImage_cacheKey(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImage,&sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cacheKey();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImage,sipName_cacheKey);

    return NULL;
}


extern "C" {static PyObject *slot_QImage___ne__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QImage___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QImage *sipCpp = reinterpret_cast<QImage *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QImage));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QImage * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QImage,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QImage::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtGui,ne_slot,sipType_QImage,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QImage___eq__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QImage___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QImage *sipCpp = reinterpret_cast<QImage *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QImage));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QImage * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QImage,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QImage::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtGui,eq_slot,sipType_QImage,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QImage(void *, const sipTypeDef *);}
static void *cast_QImage(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QImage)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QPaintDevice)->ctd_cast((QPaintDevice *)(QImage *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QImage(void *, int);}
static void release_QImage(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQImage *>(sipCppV);
    else
        delete reinterpret_cast<QImage *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QImage(void *, SIP_SSIZE_T, const void *);}
static void assign_QImage(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QImage *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QImage *>(sipSrc);
}


extern "C" {static void *array_QImage(SIP_SSIZE_T);}
static void *array_QImage(SIP_SSIZE_T sipNrElem)
{
    return new QImage[sipNrElem];
}


extern "C" {static void *copy_QImage(const void *, SIP_SSIZE_T);}
static void *copy_QImage(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QImage(reinterpret_cast<const QImage *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QImage(sipSimpleWrapper *);}
static void dealloc_QImage(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQImage *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QImage(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QImage(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QImage(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    sipQImage *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQImage();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QSize * a0;
        QImage::Format a1;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9E",sipType_QSize,&a0,sipType_QImage_Format,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQImage(*a0,a1);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        int a0;
        int a1;
        QImage::Format a2;

        if (sipParseArgs(sipArgsParsed,sipArgs,"iiE",&a0,&a1,sipType_QImage_Format,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQImage(a0,a1,a2);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const uchar * a0;
        PyObject *a0Keep;
        int a1;
        int a2;
        QImage::Format a3;

        if (sipParseArgs(sipArgsParsed,sipArgs,"@siiE",&a0Keep,&a0,&a1,&a2,sipType_QImage_Format,&a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQImage(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        void * a0;
        int a1;
        int a2;
        QImage::Format a3;

        if (sipParseArgs(sipArgsParsed,sipArgs,"viiE",&a0,&a1,&a2,sipType_QImage_Format,&a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQImage(reinterpret_cast<uchar *>(a0),a1,a2,a3);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const uchar * a0;
        PyObject *a0Keep;
        int a1;
        int a2;
        int a3;
        QImage::Format a4;

        if (sipParseArgs(sipArgsParsed,sipArgs,"@siiiE",&a0Keep,&a0,&a1,&a2,&a3,sipType_QImage_Format,&a4))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQImage(a0,a1,a2,a3,a4);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        void * a0;
        int a1;
        int a2;
        int a3;
        QImage::Format a4;

        if (sipParseArgs(sipArgsParsed,sipArgs,"viiiE",&a0,&a1,&a2,&a3,sipType_QImage_Format,&a4))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQImage(reinterpret_cast<uchar *>(a0),a1,a2,a3,a4);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        int sipIsErr = 0;
        PyObject * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"T",&PyList_Type,&a0))
        {
#line 109 "sip/QtGui/qimage.sip"
        // The Python interface is a list of strings that make up the image.
        
        const char **str = QtGui_ListToArray(a0);
        
        if (str)
        {
            sipCpp = new sipQImage(str);
            QtGui_DeleteArray(str);
        }
        else
            sipIsErr = 1;
#line 2409 "sipQtGuiQImage.cpp"

            if (sipIsErr)
                return 0;
        }
    }

    if (!sipCpp)
    {
        const QString * a0;
        int a0State = 0;
        const char * a1 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1|s",sipType_QString,&a0,&a0State,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQImage(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
        }
    }

    if (!sipCpp)
    {
        const QImage * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QImage,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQImage(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QVariant * a0;
        int a0State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1",sipType_QVariant,&a0,&a0State))
        {
#line 126 "sip/QtGui/qimage.sip"
        sipCpp = new sipQImage(qVariantValue<QImage>(*a0));
#line 2453 "sipQtGuiQImage.cpp"

            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QImage[] = {{318, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_QImage[] = {
    {(void *)slot_QImage___ne__, ne_slot},
    {(void *)slot_QImage___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QImage[] = {
    {SIP_MLNAME_CAST(sipName_allGray), meth_QImage_allGray, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_alphaChannel), meth_QImage_alphaChannel, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_bits), meth_QImage_bits, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_bytesPerLine), meth_QImage_bytesPerLine, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_cacheKey), meth_QImage_cacheKey, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_color), meth_QImage_color, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_colorTable), meth_QImage_colorTable, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_convertToFormat), meth_QImage_convertToFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_copy), meth_QImage_copy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createAlphaMask), meth_QImage_createAlphaMask, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createHeuristicMask), meth_QImage_createHeuristicMask, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createMaskFromColor), meth_QImage_createMaskFromColor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_depth), meth_QImage_depth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_detach), meth_QImage_detach, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_devType), meth_QImage_devType, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dotsPerMeterX), meth_QImage_dotsPerMeterX, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dotsPerMeterY), meth_QImage_dotsPerMeterY, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fill), meth_QImage_fill, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_format), meth_QImage_format, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromData), meth_QImage_fromData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasAlphaChannel), meth_QImage_hasAlphaChannel, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_height), meth_QImage_height, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_invertPixels), meth_QImage_invertPixels, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isDetached), meth_QImage_isDetached, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isGrayscale), meth_QImage_isGrayscale, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QImage_isNull, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_load), meth_QImage_load, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_loadFromData), meth_QImage_loadFromData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_metric), meth_QImage_metric, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mirrored), meth_QImage_mirrored, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_numBytes), meth_QImage_numBytes, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_numColors), meth_QImage_numColors, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_offset), meth_QImage_offset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paintEngine), meth_QImage_paintEngine, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_pixel), meth_QImage_pixel, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_pixelIndex), meth_QImage_pixelIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rect), meth_QImage_rect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rgbSwapped), meth_QImage_rgbSwapped, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_save), meth_QImage_save, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scaled), meth_QImage_scaled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scaledToHeight), meth_QImage_scaledToHeight, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scaledToWidth), meth_QImage_scaledToWidth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scanLine), meth_QImage_scanLine, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_serialNumber), meth_QImage_serialNumber, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAlphaChannel), meth_QImage_setAlphaChannel, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setColor), meth_QImage_setColor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setColorTable), meth_QImage_setColorTable, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDotsPerMeterX), meth_QImage_setDotsPerMeterX, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDotsPerMeterY), meth_QImage_setDotsPerMeterY, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setNumColors), meth_QImage_setNumColors, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setOffset), meth_QImage_setOffset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPixel), meth_QImage_setPixel, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setText), meth_QImage_setText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_size), meth_QImage_size, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_text), meth_QImage_text, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_textKeys), meth_QImage_textKeys, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_transformed), meth_QImage_transformed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_trueMatrix), meth_QImage_trueMatrix, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_valid), meth_QImage_valid, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_width), meth_QImage_width, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QImage[] = {
    {sipName_Format_ARGB32, QImage::Format_ARGB32, 208},
    {sipName_Format_ARGB32_Premultiplied, QImage::Format_ARGB32_Premultiplied, 208},
    {sipName_Format_ARGB4444_Premultiplied, QImage::Format_ARGB4444_Premultiplied, 208},
    {sipName_Format_ARGB6666_Premultiplied, QImage::Format_ARGB6666_Premultiplied, 208},
    {sipName_Format_ARGB8555_Premultiplied, QImage::Format_ARGB8555_Premultiplied, 208},
    {sipName_Format_ARGB8565_Premultiplied, QImage::Format_ARGB8565_Premultiplied, 208},
    {sipName_Format_Indexed8, QImage::Format_Indexed8, 208},
    {sipName_Format_Invalid, QImage::Format_Invalid, 208},
    {sipName_Format_Mono, QImage::Format_Mono, 208},
    {sipName_Format_MonoLSB, QImage::Format_MonoLSB, 208},
    {sipName_Format_RGB16, QImage::Format_RGB16, 208},
    {sipName_Format_RGB32, QImage::Format_RGB32, 208},
    {sipName_Format_RGB444, QImage::Format_RGB444, 208},
    {sipName_Format_RGB555, QImage::Format_RGB555, 208},
    {sipName_Format_RGB666, QImage::Format_RGB666, 208},
    {sipName_Format_RGB888, QImage::Format_RGB888, 208},
    {sipName_InvertRgb, QImage::InvertRgb, 209},
    {sipName_InvertRgba, QImage::InvertRgba, 209},
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QImage = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QImage,
        {0}
    },
    {
        sipNameNr_QImage,
        {0, 0, 1},
        60, methods_QImage,
        18, enummembers_QImage,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QImage,
    slots_QImage,
    init_QImage,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QImage,
    assign_QImage,
    array_QImage,
    copy_QImage,
    release_QImage,
    cast_QImage,
    0,
    0,
    0
},
    0,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:24 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 39 "sip/QtGui/qcolumnview.sip"
#include <qcolumnview.h>
#line 39 "sipQtGuiQColumnView.cpp"

#line 41 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 43 "sipQtGuiQColumnView.cpp"
#line 37 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 46 "sipQtGuiQColumnView.cpp"
#line 41 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 49 "sipQtGuiQColumnView.cpp"
#line 156 "sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 52 "sipQtGuiQColumnView.cpp"
#line 41 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 55 "sipQtGuiQColumnView.cpp"
#line 82 "sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 58 "sipQtGuiQColumnView.cpp"
#line 369 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 61 "sipQtGuiQColumnView.cpp"
#line 41 "sip/QtGui/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 64 "sipQtGuiQColumnView.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 67 "sipQtGuiQColumnView.cpp"
#line 82 "sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 70 "sipQtGuiQColumnView.cpp"
#line 128 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 73 "sipQtGuiQColumnView.cpp"
#line 41 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 76 "sipQtGuiQColumnView.cpp"
#line 41 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 79 "sipQtGuiQColumnView.cpp"
#line 632 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 82 "sipQtGuiQColumnView.cpp"
#line 461 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 477 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 87 "sipQtGuiQColumnView.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 90 "sipQtGuiQColumnView.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 93 "sipQtGuiQColumnView.cpp"
#line 37 "sip/QtGui/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 96 "sipQtGuiQColumnView.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 99 "sipQtGuiQColumnView.cpp"
#line 291 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 102 "sipQtGuiQColumnView.cpp"
#line 320 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 105 "sipQtGuiQColumnView.cpp"
#line 503 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 108 "sipQtGuiQColumnView.cpp"
#line 557 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 111 "sipQtGuiQColumnView.cpp"
#line 528 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 114 "sipQtGuiQColumnView.cpp"
#line 545 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 117 "sipQtGuiQColumnView.cpp"
#line 179 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 120 "sipQtGuiQColumnView.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 123 "sipQtGuiQColumnView.cpp"
#line 831 "sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 126 "sipQtGuiQColumnView.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 129 "sipQtGuiQColumnView.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 132 "sipQtGuiQColumnView.cpp"
#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 135 "sipQtGuiQColumnView.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 138 "sipQtGuiQColumnView.cpp"
#line 41 "sip/QtGui/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 141 "sipQtGuiQColumnView.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 144 "sipQtGuiQColumnView.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 147 "sipQtGuiQColumnView.cpp"
#line 37 "sip/QtGui/qscrollbar.sip"
#include <qscrollbar.h>
#line 150 "sipQtGuiQColumnView.cpp"
#line 431 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 153 "sipQtGuiQColumnView.cpp"
#line 220 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 156 "sipQtGuiQColumnView.cpp"
#line 340 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 159 "sipQtGuiQColumnView.cpp"
#line 41 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 162 "sipQtGuiQColumnView.cpp"
#line 37 "sip/QtGui/qframe.sip"
#include <qframe.h>
#line 165 "sipQtGuiQColumnView.cpp"
#line 39 "sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 168 "sipQtGuiQColumnView.cpp"
#line 41 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 171 "sipQtGuiQColumnView.cpp"
#line 37 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 174 "sipQtGuiQColumnView.cpp"
#line 41 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 177 "sipQtGuiQColumnView.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 180 "sipQtGuiQColumnView.cpp"
#line 37 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 183 "sipQtGuiQColumnView.cpp"
#line 37 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 186 "sipQtGuiQColumnView.cpp"
#line 41 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 189 "sipQtGuiQColumnView.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 192 "sipQtGuiQColumnView.cpp"
#line 41 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 195 "sipQtGuiQColumnView.cpp"
#line 419 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 198 "sipQtGuiQColumnView.cpp"
#line 407 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 201 "sipQtGuiQColumnView.cpp"
#line 613 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 204 "sipQtGuiQColumnView.cpp"
#line 242 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 207 "sipQtGuiQColumnView.cpp"
#line 383 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 210 "sipQtGuiQColumnView.cpp"
#line 355 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 213 "sipQtGuiQColumnView.cpp"
#line 37 "sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 216 "sipQtGuiQColumnView.cpp"
#line 69 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 219 "sipQtGuiQColumnView.cpp"
#line 42 "sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 222 "sipQtGuiQColumnView.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 225 "sipQtGuiQColumnView.cpp"
#line 37 "sip/QtGui/qaction.sip"
#include <qaction.h>
#line 228 "sipQtGuiQColumnView.cpp"
#line 37 "sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 231 "sipQtGuiQColumnView.cpp"
#line 41 "sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 234 "sipQtGuiQColumnView.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 237 "sipQtGuiQColumnView.cpp"
#line 41 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 240 "sipQtGuiQColumnView.cpp"
#line 41 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 243 "sipQtGuiQColumnView.cpp"
#line 41 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 246 "sipQtGuiQColumnView.cpp"
#line 41 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 249 "sipQtGuiQColumnView.cpp"
#line 41 "sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 252 "sipQtGuiQColumnView.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 255 "sipQtGuiQColumnView.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 258 "sipQtGuiQColumnView.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 261 "sipQtGuiQColumnView.cpp"
#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 264 "sipQtGuiQColumnView.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 267 "sipQtGuiQColumnView.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 270 "sipQtGuiQColumnView.cpp"


class sipQColumnView : public QColumnView
{
public:
    sipQColumnView(QWidget *);
    virtual ~sipQColumnView();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /* Expose this protected enum. */
    enum sipDropIndicatorPosition {
        OnItem = QAbstractItemView::OnItem,
        AboveItem = QAbstractItemView::AboveItem,
        BelowItem = QAbstractItemView::BelowItem,
        OnViewport = QAbstractItemView::OnViewport
    };

    /* Expose this protected enum. */
    enum sipState {
        NoState = QAbstractItemView::NoState,
        DraggingState = QAbstractItemView::DraggingState,
        DragSelectingState = QAbstractItemView::DragSelectingState,
        EditingState = QAbstractItemView::EditingState,
        ExpandingState = QAbstractItemView::ExpandingState,
        CollapsingState = QAbstractItemView::CollapsingState,
        AnimatingState = QAbstractItemView::AnimatingState
    };

    /* Expose this protected enum. */
    enum sipCursorAction {
        MoveUp = QAbstractItemView::MoveUp,
        MoveDown = QAbstractItemView::MoveDown,
        MoveLeft = QAbstractItemView::MoveLeft,
        MoveRight = QAbstractItemView::MoveRight,
        MoveHome = QAbstractItemView::MoveHome,
        MoveEnd = QAbstractItemView::MoveEnd,
        MovePageUp = QAbstractItemView::MovePageUp,
        MovePageDown = QAbstractItemView::MovePageDown,
        MoveNext = QAbstractItemView::MoveNext,
        MovePrevious = QAbstractItemView::MovePrevious
    };

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    void sipProtectVirt_keyReleaseEvent(bool,QKeyEvent *);
    void sipProtectVirt_enterEvent(bool,QEvent *);
    void sipProtectVirt_leaveEvent(bool,QEvent *);
    void sipProtectVirt_moveEvent(bool,QMoveEvent *);
    void sipProtectVirt_closeEvent(bool,QCloseEvent *);
    void sipProtectVirt_tabletEvent(bool,QTabletEvent *);
    void sipProtectVirt_actionEvent(bool,QActionEvent *);
    void sipProtectVirt_showEvent(bool,QShowEvent *);
    void sipProtectVirt_hideEvent(bool,QHideEvent *);
    int sipProtectVirt_metric(bool,QPaintDevice::PaintDeviceMetric) const;
    void sipProtect_resetInputContext();
    void sipProtect_updateMicroFocus();
    void sipProtect_create(WId,bool,bool);
    void sipProtect_destroy(bool,bool);
    bool sipProtect_focusNextChild();
    bool sipProtect_focusPreviousChild();
    void sipProtectVirt_enabledChange(bool,bool);
    void sipProtectVirt_paletteChange(bool,const QPalette&);
    void sipProtectVirt_fontChange(bool,const QFont&);
    void sipProtectVirt_windowActivationChange(bool,bool);
    void sipProtectVirt_languageChange(bool);
    void sipProtectVirt_changeEvent(bool,QEvent *);
    void sipProtect_drawFrame(QPainter *);
    void sipProtect_setViewportMargins(int,int,int,int);
    void sipProtectVirt_paintEvent(bool,QPaintEvent *);
    void sipProtectVirt_wheelEvent(bool,QWheelEvent *);
    void sipProtectVirt_contextMenuEvent(bool,QContextMenuEvent *);
    void sipProtect_setupViewport(QWidget *);
    bool sipProtectVirt_edit(bool,const QModelIndex&,QAbstractItemView::EditTrigger,QEvent *);
    void sipProtectVirt_dataChanged(bool,const QModelIndex&,const QModelIndex&);
    void sipProtectVirt_rowsInserted(bool,const QModelIndex&,int,int);
    void sipProtectVirt_rowsAboutToBeRemoved(bool,const QModelIndex&,int,int);
    void sipProtectVirt_selectionChanged(bool,const QItemSelection&,const QItemSelection&);
    void sipProtectVirt_updateEditorData(bool);
    void sipProtectVirt_updateEditorGeometries(bool);
    void sipProtectVirt_updateGeometries(bool);
    void sipProtectVirt_verticalScrollbarAction(bool,int);
    void sipProtectVirt_horizontalScrollbarAction(bool,int);
    void sipProtectVirt_verticalScrollbarValueChanged(bool,int);
    void sipProtectVirt_horizontalScrollbarValueChanged(bool,int);
    void sipProtectVirt_closeEditor(bool,QWidget *,QAbstractItemDelegate::EndEditHint);
    void sipProtectVirt_commitData(bool,QWidget *);
    void sipProtectVirt_editorDestroyed(bool,QObject *);
    void sipProtect_setHorizontalStepsPerItem(int);
    int sipProtect_horizontalStepsPerItem() const;
    void sipProtect_setVerticalStepsPerItem(int);
    int sipProtect_verticalStepsPerItem() const;
    QModelIndexList sipProtectVirt_selectedIndexes(bool) const;
    QItemSelectionModel::SelectionFlags sipProtectVirt_selectionCommand(bool,const QModelIndex&,const QEvent *) const;
    void sipProtectVirt_startDrag(bool,Qt::DropActions);
    QStyleOptionViewItem sipProtectVirt_viewOptions(bool) const;
    int sipProtect_state() const;
    void sipProtect_setState(int);
    void sipProtect_scheduleDelayedItemsLayout();
    void sipProtect_executeDelayedItemsLayout();
    void sipProtect_scrollDirtyRegion(int,int);
    void sipProtect_setDirtyRegion(const QRegion&);
    QPoint sipProtect_dirtyRegionOffset() const;
    bool sipProtectVirt_event(bool,QEvent *);
    bool sipProtectVirt_viewportEvent(bool,QEvent *);
    void sipProtectVirt_mousePressEvent(bool,QMouseEvent *);
    void sipProtectVirt_mouseMoveEvent(bool,QMouseEvent *);
    void sipProtectVirt_mouseReleaseEvent(bool,QMouseEvent *);
    void sipProtectVirt_mouseDoubleClickEvent(bool,QMouseEvent *);
    void sipProtectVirt_dragEnterEvent(bool,QDragEnterEvent *);
    void sipProtectVirt_dragMoveEvent(bool,QDragMoveEvent *);
    void sipProtectVirt_dragLeaveEvent(bool,QDragLeaveEvent *);
    void sipProtectVirt_dropEvent(bool,QDropEvent *);
    void sipProtectVirt_focusInEvent(bool,QFocusEvent *);
    void sipProtectVirt_focusOutEvent(bool,QFocusEvent *);
    void sipProtectVirt_keyPressEvent(bool,QKeyEvent *);
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    int sipProtect_dropIndicatorPosition() const;
    bool sipProtectVirt_focusNextPrevChild(bool,bool);
    void sipProtectVirt_inputMethodEvent(bool,QInputMethodEvent *);
    QAbstractItemView * sipProtectVirt_createColumn(bool,const QModelIndex&);
    void sipProtect_initializeColumn(QAbstractItemView *) const;
    bool sipProtectVirt_isIndexHidden(bool,const QModelIndex&) const;
    QModelIndex sipProtectVirt_moveCursor(bool,int,Qt::KeyboardModifiers);
    void sipProtectVirt_resizeEvent(bool,QResizeEvent *);
    void sipProtectVirt_setSelection(bool,const QRect&,QItemSelectionModel::SelectionFlags);
    QRegion sipProtectVirt_visualRegionForSelection(bool,const QItemSelection&) const;
    int sipProtectVirt_horizontalOffset(bool) const;
    int sipProtectVirt_verticalOffset(bool) const;
    void sipProtectVirt_scrollContentsBy(bool,int,int);
    void sipProtectVirt_currentChanged(bool,const QModelIndex&,const QModelIndex&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QModelIndex indexAt(const QPoint&) const;
    void scrollTo(const QModelIndex&,QAbstractItemView::ScrollHint);
    QSize sizeHint() const;
    QRect visualRect(const QModelIndex&) const;
    void setModel(QAbstractItemModel *);
    void setSelectionModel(QItemSelectionModel *);
    void setRootIndex(const QModelIndex&);
    void selectAll();
    QAbstractItemView * createColumn(const QModelIndex&);
    bool isIndexHidden(const QModelIndex&) const;
    QModelIndex moveCursor(QAbstractItemView::CursorAction,Qt::KeyboardModifiers);
    void resizeEvent(QResizeEvent *);
    void setSelection(const QRect&,QItemSelectionModel::SelectionFlags);
    QRegion visualRegionForSelection(const QItemSelection&) const;
    int horizontalOffset() const;
    int verticalOffset() const;
    void scrollContentsBy(int,int);
    void currentChanged(const QModelIndex&,const QModelIndex&);
    void keyboardSearch(const QString&);
    int sizeHintForRow(int) const;
    int sizeHintForColumn(int) const;
    void reset();
    void doItemsLayout();
    void dataChanged(const QModelIndex&,const QModelIndex&);
    void rowsInserted(const QModelIndex&,int,int);
    void rowsAboutToBeRemoved(const QModelIndex&,int,int);
    void selectionChanged(const QItemSelection&,const QItemSelection&);
    void updateEditorData();
    void updateEditorGeometries();
    void updateGeometries();
    void verticalScrollbarAction(int);
    void horizontalScrollbarAction(int);
    void verticalScrollbarValueChanged(int);
    void horizontalScrollbarValueChanged(int);
    void closeEditor(QWidget *,QAbstractItemDelegate::EndEditHint);
    void commitData(QWidget *);
    void editorDestroyed(QObject *);
    QModelIndexList selectedIndexes() const;
    bool edit(const QModelIndex&,QAbstractItemView::EditTrigger,QEvent *);
    QItemSelectionModel::SelectionFlags selectionCommand(const QModelIndex&,const QEvent *) const;
    void startDrag(Qt::DropActions);
    QStyleOptionViewItem viewOptions() const;
    bool event(QEvent *);
    bool viewportEvent(QEvent *);
    void mousePressEvent(QMouseEvent *);
    void mouseMoveEvent(QMouseEvent *);
    void mouseReleaseEvent(QMouseEvent *);
    void mouseDoubleClickEvent(QMouseEvent *);
    void dragEnterEvent(QDragEnterEvent *);
    void dragMoveEvent(QDragMoveEvent *);
    void dragLeaveEvent(QDragLeaveEvent *);
    void dropEvent(QDropEvent *);
    void focusInEvent(QFocusEvent *);
    void focusOutEvent(QFocusEvent *);
    void keyPressEvent(QKeyEvent *);
    void timerEvent(QTimerEvent *);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    bool focusNextPrevChild(bool);
    void inputMethodEvent(QInputMethodEvent *);
    QSize minimumSizeHint() const;
    void paintEvent(QPaintEvent *);
    void wheelEvent(QWheelEvent *);
    void contextMenuEvent(QContextMenuEvent *);
    void changeEvent(QEvent *);
    int devType() const;
    void setVisible(bool);
    int heightForWidth(int) const;
    QPaintEngine * paintEngine() const;
    void keyReleaseEvent(QKeyEvent *);
    void enterEvent(QEvent *);
    void leaveEvent(QEvent *);
    void moveEvent(QMoveEvent *);
    void closeEvent(QCloseEvent *);
    void tabletEvent(QTabletEvent *);
    void actionEvent(QActionEvent *);
    void showEvent(QShowEvent *);
    void hideEvent(QHideEvent *);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void enabledChange(bool);
    void paletteChange(const QPalette&);
    void fontChange(const QFont&);
    void windowActivationChange(bool);
    void languageChange();
    bool eventFilter(QObject *,QEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQColumnView(const sipQColumnView &);
    sipQColumnView &operator = (const sipQColumnView &);

    char sipPyMethods[88];
};

sipQColumnView::sipQColumnView(QWidget *a0): QColumnView(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQColumnView::~sipQColumnView()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQColumnView::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QColumnView);
}

int sipQColumnView::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QColumnView::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QColumnView,_c,_id,_a);

    return _id;
}

void *sipQColumnView::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QColumnView,_clname)) ? this : QColumnView::qt_metacast(_clname);
}

QModelIndex sipQColumnView::indexAt(const QPoint& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_indexAt);

    if (!meth)
        return QColumnView::indexAt(a0);

    extern QModelIndex sipVH_QtGui_55(sip_gilstate_t,PyObject *,bool*,const QPoint&);

    return sipVH_QtGui_55(sipGILState,meth,0,a0);
}

void sipQColumnView::scrollTo(const QModelIndex& a0,QAbstractItemView::ScrollHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_scrollTo);

    if (!meth)
    {
        QColumnView::scrollTo(a0,a1);
        return;
    }

    extern void sipVH_QtGui_56(sip_gilstate_t,PyObject *,bool*,const QModelIndex&,QAbstractItemView::ScrollHint);

    sipVH_QtGui_56(sipGILState,meth,0,a0,a1);
}

QSize sipQColumnView::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_sizeHint);

    if (!meth)
        return QColumnView::sizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_4(sipGILState,meth,0);
}

QRect sipQColumnView::visualRect(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_visualRect);

    if (!meth)
        return QColumnView::visualRect(a0);

    extern QRect sipVH_QtGui_57(sip_gilstate_t,PyObject *,bool*,const QModelIndex&);

    return sipVH_QtGui_57(sipGILState,meth,0,a0);
}

void sipQColumnView::setModel(QAbstractItemModel *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_setModel);

    if (!meth)
    {
        QColumnView::setModel(a0);
        return;
    }

    extern void sipVH_QtGui_37(sip_gilstate_t,PyObject *,bool*,QAbstractItemModel *);

    sipVH_QtGui_37(sipGILState,meth,0,a0);
}

void sipQColumnView::setSelectionModel(QItemSelectionModel *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_setSelectionModel);

    if (!meth)
    {
        QColumnView::setSelectionModel(a0);
        return;
    }

    extern void sipVH_QtGui_38(sip_gilstate_t,PyObject *,bool*,QItemSelectionModel *);

    sipVH_QtGui_38(sipGILState,meth,0,a0);
}

void sipQColumnView::setRootIndex(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_setRootIndex);

    if (!meth)
    {
        QColumnView::setRootIndex(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t,PyObject *,bool*,const QModelIndex&);

    ((sipVH_QtCore_46)(sipModuleAPI_QtGui_QtCore->em_virthandlers[46]))(sipGILState,meth,0,a0);
}

void sipQColumnView::selectAll()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_selectAll);

    if (!meth)
    {
        QColumnView::selectAll();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

QAbstractItemView * sipQColumnView::createColumn(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_createColumn);

    if (!meth)
        return QColumnView::createColumn(a0);

    extern QAbstractItemView * sipVH_QtGui_221(sip_gilstate_t,PyObject *,bool*,const QModelIndex&);

    return sipVH_QtGui_221(sipGILState,meth,0,a0);
}

bool sipQColumnView::isIndexHidden(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_isIndexHidden);

    if (!meth)
        return QColumnView::isIndexHidden(a0);

    typedef bool (*sipVH_QtCore_37)(sip_gilstate_t,PyObject *,bool*,const QModelIndex&);

    return ((sipVH_QtCore_37)(sipModuleAPI_QtGui_QtCore->em_virthandlers[37]))(sipGILState,meth,0,a0);
}

QModelIndex sipQColumnView::moveCursor(QAbstractItemView::CursorAction a0,Qt::KeyboardModifiers a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_moveCursor);

    if (!meth)
        return QColumnView::moveCursor(a0,a1);

    extern QModelIndex sipVH_QtGui_53(sip_gilstate_t,PyObject *,bool*,int,Qt::KeyboardModifiers);

    return sipVH_QtGui_53(sipGILState,meth,0,(int)a0,a1);
}

void sipQColumnView::resizeEvent(QResizeEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_resizeEvent);

    if (!meth)
    {
        QColumnView::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t,PyObject *,bool*,QResizeEvent *);

    sipVH_QtGui_2(sipGILState,meth,0,a0);
}

void sipQColumnView::setSelection(const QRect& a0,QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_setSelection);

    if (!meth)
    {
        QColumnView::setSelection(a0,a1);
        return;
    }

    extern void sipVH_QtGui_52(sip_gilstate_t,PyObject *,bool*,const QRect&,QItemSelectionModel::SelectionFlags);

    sipVH_QtGui_52(sipGILState,meth,0,a0,a1);
}

QRegion sipQColumnView::visualRegionForSelection(const QItemSelection& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_visualRegionForSelection);

    if (!meth)
        return QColumnView::visualRegionForSelection(a0);

    extern QRegion sipVH_QtGui_51(sip_gilstate_t,PyObject *,bool*,const QItemSelection&);

    return sipVH_QtGui_51(sipGILState,meth,0,a0);
}

int sipQColumnView::horizontalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_horizontalOffset);

    if (!meth)
        return QColumnView::horizontalOffset();

    typedef int (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtGui_QtCore->em_virthandlers[7]))(sipGILState,meth,0);
}

int sipQColumnView::verticalOffset() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_verticalOffset);

    if (!meth)
        return QColumnView::verticalOffset();

    typedef int (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtGui_QtCore->em_virthandlers[7]))(sipGILState,meth,0);
}

void sipQColumnView::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!meth)
    {
        QColumnView::scrollContentsBy(a0,a1);
        return;
    }

    extern void sipVH_QtGui_33(sip_gilstate_t,PyObject *,bool*,int,int);

    sipVH_QtGui_33(sipGILState,meth,0,a0,a1);
}

void sipQColumnView::currentChanged(const QModelIndex& a0,const QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_currentChanged);

    if (!meth)
    {
        QColumnView::currentChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_46(sip_gilstate_t,PyObject *,bool*,const QModelIndex&,const QModelIndex&);

    sipVH_QtGui_46(sipGILState,meth,0,a0,a1);
}

void sipQColumnView::keyboardSearch(const QString& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_keyboardSearch);

    if (!meth)
    {
        QAbstractItemView::keyboardSearch(a0);
        return;
    }

    typedef void (*sipVH_QtCore_28)(sip_gilstate_t,PyObject *,bool*,const QString&);

    ((sipVH_QtCore_28)(sipModuleAPI_QtGui_QtCore->em_virthandlers[28]))(sipGILState,meth,0,a0);
}

int sipQColumnView::sizeHintForRow(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_sizeHintForRow);

    if (!meth)
        return QAbstractItemView::sizeHintForRow(a0);

    extern int sipVH_QtGui_29(sip_gilstate_t,PyObject *,bool*,int);

    return sipVH_QtGui_29(sipGILState,meth,0,a0);
}

int sipQColumnView::sizeHintForColumn(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_sizeHintForColumn);

    if (!meth)
        return QAbstractItemView::sizeHintForColumn(a0);

    extern int sipVH_QtGui_29(sip_gilstate_t,PyObject *,bool*,int);

    return sipVH_QtGui_29(sipGILState,meth,0,a0);
}

void sipQColumnView::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_reset);

    if (!meth)
    {
        QAbstractItemView::reset();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

void sipQColumnView::doItemsLayout()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_doItemsLayout);

    if (!meth)
    {
        QAbstractItemView::doItemsLayout();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

void sipQColumnView::dataChanged(const QModelIndex& a0,const QModelIndex& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_dataChanged);

    if (!meth)
    {
        QAbstractItemView::dataChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_46(sip_gilstate_t,PyObject *,bool*,const QModelIndex&,const QModelIndex&);

    sipVH_QtGui_46(sipGILState,meth,0,a0,a1);
}

void sipQColumnView::rowsInserted(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_rowsInserted);

    if (!meth)
    {
        QAbstractItemView::rowsInserted(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_54(sip_gilstate_t,PyObject *,bool*,const QModelIndex&,int,int);

    sipVH_QtGui_54(sipGILState,meth,0,a0,a1,a2);
}

void sipQColumnView::rowsAboutToBeRemoved(const QModelIndex& a0,int a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_rowsAboutToBeRemoved);

    if (!meth)
    {
        QAbstractItemView::rowsAboutToBeRemoved(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_54(sip_gilstate_t,PyObject *,bool*,const QModelIndex&,int,int);

    sipVH_QtGui_54(sipGILState,meth,0,a0,a1,a2);
}

void sipQColumnView::selectionChanged(const QItemSelection& a0,const QItemSelection& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_selectionChanged);

    if (!meth)
    {
        QAbstractItemView::selectionChanged(a0,a1);
        return;
    }

    extern void sipVH_QtGui_47(sip_gilstate_t,PyObject *,bool*,const QItemSelection&,const QItemSelection&);

    sipVH_QtGui_47(sipGILState,meth,0,a0,a1);
}

void sipQColumnView::updateEditorData()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_updateEditorData);

    if (!meth)
    {
        QAbstractItemView::updateEditorData();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

void sipQColumnView::updateEditorGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_updateEditorGeometries);

    if (!meth)
    {
        QAbstractItemView::updateEditorGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

void sipQColumnView::updateGeometries()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_updateGeometries);

    if (!meth)
    {
        QAbstractItemView::updateGeometries();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

void sipQColumnView::verticalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_verticalScrollbarAction);

    if (!meth)
    {
        QAbstractItemView::verticalScrollbarAction(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool*,int);

    sipVH_QtGui_6(sipGILState,meth,0,a0);
}

void sipQColumnView::horizontalScrollbarAction(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_horizontalScrollbarAction);

    if (!meth)
    {
        QAbstractItemView::horizontalScrollbarAction(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool*,int);

    sipVH_QtGui_6(sipGILState,meth,0,a0);
}

void sipQColumnView::verticalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_verticalScrollbarValueChanged);

    if (!meth)
    {
        QAbstractItemView::verticalScrollbarValueChanged(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool*,int);

    sipVH_QtGui_6(sipGILState,meth,0,a0);
}

void sipQColumnView::horizontalScrollbarValueChanged(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_horizontalScrollbarValueChanged);

    if (!meth)
    {
        QAbstractItemView::horizontalScrollbarValueChanged(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool*,int);

    sipVH_QtGui_6(sipGILState,meth,0,a0);
}

void sipQColumnView::closeEditor(QWidget *a0,QAbstractItemDelegate::EndEditHint a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_closeEditor);

    if (!meth)
    {
        QAbstractItemView::closeEditor(a0,a1);
        return;
    }

    extern void sipVH_QtGui_233(sip_gilstate_t,PyObject *,bool*,QWidget *,QAbstractItemDelegate::EndEditHint);

    sipVH_QtGui_233(sipGILState,meth,0,a0,a1);
}

void sipQColumnView::commitData(QWidget *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_commitData);

    if (!meth)
    {
        QAbstractItemView::commitData(a0);
        return;
    }

    extern void sipVH_QtGui_8(sip_gilstate_t,PyObject *,bool*,QWidget *);

    sipVH_QtGui_8(sipGILState,meth,0,a0);
}

void sipQColumnView::editorDestroyed(QObject *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_editorDestroyed);

    if (!meth)
    {
        QAbstractItemView::editorDestroyed(a0);
        return;
    }

    extern void sipVH_QtGui_232(sip_gilstate_t,PyObject *,bool*,QObject *);

    sipVH_QtGui_232(sipGILState,meth,0,a0);
}

QModelIndexList sipQColumnView::selectedIndexes() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_selectedIndexes);

    if (!meth)
        return QAbstractItemView::selectedIndexes();

    extern QList<QModelIndex> sipVH_QtGui_50(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_50(sipGILState,meth,0);
}

bool sipQColumnView::edit(const QModelIndex& a0,QAbstractItemView::EditTrigger a1,QEvent *a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_edit);

    if (!meth)
        return QAbstractItemView::edit(a0,a1,a2);

    extern bool sipVH_QtGui_231(sip_gilstate_t,PyObject *,bool*,const QModelIndex&,QAbstractItemView::EditTrigger,QEvent *);

    return sipVH_QtGui_231(sipGILState,meth,0,a0,a1,a2);
}

QItemSelectionModel::SelectionFlags sipQColumnView::selectionCommand(const QModelIndex& a0,const QEvent *a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,NULL,sipName_selectionCommand);

    if (!meth)
        return QAbstractItemView::selectionCommand(a0,a1);

    extern QItemSelectionModel::SelectionFlags sipVH_QtGui_230(sip_gilstate_t,PyObject *,bool*,const QModelIndex&,const QEvent *);

    return sipVH_QtGui_230(sipGILState,meth,0,a0,a1);
}

void sipQColumnView::startDrag(Qt::DropActions a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_startDrag);

    if (!meth)
    {
        QAbstractItemView::startDrag(a0);
        return;
    }

    extern void sipVH_QtGui_154(sip_gilstate_t,PyObject *,bool*,Qt::DropActions);

    sipVH_QtGui_154(sipGILState,meth,0,a0);
}

QStyleOptionViewItem sipQColumnView::viewOptions() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[41]),sipPySelf,NULL,sipName_viewOptions);

    if (!meth)
        return QAbstractItemView::viewOptions();

    extern QStyleOptionViewItem sipVH_QtGui_72(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_72(sipGILState,meth,0);
}

bool sipQColumnView::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QAbstractItemView::event(a0);

    typedef bool (*sipVH_QtCore_12)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return ((sipVH_QtCore_12)(sipModuleAPI_QtGui_QtCore->em_virthandlers[12]))(sipGILState,meth,0,a0);
}

bool sipQColumnView::viewportEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_viewportEvent);

    if (!meth)
        return QAbstractItemView::viewportEvent(a0);

    typedef bool (*sipVH_QtCore_12)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return ((sipVH_QtCore_12)(sipModuleAPI_QtGui_QtCore->em_virthandlers[12]))(sipGILState,meth,0,a0);
}

void sipQColumnView::mousePressEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_mousePressEvent);

    if (!meth)
    {
        QAbstractItemView::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_27(sip_gilstate_t,PyObject *,bool*,QMouseEvent *);

    sipVH_QtGui_27(sipGILState,meth,0,a0);
}

void sipQColumnView::mouseMoveEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!meth)
    {
        QAbstractItemView::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_27(sip_gilstate_t,PyObject *,bool*,QMouseEvent *);

    sipVH_QtGui_27(sipGILState,meth,0,a0);
}

void sipQColumnView::mouseReleaseEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!meth)
    {
        QAbstractItemView::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_27(sip_gilstate_t,PyObject *,bool*,QMouseEvent *);

    sipVH_QtGui_27(sipGILState,meth,0,a0);
}

void sipQColumnView::mouseDoubleClickEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!meth)
    {
        QAbstractItemView::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_27(sip_gilstate_t,PyObject *,bool*,QMouseEvent *);

    sipVH_QtGui_27(sipGILState,meth,0,a0);
}

void sipQColumnView::dragEnterEvent(QDragEnterEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!meth)
    {
        QAbstractItemView::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t,PyObject *,bool*,QDragEnterEvent *);

    sipVH_QtGui_19(sipGILState,meth,0,a0);
}

void sipQColumnView::dragMoveEvent(QDragMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!meth)
    {
        QAbstractItemView::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t,PyObject *,bool*,QDragMoveEvent *);

    sipVH_QtGui_18(sipGILState,meth,0,a0);
}

void sipQColumnView::dragLeaveEvent(QDragLeaveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!meth)
    {
        QAbstractItemView::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t,PyObject *,bool*,QDragLeaveEvent *);

    sipVH_QtGui_17(sipGILState,meth,0,a0);
}

void sipQColumnView::dropEvent(QDropEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_dropEvent);

    if (!meth)
    {
        QAbstractItemView::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t,PyObject *,bool*,QDropEvent *);

    sipVH_QtGui_16(sipGILState,meth,0,a0);
}

void sipQColumnView::focusInEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,NULL,sipName_focusInEvent);

    if (!meth)
    {
        QAbstractItemView::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,bool*,QFocusEvent *);

    sipVH_QtGui_25(sipGILState,meth,0,a0);
}

void sipQColumnView::focusOutEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,NULL,sipName_focusOutEvent);

    if (!meth)
    {
        QAbstractItemView::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,bool*,QFocusEvent *);

    sipVH_QtGui_25(sipGILState,meth,0,a0);
}

void sipQColumnView::keyPressEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[54],sipPySelf,NULL,sipName_keyPressEvent);

    if (!meth)
    {
        QAbstractItemView::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,bool*,QKeyEvent *);

    sipVH_QtGui_26(sipGILState,meth,0,a0);
}

void sipQColumnView::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[55],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QAbstractItemView::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_3)(sip_gilstate_t,PyObject *,bool*,QTimerEvent *);

    ((sipVH_QtCore_3)(sipModuleAPI_QtGui_QtCore->em_virthandlers[3]))(sipGILState,meth,0,a0);
}

QVariant sipQColumnView::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[56]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!meth)
        return QAbstractItemView::inputMethodQuery(a0);

    extern QVariant sipVH_QtGui_13(sip_gilstate_t,PyObject *,bool*,Qt::InputMethodQuery);

    return sipVH_QtGui_13(sipGILState,meth,0,a0);
}

bool sipQColumnView::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[57],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!meth)
        return QAbstractItemView::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_12(sip_gilstate_t,PyObject *,bool*,bool);

    return sipVH_QtGui_12(sipGILState,meth,0,a0);
}

void sipQColumnView::inputMethodEvent(QInputMethodEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[58],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!meth)
    {
        QAbstractItemView::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_14(sip_gilstate_t,PyObject *,bool*,QInputMethodEvent *);

    sipVH_QtGui_14(sipGILState,meth,0,a0);
}

QSize sipQColumnView::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[59]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!meth)
        return QAbstractScrollArea::minimumSizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_4(sipGILState,meth,0);
}

void sipQColumnView::paintEvent(QPaintEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[60],sipPySelf,NULL,sipName_paintEvent);

    if (!meth)
    {
        QAbstractScrollArea::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t,PyObject *,bool*,QPaintEvent *);

    sipVH_QtGui_3(sipGILState,meth,0,a0);
}

void sipQColumnView::wheelEvent(QWheelEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[61],sipPySelf,NULL,sipName_wheelEvent);

    if (!meth)
    {
        QAbstractScrollArea::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t,PyObject *,bool*,QWheelEvent *);

    sipVH_QtGui_5(sipGILState,meth,0,a0);
}

void sipQColumnView::contextMenuEvent(QContextMenuEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[62],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!meth)
    {
        QAbstractScrollArea::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t,PyObject *,bool*,QContextMenuEvent *);

    sipVH_QtGui_22(sipGILState,meth,0,a0);
}

void sipQColumnView::changeEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[63],sipPySelf,NULL,sipName_changeEvent);

    if (!meth)
    {
        QFrame::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

int sipQColumnView::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[64]),sipPySelf,NULL,sipName_devType);

    if (!meth)
        return QWidget::devType();

    typedef int (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtGui_QtCore->em_virthandlers[7]))(sipGILState,meth,0);
}

void sipQColumnView::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[65],sipPySelf,NULL,sipName_setVisible);

    if (!meth)
    {
        QWidget::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t,PyObject *,bool*,bool);

    sipVH_QtGui_7(sipGILState,meth,0,a0);
}

int sipQColumnView::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[66]),sipPySelf,NULL,sipName_heightForWidth);

    if (!meth)
        return QWidget::heightForWidth(a0);

    extern int sipVH_QtGui_29(sip_gilstate_t,PyObject *,bool*,int);

    return sipVH_QtGui_29(sipGILState,meth,0,a0);
}

QPaintEngine * sipQColumnView::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[67]),sipPySelf,NULL,sipName_paintEngine);

    if (!meth)
        return QWidget::paintEngine();

    extern QPaintEngine * sipVH_QtGui_28(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_28(sipGILState,meth,0);
}

void sipQColumnView::keyReleaseEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[68],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!meth)
    {
        QWidget::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,bool*,QKeyEvent *);

    sipVH_QtGui_26(sipGILState,meth,0,a0);
}

void sipQColumnView::enterEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[69],sipPySelf,NULL,sipName_enterEvent);

    if (!meth)
    {
        QWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQColumnView::leaveEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[70],sipPySelf,NULL,sipName_leaveEvent);

    if (!meth)
    {
        QWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQColumnView::moveEvent(QMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[71],sipPySelf,NULL,sipName_moveEvent);

    if (!meth)
    {
        QWidget::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t,PyObject *,bool*,QMoveEvent *);

    sipVH_QtGui_24(sipGILState,meth,0,a0);
}

void sipQColumnView::closeEvent(QCloseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[72],sipPySelf,NULL,sipName_closeEvent);

    if (!meth)
    {
        QWidget::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t,PyObject *,bool*,QCloseEvent *);

    sipVH_QtGui_23(sipGILState,meth,0,a0);
}

void sipQColumnView::tabletEvent(QTabletEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[73],sipPySelf,NULL,sipName_tabletEvent);

    if (!meth)
    {
        QWidget::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t,PyObject *,bool*,QTabletEvent *);

    sipVH_QtGui_21(sipGILState,meth,0,a0);
}

void sipQColumnView::actionEvent(QActionEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[74],sipPySelf,NULL,sipName_actionEvent);

    if (!meth)
    {
        QWidget::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t,PyObject *,bool*,QActionEvent *);

    sipVH_QtGui_20(sipGILState,meth,0,a0);
}

void sipQColumnView::showEvent(QShowEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[75],sipPySelf,NULL,sipName_showEvent);

    if (!meth)
    {
        QWidget::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t,PyObject *,bool*,QShowEvent *);

    sipVH_QtGui_1(sipGILState,meth,0,a0);
}

void sipQColumnView::hideEvent(QHideEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[76],sipPySelf,NULL,sipName_hideEvent);

    if (!meth)
    {
        QWidget::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t,PyObject *,bool*,QHideEvent *);

    sipVH_QtGui_0(sipGILState,meth,0,a0);
}

int sipQColumnView::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[77]),sipPySelf,NULL,sipName_metric);

    if (!meth)
        return QWidget::metric(a0);

    extern int sipVH_QtGui_15(sip_gilstate_t,PyObject *,bool*,QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_15(sipGILState,meth,0,a0);
}

void sipQColumnView::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[78],sipPySelf,NULL,sipName_enabledChange);

    if (!meth)
    {
        QWidget::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t,PyObject *,bool*,bool);

    sipVH_QtGui_7(sipGILState,meth,0,a0);
}

void sipQColumnView::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[79],sipPySelf,NULL,sipName_paletteChange);

    if (!meth)
    {
        QWidget::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_11(sip_gilstate_t,PyObject *,bool*,const QPalette&);

    sipVH_QtGui_11(sipGILState,meth,0,a0);
}

void sipQColumnView::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[80],sipPySelf,NULL,sipName_fontChange);

    if (!meth)
    {
        QWidget::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t,PyObject *,bool*,const QFont&);

    sipVH_QtGui_10(sipGILState,meth,0,a0);
}

void sipQColumnView::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[81],sipPySelf,NULL,sipName_windowActivationChange);

    if (!meth)
    {
        QWidget::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t,PyObject *,bool*,bool);

    sipVH_QtGui_7(sipGILState,meth,0,a0);
}

void sipQColumnView::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[82],sipPySelf,NULL,sipName_languageChange);

    if (!meth)
    {
        QWidget::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

bool sipQColumnView::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[83],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t,PyObject *,bool*,QObject *,QEvent *);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtGui_QtCore->em_virthandlers[20]))(sipGILState,meth,0,a0,a1);
}

void sipQColumnView::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[84],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_19)(sip_gilstate_t,PyObject *,bool*,QChildEvent *);

    ((sipVH_QtCore_19)(sipModuleAPI_QtGui_QtCore->em_virthandlers[19]))(sipGILState,meth,0,a0);
}

void sipQColumnView::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[85],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQColumnView::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[86],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

void sipQColumnView::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[87],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

int sipQColumnView::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQColumnView::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQColumnView::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQColumnView::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQColumnView::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

void sipQColumnView::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg,QKeyEvent *a0)
{
    (sipSelfWasArg ? QWidget::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQColumnView::sipProtectVirt_enterEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QWidget::enterEvent(a0) : enterEvent(a0));
}

void sipQColumnView::sipProtectVirt_leaveEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QWidget::leaveEvent(a0) : leaveEvent(a0));
}

void sipQColumnView::sipProtectVirt_moveEvent(bool sipSelfWasArg,QMoveEvent *a0)
{
    (sipSelfWasArg ? QWidget::moveEvent(a0) : moveEvent(a0));
}

void sipQColumnView::sipProtectVirt_closeEvent(bool sipSelfWasArg,QCloseEvent *a0)
{
    (sipSelfWasArg ? QWidget::closeEvent(a0) : closeEvent(a0));
}

void sipQColumnView::sipProtectVirt_tabletEvent(bool sipSelfWasArg,QTabletEvent *a0)
{
    (sipSelfWasArg ? QWidget::tabletEvent(a0) : tabletEvent(a0));
}

void sipQColumnView::sipProtectVirt_actionEvent(bool sipSelfWasArg,QActionEvent *a0)
{
    (sipSelfWasArg ? QWidget::actionEvent(a0) : actionEvent(a0));
}

void sipQColumnView::sipProtectVirt_showEvent(bool sipSelfWasArg,QShowEvent *a0)
{
    (sipSelfWasArg ? QWidget::showEvent(a0) : showEvent(a0));
}

void sipQColumnView::sipProtectVirt_hideEvent(bool sipSelfWasArg,QHideEvent *a0)
{
    (sipSelfWasArg ? QWidget::hideEvent(a0) : hideEvent(a0));
}

int sipQColumnView::sipProtectVirt_metric(bool sipSelfWasArg,QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ? QWidget::metric(a0) : metric(a0));
}

void sipQColumnView::sipProtect_resetInputContext()
{
    QWidget::resetInputContext();
}

void sipQColumnView::sipProtect_updateMicroFocus()
{
    QWidget::updateMicroFocus();
}

void sipQColumnView::sipProtect_create(WId a0,bool a1,bool a2)
{
    QWidget::create(a0,a1,a2);
}

void sipQColumnView::sipProtect_destroy(bool a0,bool a1)
{
    QWidget::destroy(a0,a1);
}

bool sipQColumnView::sipProtect_focusNextChild()
{
    return QWidget::focusNextChild();
}

bool sipQColumnView::sipProtect_focusPreviousChild()
{
    return QWidget::focusPreviousChild();
}

void sipQColumnView::sipProtectVirt_enabledChange(bool sipSelfWasArg,bool a0)
{
    (sipSelfWasArg ? QWidget::enabledChange(a0) : enabledChange(a0));
}

void sipQColumnView::sipProtectVirt_paletteChange(bool sipSelfWasArg,const QPalette& a0)
{
    (sipSelfWasArg ? QWidget::paletteChange(a0) : paletteChange(a0));
}

void sipQColumnView::sipProtectVirt_fontChange(bool sipSelfWasArg,const QFont& a0)
{
    (sipSelfWasArg ? QWidget::fontChange(a0) : fontChange(a0));
}

void sipQColumnView::sipProtectVirt_windowActivationChange(bool sipSelfWasArg,bool a0)
{
    (sipSelfWasArg ? QWidget::windowActivationChange(a0) : windowActivationChange(a0));
}

void sipQColumnView::sipProtectVirt_languageChange(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QWidget::languageChange() : languageChange());
}

void sipQColumnView::sipProtectVirt_changeEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QFrame::changeEvent(a0) : changeEvent(a0));
}

void sipQColumnView::sipProtect_drawFrame(QPainter *a0)
{
    QFrame::drawFrame(a0);
}

void sipQColumnView::sipProtect_setViewportMargins(int a0,int a1,int a2,int a3)
{
    QAbstractScrollArea::setViewportMargins(a0,a1,a2,a3);
}

void sipQColumnView::sipProtectVirt_paintEvent(bool sipSelfWasArg,QPaintEvent *a0)
{
    (sipSelfWasArg ? QAbstractScrollArea::paintEvent(a0) : paintEvent(a0));
}

void sipQColumnView::sipProtectVirt_wheelEvent(bool sipSelfWasArg,QWheelEvent *a0)
{
    (sipSelfWasArg ? QAbstractScrollArea::wheelEvent(a0) : wheelEvent(a0));
}

void sipQColumnView::sipProtectVirt_contextMenuEvent(bool sipSelfWasArg,QContextMenuEvent *a0)
{
    (sipSelfWasArg ? QAbstractScrollArea::contextMenuEvent(a0) : contextMenuEvent(a0));
}

void sipQColumnView::sipProtect_setupViewport(QWidget *a0)
{
    QAbstractScrollArea::setupViewport(a0);
}

bool sipQColumnView::sipProtectVirt_edit(bool sipSelfWasArg,const QModelIndex& a0,QAbstractItemView::EditTrigger a1,QEvent *a2)
{
    return (sipSelfWasArg ? QAbstractItemView::edit(a0,a1,a2) : edit(a0,a1,a2));
}

void sipQColumnView::sipProtectVirt_dataChanged(bool sipSelfWasArg,const QModelIndex& a0,const QModelIndex& a1)
{
    (sipSelfWasArg ? QAbstractItemView::dataChanged(a0,a1) : dataChanged(a0,a1));
}

void sipQColumnView::sipProtectVirt_rowsInserted(bool sipSelfWasArg,const QModelIndex& a0,int a1,int a2)
{
    (sipSelfWasArg ? QAbstractItemView::rowsInserted(a0,a1,a2) : rowsInserted(a0,a1,a2));
}

void sipQColumnView::sipProtectVirt_rowsAboutToBeRemoved(bool sipSelfWasArg,const QModelIndex& a0,int a1,int a2)
{
    (sipSelfWasArg ? QAbstractItemView::rowsAboutToBeRemoved(a0,a1,a2) : rowsAboutToBeRemoved(a0,a1,a2));
}

void sipQColumnView::sipProtectVirt_selectionChanged(bool sipSelfWasArg,const QItemSelection& a0,const QItemSelection& a1)
{
    (sipSelfWasArg ? QAbstractItemView::selectionChanged(a0,a1) : selectionChanged(a0,a1));
}

void sipQColumnView::sipProtectVirt_updateEditorData(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QAbstractItemView::updateEditorData() : updateEditorData());
}

void sipQColumnView::sipProtectVirt_updateEditorGeometries(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QAbstractItemView::updateEditorGeometries() : updateEditorGeometries());
}

void sipQColumnView::sipProtectVirt_updateGeometries(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QAbstractItemView::updateGeometries() : updateGeometries());
}

void sipQColumnView::sipProtectVirt_verticalScrollbarAction(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QAbstractItemView::verticalScrollbarAction(a0) : verticalScrollbarAction(a0));
}

void sipQColumnView::sipProtectVirt_horizontalScrollbarAction(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QAbstractItemView::horizontalScrollbarAction(a0) : horizontalScrollbarAction(a0));
}

void sipQColumnView::sipProtectVirt_verticalScrollbarValueChanged(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QAbstractItemView::verticalScrollbarValueChanged(a0) : verticalScrollbarValueChanged(a0));
}

void sipQColumnView::sipProtectVirt_horizontalScrollbarValueChanged(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QAbstractItemView::horizontalScrollbarValueChanged(a0) : horizontalScrollbarValueChanged(a0));
}

void sipQColumnView::sipProtectVirt_closeEditor(bool sipSelfWasArg,QWidget *a0,QAbstractItemDelegate::EndEditHint a1)
{
    (sipSelfWasArg ? QAbstractItemView::closeEditor(a0,a1) : closeEditor(a0,a1));
}

void sipQColumnView::sipProtectVirt_commitData(bool sipSelfWasArg,QWidget *a0)
{
    (sipSelfWasArg ? QAbstractItemView::commitData(a0) : commitData(a0));
}

void sipQColumnView::sipProtectVirt_editorDestroyed(bool sipSelfWasArg,QObject *a0)
{
    (sipSelfWasArg ? QAbstractItemView::editorDestroyed(a0) : editorDestroyed(a0));
}

void sipQColumnView::sipProtect_setHorizontalStepsPerItem(int a0)
{
    QAbstractItemView::setHorizontalStepsPerItem(a0);
}

int sipQColumnView::sipProtect_horizontalStepsPerItem() const
{
    return QAbstractItemView::horizontalStepsPerItem();
}

void sipQColumnView::sipProtect_setVerticalStepsPerItem(int a0)
{
    QAbstractItemView::setVerticalStepsPerItem(a0);
}

int sipQColumnView::sipProtect_verticalStepsPerItem() const
{
    return QAbstractItemView::verticalStepsPerItem();
}

QModelIndexList sipQColumnView::sipProtectVirt_selectedIndexes(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QAbstractItemView::selectedIndexes() : selectedIndexes());
}

QItemSelectionModel::SelectionFlags sipQColumnView::sipProtectVirt_selectionCommand(bool sipSelfWasArg,const QModelIndex& a0,const QEvent *a1) const
{
    return (sipSelfWasArg ? QAbstractItemView::selectionCommand(a0,a1) : selectionCommand(a0,a1));
}

void sipQColumnView::sipProtectVirt_startDrag(bool sipSelfWasArg,Qt::DropActions a0)
{
    (sipSelfWasArg ? QAbstractItemView::startDrag(a0) : startDrag(a0));
}

QStyleOptionViewItem sipQColumnView::sipProtectVirt_viewOptions(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QAbstractItemView::viewOptions() : viewOptions());
}

int sipQColumnView::sipProtect_state() const
{
    return (int)QAbstractItemView::state();
}

void sipQColumnView::sipProtect_setState(int a0)
{
    QAbstractItemView::setState((QAbstractItemView::State)a0);
}

void sipQColumnView::sipProtect_scheduleDelayedItemsLayout()
{
    QAbstractItemView::scheduleDelayedItemsLayout();
}

void sipQColumnView::sipProtect_executeDelayedItemsLayout()
{
    QAbstractItemView::executeDelayedItemsLayout();
}

void sipQColumnView::sipProtect_scrollDirtyRegion(int a0,int a1)
{
    QAbstractItemView::scrollDirtyRegion(a0,a1);
}

void sipQColumnView::sipProtect_setDirtyRegion(const QRegion& a0)
{
    QAbstractItemView::setDirtyRegion(a0);
}

QPoint sipQColumnView::sipProtect_dirtyRegionOffset() const
{
    return QAbstractItemView::dirtyRegionOffset();
}

bool sipQColumnView::sipProtectVirt_event(bool sipSelfWasArg,QEvent *a0)
{
    return (sipSelfWasArg ? QAbstractItemView::event(a0) : event(a0));
}

bool sipQColumnView::sipProtectVirt_viewportEvent(bool sipSelfWasArg,QEvent *a0)
{
    return (sipSelfWasArg ? QAbstractItemView::viewportEvent(a0) : viewportEvent(a0));
}

void sipQColumnView::sipProtectVirt_mousePressEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQColumnView::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQColumnView::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQColumnView::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQColumnView::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg,QDragEnterEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQColumnView::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg,QDragMoveEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::dragMoveEvent(a0) : dragMoveEvent(a0));
}

void sipQColumnView::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg,QDragLeaveEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQColumnView::sipProtectVirt_dropEvent(bool sipSelfWasArg,QDropEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::dropEvent(a0) : dropEvent(a0));
}

void sipQColumnView::sipProtectVirt_focusInEvent(bool sipSelfWasArg,QFocusEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::focusInEvent(a0) : focusInEvent(a0));
}

void sipQColumnView::sipProtectVirt_focusOutEvent(bool sipSelfWasArg,QFocusEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQColumnView::sipProtectVirt_keyPressEvent(bool sipSelfWasArg,QKeyEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQColumnView::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::timerEvent(a0) : timerEvent(a0));
}

int sipQColumnView::sipProtect_dropIndicatorPosition() const
{
    return (int)QAbstractItemView::dropIndicatorPosition();
}

bool sipQColumnView::sipProtectVirt_focusNextPrevChild(bool sipSelfWasArg,bool a0)
{
    return (sipSelfWasArg ? QAbstractItemView::focusNextPrevChild(a0) : focusNextPrevChild(a0));
}

void sipQColumnView::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg,QInputMethodEvent *a0)
{
    (sipSelfWasArg ? QAbstractItemView::inputMethodEvent(a0) : inputMethodEvent(a0));
}

QAbstractItemView * sipQColumnView::sipProtectVirt_createColumn(bool sipSelfWasArg,const QModelIndex& a0)
{
    return (sipSelfWasArg ? QColumnView::createColumn(a0) : createColumn(a0));
}

void sipQColumnView::sipProtect_initializeColumn(QAbstractItemView *a0) const
{
    QColumnView::initializeColumn(a0);
}

bool sipQColumnView::sipProtectVirt_isIndexHidden(bool sipSelfWasArg,const QModelIndex& a0) const
{
    return (sipSelfWasArg ? QColumnView::isIndexHidden(a0) : isIndexHidden(a0));
}

QModelIndex sipQColumnView::sipProtectVirt_moveCursor(bool sipSelfWasArg,int a0,Qt::KeyboardModifiers a1)
{
    return (sipSelfWasArg ? QColumnView::moveCursor((QAbstractItemView::CursorAction)a0,a1) : moveCursor((QAbstractItemView::CursorAction)a0,a1));
}

void sipQColumnView::sipProtectVirt_resizeEvent(bool sipSelfWasArg,QResizeEvent *a0)
{
    (sipSelfWasArg ? QColumnView::resizeEvent(a0) : resizeEvent(a0));
}

void sipQColumnView::sipProtectVirt_setSelection(bool sipSelfWasArg,const QRect& a0,QItemSelectionModel::SelectionFlags a1)
{
    (sipSelfWasArg ? QColumnView::setSelection(a0,a1) : setSelection(a0,a1));
}

QRegion sipQColumnView::sipProtectVirt_visualRegionForSelection(bool sipSelfWasArg,const QItemSelection& a0) const
{
    return (sipSelfWasArg ? QColumnView::visualRegionForSelection(a0) : visualRegionForSelection(a0));
}

int sipQColumnView::sipProtectVirt_horizontalOffset(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QColumnView::horizontalOffset() : horizontalOffset());
}

int sipQColumnView::sipProtectVirt_verticalOffset(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QColumnView::verticalOffset() : verticalOffset());
}

void sipQColumnView::sipProtectVirt_scrollContentsBy(bool sipSelfWasArg,int a0,int a1)
{
    (sipSelfWasArg ? QColumnView::scrollContentsBy(a0,a1) : scrollContentsBy(a0,a1));
}

void sipQColumnView::sipProtectVirt_currentChanged(bool sipSelfWasArg,const QModelIndex& a0,const QModelIndex& a1)
{
    (sipSelfWasArg ? QColumnView::currentChanged(a0,a1) : currentChanged(a0,a1));
}


extern "C" {static PyObject *meth_QColumnView_receivers(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        char * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QColumnView,&sipCpp,&a0))
        {
            int sipRes = 0;

#line 480 "sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
#line 2536 "sipQtGuiQColumnView.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_receivers);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QChildEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_childEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_customEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QColumnView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_connectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QColumnView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_disconnectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QKeyEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_keyReleaseEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_enterEvent(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_enterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_enterEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_enterEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_leaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_leaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_leaveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_leaveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_moveEvent(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_moveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMoveEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QMoveEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_moveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_closeEvent(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_closeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QCloseEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QCloseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_closeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_closeEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_tabletEvent(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_tabletEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTabletEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QTabletEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_tabletEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_tabletEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_actionEvent(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_actionEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QActionEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QActionEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_actionEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_actionEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QShowEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_showEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_hideEvent(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_hideEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QHideEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_hideEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_metric(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_metric(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pE",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QPaintDevice_PaintDeviceMetric,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_metric);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_resetInputContext(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_resetInputContext(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QColumnView,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_resetInputContext();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_resetInputContext);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_updateMicroFocus(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_updateMicroFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QColumnView,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_updateMicroFocus();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_updateMicroFocus);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_create(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_create(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        WId a0 = 0;
        bool a1 = 1;
        bool a2 = 1;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p|mbb",&sipSelf,sipType_QColumnView,&sipCpp,&a0,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_create(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_create);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_destroy(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0 = 1;
        bool a1 = 1;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p|bb",&sipSelf,sipType_QColumnView,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_destroy(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_destroy);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_focusNextChild(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_focusNextChild(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QColumnView,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_focusNextChild();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_focusNextChild);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_focusPreviousChild(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_focusPreviousChild(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QColumnView,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_focusPreviousChild();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_focusPreviousChild);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_enabledChange(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_enabledChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pb",&sipSelf,sipType_QColumnView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_enabledChange(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_enabledChange);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_paletteChange(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_paletteChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPalette * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QPalette,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_paletteChange(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_paletteChange);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_fontChange(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_fontChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QFont * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QFont,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_fontChange(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_fontChange);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_windowActivationChange(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_windowActivationChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pb",&sipSelf,sipType_QColumnView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_windowActivationChange(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_windowActivationChange);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_languageChange(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_languageChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QColumnView,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_languageChange(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_languageChange);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_changeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_changeEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_drawFrame(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_drawFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPainter * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QPainter,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_drawFrame(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_drawFrame);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_setViewportMargins(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_setViewportMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"piiii",&sipSelf,sipType_QColumnView,&sipCpp,&a0,&a1,&a2,&a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setViewportMargins(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_setViewportMargins);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QPaintEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_paintEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_paintEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QWheelEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_wheelEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QContextMenuEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_contextMenuEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_contextMenuEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_setupViewport(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_setupViewport(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWidget * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QWidget,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setupViewport(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_setupViewport);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_edit(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_edit(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QModelIndex,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->edit(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QModelIndex * a0;
        QAbstractItemView::EditTrigger a1;
        QEvent * a2;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9EJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QModelIndex,&a0,sipType_QAbstractItemView_EditTrigger,&a1,sipType_QEvent,&a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_edit(sipSelfWasArg,*a0,a1,a2);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_edit);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_dataChanged(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_dataChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        const QModelIndex * a1;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9J9",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QModelIndex,&a0,sipType_QModelIndex,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dataChanged(sipSelfWasArg,*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_dataChanged);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_rowsInserted(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_rowsInserted(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        int a1;
        int a2;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9ii",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QModelIndex,&a0,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_rowsInserted(sipSelfWasArg,*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_rowsInserted);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_rowsAboutToBeRemoved(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_rowsAboutToBeRemoved(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        int a1;
        int a2;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9ii",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QModelIndex,&a0,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_rowsAboutToBeRemoved(sipSelfWasArg,*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_rowsAboutToBeRemoved);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_selectionChanged(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_selectionChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection * a0;
        const QItemSelection * a1;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9J9",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QItemSelection,&a0,sipType_QItemSelection,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_selectionChanged(sipSelfWasArg,*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_selectionChanged);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_updateEditorData(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_updateEditorData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QColumnView,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_updateEditorData(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_updateEditorData);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_updateEditorGeometries(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_updateEditorGeometries(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QColumnView,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_updateEditorGeometries(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_updateEditorGeometries);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_updateGeometries(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_updateGeometries(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QColumnView,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_updateGeometries(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_updateGeometries);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_verticalScrollbarAction(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_verticalScrollbarAction(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pi",&sipSelf,sipType_QColumnView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_verticalScrollbarAction(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_verticalScrollbarAction);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_horizontalScrollbarAction(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_horizontalScrollbarAction(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pi",&sipSelf,sipType_QColumnView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_horizontalScrollbarAction(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_horizontalScrollbarAction);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_verticalScrollbarValueChanged(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_verticalScrollbarValueChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pi",&sipSelf,sipType_QColumnView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_verticalScrollbarValueChanged(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_verticalScrollbarValueChanged);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_horizontalScrollbarValueChanged(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_horizontalScrollbarValueChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pi",&sipSelf,sipType_QColumnView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_horizontalScrollbarValueChanged(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_horizontalScrollbarValueChanged);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_closeEditor(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_closeEditor(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget * a0;
        QAbstractItemDelegate::EndEditHint a1;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8E",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QWidget,&a0,sipType_QAbstractItemDelegate_EndEditHint,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_closeEditor(sipSelfWasArg,a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_closeEditor);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_commitData(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_commitData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QWidget,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_commitData(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_commitData);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_editorDestroyed(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_editorDestroyed(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QObject,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_editorDestroyed(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_editorDestroyed);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_setHorizontalStepsPerItem(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_setHorizontalStepsPerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pi",&sipSelf,sipType_QColumnView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setHorizontalStepsPerItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_setHorizontalStepsPerItem);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_horizontalStepsPerItem(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_horizontalStepsPerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QColumnView,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_horizontalStepsPerItem();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_horizontalStepsPerItem);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_setVerticalStepsPerItem(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_setVerticalStepsPerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pi",&sipSelf,sipType_QColumnView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setVerticalStepsPerItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_setVerticalStepsPerItem);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_verticalStepsPerItem(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_verticalStepsPerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QColumnView,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_verticalStepsPerItem();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_verticalStepsPerItem);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_selectedIndexes(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_selectedIndexes(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QColumnView,&sipCpp))
        {
            QModelIndexList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndexList(sipCpp->sipProtectVirt_selectedIndexes(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_selectedIndexes);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_selectionCommand(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_selectionCommand(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        const QEvent * a1 = 0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9|J8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QModelIndex,&a0,sipType_QEvent,&a1))
        {
            QItemSelectionModel::SelectionFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QItemSelectionModel::SelectionFlags(sipCpp->sipProtectVirt_selectionCommand(sipSelfWasArg,*a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QItemSelectionModel_SelectionFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_selectionCommand);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_startDrag(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_startDrag(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::DropActions * a0;
        int a0State = 0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ1",&sipSelf,sipType_QColumnView,&sipCpp,sipType_Qt_DropActions,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_startDrag(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_Qt_DropActions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_startDrag);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_viewOptions(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_viewOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QColumnView,&sipCpp))
        {
            QStyleOptionViewItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStyleOptionViewItem(sipCpp->sipProtectVirt_viewOptions(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStyleOptionViewItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_viewOptions);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_state(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_state(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QColumnView,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_state();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QAbstractItemView_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_state);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_setState(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_setState(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pE",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QAbstractItemView_State,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setState(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_setState);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_scheduleDelayedItemsLayout(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_scheduleDelayedItemsLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QColumnView,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_scheduleDelayedItemsLayout();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_scheduleDelayedItemsLayout);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_executeDelayedItemsLayout(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_executeDelayedItemsLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QColumnView,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_executeDelayedItemsLayout();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_executeDelayedItemsLayout);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_scrollDirtyRegion(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_scrollDirtyRegion(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pii",&sipSelf,sipType_QColumnView,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_scrollDirtyRegion(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_scrollDirtyRegion);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_setDirtyRegion(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_setDirtyRegion(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QRegion * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QRegion,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setDirtyRegion(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_setDirtyRegion);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_dirtyRegionOffset(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_dirtyRegionOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QColumnView,&sipCpp))
        {
            QPoint *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint(sipCpp->sipProtect_dirtyRegionOffset());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_dirtyRegionOffset);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_event(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_event(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QEvent,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_event);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_viewportEvent(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_viewportEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QEvent,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_viewportEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_viewportEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QMouseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_mousePressEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QMouseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_mouseMoveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QMouseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_mouseReleaseEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QMouseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_mouseDoubleClickEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_dragEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QDragEnterEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_dragEnterEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QDragMoveEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_dragMoveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_dragLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QDragLeaveEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_dragLeaveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QDropEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_dropEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QFocusEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_focusInEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QFocusEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_focusOutEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QKeyEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_keyPressEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QTimerEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_timerEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_dropIndicatorPosition(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_dropIndicatorPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QColumnView,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_dropIndicatorPosition();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QAbstractItemView_DropIndicatorPosition);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_dropIndicatorPosition);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pb",&sipSelf,sipType_QColumnView,&sipCpp,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_focusNextPrevChild(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_focusNextPrevChild);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_inputMethodEvent(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QInputMethodEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_inputMethodEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_columnWidths(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_columnWidths(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColumnView,&sipCpp))
        {
            QList<int> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<int>(sipCpp->columnWidths());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_1800,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_columnWidths);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_previewWidget(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_previewWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColumnView,&sipCpp))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->previewWidget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_previewWidget);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_resizeGripsVisible(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_resizeGripsVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColumnView,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->resizeGripsVisible();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_resizeGripsVisible);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_setColumnWidths(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_setColumnWidths(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QList<int> * a0;
        int a0State = 0;
        QColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QList_1800,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setColumnWidths(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QList<int> *>(a0),sipType_QList_1800,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_setColumnWidths);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_setPreviewWidget(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_setPreviewWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWidget * a0;
        QColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ:",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QWidget,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPreviewWidget(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_setPreviewWidget);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_setResizeGripsVisible(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_setResizeGripsVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QColumnView,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setResizeGripsVisible(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_setResizeGripsVisible);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_indexAt(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_indexAt(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPoint * a0;
        QColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QPoint,&a0))
        {
            QModelIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QColumnView::indexAt(*a0) : sipCpp->indexAt(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_indexAt);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_scrollTo(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_scrollTo(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QAbstractItemView::ScrollHint a1 = QAbstractItemView::EnsureVisible;
        QColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9|E",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QModelIndex,&a0,sipType_QAbstractItemView_ScrollHint,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QColumnView::scrollTo(*a0,a1) : sipCpp->scrollTo(*a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_scrollTo);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColumnView,&sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QColumnView::sizeHint() : sipCpp->sizeHint()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_sizeHint);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_visualRect(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_visualRect(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QModelIndex,&a0))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect((sipSelfWasArg ? sipCpp->QColumnView::visualRect(*a0) : sipCpp->visualRect(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_visualRect);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_setModel(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_setModel(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemModel * a0;
        PyObject *a0Keep;
        QColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B@J8",&sipSelf,sipType_QColumnView,&sipCpp,&a0Keep,sipType_QAbstractItemModel,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QColumnView::setModel(a0) : sipCpp->setModel(a0));
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, 6, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_setModel);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_setSelectionModel(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_setSelectionModel(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QItemSelectionModel * a0;
        PyObject *a0Keep;
        QColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B@J8",&sipSelf,sipType_QColumnView,&sipCpp,&a0Keep,sipType_QItemSelectionModel,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QColumnView::setSelectionModel(a0) : sipCpp->setSelectionModel(a0));
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, 7, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_setSelectionModel);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_setRootIndex(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_setRootIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QModelIndex,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QColumnView::setRootIndex(*a0) : sipCpp->setRootIndex(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_setRootIndex);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_selectAll(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_selectAll(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColumnView,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QColumnView::selectAll() : sipCpp->selectAll());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_selectAll);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_createColumn(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_createColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QModelIndex,&a0))
        {
            QAbstractItemView *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_createColumn(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractItemView,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_createColumn);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_initializeColumn(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_initializeColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QAbstractItemView * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QAbstractItemView,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_initializeColumn(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_initializeColumn);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_isIndexHidden(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_isIndexHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QModelIndex,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_isIndexHidden(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_isIndexHidden);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_moveCursor(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_moveCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        Qt::KeyboardModifiers * a1;
        int a1State = 0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pEJ1",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QAbstractItemView_CursorAction,&a0,sipType_Qt_KeyboardModifiers,&a1,&a1State))
        {
            QModelIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->sipProtectVirt_moveCursor(sipSelfWasArg,a0,*a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_Qt_KeyboardModifiers,a1State);

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_moveCursor);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QResizeEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_resizeEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_setSelection(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_setSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRect * a0;
        QItemSelectionModel::SelectionFlags * a1;
        int a1State = 0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9J1",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QRect,&a0,sipType_QItemSelectionModel_SelectionFlags,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_setSelection(sipSelfWasArg,*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_setSelection);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_visualRegionForSelection(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_visualRegionForSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QItemSelection * a0;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QItemSelection,&a0))
        {
            QRegion *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRegion(sipCpp->sipProtectVirt_visualRegionForSelection(sipSelfWasArg,*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRegion,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_visualRegionForSelection);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_horizontalOffset(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_horizontalOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QColumnView,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_horizontalOffset(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_horizontalOffset);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_verticalOffset(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_verticalOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QColumnView,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_verticalOffset(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_verticalOffset);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_scrollContentsBy(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_scrollContentsBy(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pii",&sipSelf,sipType_QColumnView,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_scrollContentsBy(sipSelfWasArg,a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_scrollContentsBy);

    return NULL;
}


extern "C" {static PyObject *meth_QColumnView_currentChanged(PyObject *, PyObject *);}
static PyObject *meth_QColumnView_currentChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        const QModelIndex * a1;
        sipQColumnView *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9J9",&sipSelf,sipType_QColumnView,&sipCpp,sipType_QModelIndex,&a0,sipType_QModelIndex,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_currentChanged(sipSelfWasArg,*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColumnView,sipName_currentChanged);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QColumnView(void *, const sipTypeDef *);}
static void *cast_QColumnView(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QColumnView)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractItemView)->ctd_cast((QAbstractItemView *)(QColumnView *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QColumnView(void *, int);}
static void release_QColumnView(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQColumnView *>(sipCppV);
    else
        delete reinterpret_cast<QColumnView *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QColumnView(sipSimpleWrapper *);}
static void dealloc_QColumnView(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQColumnView *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QColumnView(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QColumnView(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QColumnView(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **sipOwner, int *sipArgsParsed)
{
    sipQColumnView *sipCpp = 0;

    if (!sipCpp)
    {
        QWidget * a0 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"|JH",sipType_QWidget,&a0,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQColumnView(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QColumnView[] = {{5, 255, 1}};


static PyMethodDef methods_QColumnView[] = {
    {SIP_MLNAME_CAST(sipName_actionEvent), meth_QColumnView_actionEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QColumnView_changeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QColumnView_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_closeEditor), meth_QColumnView_closeEditor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_closeEvent), meth_QColumnView_closeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_columnWidths), meth_QColumnView_columnWidths, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_commitData), meth_QColumnView_commitData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QColumnView_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), meth_QColumnView_contextMenuEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_create), meth_QColumnView_create, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createColumn), meth_QColumnView_createColumn, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentChanged), meth_QColumnView_currentChanged, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QColumnView_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dataChanged), meth_QColumnView_dataChanged, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_destroy), meth_QColumnView_destroy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dirtyRegionOffset), meth_QColumnView_dirtyRegionOffset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QColumnView_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), meth_QColumnView_dragEnterEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), meth_QColumnView_dragLeaveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), meth_QColumnView_dragMoveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawFrame), meth_QColumnView_drawFrame, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dropEvent), meth_QColumnView_dropEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dropIndicatorPosition), meth_QColumnView_dropIndicatorPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_edit), meth_QColumnView_edit, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_editorDestroyed), meth_QColumnView_editorDestroyed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_enabledChange), meth_QColumnView_enabledChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_enterEvent), meth_QColumnView_enterEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_event), meth_QColumnView_event, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_executeDelayedItemsLayout), meth_QColumnView_executeDelayedItemsLayout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QColumnView_focusInEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextChild), meth_QColumnView_focusNextChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), meth_QColumnView_focusNextPrevChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QColumnView_focusOutEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusPreviousChild), meth_QColumnView_focusPreviousChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fontChange), meth_QColumnView_fontChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hideEvent), meth_QColumnView_hideEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_horizontalOffset), meth_QColumnView_horizontalOffset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_horizontalScrollbarAction), meth_QColumnView_horizontalScrollbarAction, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_horizontalScrollbarValueChanged), meth_QColumnView_horizontalScrollbarValueChanged, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_horizontalStepsPerItem), meth_QColumnView_horizontalStepsPerItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_indexAt), meth_QColumnView_indexAt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_initializeColumn), meth_QColumnView_initializeColumn, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), meth_QColumnView_inputMethodEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isIndexHidden), meth_QColumnView_isIndexHidden, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QColumnView_keyPressEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), meth_QColumnView_keyReleaseEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_languageChange), meth_QColumnView_languageChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_leaveEvent), meth_QColumnView_leaveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_metric), meth_QColumnView_metric, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), meth_QColumnView_mouseDoubleClickEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QColumnView_mouseMoveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QColumnView_mousePressEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QColumnView_mouseReleaseEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveCursor), meth_QColumnView_moveCursor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveEvent), meth_QColumnView_moveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QColumnView_paintEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paletteChange), meth_QColumnView_paletteChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_previewWidget), meth_QColumnView_previewWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QColumnView_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resetInputContext), meth_QColumnView_resetInputContext, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QColumnView_resizeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resizeGripsVisible), meth_QColumnView_resizeGripsVisible, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rowsAboutToBeRemoved), meth_QColumnView_rowsAboutToBeRemoved, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rowsInserted), meth_QColumnView_rowsInserted, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scheduleDelayedItemsLayout), meth_QColumnView_scheduleDelayedItemsLayout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scrollContentsBy), meth_QColumnView_scrollContentsBy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scrollDirtyRegion), meth_QColumnView_scrollDirtyRegion, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scrollTo), meth_QColumnView_scrollTo, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_selectAll), meth_QColumnView_selectAll, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_selectedIndexes), meth_QColumnView_selectedIndexes, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_selectionChanged), meth_QColumnView_selectionChanged, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_selectionCommand), meth_QColumnView_selectionCommand, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setColumnWidths), meth_QColumnView_setColumnWidths, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDirtyRegion), meth_QColumnView_setDirtyRegion, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setHorizontalStepsPerItem), meth_QColumnView_setHorizontalStepsPerItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setModel), meth_QColumnView_setModel, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPreviewWidget), meth_QColumnView_setPreviewWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setResizeGripsVisible), meth_QColumnView_setResizeGripsVisible, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRootIndex), meth_QColumnView_setRootIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSelection), meth_QColumnView_setSelection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSelectionModel), meth_QColumnView_setSelectionModel, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setState), meth_QColumnView_setState, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setVerticalStepsPerItem), meth_QColumnView_setVerticalStepsPerItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setViewportMargins), meth_QColumnView_setViewportMargins, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setupViewport), meth_QColumnView_setupViewport, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_showEvent), meth_QColumnView_showEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QColumnView_sizeHint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_startDrag), meth_QColumnView_startDrag, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_state), meth_QColumnView_state, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_tabletEvent), meth_QColumnView_tabletEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QColumnView_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateEditorData), meth_QColumnView_updateEditorData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateEditorGeometries), meth_QColumnView_updateEditorGeometries, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateGeometries), meth_QColumnView_updateGeometries, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateMicroFocus), meth_QColumnView_updateMicroFocus, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_verticalOffset), meth_QColumnView_verticalOffset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_verticalScrollbarAction), meth_QColumnView_verticalScrollbarAction, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_verticalScrollbarValueChanged), meth_QColumnView_verticalScrollbarValueChanged, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_verticalStepsPerItem), meth_QColumnView_verticalStepsPerItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_viewOptions), meth_QColumnView_viewOptions, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_viewportEvent), meth_QColumnView_viewportEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_visualRect), meth_QColumnView_visualRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_visualRegionForSelection), meth_QColumnView_visualRegionForSelection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_wheelEvent), meth_QColumnView_wheelEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_windowActivationChange), meth_QColumnView_windowActivationChange, METH_VARARGS, NULL}
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QColumnView[] = {
    {"updatePreviewWidget(const QModelIndex&)", 0},
    {0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QColumnView = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QColumnView,
        {0}
    },
    {
        sipNameNr_QColumnView,
        {0, 0, 1},
        105, methods_QColumnView,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QColumnView,
    0,
    init_QColumnView,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QColumnView,
    0,
    0,
    0,
    release_QColumnView,
    cast_QColumnView,
    0,
    0,
    0
},
    &QColumnView::staticMetaObject,
    0,
    pyqt4_signals_QColumnView
};

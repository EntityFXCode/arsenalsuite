/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:24 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 39 "sip/QtGui/qgraphicswidget.sip"
#include <qgraphicswidget.h>
#line 39 "sipQtGuiQGraphicsWidget.cpp"

#line 45 "sip/QtGui/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 43 "sipQtGuiQGraphicsWidget.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 46 "sipQtGuiQGraphicsWidget.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 49 "sipQtGuiQGraphicsWidget.cpp"
#line 37 "sip/QtGui/qaction.sip"
#include <qaction.h>
#line 52 "sipQtGuiQGraphicsWidget.cpp"
#line 41 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 55 "sipQtGuiQGraphicsWidget.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 58 "sipQtGuiQGraphicsWidget.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 61 "sipQtGuiQGraphicsWidget.cpp"
#line 190 "sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 64 "sipQtGuiQGraphicsWidget.cpp"
#line 407 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 67 "sipQtGuiQGraphicsWidget.cpp"
#line 264 "sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 70 "sipQtGuiQGraphicsWidget.cpp"
#line 281 "sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 73 "sipQtGuiQGraphicsWidget.cpp"
#line 419 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 76 "sipQtGuiQGraphicsWidget.cpp"
#line 320 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 79 "sipQtGuiQGraphicsWidget.cpp"
#line 383 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 82 "sipQtGuiQGraphicsWidget.cpp"
#line 94 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 85 "sipQtGuiQGraphicsWidget.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 88 "sipQtGuiQGraphicsWidget.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 91 "sipQtGuiQGraphicsWidget.cpp"
#line 100 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 94 "sipQtGuiQGraphicsWidget.cpp"
#line 41 "sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 97 "sipQtGuiQGraphicsWidget.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 100 "sipQtGuiQGraphicsWidget.cpp"
#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 103 "sipQtGuiQGraphicsWidget.cpp"
#line 41 "sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 57 "sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 108 "sipQtGuiQGraphicsWidget.cpp"
#line 160 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 111 "sipQtGuiQGraphicsWidget.cpp"
#line 41 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 114 "sipQtGuiQGraphicsWidget.cpp"
#line 1597 "sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 117 "sipQtGuiQGraphicsWidget.cpp"
#line 41 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 120 "sipQtGuiQGraphicsWidget.cpp"
#line 41 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 123 "sipQtGuiQGraphicsWidget.cpp"
#line 41 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 126 "sipQtGuiQGraphicsWidget.cpp"
#line 41 "sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 129 "sipQtGuiQGraphicsWidget.cpp"
#line 39 "sip/QtGui/qgraphicslayout.sip"
#include <qgraphicslayout.h>
#line 132 "sipQtGuiQGraphicsWidget.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 135 "sipQtGuiQGraphicsWidget.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 138 "sipQtGuiQGraphicsWidget.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 141 "sipQtGuiQGraphicsWidget.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 144 "sipQtGuiQGraphicsWidget.cpp"
#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 147 "sipQtGuiQGraphicsWidget.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 150 "sipQtGuiQGraphicsWidget.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 153 "sipQtGuiQGraphicsWidget.cpp"
#line 45 "sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 156 "sipQtGuiQGraphicsWidget.cpp"
#line 41 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 159 "sipQtGuiQGraphicsWidget.cpp"
#line 41 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 162 "sipQtGuiQGraphicsWidget.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 165 "sipQtGuiQGraphicsWidget.cpp"
#line 139 "sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 168 "sipQtGuiQGraphicsWidget.cpp"
#line 112 "sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 171 "sipQtGuiQGraphicsWidget.cpp"
#line 291 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 174 "sipQtGuiQGraphicsWidget.cpp"
#line 461 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 477 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 179 "sipQtGuiQGraphicsWidget.cpp"
#line 237 "sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 182 "sipQtGuiQGraphicsWidget.cpp"
#line 163 "sip/QtGui/qgraphicssceneevent.sip"
#include <qgraphicssceneevent.h>
#line 185 "sipQtGuiQGraphicsWidget.cpp"
#line 329 "sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 188 "sipQtGuiQGraphicsWidget.cpp"
#line 41 "sip/QtGui/qmatrix.sip"
#include <qmatrix.h>
#line 191 "sipQtGuiQGraphicsWidget.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 194 "sipQtGuiQGraphicsWidget.cpp"
#line 41 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 197 "sipQtGuiQGraphicsWidget.cpp"
#line 45 "sip/QtGui/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 200 "sipQtGuiQGraphicsWidget.cpp"
#line 859 "sip/QtGui/qgraphicsitem.sip"
#include <qgraphicsitem.h>
#line 203 "sipQtGuiQGraphicsWidget.cpp"
#line 45 "sip/QtGui/qgraphicsscene.sip"
#include <qgraphicsscene.h>
#line 206 "sipQtGuiQGraphicsWidget.cpp"
#line 39 "sip/QtGui/qgraphicslayoutitem.sip"
#include <qgraphicslayoutitem.h>
#line 209 "sipQtGuiQGraphicsWidget.cpp"
#line 41 "sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 212 "sipQtGuiQGraphicsWidget.cpp"
#line 43 "sip/QtGui/qgraphicswidget.sip"
// Transfer ownership of all widgets in a layout to their new parent.
static void qtgui_TransferGraphicsLayoutWidgets(QGraphicsLayout *lay, PyObject *pw)
{
    int n = lay->count();

    for (int i = 0; i < n; ++i)
    {
        QGraphicsLayoutItem *item = lay->itemAt(i);

        if (item->isLayout())
            qtgui_TransferGraphicsLayoutWidgets(static_cast<QGraphicsLayout *>(item), pw);
        else
        {
            PyObject *obj = sipGetPyObject(static_cast<QGraphicsWidget *>(item), sipType_QGraphicsWidget);

            if (obj)
                sipTransferTo(obj, pw);
        }
    }
}
#line 234 "sipQtGuiQGraphicsWidget.cpp"


class sipQGraphicsWidget : public QGraphicsWidget
{
public:
    sipQGraphicsWidget(QGraphicsItem *,Qt::WindowFlags);
    virtual ~sipQGraphicsWidget();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_setGraphicsItem(QGraphicsItem *);
    void sipProtect_setOwnedByLayout(bool);
    void sipProtectVirt_contextMenuEvent(bool,QGraphicsSceneContextMenuEvent *);
    void sipProtectVirt_dragEnterEvent(bool,QGraphicsSceneDragDropEvent *);
    void sipProtectVirt_dragLeaveEvent(bool,QGraphicsSceneDragDropEvent *);
    void sipProtectVirt_dragMoveEvent(bool,QGraphicsSceneDragDropEvent *);
    void sipProtectVirt_dropEvent(bool,QGraphicsSceneDragDropEvent *);
    void sipProtectVirt_hoverEnterEvent(bool,QGraphicsSceneHoverEvent *);
    void sipProtectVirt_inputMethodEvent(bool,QInputMethodEvent *);
    QVariant sipProtectVirt_inputMethodQuery(bool,Qt::InputMethodQuery) const;
    void sipProtectVirt_keyPressEvent(bool,QKeyEvent *);
    void sipProtectVirt_keyReleaseEvent(bool,QKeyEvent *);
    void sipProtectVirt_mouseDoubleClickEvent(bool,QGraphicsSceneMouseEvent *);
    void sipProtectVirt_mouseMoveEvent(bool,QGraphicsSceneMouseEvent *);
    void sipProtectVirt_mousePressEvent(bool,QGraphicsSceneMouseEvent *);
    void sipProtectVirt_mouseReleaseEvent(bool,QGraphicsSceneMouseEvent *);
    void sipProtect_prepareGeometryChange();
    bool sipProtectVirt_sceneEventFilter(bool,QGraphicsItem *,QEvent *);
    void sipProtectVirt_wheelEvent(bool,QGraphicsSceneWheelEvent *);
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    void sipProtectVirt_initStyleOption(bool,QStyleOption *) const;
    QSizeF sipProtectVirt_sizeHint(bool,Qt::SizeHint,const QSizeF&) const;
    void sipProtectVirt_updateGeometry(bool);
    QVariant sipProtectVirt_itemChange(bool,QGraphicsItem::GraphicsItemChange,const QVariant&);
    QVariant sipProtectVirt_propertyChange(bool,const QString&,const QVariant&);
    bool sipProtectVirt_sceneEvent(bool,QEvent *);
    bool sipProtectVirt_windowFrameEvent(bool,QEvent *);
    Qt::WindowFrameSection sipProtectVirt_windowFrameSectionAt(bool,const QPointF&) const;
    bool sipProtectVirt_event(bool,QEvent *);
    void sipProtectVirt_changeEvent(bool,QEvent *);
    void sipProtectVirt_closeEvent(bool,QCloseEvent *);
    void sipProtectVirt_focusInEvent(bool,QFocusEvent *);
    bool sipProtectVirt_focusNextPrevChild(bool,bool);
    void sipProtectVirt_focusOutEvent(bool,QFocusEvent *);
    void sipProtectVirt_hideEvent(bool,QHideEvent *);
    void sipProtectVirt_moveEvent(bool,QGraphicsSceneMoveEvent *);
    void sipProtectVirt_polishEvent(bool);
    void sipProtectVirt_resizeEvent(bool,QGraphicsSceneResizeEvent *);
    void sipProtectVirt_showEvent(bool,QShowEvent *);
    void sipProtectVirt_hoverMoveEvent(bool,QGraphicsSceneHoverEvent *);
    void sipProtectVirt_hoverLeaveEvent(bool,QGraphicsSceneHoverEvent *);
    void sipProtectVirt_grabMouseEvent(bool,QEvent *);
    void sipProtectVirt_ungrabMouseEvent(bool,QEvent *);
    void sipProtectVirt_grabKeyboardEvent(bool,QEvent *);
    void sipProtectVirt_ungrabKeyboardEvent(bool,QEvent *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void setGeometry(const QRectF&);
    void getContentsMargins(qreal *,qreal *,qreal *,qreal *) const;
    int type() const;
    void paint(QPainter *,const QStyleOptionGraphicsItem *,QWidget *);
    void paintWindowFrame(QPainter *,const QStyleOptionGraphicsItem *,QWidget *);
    QRectF boundingRect() const;
    QPainterPath shape() const;
    void initStyleOption(QStyleOption *) const;
    QSizeF sizeHint(Qt::SizeHint,const QSizeF&) const;
    void updateGeometry();
    QVariant itemChange(QGraphicsItem::GraphicsItemChange,const QVariant&);
    QVariant propertyChange(const QString&,const QVariant&);
    bool sceneEvent(QEvent *);
    bool windowFrameEvent(QEvent *);
    Qt::WindowFrameSection windowFrameSectionAt(const QPointF&) const;
    bool event(QEvent *);
    void changeEvent(QEvent *);
    void closeEvent(QCloseEvent *);
    void focusInEvent(QFocusEvent *);
    bool focusNextPrevChild(bool);
    void focusOutEvent(QFocusEvent *);
    void hideEvent(QHideEvent *);
    void moveEvent(QGraphicsSceneMoveEvent *);
    void polishEvent();
    void resizeEvent(QGraphicsSceneResizeEvent *);
    void showEvent(QShowEvent *);
    void hoverMoveEvent(QGraphicsSceneHoverEvent *);
    void hoverLeaveEvent(QGraphicsSceneHoverEvent *);
    void grabMouseEvent(QEvent *);
    void ungrabMouseEvent(QEvent *);
    void grabKeyboardEvent(QEvent *);
    void ungrabKeyboardEvent(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);
    void advance(int);
    bool contains(const QPointF&) const;
    bool collidesWithItem(const QGraphicsItem *,Qt::ItemSelectionMode) const;
    bool collidesWithPath(const QPainterPath&,Qt::ItemSelectionMode) const;
    bool isObscuredBy(const QGraphicsItem *) const;
    QPainterPath opaqueArea() const;
    void contextMenuEvent(QGraphicsSceneContextMenuEvent *);
    void dragEnterEvent(QGraphicsSceneDragDropEvent *);
    void dragLeaveEvent(QGraphicsSceneDragDropEvent *);
    void dragMoveEvent(QGraphicsSceneDragDropEvent *);
    void dropEvent(QGraphicsSceneDragDropEvent *);
    void hoverEnterEvent(QGraphicsSceneHoverEvent *);
    void inputMethodEvent(QInputMethodEvent *);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    void keyPressEvent(QKeyEvent *);
    void keyReleaseEvent(QKeyEvent *);
    void mouseDoubleClickEvent(QGraphicsSceneMouseEvent *);
    void mouseMoveEvent(QGraphicsSceneMouseEvent *);
    void mousePressEvent(QGraphicsSceneMouseEvent *);
    void mouseReleaseEvent(QGraphicsSceneMouseEvent *);
    bool sceneEventFilter(QGraphicsItem *,QEvent *);
    void wheelEvent(QGraphicsSceneWheelEvent *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQGraphicsWidget(const sipQGraphicsWidget &);
    sipQGraphicsWidget &operator = (const sipQGraphicsWidget &);

    char sipPyMethods[60];
};

sipQGraphicsWidget::sipQGraphicsWidget(QGraphicsItem *a0,Qt::WindowFlags a1): QGraphicsWidget(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQGraphicsWidget::~sipQGraphicsWidget()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQGraphicsWidget::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QGraphicsWidget);
}

int sipQGraphicsWidget::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QGraphicsWidget::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QGraphicsWidget,_c,_id,_a);

    return _id;
}

void *sipQGraphicsWidget::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QGraphicsWidget,_clname)) ? this : QGraphicsWidget::qt_metacast(_clname);
}

void sipQGraphicsWidget::setGeometry(const QRectF& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_setGeometry);

    if (!meth)
    {
        QGraphicsWidget::setGeometry(a0);
        return;
    }

    extern void sipVH_QtGui_138(sip_gilstate_t,PyObject *,bool*,const QRectF&);

    sipVH_QtGui_138(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::getContentsMargins(qreal *a0,qreal *a1,qreal *a2,qreal *a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_getContentsMargins);

    if (!meth)
    {
        QGraphicsWidget::getContentsMargins(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtGui_198(sip_gilstate_t,PyObject *,bool*,double *,double *,double *,double *);

    sipVH_QtGui_198(sipGILState,meth,0,a0,a1,a2,a3);
}

int sipQGraphicsWidget::type() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_type);

    if (!meth)
        return QGraphicsWidget::type();

    typedef int (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtGui_QtCore->em_virthandlers[7]))(sipGILState,meth,0);
}

void sipQGraphicsWidget::paint(QPainter *a0,const QStyleOptionGraphicsItem *a1,QWidget *a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_paint);

    if (!meth)
    {
        QGraphicsWidget::paint(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_197(sip_gilstate_t,PyObject *,bool*,QPainter *,const QStyleOptionGraphicsItem *,QWidget *);

    sipVH_QtGui_197(sipGILState,meth,0,a0,a1,a2);
}

void sipQGraphicsWidget::paintWindowFrame(QPainter *a0,const QStyleOptionGraphicsItem *a1,QWidget *a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_paintWindowFrame);

    if (!meth)
    {
        QGraphicsWidget::paintWindowFrame(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_197(sip_gilstate_t,PyObject *,bool*,QPainter *,const QStyleOptionGraphicsItem *,QWidget *);

    sipVH_QtGui_197(sipGILState,meth,0,a0,a1,a2);
}

QRectF sipQGraphicsWidget::boundingRect() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_boundingRect);

    if (!meth)
        return QGraphicsWidget::boundingRect();

    extern QRectF sipVH_QtGui_196(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_196(sipGILState,meth,0);
}

QPainterPath sipQGraphicsWidget::shape() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_shape);

    if (!meth)
        return QGraphicsWidget::shape();

    extern QPainterPath sipVH_QtGui_195(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_195(sipGILState,meth,0);
}

void sipQGraphicsWidget::initStyleOption(QStyleOption *a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_initStyleOption);

    if (!meth)
    {
        QGraphicsWidget::initStyleOption(a0);
        return;
    }

    extern void sipVH_QtGui_194(sip_gilstate_t,PyObject *,bool*,QStyleOption *);

    sipVH_QtGui_194(sipGILState,meth,0,a0);
}

QSizeF sipQGraphicsWidget::sizeHint(Qt::SizeHint a0,const QSizeF& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_sizeHint);

    if (!meth)
        return QGraphicsWidget::sizeHint(a0,a1);

    extern QSizeF sipVH_QtGui_193(sip_gilstate_t,PyObject *,bool*,Qt::SizeHint,const QSizeF&);

    return sipVH_QtGui_193(sipGILState,meth,0,a0,a1);
}

void sipQGraphicsWidget::updateGeometry()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_updateGeometry);

    if (!meth)
    {
        QGraphicsWidget::updateGeometry();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

QVariant sipQGraphicsWidget::itemChange(QGraphicsItem::GraphicsItemChange a0,const QVariant& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_itemChange);

    if (!meth)
        return QGraphicsWidget::itemChange(a0,a1);

    extern QVariant sipVH_QtGui_192(sip_gilstate_t,PyObject *,bool*,QGraphicsItem::GraphicsItemChange,const QVariant&);

    return sipVH_QtGui_192(sipGILState,meth,0,a0,a1);
}

QVariant sipQGraphicsWidget::propertyChange(const QString& a0,const QVariant& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_propertyChange);

    if (!meth)
        return QGraphicsWidget::propertyChange(a0,a1);

    extern QVariant sipVH_QtGui_191(sip_gilstate_t,PyObject *,bool*,const QString&,const QVariant&);

    return sipVH_QtGui_191(sipGILState,meth,0,a0,a1);
}

bool sipQGraphicsWidget::sceneEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_sceneEvent);

    if (!meth)
        return QGraphicsWidget::sceneEvent(a0);

    typedef bool (*sipVH_QtCore_12)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return ((sipVH_QtCore_12)(sipModuleAPI_QtGui_QtCore->em_virthandlers[12]))(sipGILState,meth,0,a0);
}

bool sipQGraphicsWidget::windowFrameEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_windowFrameEvent);

    if (!meth)
        return QGraphicsWidget::windowFrameEvent(a0);

    typedef bool (*sipVH_QtCore_12)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return ((sipVH_QtCore_12)(sipModuleAPI_QtGui_QtCore->em_virthandlers[12]))(sipGILState,meth,0,a0);
}

Qt::WindowFrameSection sipQGraphicsWidget::windowFrameSectionAt(const QPointF& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_windowFrameSectionAt);

    if (!meth)
        return QGraphicsWidget::windowFrameSectionAt(a0);

    extern Qt::WindowFrameSection sipVH_QtGui_190(sip_gilstate_t,PyObject *,bool*,const QPointF&);

    return sipVH_QtGui_190(sipGILState,meth,0,a0);
}

bool sipQGraphicsWidget::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QGraphicsWidget::event(a0);

    typedef bool (*sipVH_QtCore_12)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return ((sipVH_QtCore_12)(sipModuleAPI_QtGui_QtCore->em_virthandlers[12]))(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::changeEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_changeEvent);

    if (!meth)
    {
        QGraphicsWidget::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::closeEvent(QCloseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_closeEvent);

    if (!meth)
    {
        QGraphicsWidget::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t,PyObject *,bool*,QCloseEvent *);

    sipVH_QtGui_23(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::focusInEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_focusInEvent);

    if (!meth)
    {
        QGraphicsWidget::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,bool*,QFocusEvent *);

    sipVH_QtGui_25(sipGILState,meth,0,a0);
}

bool sipQGraphicsWidget::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!meth)
        return QGraphicsWidget::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_12(sip_gilstate_t,PyObject *,bool*,bool);

    return sipVH_QtGui_12(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::focusOutEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_focusOutEvent);

    if (!meth)
    {
        QGraphicsWidget::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,bool*,QFocusEvent *);

    sipVH_QtGui_25(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::hideEvent(QHideEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_hideEvent);

    if (!meth)
    {
        QGraphicsWidget::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t,PyObject *,bool*,QHideEvent *);

    sipVH_QtGui_0(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::moveEvent(QGraphicsSceneMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_moveEvent);

    if (!meth)
    {
        QGraphicsWidget::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_189(sip_gilstate_t,PyObject *,bool*,QGraphicsSceneMoveEvent *);

    sipVH_QtGui_189(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::polishEvent()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_polishEvent);

    if (!meth)
    {
        QGraphicsWidget::polishEvent();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

void sipQGraphicsWidget::resizeEvent(QGraphicsSceneResizeEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_resizeEvent);

    if (!meth)
    {
        QGraphicsWidget::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_188(sip_gilstate_t,PyObject *,bool*,QGraphicsSceneResizeEvent *);

    sipVH_QtGui_188(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::showEvent(QShowEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_showEvent);

    if (!meth)
    {
        QGraphicsWidget::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t,PyObject *,bool*,QShowEvent *);

    sipVH_QtGui_1(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::hoverMoveEvent(QGraphicsSceneHoverEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_hoverMoveEvent);

    if (!meth)
    {
        QGraphicsWidget::hoverMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_187(sip_gilstate_t,PyObject *,bool*,QGraphicsSceneHoverEvent *);

    sipVH_QtGui_187(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::hoverLeaveEvent(QGraphicsSceneHoverEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_hoverLeaveEvent);

    if (!meth)
    {
        QGraphicsWidget::hoverLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_187(sip_gilstate_t,PyObject *,bool*,QGraphicsSceneHoverEvent *);

    sipVH_QtGui_187(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::grabMouseEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_grabMouseEvent);

    if (!meth)
    {
        QGraphicsWidget::grabMouseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::ungrabMouseEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_ungrabMouseEvent);

    if (!meth)
    {
        QGraphicsWidget::ungrabMouseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::grabKeyboardEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_grabKeyboardEvent);

    if (!meth)
    {
        QGraphicsWidget::grabKeyboardEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::ungrabKeyboardEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_ungrabKeyboardEvent);

    if (!meth)
    {
        QGraphicsWidget::ungrabKeyboardEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

bool sipQGraphicsWidget::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t,PyObject *,bool*,QObject *,QEvent *);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtGui_QtCore->em_virthandlers[20]))(sipGILState,meth,0,a0,a1);
}

void sipQGraphicsWidget::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_3)(sip_gilstate_t,PyObject *,bool*,QTimerEvent *);

    ((sipVH_QtCore_3)(sipModuleAPI_QtGui_QtCore->em_virthandlers[3]))(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_19)(sip_gilstate_t,PyObject *,bool*,QChildEvent *);

    ((sipVH_QtCore_19)(sipModuleAPI_QtGui_QtCore->em_virthandlers[19]))(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::advance(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_advance);

    if (!meth)
    {
        QGraphicsItem::advance(a0);
        return;
    }

    extern void sipVH_QtGui_6(sip_gilstate_t,PyObject *,bool*,int);

    sipVH_QtGui_6(sipGILState,meth,0,a0);
}

bool sipQGraphicsWidget::contains(const QPointF& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,NULL,sipName_contains);

    if (!meth)
        return QGraphicsItem::contains(a0);

    extern bool sipVH_QtGui_208(sip_gilstate_t,PyObject *,bool*,const QPointF&);

    return sipVH_QtGui_208(sipGILState,meth,0,a0);
}

bool sipQGraphicsWidget::collidesWithItem(const QGraphicsItem *a0,Qt::ItemSelectionMode a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[40]),sipPySelf,NULL,sipName_collidesWithItem);

    if (!meth)
        return QGraphicsItem::collidesWithItem(a0,a1);

    extern bool sipVH_QtGui_211(sip_gilstate_t,PyObject *,bool*,const QGraphicsItem *,Qt::ItemSelectionMode);

    return sipVH_QtGui_211(sipGILState,meth,0,a0,a1);
}

bool sipQGraphicsWidget::collidesWithPath(const QPainterPath& a0,Qt::ItemSelectionMode a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[41]),sipPySelf,NULL,sipName_collidesWithPath);

    if (!meth)
        return QGraphicsItem::collidesWithPath(a0,a1);

    extern bool sipVH_QtGui_210(sip_gilstate_t,PyObject *,bool*,const QPainterPath&,Qt::ItemSelectionMode);

    return sipVH_QtGui_210(sipGILState,meth,0,a0,a1);
}

bool sipQGraphicsWidget::isObscuredBy(const QGraphicsItem *a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[42]),sipPySelf,NULL,sipName_isObscuredBy);

    if (!meth)
        return QGraphicsItem::isObscuredBy(a0);

    extern bool sipVH_QtGui_207(sip_gilstate_t,PyObject *,bool*,const QGraphicsItem *);

    return sipVH_QtGui_207(sipGILState,meth,0,a0);
}

QPainterPath sipQGraphicsWidget::opaqueArea() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[43]),sipPySelf,NULL,sipName_opaqueArea);

    if (!meth)
        return QGraphicsItem::opaqueArea();

    extern QPainterPath sipVH_QtGui_195(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_195(sipGILState,meth,0);
}

void sipQGraphicsWidget::contextMenuEvent(QGraphicsSceneContextMenuEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!meth)
    {
        QGraphicsItem::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_204(sip_gilstate_t,PyObject *,bool*,QGraphicsSceneContextMenuEvent *);

    sipVH_QtGui_204(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::dragEnterEvent(QGraphicsSceneDragDropEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!meth)
    {
        QGraphicsItem::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_203(sip_gilstate_t,PyObject *,bool*,QGraphicsSceneDragDropEvent *);

    sipVH_QtGui_203(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::dragLeaveEvent(QGraphicsSceneDragDropEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!meth)
    {
        QGraphicsItem::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_203(sip_gilstate_t,PyObject *,bool*,QGraphicsSceneDragDropEvent *);

    sipVH_QtGui_203(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::dragMoveEvent(QGraphicsSceneDragDropEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!meth)
    {
        QGraphicsItem::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_203(sip_gilstate_t,PyObject *,bool*,QGraphicsSceneDragDropEvent *);

    sipVH_QtGui_203(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::dropEvent(QGraphicsSceneDragDropEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_dropEvent);

    if (!meth)
    {
        QGraphicsItem::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_203(sip_gilstate_t,PyObject *,bool*,QGraphicsSceneDragDropEvent *);

    sipVH_QtGui_203(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::hoverEnterEvent(QGraphicsSceneHoverEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_hoverEnterEvent);

    if (!meth)
    {
        QGraphicsItem::hoverEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_187(sip_gilstate_t,PyObject *,bool*,QGraphicsSceneHoverEvent *);

    sipVH_QtGui_187(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::inputMethodEvent(QInputMethodEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!meth)
    {
        QGraphicsItem::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_14(sip_gilstate_t,PyObject *,bool*,QInputMethodEvent *);

    sipVH_QtGui_14(sipGILState,meth,0,a0);
}

QVariant sipQGraphicsWidget::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[51]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!meth)
        return QGraphicsItem::inputMethodQuery(a0);

    extern QVariant sipVH_QtGui_13(sip_gilstate_t,PyObject *,bool*,Qt::InputMethodQuery);

    return sipVH_QtGui_13(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::keyPressEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,NULL,sipName_keyPressEvent);

    if (!meth)
    {
        QGraphicsItem::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,bool*,QKeyEvent *);

    sipVH_QtGui_26(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::keyReleaseEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!meth)
    {
        QGraphicsItem::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,bool*,QKeyEvent *);

    sipVH_QtGui_26(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::mouseDoubleClickEvent(QGraphicsSceneMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[54],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!meth)
    {
        QGraphicsItem::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_201(sip_gilstate_t,PyObject *,bool*,QGraphicsSceneMouseEvent *);

    sipVH_QtGui_201(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::mouseMoveEvent(QGraphicsSceneMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[55],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!meth)
    {
        QGraphicsItem::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_201(sip_gilstate_t,PyObject *,bool*,QGraphicsSceneMouseEvent *);

    sipVH_QtGui_201(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::mousePressEvent(QGraphicsSceneMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[56],sipPySelf,NULL,sipName_mousePressEvent);

    if (!meth)
    {
        QGraphicsItem::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_201(sip_gilstate_t,PyObject *,bool*,QGraphicsSceneMouseEvent *);

    sipVH_QtGui_201(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::mouseReleaseEvent(QGraphicsSceneMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[57],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!meth)
    {
        QGraphicsItem::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_201(sip_gilstate_t,PyObject *,bool*,QGraphicsSceneMouseEvent *);

    sipVH_QtGui_201(sipGILState,meth,0,a0);
}

bool sipQGraphicsWidget::sceneEventFilter(QGraphicsItem *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[58],sipPySelf,NULL,sipName_sceneEventFilter);

    if (!meth)
        return QGraphicsItem::sceneEventFilter(a0,a1);

    extern bool sipVH_QtGui_209(sip_gilstate_t,PyObject *,bool*,QGraphicsItem *,QEvent *);

    return sipVH_QtGui_209(sipGILState,meth,0,a0,a1);
}

void sipQGraphicsWidget::wheelEvent(QGraphicsSceneWheelEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[59],sipPySelf,NULL,sipName_wheelEvent);

    if (!meth)
    {
        QGraphicsItem::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_200(sip_gilstate_t,PyObject *,bool*,QGraphicsSceneWheelEvent *);

    sipVH_QtGui_200(sipGILState,meth,0,a0);
}

void sipQGraphicsWidget::sipProtect_setGraphicsItem(QGraphicsItem *a0)
{
    QGraphicsLayoutItem::setGraphicsItem(a0);
}

void sipQGraphicsWidget::sipProtect_setOwnedByLayout(bool a0)
{
    QGraphicsLayoutItem::setOwnedByLayout(a0);
}

void sipQGraphicsWidget::sipProtectVirt_contextMenuEvent(bool sipSelfWasArg,QGraphicsSceneContextMenuEvent *a0)
{
    (sipSelfWasArg ? QGraphicsItem::contextMenuEvent(a0) : contextMenuEvent(a0));
}

void sipQGraphicsWidget::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg,QGraphicsSceneDragDropEvent *a0)
{
    (sipSelfWasArg ? QGraphicsItem::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQGraphicsWidget::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg,QGraphicsSceneDragDropEvent *a0)
{
    (sipSelfWasArg ? QGraphicsItem::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQGraphicsWidget::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg,QGraphicsSceneDragDropEvent *a0)
{
    (sipSelfWasArg ? QGraphicsItem::dragMoveEvent(a0) : dragMoveEvent(a0));
}

void sipQGraphicsWidget::sipProtectVirt_dropEvent(bool sipSelfWasArg,QGraphicsSceneDragDropEvent *a0)
{
    (sipSelfWasArg ? QGraphicsItem::dropEvent(a0) : dropEvent(a0));
}

void sipQGraphicsWidget::sipProtectVirt_hoverEnterEvent(bool sipSelfWasArg,QGraphicsSceneHoverEvent *a0)
{
    (sipSelfWasArg ? QGraphicsItem::hoverEnterEvent(a0) : hoverEnterEvent(a0));
}

void sipQGraphicsWidget::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg,QInputMethodEvent *a0)
{
    (sipSelfWasArg ? QGraphicsItem::inputMethodEvent(a0) : inputMethodEvent(a0));
}

QVariant sipQGraphicsWidget::sipProtectVirt_inputMethodQuery(bool sipSelfWasArg,Qt::InputMethodQuery a0) const
{
    return (sipSelfWasArg ? QGraphicsItem::inputMethodQuery(a0) : inputMethodQuery(a0));
}

void sipQGraphicsWidget::sipProtectVirt_keyPressEvent(bool sipSelfWasArg,QKeyEvent *a0)
{
    (sipSelfWasArg ? QGraphicsItem::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQGraphicsWidget::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg,QKeyEvent *a0)
{
    (sipSelfWasArg ? QGraphicsItem::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQGraphicsWidget::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg,QGraphicsSceneMouseEvent *a0)
{
    (sipSelfWasArg ? QGraphicsItem::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipQGraphicsWidget::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg,QGraphicsSceneMouseEvent *a0)
{
    (sipSelfWasArg ? QGraphicsItem::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQGraphicsWidget::sipProtectVirt_mousePressEvent(bool sipSelfWasArg,QGraphicsSceneMouseEvent *a0)
{
    (sipSelfWasArg ? QGraphicsItem::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQGraphicsWidget::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg,QGraphicsSceneMouseEvent *a0)
{
    (sipSelfWasArg ? QGraphicsItem::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQGraphicsWidget::sipProtect_prepareGeometryChange()
{
    QGraphicsItem::prepareGeometryChange();
}

bool sipQGraphicsWidget::sipProtectVirt_sceneEventFilter(bool sipSelfWasArg,QGraphicsItem *a0,QEvent *a1)
{
    return (sipSelfWasArg ? QGraphicsItem::sceneEventFilter(a0,a1) : sceneEventFilter(a0,a1));
}

void sipQGraphicsWidget::sipProtectVirt_wheelEvent(bool sipSelfWasArg,QGraphicsSceneWheelEvent *a0)
{
    (sipSelfWasArg ? QGraphicsItem::wheelEvent(a0) : wheelEvent(a0));
}

int sipQGraphicsWidget::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQGraphicsWidget::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQGraphicsWidget::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQGraphicsWidget::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQGraphicsWidget::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQGraphicsWidget::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

void sipQGraphicsWidget::sipProtectVirt_initStyleOption(bool sipSelfWasArg,QStyleOption *a0) const
{
    (sipSelfWasArg ? QGraphicsWidget::initStyleOption(a0) : initStyleOption(a0));
}

QSizeF sipQGraphicsWidget::sipProtectVirt_sizeHint(bool sipSelfWasArg,Qt::SizeHint a0,const QSizeF& a1) const
{
    return (sipSelfWasArg ? QGraphicsWidget::sizeHint(a0,a1) : sizeHint(a0,a1));
}

void sipQGraphicsWidget::sipProtectVirt_updateGeometry(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QGraphicsWidget::updateGeometry() : updateGeometry());
}

QVariant sipQGraphicsWidget::sipProtectVirt_itemChange(bool sipSelfWasArg,QGraphicsItem::GraphicsItemChange a0,const QVariant& a1)
{
    return (sipSelfWasArg ? QGraphicsWidget::itemChange(a0,a1) : itemChange(a0,a1));
}

QVariant sipQGraphicsWidget::sipProtectVirt_propertyChange(bool sipSelfWasArg,const QString& a0,const QVariant& a1)
{
    return (sipSelfWasArg ? QGraphicsWidget::propertyChange(a0,a1) : propertyChange(a0,a1));
}

bool sipQGraphicsWidget::sipProtectVirt_sceneEvent(bool sipSelfWasArg,QEvent *a0)
{
    return (sipSelfWasArg ? QGraphicsWidget::sceneEvent(a0) : sceneEvent(a0));
}

bool sipQGraphicsWidget::sipProtectVirt_windowFrameEvent(bool sipSelfWasArg,QEvent *a0)
{
    return (sipSelfWasArg ? QGraphicsWidget::windowFrameEvent(a0) : windowFrameEvent(a0));
}

Qt::WindowFrameSection sipQGraphicsWidget::sipProtectVirt_windowFrameSectionAt(bool sipSelfWasArg,const QPointF& a0) const
{
    return (sipSelfWasArg ? QGraphicsWidget::windowFrameSectionAt(a0) : windowFrameSectionAt(a0));
}

bool sipQGraphicsWidget::sipProtectVirt_event(bool sipSelfWasArg,QEvent *a0)
{
    return (sipSelfWasArg ? QGraphicsWidget::event(a0) : event(a0));
}

void sipQGraphicsWidget::sipProtectVirt_changeEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWidget::changeEvent(a0) : changeEvent(a0));
}

void sipQGraphicsWidget::sipProtectVirt_closeEvent(bool sipSelfWasArg,QCloseEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWidget::closeEvent(a0) : closeEvent(a0));
}

void sipQGraphicsWidget::sipProtectVirt_focusInEvent(bool sipSelfWasArg,QFocusEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWidget::focusInEvent(a0) : focusInEvent(a0));
}

bool sipQGraphicsWidget::sipProtectVirt_focusNextPrevChild(bool sipSelfWasArg,bool a0)
{
    return (sipSelfWasArg ? QGraphicsWidget::focusNextPrevChild(a0) : focusNextPrevChild(a0));
}

void sipQGraphicsWidget::sipProtectVirt_focusOutEvent(bool sipSelfWasArg,QFocusEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWidget::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQGraphicsWidget::sipProtectVirt_hideEvent(bool sipSelfWasArg,QHideEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWidget::hideEvent(a0) : hideEvent(a0));
}

void sipQGraphicsWidget::sipProtectVirt_moveEvent(bool sipSelfWasArg,QGraphicsSceneMoveEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWidget::moveEvent(a0) : moveEvent(a0));
}

void sipQGraphicsWidget::sipProtectVirt_polishEvent(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QGraphicsWidget::polishEvent() : polishEvent());
}

void sipQGraphicsWidget::sipProtectVirt_resizeEvent(bool sipSelfWasArg,QGraphicsSceneResizeEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWidget::resizeEvent(a0) : resizeEvent(a0));
}

void sipQGraphicsWidget::sipProtectVirt_showEvent(bool sipSelfWasArg,QShowEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWidget::showEvent(a0) : showEvent(a0));
}

void sipQGraphicsWidget::sipProtectVirt_hoverMoveEvent(bool sipSelfWasArg,QGraphicsSceneHoverEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWidget::hoverMoveEvent(a0) : hoverMoveEvent(a0));
}

void sipQGraphicsWidget::sipProtectVirt_hoverLeaveEvent(bool sipSelfWasArg,QGraphicsSceneHoverEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWidget::hoverLeaveEvent(a0) : hoverLeaveEvent(a0));
}

void sipQGraphicsWidget::sipProtectVirt_grabMouseEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWidget::grabMouseEvent(a0) : grabMouseEvent(a0));
}

void sipQGraphicsWidget::sipProtectVirt_ungrabMouseEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWidget::ungrabMouseEvent(a0) : ungrabMouseEvent(a0));
}

void sipQGraphicsWidget::sipProtectVirt_grabKeyboardEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWidget::grabKeyboardEvent(a0) : grabKeyboardEvent(a0));
}

void sipQGraphicsWidget::sipProtectVirt_ungrabKeyboardEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QGraphicsWidget::ungrabKeyboardEvent(a0) : ungrabKeyboardEvent(a0));
}


extern "C" {static PyObject *meth_QGraphicsWidget_setGraphicsItem(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_setGraphicsItem(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGraphicsItem * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QGraphicsItem,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setGraphicsItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_setGraphicsItem);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_setOwnedByLayout(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_setOwnedByLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pb",&sipSelf,sipType_QGraphicsWidget,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setOwnedByLayout(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_setOwnedByLayout);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneContextMenuEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QGraphicsSceneContextMenuEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_contextMenuEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_contextMenuEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_dragEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneDragDropEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QGraphicsSceneDragDropEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_dragEnterEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_dragLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneDragDropEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QGraphicsSceneDragDropEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_dragLeaveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneDragDropEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QGraphicsSceneDragDropEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_dragMoveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneDragDropEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QGraphicsSceneDragDropEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_dropEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_hoverEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_hoverEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneHoverEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QGraphicsSceneHoverEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_hoverEnterEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_hoverEnterEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_inputMethodEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QInputMethodEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_inputMethodEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::InputMethodQuery a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pE",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_Qt_InputMethodQuery,&a0))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->sipProtectVirt_inputMethodQuery(sipSelfWasArg,a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_inputMethodQuery);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QKeyEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_keyPressEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QKeyEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_keyReleaseEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneMouseEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QGraphicsSceneMouseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_mouseDoubleClickEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneMouseEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QGraphicsSceneMouseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_mouseMoveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneMouseEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QGraphicsSceneMouseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_mousePressEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneMouseEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QGraphicsSceneMouseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_mouseReleaseEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_prepareGeometryChange(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_prepareGeometryChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QGraphicsWidget,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_prepareGeometryChange();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_prepareGeometryChange);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_sceneEventFilter(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_sceneEventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsItem * a0;
        QEvent * a1;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8J8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QGraphicsItem,&a0,sipType_QEvent,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_sceneEventFilter(sipSelfWasArg,a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_sceneEventFilter);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneWheelEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QGraphicsSceneWheelEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_wheelEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_receivers(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        char * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QGraphicsWidget,&sipCpp,&a0))
        {
            int sipRes = 0;

#line 480 "sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
#line 2238 "sipQtGuiQGraphicsWidget.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_receivers);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QTimerEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_timerEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QChildEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_childEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_customEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QGraphicsWidget,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_connectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QGraphicsWidget,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_disconnectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_layout(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_layout(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGraphicsWidget,&sipCpp))
        {
            QGraphicsLayout *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->layout();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QGraphicsLayout,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_layout);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_setLayout(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_setLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGraphicsLayout * a0;
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ:",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QGraphicsLayout,&a0))
        {
#line 71 "sip/QtGui/qgraphicswidget.sip"
        Py_BEGIN_ALLOW_THREADS
        sipCpp->setLayout(a0);
        Py_END_ALLOW_THREADS
        
        // Internally Qt has reparented all of the widgets in the layout, so we need
        // to update the ownership hierachy.
        qtgui_TransferGraphicsLayoutWidgets(a0, sipSelf);
#line 2437 "sipQtGuiQGraphicsWidget.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_setLayout);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_adjustSize(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_adjustSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGraphicsWidget,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->adjustSize();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_adjustSize);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_layoutDirection(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_layoutDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGraphicsWidget,&sipCpp))
        {
            Qt::LayoutDirection sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->layoutDirection();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_LayoutDirection);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_layoutDirection);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_setLayoutDirection(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_setLayoutDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Qt::LayoutDirection a0;
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_Qt_LayoutDirection,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLayoutDirection(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_setLayoutDirection);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_unsetLayoutDirection(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_unsetLayoutDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGraphicsWidget,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->unsetLayoutDirection();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_unsetLayoutDirection);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_style(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_style(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGraphicsWidget,&sipCpp))
        {
            QStyle *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->style();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QStyle,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_style);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_setStyle(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_setStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStyle * a0;
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QStyle,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStyle(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_setStyle);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_font(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_font(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGraphicsWidget,&sipCpp))
        {
            QFont *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFont(sipCpp->font());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_font);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_setFont(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_setFont(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QFont * a0;
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QFont,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFont(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_setFont);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_palette(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_palette(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGraphicsWidget,&sipCpp))
        {
            QPalette *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPalette(sipCpp->palette());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPalette,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_palette);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_setPalette(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_setPalette(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPalette * a0;
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QPalette,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPalette(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_setPalette);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_resize(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_resize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QSizeF * a0;
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QSizeF,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resize(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bdd",&sipSelf,sipType_QGraphicsWidget,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resize(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_resize);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_size(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_size(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGraphicsWidget,&sipCpp))
        {
            QSizeF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSizeF(sipCpp->size());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSizeF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_size);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_setGeometry(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_setGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRectF * a0;
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QRectF,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsWidget::setGeometry(*a0) : sipCpp->setGeometry(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bdddd",&sipSelf,sipType_QGraphicsWidget,&sipCpp,&a0,&a1,&a2,&a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setGeometry(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_setGeometry);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_rect(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_rect(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGraphicsWidget,&sipCpp))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->rect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_rect);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_setContentsMargins(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_setContentsMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bdddd",&sipSelf,sipType_QGraphicsWidget,&sipCpp,&a0,&a1,&a2,&a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setContentsMargins(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_setContentsMargins);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_getContentsMargins(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_getContentsMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGraphicsWidget,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsWidget::getContentsMargins(&a0,&a1,&a2,&a3) : sipCpp->getContentsMargins(&a0,&a1,&a2,&a3));
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(dddd)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_getContentsMargins);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_setWindowFrameMargins(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_setWindowFrameMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bdddd",&sipSelf,sipType_QGraphicsWidget,&sipCpp,&a0,&a1,&a2,&a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWindowFrameMargins(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_setWindowFrameMargins);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_getWindowFrameMargins(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_getWindowFrameMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGraphicsWidget,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->getWindowFrameMargins(&a0,&a1,&a2,&a3);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(dddd)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_getWindowFrameMargins);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_unsetWindowFrameMargins(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_unsetWindowFrameMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGraphicsWidget,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->unsetWindowFrameMargins();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_unsetWindowFrameMargins);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_windowFrameGeometry(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_windowFrameGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGraphicsWidget,&sipCpp))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->windowFrameGeometry());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_windowFrameGeometry);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_windowFrameRect(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_windowFrameRect(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGraphicsWidget,&sipCpp))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->windowFrameRect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_windowFrameRect);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_windowFlags(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_windowFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGraphicsWidget,&sipCpp))
        {
            Qt::WindowFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::WindowFlags(sipCpp->windowFlags());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_WindowFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_windowFlags);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_windowType(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_windowType(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGraphicsWidget,&sipCpp))
        {
            Qt::WindowType sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->windowType();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_WindowType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_windowType);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_setWindowFlags(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_setWindowFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Qt::WindowFlags * a0;
        int a0State = 0;
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_Qt_WindowFlags,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWindowFlags(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_Qt_WindowFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_setWindowFlags);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_isActiveWindow(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_isActiveWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGraphicsWidget,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isActiveWindow();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_isActiveWindow);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_setWindowTitle(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_setWindowTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWindowTitle(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_setWindowTitle);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_windowTitle(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_windowTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGraphicsWidget,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->windowTitle());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_windowTitle);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_focusPolicy(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_focusPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGraphicsWidget,&sipCpp))
        {
            Qt::FocusPolicy sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->focusPolicy();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_FocusPolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_focusPolicy);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_setFocusPolicy(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_setFocusPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Qt::FocusPolicy a0;
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_Qt_FocusPolicy,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFocusPolicy(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_setFocusPolicy);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_setTabOrder(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_setTabOrder(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGraphicsWidget * a0;
        QGraphicsWidget * a1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8J8",sipType_QGraphicsWidget,&a0,sipType_QGraphicsWidget,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            QGraphicsWidget::setTabOrder(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_setTabOrder);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_focusWidget(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_focusWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGraphicsWidget,&sipCpp))
        {
            QGraphicsWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->focusWidget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QGraphicsWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_focusWidget);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_setAttribute(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_setAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Qt::WidgetAttribute a0;
        bool a1 = 1;
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE|b",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_Qt_WidgetAttribute,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAttribute(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_setAttribute);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_testAttribute(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_testAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Qt::WidgetAttribute a0;
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_Qt_WidgetAttribute,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->testAttribute(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_testAttribute);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_type(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_type(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGraphicsWidget,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QGraphicsWidget::type() : sipCpp->type());
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_type);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_paint(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_paint(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter * a0;
        const QStyleOptionGraphicsItem * a1;
        QWidget * a2 = 0;
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8J8|J8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QPainter,&a0,sipType_QStyleOptionGraphicsItem,&a1,sipType_QWidget,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsWidget::paint(a0,a1,a2) : sipCpp->paint(a0,a1,a2));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_paint);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_paintWindowFrame(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_paintWindowFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter * a0;
        const QStyleOptionGraphicsItem * a1;
        QWidget * a2 = 0;
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8J8|J8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QPainter,&a0,sipType_QStyleOptionGraphicsItem,&a1,sipType_QWidget,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QGraphicsWidget::paintWindowFrame(a0,a1,a2) : sipCpp->paintWindowFrame(a0,a1,a2));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_paintWindowFrame);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_boundingRect(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_boundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGraphicsWidget,&sipCpp))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF((sipSelfWasArg ? sipCpp->QGraphicsWidget::boundingRect() : sipCpp->boundingRect()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_boundingRect);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_shape(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_shape(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGraphicsWidget,&sipCpp))
        {
            QPainterPath *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPainterPath((sipSelfWasArg ? sipCpp->QGraphicsWidget::shape() : sipCpp->shape()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPainterPath,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_shape);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_children(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_children(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGraphicsWidget,&sipCpp))
        {
            QObjectList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QObjectList(sipCpp->children());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_children);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_close(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_close(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGraphicsWidget,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->close();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_close);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_initStyleOption(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_initStyleOption(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QStyleOption * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QStyleOption,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_initStyleOption(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_initStyleOption);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::SizeHint a0;
        const QSizeF& a1def = QSizeF();
        const QSizeF * a1 = &a1def;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pE|J9",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_Qt_SizeHint,&a0,sipType_QSizeF,&a1))
        {
            QSizeF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSizeF(sipCpp->sipProtectVirt_sizeHint(sipSelfWasArg,a0,*a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSizeF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_sizeHint);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_updateGeometry(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_updateGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QGraphicsWidget,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_updateGeometry(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_updateGeometry);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_itemChange(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_itemChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsItem::GraphicsItemChange a0;
        const QVariant * a1;
        int a1State = 0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pEJ1",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QGraphicsItem_GraphicsItemChange,&a0,sipType_QVariant,&a1,&a1State))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->sipProtectVirt_itemChange(sipSelfWasArg,a0,*a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_itemChange);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_propertyChange(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_propertyChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        const QVariant * a1;
        int a1State = 0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ1J1",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QString,&a0,&a0State,sipType_QVariant,&a1,&a1State))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->sipProtectVirt_propertyChange(sipSelfWasArg,*a0,*a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_propertyChange);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_sceneEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_sceneEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QEvent,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_sceneEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_sceneEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_windowFrameEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_windowFrameEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QEvent,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_windowFrameEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_windowFrameEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_windowFrameSectionAt(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_windowFrameSectionAt(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPointF * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QPointF,&a0))
        {
            Qt::WindowFrameSection sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_windowFrameSectionAt(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_WindowFrameSection);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_windowFrameSectionAt);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_event(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_event(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QEvent,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_event);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_changeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_changeEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_closeEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_closeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QCloseEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QCloseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_closeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_closeEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QFocusEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_focusInEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pb",&sipSelf,sipType_QGraphicsWidget,&sipCpp,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_focusNextPrevChild(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_focusNextPrevChild);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QFocusEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_focusOutEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_hideEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_hideEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QHideEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_hideEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_moveEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_moveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneMoveEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QGraphicsSceneMoveEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_moveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_polishEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_polishEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QGraphicsWidget,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_polishEvent(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_polishEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneResizeEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QGraphicsSceneResizeEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_resizeEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QShowEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_showEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_hoverMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_hoverMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneHoverEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QGraphicsSceneHoverEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_hoverMoveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_hoverMoveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_hoverLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_hoverLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QGraphicsSceneHoverEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QGraphicsSceneHoverEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_hoverLeaveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_hoverLeaveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_grabMouseEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_grabMouseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_grabMouseEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_grabMouseEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_ungrabMouseEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_ungrabMouseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_ungrabMouseEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_ungrabMouseEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_grabKeyboardEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_grabKeyboardEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_grabKeyboardEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_grabKeyboardEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_ungrabKeyboardEvent(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_ungrabKeyboardEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_ungrabKeyboardEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_ungrabKeyboardEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_grabShortcut(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_grabShortcut(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QKeySequence * a0;
        int a0State = 0;
        Qt::ShortcutContext a1 = Qt::WindowShortcut;
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|E",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QKeySequence,&a0,&a0State,sipType_Qt_ShortcutContext,&a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->grabShortcut(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QKeySequence *>(a0),sipType_QKeySequence,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_grabShortcut);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_releaseShortcut(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_releaseShortcut(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QGraphicsWidget,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->releaseShortcut(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_releaseShortcut);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_setShortcutEnabled(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_setShortcutEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        bool a1 = 1;
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi|b",&sipSelf,sipType_QGraphicsWidget,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setShortcutEnabled(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_setShortcutEnabled);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_setShortcutAutoRepeat(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_setShortcutAutoRepeat(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        bool a1 = 1;
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi|b",&sipSelf,sipType_QGraphicsWidget,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setShortcutAutoRepeat(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_setShortcutAutoRepeat);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_addAction(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_addAction(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QAction * a0;
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QAction,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addAction(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_addAction);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_addActions(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_addActions(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QList<QAction *> * a0;
        int a0State = 0;
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QList_0101QAction,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addActions(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QList_0101QAction,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_addActions);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_insertAction(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_insertAction(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QAction * a0;
        QAction * a1;
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8J8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QAction,&a0,sipType_QAction,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertAction(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_insertAction);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_insertActions(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_insertActions(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QAction * a0;
        QList<QAction *> * a1;
        int a1State = 0;
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8J1",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QAction,&a0,sipType_QList_0101QAction,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertActions(a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_QList_0101QAction,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_insertActions);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_removeAction(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_removeAction(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QAction * a0;
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QGraphicsWidget,&sipCpp,sipType_QAction,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeAction(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_removeAction);

    return NULL;
}


extern "C" {static PyObject *meth_QGraphicsWidget_actions(PyObject *, PyObject *);}
static PyObject *meth_QGraphicsWidget_actions(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QGraphicsWidget *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QGraphicsWidget,&sipCpp))
        {
            QList<QAction *> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QAction *>(sipCpp->actions());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QAction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QGraphicsWidget,sipName_actions);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QGraphicsWidget(void *, const sipTypeDef *);}
static void *cast_QGraphicsWidget(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QGraphicsWidget)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QGraphicsWidget *)ptr,targetType)) != NULL)
        return res;

    if ((res = ((const sipClassTypeDef *)sipType_QGraphicsItem)->ctd_cast((QGraphicsItem *)(QGraphicsWidget *)ptr,targetType)) != NULL)
        return res;

    if ((res = ((const sipClassTypeDef *)sipType_QGraphicsLayoutItem)->ctd_cast((QGraphicsLayoutItem *)(QGraphicsWidget *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QGraphicsWidget(void *, int);}
static void release_QGraphicsWidget(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQGraphicsWidget *>(sipCppV);
    else
        delete reinterpret_cast<QGraphicsWidget *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QGraphicsWidget(sipSimpleWrapper *);}
static void dealloc_QGraphicsWidget(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQGraphicsWidget *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QGraphicsWidget(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QGraphicsWidget(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QGraphicsWidget(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **sipOwner, int *sipArgsParsed)
{
    sipQGraphicsWidget *sipCpp = 0;

    if (!sipCpp)
    {
        QGraphicsItem * a0 = 0;
        Qt::WindowFlags a1def = 0;
        Qt::WindowFlags * a1 = &a1def;
        int a1State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"|JHJ1",sipType_QGraphicsItem,&a0,sipOwner,sipType_Qt_WindowFlags,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQGraphicsWidget(a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_Qt_WindowFlags,a1State);
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QGraphicsWidget[] = {{111, 0, 0}, {149, 255, 0}, {157, 255, 1}};


static PyMethodDef methods_QGraphicsWidget[] = {
    {SIP_MLNAME_CAST(sipName_actions), meth_QGraphicsWidget_actions, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addAction), meth_QGraphicsWidget_addAction, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addActions), meth_QGraphicsWidget_addActions, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_adjustSize), meth_QGraphicsWidget_adjustSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_boundingRect), meth_QGraphicsWidget_boundingRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QGraphicsWidget_changeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QGraphicsWidget_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_children), meth_QGraphicsWidget_children, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_close), meth_QGraphicsWidget_close, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_closeEvent), meth_QGraphicsWidget_closeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QGraphicsWidget_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), meth_QGraphicsWidget_contextMenuEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QGraphicsWidget_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QGraphicsWidget_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), meth_QGraphicsWidget_dragEnterEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), meth_QGraphicsWidget_dragLeaveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), meth_QGraphicsWidget_dragMoveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dropEvent), meth_QGraphicsWidget_dropEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_event), meth_QGraphicsWidget_event, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QGraphicsWidget_focusInEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), meth_QGraphicsWidget_focusNextPrevChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QGraphicsWidget_focusOutEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusPolicy), meth_QGraphicsWidget_focusPolicy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusWidget), meth_QGraphicsWidget_focusWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_font), meth_QGraphicsWidget_font, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getContentsMargins), meth_QGraphicsWidget_getContentsMargins, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getWindowFrameMargins), meth_QGraphicsWidget_getWindowFrameMargins, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_grabKeyboardEvent), meth_QGraphicsWidget_grabKeyboardEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_grabMouseEvent), meth_QGraphicsWidget_grabMouseEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_grabShortcut), meth_QGraphicsWidget_grabShortcut, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hideEvent), meth_QGraphicsWidget_hideEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hoverEnterEvent), meth_QGraphicsWidget_hoverEnterEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hoverLeaveEvent), meth_QGraphicsWidget_hoverLeaveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hoverMoveEvent), meth_QGraphicsWidget_hoverMoveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_initStyleOption), meth_QGraphicsWidget_initStyleOption, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), meth_QGraphicsWidget_inputMethodEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodQuery), meth_QGraphicsWidget_inputMethodQuery, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertAction), meth_QGraphicsWidget_insertAction, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertActions), meth_QGraphicsWidget_insertActions, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isActiveWindow), meth_QGraphicsWidget_isActiveWindow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_itemChange), meth_QGraphicsWidget_itemChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QGraphicsWidget_keyPressEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), meth_QGraphicsWidget_keyReleaseEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_layout), meth_QGraphicsWidget_layout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_layoutDirection), meth_QGraphicsWidget_layoutDirection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), meth_QGraphicsWidget_mouseDoubleClickEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QGraphicsWidget_mouseMoveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QGraphicsWidget_mousePressEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QGraphicsWidget_mouseReleaseEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveEvent), meth_QGraphicsWidget_moveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paint), meth_QGraphicsWidget_paint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paintWindowFrame), meth_QGraphicsWidget_paintWindowFrame, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_palette), meth_QGraphicsWidget_palette, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_polishEvent), meth_QGraphicsWidget_polishEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_prepareGeometryChange), meth_QGraphicsWidget_prepareGeometryChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_propertyChange), meth_QGraphicsWidget_propertyChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QGraphicsWidget_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rect), meth_QGraphicsWidget_rect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_releaseShortcut), meth_QGraphicsWidget_releaseShortcut, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeAction), meth_QGraphicsWidget_removeAction, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resize), meth_QGraphicsWidget_resize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QGraphicsWidget_resizeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sceneEvent), meth_QGraphicsWidget_sceneEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sceneEventFilter), meth_QGraphicsWidget_sceneEventFilter, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAttribute), meth_QGraphicsWidget_setAttribute, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setContentsMargins), meth_QGraphicsWidget_setContentsMargins, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFocusPolicy), meth_QGraphicsWidget_setFocusPolicy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFont), meth_QGraphicsWidget_setFont, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setGeometry), meth_QGraphicsWidget_setGeometry, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setGraphicsItem), meth_QGraphicsWidget_setGraphicsItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setLayout), meth_QGraphicsWidget_setLayout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setLayoutDirection), meth_QGraphicsWidget_setLayoutDirection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setOwnedByLayout), meth_QGraphicsWidget_setOwnedByLayout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPalette), meth_QGraphicsWidget_setPalette, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setShortcutAutoRepeat), meth_QGraphicsWidget_setShortcutAutoRepeat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setShortcutEnabled), meth_QGraphicsWidget_setShortcutEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setStyle), meth_QGraphicsWidget_setStyle, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTabOrder), meth_QGraphicsWidget_setTabOrder, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setWindowFlags), meth_QGraphicsWidget_setWindowFlags, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setWindowFrameMargins), meth_QGraphicsWidget_setWindowFrameMargins, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setWindowTitle), meth_QGraphicsWidget_setWindowTitle, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_shape), meth_QGraphicsWidget_shape, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_showEvent), meth_QGraphicsWidget_showEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_size), meth_QGraphicsWidget_size, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QGraphicsWidget_sizeHint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_style), meth_QGraphicsWidget_style, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_testAttribute), meth_QGraphicsWidget_testAttribute, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QGraphicsWidget_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_type), meth_QGraphicsWidget_type, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_ungrabKeyboardEvent), meth_QGraphicsWidget_ungrabKeyboardEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_ungrabMouseEvent), meth_QGraphicsWidget_ungrabMouseEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_unsetLayoutDirection), meth_QGraphicsWidget_unsetLayoutDirection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_unsetWindowFrameMargins), meth_QGraphicsWidget_unsetWindowFrameMargins, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateGeometry), meth_QGraphicsWidget_updateGeometry, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_wheelEvent), meth_QGraphicsWidget_wheelEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_windowFlags), meth_QGraphicsWidget_windowFlags, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_windowFrameEvent), meth_QGraphicsWidget_windowFrameEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_windowFrameGeometry), meth_QGraphicsWidget_windowFrameGeometry, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_windowFrameRect), meth_QGraphicsWidget_windowFrameRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_windowFrameSectionAt), meth_QGraphicsWidget_windowFrameSectionAt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_windowTitle), meth_QGraphicsWidget_windowTitle, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_windowType), meth_QGraphicsWidget_windowType, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QGraphicsWidget = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QGraphicsWidget,
        {0}
    },
    {
        sipNameNr_QGraphicsWidget,
        {0, 0, 1},
        102, methods_QGraphicsWidget,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QGraphicsWidget,
    0,
    init_QGraphicsWidget,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QGraphicsWidget,
    0,
    0,
    0,
    release_QGraphicsWidget,
    cast_QGraphicsWidget,
    0,
    0,
    0
},
    &QGraphicsWidget::staticMetaObject,
    0,
    0
};

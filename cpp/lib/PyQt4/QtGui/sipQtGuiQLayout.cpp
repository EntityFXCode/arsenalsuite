/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:25 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 37 "sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 39 "sipQtGuiQLayout.cpp"

#line 41 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 43 "sipQtGuiQLayout.cpp"
#line 41 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 46 "sipQtGuiQLayout.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 49 "sipQtGuiQLayout.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 52 "sipQtGuiQLayout.cpp"
#line 41 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 55 "sipQtGuiQLayout.cpp"
#line 37 "sip/QtGui/qlayoutitem.sip"
#include <qlayoutitem.h>
#line 58 "sipQtGuiQLayout.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 61 "sipQtGuiQLayout.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 64 "sipQtGuiQLayout.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 67 "sipQtGuiQLayout.cpp"
#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 70 "sipQtGuiQLayout.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 73 "sipQtGuiQLayout.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 76 "sipQtGuiQLayout.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 79 "sipQtGuiQLayout.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 82 "sipQtGuiQLayout.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 85 "sipQtGuiQLayout.cpp"
#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 88 "sipQtGuiQLayout.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 91 "sipQtGuiQLayout.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 94 "sipQtGuiQLayout.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 97 "sipQtGuiQLayout.cpp"
#line 41 "sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 100 "sipQtGuiQLayout.cpp"
#line 79 "sip/QtGui/qlayoutitem.sip"
#include <qlayoutitem.h>
#line 103 "sipQtGuiQLayout.cpp"


class sipQLayout : public QLayout
{
public:
    sipQLayout(QWidget *);
    sipQLayout();
    virtual ~sipQLayout();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    void sipProtect_widgetEvent(QEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtect_addChildLayout(QLayout *);
    void sipProtect_addChildWidget(QWidget *);
    QRect sipProtect_alignmentRect(const QRect&) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void invalidate();
    QRect geometry() const;
    void addItem(QLayoutItem *);
    Qt::Orientations expandingDirections() const;
    QSize minimumSize() const;
    QSize maximumSize() const;
    void setGeometry(const QRect&);
    QLayoutItem * itemAt(int) const;
    QLayoutItem * takeAt(int);
    int indexOf(QWidget *) const;
    int count() const;
    bool isEmpty() const;
    QLayout * layout();
    void childEvent(QChildEvent *);
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);
    QSize sizeHint() const;
    bool hasHeightForWidth() const;
    int heightForWidth(int) const;
    int minimumHeightForWidth(int) const;
    QWidget * widget();
    QSpacerItem * spacerItem();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQLayout(const sipQLayout &);
    sipQLayout &operator = (const sipQLayout &);

    char sipPyMethods[26];
};

sipQLayout::sipQLayout(QWidget *a0): QLayout(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLayout::sipQLayout(): QLayout(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQLayout::~sipQLayout()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQLayout::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QLayout);
}

int sipQLayout::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QLayout::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QLayout,_c,_id,_a);

    return _id;
}

void *sipQLayout::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QLayout,_clname)) ? this : QLayout::qt_metacast(_clname);
}

void sipQLayout::invalidate()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_invalidate);

    if (!meth)
    {
        QLayout::invalidate();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

QRect sipQLayout::geometry() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_geometry);

    if (!meth)
        return QLayout::geometry();

    extern QRect sipVH_QtGui_155(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_155(sipGILState,meth,0);
}

void sipQLayout::addItem(QLayoutItem *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,sipName_QLayout,sipName_addItem);

    if (!meth)
        return;

    extern void sipVH_QtGui_106(sip_gilstate_t,PyObject *,bool*,QLayoutItem *);

    sipVH_QtGui_106(sipGILState,meth,0,a0);
}

Qt::Orientations sipQLayout::expandingDirections() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_expandingDirections);

    if (!meth)
        return QLayout::expandingDirections();

    extern Qt::Orientations sipVH_QtGui_156(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_156(sipGILState,meth,0);
}

QSize sipQLayout::minimumSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_minimumSize);

    if (!meth)
        return QLayout::minimumSize();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_4(sipGILState,meth,0);
}

QSize sipQLayout::maximumSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_maximumSize);

    if (!meth)
        return QLayout::maximumSize();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_4(sipGILState,meth,0);
}

void sipQLayout::setGeometry(const QRect& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_setGeometry);

    if (!meth)
    {
        QLayout::setGeometry(a0);
        return;
    }

    extern void sipVH_QtGui_103(sip_gilstate_t,PyObject *,bool*,const QRect&);

    sipVH_QtGui_103(sipGILState,meth,0,a0);
}

QLayoutItem * sipQLayout::itemAt(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,sipName_QLayout,sipName_itemAt);

    if (!meth)
        return 0;

    extern QLayoutItem * sipVH_QtGui_105(sip_gilstate_t,PyObject *,bool*,int);

    return sipVH_QtGui_105(sipGILState,meth,0,a0);
}

QLayoutItem * sipQLayout::takeAt(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,sipName_QLayout,sipName_takeAt);

    if (!meth)
        return 0;

    extern QLayoutItem * sipVH_QtGui_104(sip_gilstate_t,PyObject *,bool*,int);

    return sipVH_QtGui_104(sipGILState,meth,0,a0);
}

int sipQLayout::indexOf(QWidget *a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_indexOf);

    if (!meth)
        return QLayout::indexOf(a0);

    extern int sipVH_QtGui_159(sip_gilstate_t,PyObject *,bool*,QWidget *);

    return sipVH_QtGui_159(sipGILState,meth,0,a0);
}

int sipQLayout::count() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,sipName_QLayout,sipName_count);

    if (!meth)
        return 0;

    typedef int (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtGui_QtCore->em_virthandlers[7]))(sipGILState,meth,0);
}

bool sipQLayout::isEmpty() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_isEmpty);

    if (!meth)
        return QLayout::isEmpty();

    typedef bool (*sipVH_QtCore_1)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_1)(sipModuleAPI_QtGui_QtCore->em_virthandlers[1]))(sipGILState,meth,0);
}

QLayout * sipQLayout::layout()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_layout);

    if (!meth)
        return QLayout::layout();

    extern QLayout * sipVH_QtGui_158(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_158(sipGILState,meth,0);
}

void sipQLayout::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QLayout::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_19)(sip_gilstate_t,PyObject *,bool*,QChildEvent *);

    ((sipVH_QtCore_19)(sipModuleAPI_QtGui_QtCore->em_virthandlers[19]))(sipGILState,meth,0,a0);
}

bool sipQLayout::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_12)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return ((sipVH_QtCore_12)(sipModuleAPI_QtGui_QtCore->em_virthandlers[12]))(sipGILState,meth,0,a0);
}

bool sipQLayout::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t,PyObject *,bool*,QObject *,QEvent *);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtGui_QtCore->em_virthandlers[20]))(sipGILState,meth,0,a0,a1);
}

void sipQLayout::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_3)(sip_gilstate_t,PyObject *,bool*,QTimerEvent *);

    ((sipVH_QtCore_3)(sipModuleAPI_QtGui_QtCore->em_virthandlers[3]))(sipGILState,meth,0,a0);
}

void sipQLayout::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQLayout::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

void sipQLayout::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

QSize sipQLayout::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,sipName_QLayout,sipName_sizeHint);

    if (!meth)
        return QSize();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_4(sipGILState,meth,0);
}

bool sipQLayout::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!meth)
        return QLayoutItem::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_1)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_1)(sipModuleAPI_QtGui_QtCore->em_virthandlers[1]))(sipGILState,meth,0);
}

int sipQLayout::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_heightForWidth);

    if (!meth)
        return QLayoutItem::heightForWidth(a0);

    extern int sipVH_QtGui_29(sip_gilstate_t,PyObject *,bool*,int);

    return sipVH_QtGui_29(sipGILState,meth,0,a0);
}

int sipQLayout::minimumHeightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_minimumHeightForWidth);

    if (!meth)
        return QLayoutItem::minimumHeightForWidth(a0);

    extern int sipVH_QtGui_29(sip_gilstate_t,PyObject *,bool*,int);

    return sipVH_QtGui_29(sipGILState,meth,0,a0);
}

QWidget * sipQLayout::widget()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_widget);

    if (!meth)
        return QLayoutItem::widget();

    extern QWidget * sipVH_QtGui_107(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_107(sipGILState,meth,0);
}

QSpacerItem * sipQLayout::spacerItem()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_spacerItem);

    if (!meth)
        return QLayoutItem::spacerItem();

    extern QSpacerItem * sipVH_QtGui_157(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_157(sipGILState,meth,0);
}

int sipQLayout::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQLayout::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQLayout::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQLayout::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQLayout::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

void sipQLayout::sipProtect_widgetEvent(QEvent *a0)
{
    QLayout::widgetEvent(a0);
}

void sipQLayout::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QLayout::childEvent(a0) : childEvent(a0));
}

void sipQLayout::sipProtect_addChildLayout(QLayout *a0)
{
    QLayout::addChildLayout(a0);
}

void sipQLayout::sipProtect_addChildWidget(QWidget *a0)
{
    QLayout::addChildWidget(a0);
}

QRect sipQLayout::sipProtect_alignmentRect(const QRect& a0) const
{
    return QLayout::alignmentRect(a0);
}


extern "C" {static PyObject *meth_QLayout_receivers(PyObject *, PyObject *);}
static PyObject *meth_QLayout_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        char * a0;
        sipQLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QLayout,&sipCpp,&a0))
        {
            int sipRes = 0;

#line 480 "sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
#line 696 "sipQtGuiQLayout.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_receivers);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QLayout_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QLayout,&sipCpp,sipType_QTimerEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_timerEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QLayout_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QLayout,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_customEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QLayout_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QLayout,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_connectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QLayout_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QLayout,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_disconnectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_margin(PyObject *, PyObject *);}
static PyObject *meth_QLayout_margin(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLayout,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->margin();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_margin);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_spacing(PyObject *, PyObject *);}
static PyObject *meth_QLayout_spacing(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLayout,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->spacing();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_spacing);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_setMargin(PyObject *, PyObject *);}
static PyObject *meth_QLayout_setMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QLayout,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMargin(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_setMargin);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_setSpacing(PyObject *, PyObject *);}
static PyObject *meth_QLayout_setSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QLayout,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSpacing(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_setSpacing);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_setAlignment(PyObject *, PyObject *);}
static PyObject *meth_QLayout_setAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWidget * a0;
        Qt::Alignment * a1;
        int a1State = 0;
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8J1",&sipSelf,sipType_QLayout,&sipCpp,sipType_QWidget,&a0,sipType_Qt_Alignment,&a1,&a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setAlignment(a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_Qt_Alignment,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        QLayout * a0;
        Qt::Alignment * a1;
        int a1State = 0;
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8J1",&sipSelf,sipType_QLayout,&sipCpp,sipType_QLayout,&a0,sipType_Qt_Alignment,&a1,&a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setAlignment(a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_Qt_Alignment,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        Qt::Alignment * a0;
        int a0State = 0;
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QLayout,&sipCpp,sipType_Qt_Alignment,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAlignment(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_Qt_Alignment,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_setAlignment);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_setSizeConstraint(PyObject *, PyObject *);}
static PyObject *meth_QLayout_setSizeConstraint(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLayout::SizeConstraint a0;
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QLayout,&sipCpp,sipType_QLayout_SizeConstraint,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSizeConstraint(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_setSizeConstraint);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_sizeConstraint(PyObject *, PyObject *);}
static PyObject *meth_QLayout_sizeConstraint(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLayout,&sipCpp))
        {
            QLayout::SizeConstraint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sizeConstraint();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QLayout_SizeConstraint);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_sizeConstraint);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_setMenuBar(PyObject *, PyObject *);}
static PyObject *meth_QLayout_setMenuBar(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWidget * a0;
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ:",&sipSelf,sipType_QLayout,&sipCpp,sipType_QWidget,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMenuBar(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_setMenuBar);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_menuBar(PyObject *, PyObject *);}
static PyObject *meth_QLayout_menuBar(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLayout,&sipCpp))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->menuBar();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_menuBar);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_parentWidget(PyObject *, PyObject *);}
static PyObject *meth_QLayout_parentWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLayout,&sipCpp))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->parentWidget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_parentWidget);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_invalidate(PyObject *, PyObject *);}
static PyObject *meth_QLayout_invalidate(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLayout,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QLayout::invalidate() : sipCpp->invalidate());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_invalidate);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_geometry(PyObject *, PyObject *);}
static PyObject *meth_QLayout_geometry(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLayout,&sipCpp))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect((sipSelfWasArg ? sipCpp->QLayout::geometry() : sipCpp->geometry()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_geometry);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_activate(PyObject *, PyObject *);}
static PyObject *meth_QLayout_activate(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLayout,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->activate();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_activate);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_update(PyObject *, PyObject *);}
static PyObject *meth_QLayout_update(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLayout,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->update();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_update);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_addWidget(PyObject *, PyObject *);}
static PyObject *meth_QLayout_addWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWidget * a0;
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ:",&sipSelf,sipType_QLayout,&sipCpp,sipType_QWidget,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addWidget(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_addWidget);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_addItem(PyObject *, PyObject *);}
static PyObject *meth_QLayout_addItem(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        QLayoutItem * a0;
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ:",&sipSelf,sipType_QLayout,&sipCpp,sipType_QLayoutItem,&a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QLayout, sipName_addItem);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->addItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_addItem);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_removeWidget(PyObject *, PyObject *);}
static PyObject *meth_QLayout_removeWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWidget * a0;
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QLayout,&sipCpp,sipType_QWidget,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeWidget(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_removeWidget);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_removeItem(PyObject *, PyObject *);}
static PyObject *meth_QLayout_removeItem(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLayoutItem * a0;
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ<",&sipSelf,sipType_QLayout,&sipCpp,sipType_QLayoutItem,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_removeItem);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_expandingDirections(PyObject *, PyObject *);}
static PyObject *meth_QLayout_expandingDirections(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLayout,&sipCpp))
        {
            Qt::Orientations *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::Orientations((sipSelfWasArg ? sipCpp->QLayout::expandingDirections() : sipCpp->expandingDirections()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_Orientations,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_expandingDirections);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_minimumSize(PyObject *, PyObject *);}
static PyObject *meth_QLayout_minimumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLayout,&sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QLayout::minimumSize() : sipCpp->minimumSize()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_minimumSize);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_maximumSize(PyObject *, PyObject *);}
static PyObject *meth_QLayout_maximumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLayout,&sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QLayout::maximumSize() : sipCpp->maximumSize()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_maximumSize);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_setGeometry(PyObject *, PyObject *);}
static PyObject *meth_QLayout_setGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRect * a0;
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QLayout,&sipCpp,sipType_QRect,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QLayout::setGeometry(*a0) : sipCpp->setGeometry(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_setGeometry);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_itemAt(PyObject *, PyObject *);}
static PyObject *meth_QLayout_itemAt(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QLayout,&sipCpp,&a0))
        {
            QLayoutItem *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QLayout, sipName_itemAt);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemAt(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QLayoutItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_itemAt);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_takeAt(PyObject *, PyObject *);}
static PyObject *meth_QLayout_takeAt(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QLayout,&sipCpp,&a0))
        {
            QLayoutItem *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QLayout, sipName_takeAt);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->takeAt(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QLayoutItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_takeAt);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_indexOf(PyObject *, PyObject *);}
static PyObject *meth_QLayout_indexOf(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget * a0;
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QLayout,&sipCpp,sipType_QWidget,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QLayout::indexOf(a0) : sipCpp->indexOf(a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_indexOf);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_count(PyObject *, PyObject *);}
static PyObject *meth_QLayout_count(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLayout,&sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QLayout, sipName_count);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_count);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QLayout_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLayout,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QLayout::isEmpty() : sipCpp->isEmpty());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_isEmpty);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_totalHeightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QLayout_totalHeightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QLayout,&sipCpp,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->totalHeightForWidth(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_totalHeightForWidth);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_totalMinimumSize(PyObject *, PyObject *);}
static PyObject *meth_QLayout_totalMinimumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLayout,&sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->totalMinimumSize());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_totalMinimumSize);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_totalMaximumSize(PyObject *, PyObject *);}
static PyObject *meth_QLayout_totalMaximumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLayout,&sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->totalMaximumSize());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_totalMaximumSize);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_totalSizeHint(PyObject *, PyObject *);}
static PyObject *meth_QLayout_totalSizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLayout,&sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->totalSizeHint());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_totalSizeHint);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_layout(PyObject *, PyObject *);}
static PyObject *meth_QLayout_layout(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLayout,&sipCpp))
        {
            QLayout *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QLayout::layout() : sipCpp->layout());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QLayout,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_layout);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_setEnabled(PyObject *, PyObject *);}
static PyObject *meth_QLayout_setEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QLayout,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_setEnabled);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_isEnabled(PyObject *, PyObject *);}
static PyObject *meth_QLayout_isEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLayout,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_isEnabled);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_closestAcceptableSize(PyObject *, PyObject *);}
static PyObject *meth_QLayout_closestAcceptableSize(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QWidget * a0;
        const QSize * a1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8J9",sipType_QWidget,&a0,sipType_QSize,&a1))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(QLayout::closestAcceptableSize(a0,*a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_closestAcceptableSize);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_widgetEvent(PyObject *, PyObject *);}
static PyObject *meth_QLayout_widgetEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QEvent * a0;
        sipQLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QLayout,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_widgetEvent(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_widgetEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QLayout_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QLayout,&sipCpp,sipType_QChildEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_childEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_addChildLayout(PyObject *, PyObject *);}
static PyObject *meth_QLayout_addChildLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLayout * a0;
        sipQLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ:",&sipSelf,sipType_QLayout,&sipCpp,sipType_QLayout,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_addChildLayout(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_addChildLayout);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_addChildWidget(PyObject *, PyObject *);}
static PyObject *meth_QLayout_addChildWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWidget * a0;
        sipQLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ:",&sipSelf,sipType_QLayout,&sipCpp,sipType_QWidget,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_addChildWidget(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_addChildWidget);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_alignmentRect(PyObject *, PyObject *);}
static PyObject *meth_QLayout_alignmentRect(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QRect * a0;
        sipQLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QLayout,&sipCpp,sipType_QRect,&a0))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->sipProtect_alignmentRect(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_alignmentRect);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_setContentsMargins(PyObject *, PyObject *);}
static PyObject *meth_QLayout_setContentsMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Biiii",&sipSelf,sipType_QLayout,&sipCpp,&a0,&a1,&a2,&a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setContentsMargins(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_setContentsMargins);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_getContentsMargins(PyObject *, PyObject *);}
static PyObject *meth_QLayout_getContentsMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLayout,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->getContentsMargins(&a0,&a1,&a2,&a3);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(iiii)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_getContentsMargins);

    return NULL;
}


extern "C" {static PyObject *meth_QLayout_contentsRect(PyObject *, PyObject *);}
static PyObject *meth_QLayout_contentsRect(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLayout,&sipCpp))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->contentsRect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLayout,sipName_contentsRect);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QLayout(void *, const sipTypeDef *);}
static void *cast_QLayout(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QLayout)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QLayout *)ptr,targetType)) != NULL)
        return res;

    if ((res = ((const sipClassTypeDef *)sipType_QLayoutItem)->ctd_cast((QLayoutItem *)(QLayout *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLayout(void *, int);}
static void release_QLayout(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQLayout *>(sipCppV);
    else
        delete reinterpret_cast<QLayout *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QLayout(sipSimpleWrapper *);}
static void dealloc_QLayout(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQLayout *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QLayout(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QLayout(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QLayout(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **sipOwner, int *sipArgsParsed)
{
    sipQLayout *sipCpp = 0;

    if (!sipCpp)
    {
        QWidget * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"JH",sipType_QWidget,&a0,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQLayout(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQLayout();
            Py_END_ALLOW_THREADS
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QLayout[] = {{111, 0, 0}, {247, 255, 1}};


static PyMethodDef methods_QLayout[] = {
    {SIP_MLNAME_CAST(sipName_activate), meth_QLayout_activate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addChildLayout), meth_QLayout_addChildLayout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addChildWidget), meth_QLayout_addChildWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addItem), meth_QLayout_addItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addWidget), meth_QLayout_addWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_alignmentRect), meth_QLayout_alignmentRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QLayout_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_closestAcceptableSize), meth_QLayout_closestAcceptableSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QLayout_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_contentsRect), meth_QLayout_contentsRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_count), meth_QLayout_count, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QLayout_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QLayout_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_expandingDirections), meth_QLayout_expandingDirections, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_geometry), meth_QLayout_geometry, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getContentsMargins), meth_QLayout_getContentsMargins, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_indexOf), meth_QLayout_indexOf, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_invalidate), meth_QLayout_invalidate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QLayout_isEmpty, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isEnabled), meth_QLayout_isEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_itemAt), meth_QLayout_itemAt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_layout), meth_QLayout_layout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_margin), meth_QLayout_margin, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_maximumSize), meth_QLayout_maximumSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_menuBar), meth_QLayout_menuBar, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_minimumSize), meth_QLayout_minimumSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_parentWidget), meth_QLayout_parentWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QLayout_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeItem), meth_QLayout_removeItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeWidget), meth_QLayout_removeWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAlignment), meth_QLayout_setAlignment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setContentsMargins), meth_QLayout_setContentsMargins, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setEnabled), meth_QLayout_setEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setGeometry), meth_QLayout_setGeometry, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setMargin), meth_QLayout_setMargin, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setMenuBar), meth_QLayout_setMenuBar, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSizeConstraint), meth_QLayout_setSizeConstraint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSpacing), meth_QLayout_setSpacing, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sizeConstraint), meth_QLayout_sizeConstraint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_spacing), meth_QLayout_spacing, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_takeAt), meth_QLayout_takeAt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QLayout_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_totalHeightForWidth), meth_QLayout_totalHeightForWidth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_totalMaximumSize), meth_QLayout_totalMaximumSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_totalMinimumSize), meth_QLayout_totalMinimumSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_totalSizeHint), meth_QLayout_totalSizeHint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_update), meth_QLayout_update, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_widgetEvent), meth_QLayout_widgetEvent, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QLayout[] = {
    {sipName_SetDefaultConstraint, QLayout::SetDefaultConstraint, 246},
    {sipName_SetFixedSize, QLayout::SetFixedSize, 246},
    {sipName_SetMaximumSize, QLayout::SetMaximumSize, 246},
    {sipName_SetMinAndMaxSize, QLayout::SetMinAndMaxSize, 246},
    {sipName_SetMinimumSize, QLayout::SetMinimumSize, 246},
    {sipName_SetNoConstraint, QLayout::SetNoConstraint, 246},
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QLayout = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QLayout,
        {0}
    },
    {
        sipNameNr_QLayout,
        {0, 0, 1},
        48, methods_QLayout,
        6, enummembers_QLayout,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QLayout,
    0,
    init_QLayout,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QLayout,
    0,
    0,
    0,
    release_QLayout,
    cast_QLayout,
    0,
    0,
    0
},
    &QLayout::staticMetaObject,
    0,
    0
};

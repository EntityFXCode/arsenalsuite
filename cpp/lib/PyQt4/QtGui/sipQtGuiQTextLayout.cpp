/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:22 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 60 "sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 83 "sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 41 "sipQtGuiQTextLayout.cpp"

#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 45 "sipQtGuiQTextLayout.cpp"
#line 41 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 48 "sipQtGuiQTextLayout.cpp"
#line 37 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 51 "sipQtGuiQTextLayout.cpp"
#line 144 "sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 170 "sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 56 "sipQtGuiQTextLayout.cpp"
#line 160 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 59 "sipQtGuiQTextLayout.cpp"
#line 94 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 62 "sipQtGuiQTextLayout.cpp"
#line 41 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 65 "sipQtGuiQTextLayout.cpp"
#line 38 "sip/QtCore/qvector.sip"
#include <qvector.h>
#line 68 "sipQtGuiQTextLayout.cpp"
#line 60 "sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 83 "sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 73 "sipQtGuiQTextLayout.cpp"
#line 134 "sip/QtGui/qtextlayout.sip"
#include <qtextlayout.h>
#line 76 "sipQtGuiQTextLayout.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 79 "sipQtGuiQTextLayout.cpp"
#line 41 "sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 109 "sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 84 "sipQtGuiQTextLayout.cpp"


extern "C" {static PyObject *meth_QTextLayout_setFont(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_setFont(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QFont * a0;
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QTextLayout,&sipCpp,sipType_QFont,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFont(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_setFont);

    return NULL;
}


extern "C" {static PyObject *meth_QTextLayout_font(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_font(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextLayout,&sipCpp))
        {
            QFont *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFont(sipCpp->font());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_font);

    return NULL;
}


extern "C" {static PyObject *meth_QTextLayout_setText(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_setText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QTextLayout,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setText(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_setText);

    return NULL;
}


extern "C" {static PyObject *meth_QTextLayout_text(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_text(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextLayout,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->text());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_text);

    return NULL;
}


extern "C" {static PyObject *meth_QTextLayout_setTextOption(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_setTextOption(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QTextOption * a0;
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QTextLayout,&sipCpp,sipType_QTextOption,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextOption(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_setTextOption);

    return NULL;
}


extern "C" {static PyObject *meth_QTextLayout_textOption(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_textOption(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextLayout,&sipCpp))
        {
            QTextOption *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextOption(sipCpp->textOption());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextOption,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_textOption);

    return NULL;
}


extern "C" {static PyObject *meth_QTextLayout_setPreeditArea(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_setPreeditArea(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        const QString * a1;
        int a1State = 0;
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiJ1",&sipSelf,sipType_QTextLayout,&sipCpp,&a0,sipType_QString,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPreeditArea(a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_setPreeditArea);

    return NULL;
}


extern "C" {static PyObject *meth_QTextLayout_preeditAreaPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_preeditAreaPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextLayout,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->preeditAreaPosition();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_preeditAreaPosition);

    return NULL;
}


extern "C" {static PyObject *meth_QTextLayout_preeditAreaText(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_preeditAreaText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextLayout,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->preeditAreaText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_preeditAreaText);

    return NULL;
}


extern "C" {static PyObject *meth_QTextLayout_setAdditionalFormats(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_setAdditionalFormats(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QList<QTextLayout::FormatRange> * a0;
        int a0State = 0;
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QTextLayout,&sipCpp,sipType_QList_0100QTextLayout_FormatRange,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAdditionalFormats(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QList<QTextLayout::FormatRange> *>(a0),sipType_QList_0100QTextLayout_FormatRange,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_setAdditionalFormats);

    return NULL;
}


extern "C" {static PyObject *meth_QTextLayout_additionalFormats(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_additionalFormats(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextLayout,&sipCpp))
        {
            QList<QTextLayout::FormatRange> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QTextLayout::FormatRange>(sipCpp->additionalFormats());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QTextLayout_FormatRange,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_additionalFormats);

    return NULL;
}


extern "C" {static PyObject *meth_QTextLayout_clearAdditionalFormats(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_clearAdditionalFormats(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextLayout,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearAdditionalFormats();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_clearAdditionalFormats);

    return NULL;
}


extern "C" {static PyObject *meth_QTextLayout_setCacheEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_setCacheEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QTextLayout,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCacheEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_setCacheEnabled);

    return NULL;
}


extern "C" {static PyObject *meth_QTextLayout_cacheEnabled(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_cacheEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextLayout,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cacheEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_cacheEnabled);

    return NULL;
}


extern "C" {static PyObject *meth_QTextLayout_beginLayout(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_beginLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextLayout,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->beginLayout();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_beginLayout);

    return NULL;
}


extern "C" {static PyObject *meth_QTextLayout_endLayout(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_endLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextLayout,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->endLayout();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_endLayout);

    return NULL;
}


extern "C" {static PyObject *meth_QTextLayout_createLine(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_createLine(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextLayout,&sipCpp))
        {
            QTextLine *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextLine(sipCpp->createLine());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextLine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_createLine);

    return NULL;
}


extern "C" {static PyObject *meth_QTextLayout_lineCount(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_lineCount(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextLayout,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lineCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_lineCount);

    return NULL;
}


extern "C" {static PyObject *meth_QTextLayout_lineAt(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_lineAt(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QTextLayout,&sipCpp,&a0))
        {
            QTextLine *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextLine(sipCpp->lineAt(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextLine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_lineAt);

    return NULL;
}


extern "C" {static PyObject *meth_QTextLayout_lineForTextPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_lineForTextPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QTextLayout,&sipCpp,&a0))
        {
            QTextLine *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextLine(sipCpp->lineForTextPosition(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextLine,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_lineForTextPosition);

    return NULL;
}


extern "C" {static PyObject *meth_QTextLayout_isValidCursorPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_isValidCursorPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QTextLayout,&sipCpp,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValidCursorPosition(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_isValidCursorPosition);

    return NULL;
}


extern "C" {static PyObject *meth_QTextLayout_nextCursorPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_nextCursorPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QTextLayout::CursorMode a1 = QTextLayout::SkipCharacters;
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi|E",&sipSelf,sipType_QTextLayout,&sipCpp,&a0,sipType_QTextLayout_CursorMode,&a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->nextCursorPosition(a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_nextCursorPosition);

    return NULL;
}


extern "C" {static PyObject *meth_QTextLayout_previousCursorPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_previousCursorPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QTextLayout::CursorMode a1 = QTextLayout::SkipCharacters;
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi|E",&sipSelf,sipType_QTextLayout,&sipCpp,&a0,sipType_QTextLayout_CursorMode,&a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->previousCursorPosition(a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_previousCursorPosition);

    return NULL;
}


extern "C" {static PyObject *meth_QTextLayout_draw(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_draw(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPainter * a0;
        const QPointF * a1;
        const QVector<QTextLayout::FormatRange>& a2def = QVector<QTextLayout::FormatRange>();
        const QVector<QTextLayout::FormatRange> * a2 = &a2def;
        int a2State = 0;
        const QRectF& a3def = QRectF();
        const QRectF * a3 = &a3def;
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8J9|J1J9",&sipSelf,sipType_QTextLayout,&sipCpp,sipType_QPainter,&a0,sipType_QPointF,&a1,sipType_QVector_0100QTextLayout_FormatRange,&a2,&a2State,sipType_QRectF,&a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->draw(a0,*a1,*a2,*a3);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QVector<QTextLayout::FormatRange> *>(a2),sipType_QVector_0100QTextLayout_FormatRange,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_draw);

    return NULL;
}


extern "C" {static PyObject *meth_QTextLayout_drawCursor(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_drawCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPainter * a0;
        const QPointF * a1;
        int a2;
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8J9i",&sipSelf,sipType_QTextLayout,&sipCpp,sipType_QPainter,&a0,sipType_QPointF,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawCursor(a0,*a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QPainter * a0;
        const QPointF * a1;
        int a2;
        int a3;
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8J9ii",&sipSelf,sipType_QTextLayout,&sipCpp,sipType_QPainter,&a0,sipType_QPointF,&a1,&a2,&a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawCursor(a0,*a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_drawCursor);

    return NULL;
}


extern "C" {static PyObject *meth_QTextLayout_position(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_position(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextLayout,&sipCpp))
        {
            QPointF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPointF(sipCpp->position());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_position);

    return NULL;
}


extern "C" {static PyObject *meth_QTextLayout_setPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_setPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPointF * a0;
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QTextLayout,&sipCpp,sipType_QPointF,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPosition(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_setPosition);

    return NULL;
}


extern "C" {static PyObject *meth_QTextLayout_boundingRect(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_boundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextLayout,&sipCpp))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->boundingRect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_boundingRect);

    return NULL;
}


extern "C" {static PyObject *meth_QTextLayout_minimumWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_minimumWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextLayout,&sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->minimumWidth();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_minimumWidth);

    return NULL;
}


extern "C" {static PyObject *meth_QTextLayout_maximumWidth(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_maximumWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextLayout,&sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->maximumWidth();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_maximumWidth);

    return NULL;
}


extern "C" {static PyObject *meth_QTextLayout_clearLayout(PyObject *, PyObject *);}
static PyObject *meth_QTextLayout_clearLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextLayout,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearLayout();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextLayout,sipName_clearLayout);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTextLayout(void *, const sipTypeDef *);}
static void *cast_QTextLayout(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QTextLayout)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextLayout(void *, int);}
static void release_QTextLayout(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QTextLayout *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QTextLayout(sipSimpleWrapper *);}
static void dealloc_QTextLayout(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QTextLayout(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QTextLayout(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QTextLayout(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QTextLayout *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextLayout();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1",sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextLayout(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
        }
    }

    if (!sipCpp)
    {
        const QString * a0;
        int a0State = 0;
        const QFont * a1;
        QPaintDevice * a2 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1J9|J8",sipType_QString,&a0,&a0State,sipType_QFont,&a1,sipType_QPaintDevice,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextLayout(*a0,*a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
        }
    }

    if (!sipCpp)
    {
        const QTextBlock * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QTextBlock,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextLayout(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    return sipCpp;
}


static PyMethodDef methods_QTextLayout[] = {
    {SIP_MLNAME_CAST(sipName_additionalFormats), meth_QTextLayout_additionalFormats, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_beginLayout), meth_QTextLayout_beginLayout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_boundingRect), meth_QTextLayout_boundingRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_cacheEnabled), meth_QTextLayout_cacheEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clearAdditionalFormats), meth_QTextLayout_clearAdditionalFormats, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clearLayout), meth_QTextLayout_clearLayout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createLine), meth_QTextLayout_createLine, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_draw), meth_QTextLayout_draw, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawCursor), meth_QTextLayout_drawCursor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_endLayout), meth_QTextLayout_endLayout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_font), meth_QTextLayout_font, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isValidCursorPosition), meth_QTextLayout_isValidCursorPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lineAt), meth_QTextLayout_lineAt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lineCount), meth_QTextLayout_lineCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lineForTextPosition), meth_QTextLayout_lineForTextPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_maximumWidth), meth_QTextLayout_maximumWidth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_minimumWidth), meth_QTextLayout_minimumWidth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_nextCursorPosition), meth_QTextLayout_nextCursorPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_position), meth_QTextLayout_position, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_preeditAreaPosition), meth_QTextLayout_preeditAreaPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_preeditAreaText), meth_QTextLayout_preeditAreaText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_previousCursorPosition), meth_QTextLayout_previousCursorPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAdditionalFormats), meth_QTextLayout_setAdditionalFormats, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCacheEnabled), meth_QTextLayout_setCacheEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFont), meth_QTextLayout_setFont, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPosition), meth_QTextLayout_setPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPreeditArea), meth_QTextLayout_setPreeditArea, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setText), meth_QTextLayout_setText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTextOption), meth_QTextLayout_setTextOption, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_text), meth_QTextLayout_text, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_textOption), meth_QTextLayout_textOption, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QTextLayout[] = {
    {sipName_SkipCharacters, QTextLayout::SkipCharacters, 624},
    {sipName_SkipWords, QTextLayout::SkipWords, 624},
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QTextLayout = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QTextLayout,
        {0}
    },
    {
        sipNameNr_QTextLayout,
        {0, 0, 1},
        31, methods_QTextLayout,
        2, enummembers_QTextLayout,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QTextLayout,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextLayout,
    0,
    0,
    0,
    release_QTextLayout,
    cast_QTextLayout,
    0,
    0,
    0
},
    0,
    0,
    0
};

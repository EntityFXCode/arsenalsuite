/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:24 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 55 "sip/QtGui/qiconengine.sip"
#include <qiconengine.h>
#line 77 "sip/QtGui/qiconengine.sip"
#include <qiconengine.h>
#line 41 "sipQtGuiQIconEngineV2.cpp"

#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 45 "sipQtGuiQIconEngineV2.cpp"
#line 41 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 48 "sipQtGuiQIconEngineV2.cpp"
#line 41 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 51 "sipQtGuiQIconEngineV2.cpp"
#line 37 "sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 54 "sipQtGuiQIconEngineV2.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 57 "sipQtGuiQIconEngineV2.cpp"
#line 41 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 60 "sipQtGuiQIconEngineV2.cpp"
#line 41 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 63 "sipQtGuiQIconEngineV2.cpp"
#line 41 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 66 "sipQtGuiQIconEngineV2.cpp"


extern "C" {static PyObject *meth_QIconEngineV2_key(PyObject *, PyObject *);}
static PyObject *meth_QIconEngineV2_key(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QIconEngineV2 *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QIconEngineV2,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString((sipSelfWasArg ? sipCpp->QIconEngineV2::key() : sipCpp->key()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QIconEngineV2,sipName_key);

    return NULL;
}


extern "C" {static PyObject *meth_QIconEngineV2_clone(PyObject *, PyObject *);}
static PyObject *meth_QIconEngineV2_clone(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QIconEngineV2 *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QIconEngineV2,&sipCpp))
        {
            QIconEngineV2 *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QIconEngineV2::clone() : sipCpp->clone());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QIconEngineV2,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QIconEngineV2,sipName_clone);

    return NULL;
}


extern "C" {static PyObject *meth_QIconEngineV2_read(PyObject *, PyObject *);}
static PyObject *meth_QIconEngineV2_read(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDataStream * a0;
        QIconEngineV2 *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QIconEngineV2,&sipCpp,sipType_QDataStream,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QIconEngineV2::read(*a0) : sipCpp->read(*a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QIconEngineV2,sipName_read);

    return NULL;
}


extern "C" {static PyObject *meth_QIconEngineV2_write(PyObject *, PyObject *);}
static PyObject *meth_QIconEngineV2_write(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDataStream * a0;
        QIconEngineV2 *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QIconEngineV2,&sipCpp,sipType_QDataStream,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QIconEngineV2::write(*a0) : sipCpp->write(*a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QIconEngineV2,sipName_write);

    return NULL;
}


extern "C" {static PyObject *meth_QIconEngineV2_availableSizes(PyObject *, PyObject *);}
static PyObject *meth_QIconEngineV2_availableSizes(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QIcon::Mode a0 = QIcon::Normal;
        QIcon::State a1 = QIcon::Off;
        QIconEngineV2 *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|EE",&sipSelf,sipType_QIconEngineV2,&sipCpp,sipType_QIcon_Mode,&a0,sipType_QIcon_State,&a1))
        {
            QList<QSize> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QSize>(sipCpp->availableSizes(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QIconEngineV2,sipName_availableSizes);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QIconEngineV2(void *, const sipTypeDef *);}
static void *cast_QIconEngineV2(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QIconEngineV2)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QIconEngine)->ctd_cast((QIconEngine *)(QIconEngineV2 *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QIconEngineV2(void *, int);}
static void release_QIconEngineV2(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QIconEngineV2 *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QIconEngineV2(sipSimpleWrapper *);}
static void dealloc_QIconEngineV2(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QIconEngineV2(sipSelf->u.cppPtr,0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QIconEngineV2[] = {{203, 255, 1}};


static PyMethodDef methods_QIconEngineV2[] = {
    {SIP_MLNAME_CAST(sipName_availableSizes), meth_QIconEngineV2_availableSizes, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clone), meth_QIconEngineV2_clone, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_key), meth_QIconEngineV2_key, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_read), meth_QIconEngineV2_read, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_write), meth_QIconEngineV2_write, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QIconEngineV2[] = {
    {sipName_AvailableSizesHook, QIconEngineV2::AvailableSizesHook, 206},
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QIconEngineV2 = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_QIconEngineV2,
        {0}
    },
    {
        sipNameNr_QIconEngineV2,
        {0, 0, 1},
        5, methods_QIconEngineV2,
        1, enummembers_QIconEngineV2,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QIconEngineV2,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QIconEngineV2,
    0,
    0,
    0,
    release_QIconEngineV2,
    cast_QIconEngineV2,
    0,
    0,
    0
},
    0,
    0,
    0
};

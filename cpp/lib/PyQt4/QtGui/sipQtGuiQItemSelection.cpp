/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:24 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 156 "sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 39 "sipQtGuiQItemSelection.cpp"

#line 37 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 43 "sipQtGuiQItemSelection.cpp"
#line 41 "sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 46 "sipQtGuiQItemSelection.cpp"
#line 82 "sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 49 "sipQtGuiQItemSelection.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 52 "sipQtGuiQItemSelection.cpp"


extern "C" {static PyObject *meth_QItemSelection_select(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_select(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;
        const QModelIndex * a1;
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9J9",&sipSelf,sipType_QItemSelection,&sipCpp,sipType_QModelIndex,&a0,sipType_QModelIndex,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->select(*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelection,sipName_select);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelection_contains(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QItemSelection,&sipCpp,sipType_QModelIndex,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->contains(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelection,sipName_contains);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelection_indexes(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_indexes(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QItemSelection,&sipCpp))
        {
            QModelIndexList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndexList(sipCpp->indexes());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelection,sipName_indexes);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelection_merge(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_merge(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QItemSelection * a0;
        QItemSelectionModel::SelectionFlags * a1;
        int a1State = 0;
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9J1",&sipSelf,sipType_QItemSelection,&sipCpp,sipType_QItemSelection,&a0,sipType_QItemSelectionModel_SelectionFlags,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->merge(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelection,sipName_merge);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelection_split(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_split(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QItemSelectionRange * a0;
        const QItemSelectionRange * a1;
        QItemSelection * a2;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9J9J8",sipType_QItemSelectionRange,&a0,sipType_QItemSelectionRange,&a1,sipType_QItemSelection,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            QItemSelection::split(*a0,*a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelection,sipName_split);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelection_clear(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QItemSelection,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelection,sipName_clear);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelection_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QItemSelection,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEmpty();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelection,sipName_isEmpty);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelection_append(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_append(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QItemSelectionRange * a0;
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QItemSelection,&sipCpp,sipType_QItemSelectionRange,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->append(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelection,sipName_append);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelection_prepend(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_prepend(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QItemSelectionRange * a0;
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QItemSelection,&sipCpp,sipType_QItemSelectionRange,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->prepend(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelection,sipName_prepend);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelection_insert(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_insert(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        const QItemSelectionRange * a1;
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiJ9",&sipSelf,sipType_QItemSelection,&sipCpp,&a0,sipType_QItemSelectionRange,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insert(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelection,sipName_insert);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelection_replace(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_replace(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        const QItemSelectionRange * a1;
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiJ9",&sipSelf,sipType_QItemSelection,&sipCpp,&a0,sipType_QItemSelectionRange,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->replace(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelection,sipName_replace);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelection_removeAt(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_removeAt(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QItemSelection,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeAt(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelection,sipName_removeAt);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelection_removeAll(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_removeAll(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QItemSelectionRange * a0;
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QItemSelection,&sipCpp,sipType_QItemSelectionRange,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->removeAll(*a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelection,sipName_removeAll);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelection_takeAt(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_takeAt(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QItemSelection,&sipCpp,&a0))
        {
            QItemSelectionRange *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QItemSelectionRange(sipCpp->takeAt(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QItemSelectionRange,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelection,sipName_takeAt);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelection_takeFirst(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_takeFirst(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QItemSelection,&sipCpp))
        {
            QItemSelectionRange *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QItemSelectionRange(sipCpp->takeFirst());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QItemSelectionRange,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelection,sipName_takeFirst);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelection_takeLast(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_takeLast(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QItemSelection,&sipCpp))
        {
            QItemSelectionRange *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QItemSelectionRange(sipCpp->takeLast());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QItemSelectionRange,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelection,sipName_takeLast);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelection_move(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_move(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii",&sipSelf,sipType_QItemSelection,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->move(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelection,sipName_move);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelection_swap(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_swap(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii",&sipSelf,sipType_QItemSelection,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->swap(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelection,sipName_swap);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelection_count(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_count(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QItemSelectionRange * a0;
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QItemSelection,&sipCpp,sipType_QItemSelectionRange,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count(*a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QItemSelection,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelection,sipName_count);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelection_first(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_first(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QItemSelection,&sipCpp))
        {
            QItemSelectionRange *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->first();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QItemSelectionRange,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelection,sipName_first);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelection_last(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_last(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QItemSelection,&sipCpp))
        {
            QItemSelectionRange *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->last();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QItemSelectionRange,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelection,sipName_last);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelection_indexOf(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_indexOf(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QItemSelectionRange * a0;
        int a1 = 0;
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9|i",&sipSelf,sipType_QItemSelection,&sipCpp,sipType_QItemSelectionRange,&a0,&a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexOf(*a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelection,sipName_indexOf);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelection_lastIndexOf(PyObject *, PyObject *);}
static PyObject *meth_QItemSelection_lastIndexOf(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QItemSelectionRange * a0;
        int a1 = -1;
        QItemSelection *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9|i",&sipSelf,sipType_QItemSelection,&sipCpp,sipType_QItemSelectionRange,&a0,&a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lastIndexOf(*a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelection,sipName_lastIndexOf);

    return NULL;
}


extern "C" {static PyObject *slot_QItemSelection___iadd__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QItemSelection___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    QItemSelection *sipCpp = reinterpret_cast<QItemSelection *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelection));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QItemSelection * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QItemSelection,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QItemSelection::operator+=(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const QItemSelectionRange * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QItemSelectionRange,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QItemSelection::operator+=(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    /* Raise an exception if the argument couldn't be parsed. */
    sipBadOperatorArg(sipSelf,sipArg,iconcat_slot);

    return NULL;
}


extern "C" {static PyObject *slot_QItemSelection___getitem__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QItemSelection___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
    QItemSelection *sipCpp = reinterpret_cast<QItemSelection *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelection));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        int a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1i",&a0))
        {
            QItemSelectionRange *sipRes = 0;
            int sipIsErr = 0;

#line 251 "sip/QtGui/qitemselectionmodel.sip"
        SIP_SSIZE_T idx = sipConvertFromSequenceIndex(a0, sipCpp->count());
        
        if (idx < 0)
            sipIsErr = 1;
        else
            sipRes = new QItemSelectionRange(sipCpp->operator[]((int)idx));
#line 778 "sipQtGuiQItemSelection.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_QItemSelectionRange,NULL);
        }
    }

    {
        PyObject * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1T",&PySlice_Type,&a0))
        {
            QItemSelection *sipRes = 0;
            int sipIsErr = 0;

#line 261 "sip/QtGui/qitemselectionmodel.sip"
        SIP_SSIZE_T len, start, stop, step, slicelength, i;
        
        len = sipCpp->count();
        
        if (PySlice_GetIndicesEx((PySliceObject *)a0, len, &start, &stop, &step, &slicelength) < 0)
            sipIsErr = 1;
        else
        {
            sipRes = new QItemSelection();
        
            for (i = 0; i < slicelength; ++i)
            {
                (*sipRes) += (*sipCpp)[start];
                start += step;
            }
        }
#line 812 "sipQtGuiQItemSelection.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_QItemSelection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelection,sipName___getitem__);

    return 0;
}


extern "C" {static int slot_QItemSelection___delitem__(PyObject *sipSelf,PyObject *sipArg);}
static int slot_QItemSelection___delitem__(PyObject *sipSelf,PyObject *sipArg)
{
    QItemSelection *sipCpp = reinterpret_cast<QItemSelection *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelection));

    if (!sipCpp)
        return -1;

    int sipArgsParsed = 0;

    {
        int a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1i",&a0))
        {
            int sipIsErr = 0;

#line 223 "sip/QtGui/qitemselectionmodel.sip"
        int len;
        
        len = sipCpp->count();
        
        if ((a0 = (int)sipConvertFromSequenceIndex(a0, len)) < 0)
            sipIsErr = 1;
        else
            sipCpp->removeAt(a0);
#line 854 "sipQtGuiQItemSelection.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    {
        PyObject * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1T",&PySlice_Type,&a0))
        {
            int sipIsErr = 0;

#line 235 "sip/QtGui/qitemselectionmodel.sip"
        SIP_SSIZE_T len, start, stop, step, slicelength, i;
        
        len = sipCpp->count();
        
        if (PySlice_GetIndicesEx((PySliceObject *)a0, len, &start, &stop, &step, &slicelength) < 0)
            sipIsErr = 1;
        else
            for (i = 0; i < slicelength; ++i)
            {
                sipCpp->removeAt(start);
                start += step - 1;
            }
#line 883 "sipQtGuiQItemSelection.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelection,sipName___delitem__);

    return -1;
}


extern "C" {static int slot_QItemSelection___setitem__(PyObject *sipSelf,PyObject *sipArgs);}
static int slot_QItemSelection___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
    QItemSelection *sipCpp = reinterpret_cast<QItemSelection *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelection));

    if (!sipCpp)
        return -1;

    int sipArgsParsed = 0;

    {
        int a0;
        const QItemSelectionRange * a1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"iJ9",&a0,sipType_QItemSelectionRange,&a1))
        {
            int sipIsErr = 0;

#line 180 "sip/QtGui/qitemselectionmodel.sip"
        int len;
        
        len = sipCpp->count();
        
        if ((a0 = (int)sipConvertFromSequenceIndex(a0, len)) < 0)
            sipIsErr = 1;
        else
            (*sipCpp)[a0] = *a1;
#line 926 "sipQtGuiQItemSelection.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    {
        PyObject * a0;
        const QItemSelection * a1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"TJ9",&PySlice_Type,&a0,sipType_QItemSelection,&a1))
        {
            int sipIsErr = 0;

#line 192 "sip/QtGui/qitemselectionmodel.sip"
        SIP_SSIZE_T len, start, stop, step, slicelength, i;
        
        len = sipCpp->count();
        
        if (PySlice_GetIndicesEx((PySliceObject *)a0, len, &start, &stop, &step, &slicelength) < 0)
            sipIsErr = 1;
        else
        {
            int vlen = a1->count();
        
            if (vlen != slicelength)
            {
                sipBadLengthForSlice(vlen, slicelength);
                sipIsErr = 1;
            }
            else
            {
                QItemSelection::const_iterator it = a1->begin();
        
                for (i = 0; i < slicelength; ++i)
                {
                    (*sipCpp)[start] = *it;
                    start += step;
                    ++it;
                }
            }
        }
#line 971 "sipQtGuiQItemSelection.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelection,sipName___setitem__);

    return -1;
}


extern "C" {static int slot_QItemSelection___len__(PyObject *sipSelf);}
static int slot_QItemSelection___len__(PyObject *sipSelf)
{
    QItemSelection *sipCpp = reinterpret_cast<QItemSelection *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelection));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 175 "sip/QtGui/qitemselectionmodel.sip"
        sipRes = sipCpp->count();
#line 1002 "sipQtGuiQItemSelection.cpp"

            return sipRes;
        }
    }
}


extern "C" {static int slot_QItemSelection___contains__(PyObject *sipSelf,PyObject *sipArg);}
static int slot_QItemSelection___contains__(PyObject *sipSelf,PyObject *sipArg)
{
    QItemSelection *sipCpp = reinterpret_cast<QItemSelection *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QItemSelection));

    if (!sipCpp)
        return -1;

    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QModelIndex,&a0))
        {
            int sipRes = 0;

#line 166 "sip/QtGui/qitemselectionmodel.sip"
        // It looks like you can't assign QBool to int.
        sipRes = bool(sipCpp->contains(*a0));
#line 1030 "sipQtGuiQItemSelection.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelection,sipName___contains__);

    return -1;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QItemSelection(void *, const sipTypeDef *);}
static void *cast_QItemSelection(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QItemSelection)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QItemSelection(void *, int);}
static void release_QItemSelection(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QItemSelection *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QItemSelection(void *, SIP_SSIZE_T, const void *);}
static void assign_QItemSelection(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QItemSelection *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QItemSelection *>(sipSrc);
}


extern "C" {static void *array_QItemSelection(SIP_SSIZE_T);}
static void *array_QItemSelection(SIP_SSIZE_T sipNrElem)
{
    return new QItemSelection[sipNrElem];
}


extern "C" {static void *copy_QItemSelection(const void *, SIP_SSIZE_T);}
static void *copy_QItemSelection(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QItemSelection(reinterpret_cast<const QItemSelection *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QItemSelection(sipSimpleWrapper *);}
static void dealloc_QItemSelection(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QItemSelection(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QItemSelection(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QItemSelection(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QItemSelection *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QItemSelection();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QModelIndex * a0;
        const QModelIndex * a1;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9J9",sipType_QModelIndex,&a0,sipType_QModelIndex,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QItemSelection(*a0,*a1);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QItemSelection * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QItemSelection,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QItemSelection(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    return sipCpp;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QItemSelection[] = {
    {(void *)slot_QItemSelection___iadd__, iconcat_slot},
    {(void *)slot_QItemSelection___getitem__, getitem_slot},
    {(void *)slot_QItemSelection___delitem__, delitem_slot},
    {(void *)slot_QItemSelection___setitem__, setitem_slot},
    {(void *)slot_QItemSelection___len__, len_slot},
    {(void *)slot_QItemSelection___contains__, contains_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QItemSelection[] = {
    {SIP_MLNAME_CAST(sipName_append), meth_QItemSelection_append, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clear), meth_QItemSelection_clear, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_contains), meth_QItemSelection_contains, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_count), meth_QItemSelection_count, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_first), meth_QItemSelection_first, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_indexOf), meth_QItemSelection_indexOf, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_indexes), meth_QItemSelection_indexes, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insert), meth_QItemSelection_insert, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QItemSelection_isEmpty, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_last), meth_QItemSelection_last, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lastIndexOf), meth_QItemSelection_lastIndexOf, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_merge), meth_QItemSelection_merge, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_move), meth_QItemSelection_move, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_prepend), meth_QItemSelection_prepend, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeAll), meth_QItemSelection_removeAll, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeAt), meth_QItemSelection_removeAt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_replace), meth_QItemSelection_replace, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_select), meth_QItemSelection_select, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_split), meth_QItemSelection_split, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_swap), meth_QItemSelection_swap, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_takeAt), meth_QItemSelection_takeAt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_takeFirst), meth_QItemSelection_takeFirst, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_takeLast), meth_QItemSelection_takeLast, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QItemSelection = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QItemSelection,
        {0}
    },
    {
        sipNameNr_QItemSelection,
        {0, 0, 1},
        23, methods_QItemSelection,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QItemSelection,
    init_QItemSelection,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QItemSelection,
    assign_QItemSelection,
    array_QItemSelection,
    copy_QItemSelection,
    release_QItemSelection,
    cast_QItemSelection,
    0,
    0,
    0
},
    0,
    0,
    0
};

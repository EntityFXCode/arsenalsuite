/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:25 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 41 "sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 39 "sipQtGuiQColor.cpp"

#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 43 "sipQtGuiQColor.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 46 "sipQtGuiQColor.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 49 "sipQtGuiQColor.cpp"
#line 41 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 52 "sipQtGuiQColor.cpp"


extern "C" {static PyObject *meth_QColor_name(PyObject *, PyObject *);}
static PyObject *meth_QColor_name(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->name());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_name);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_setNamedColor(PyObject *, PyObject *);}
static PyObject *meth_QColor_setNamedColor(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QColor,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNamedColor(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_setNamedColor);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_colorNames(PyObject *, PyObject *);}
static PyObject *meth_QColor_colorNames(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(QColor::colorNames());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_colorNames);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_spec(PyObject *, PyObject *);}
static PyObject *meth_QColor_spec(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            QColor::Spec sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->spec();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QColor_Spec);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_spec);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_alpha(PyObject *, PyObject *);}
static PyObject *meth_QColor_alpha(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->alpha();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_alpha);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_setAlpha(PyObject *, PyObject *);}
static PyObject *meth_QColor_setAlpha(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QColor,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAlpha(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_setAlpha);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_alphaF(PyObject *, PyObject *);}
static PyObject *meth_QColor_alphaF(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->alphaF();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_alphaF);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_setAlphaF(PyObject *, PyObject *);}
static PyObject *meth_QColor_setAlphaF(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qreal a0;
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bd",&sipSelf,sipType_QColor,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAlphaF(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_setAlphaF);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_red(PyObject *, PyObject *);}
static PyObject *meth_QColor_red(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->red();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_red);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_green(PyObject *, PyObject *);}
static PyObject *meth_QColor_green(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->green();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_green);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_blue(PyObject *, PyObject *);}
static PyObject *meth_QColor_blue(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->blue();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_blue);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_setRed(PyObject *, PyObject *);}
static PyObject *meth_QColor_setRed(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QColor,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRed(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_setRed);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_setGreen(PyObject *, PyObject *);}
static PyObject *meth_QColor_setGreen(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QColor,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setGreen(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_setGreen);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_setBlue(PyObject *, PyObject *);}
static PyObject *meth_QColor_setBlue(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QColor,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBlue(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_setBlue);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_redF(PyObject *, PyObject *);}
static PyObject *meth_QColor_redF(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->redF();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_redF);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_greenF(PyObject *, PyObject *);}
static PyObject *meth_QColor_greenF(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->greenF();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_greenF);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_blueF(PyObject *, PyObject *);}
static PyObject *meth_QColor_blueF(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->blueF();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_blueF);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_setRedF(PyObject *, PyObject *);}
static PyObject *meth_QColor_setRedF(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qreal a0;
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bd",&sipSelf,sipType_QColor,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRedF(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_setRedF);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_setGreenF(PyObject *, PyObject *);}
static PyObject *meth_QColor_setGreenF(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qreal a0;
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bd",&sipSelf,sipType_QColor,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setGreenF(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_setGreenF);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_setBlueF(PyObject *, PyObject *);}
static PyObject *meth_QColor_setBlueF(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qreal a0;
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bd",&sipSelf,sipType_QColor,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBlueF(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_setBlueF);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_getRgb(PyObject *, PyObject *);}
static PyObject *meth_QColor_getRgb(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->getRgb(&a0,&a1,&a2,&a3);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(iiii)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_getRgb);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_setRgb(PyObject *, PyObject *);}
static PyObject *meth_QColor_setRgb(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        int a2;
        int a3 = 255;
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Biii|i",&sipSelf,sipType_QColor,&sipCpp,&a0,&a1,&a2,&a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRgb(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QRgb a0;
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bu",&sipSelf,sipType_QColor,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRgb(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_setRgb);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_getRgbF(PyObject *, PyObject *);}
static PyObject *meth_QColor_getRgbF(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->getRgbF(&a0,&a1,&a2,&a3);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(dddd)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_getRgbF);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_setRgbF(PyObject *, PyObject *);}
static PyObject *meth_QColor_setRgbF(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3 = 1;
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bddd|d",&sipSelf,sipType_QColor,&sipCpp,&a0,&a1,&a2,&a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRgbF(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_setRgbF);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_rgba(PyObject *, PyObject *);}
static PyObject *meth_QColor_rgba(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            QRgb sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rgba();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_rgba);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_setRgba(PyObject *, PyObject *);}
static PyObject *meth_QColor_setRgba(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QRgb a0;
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bu",&sipSelf,sipType_QColor,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRgba(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_setRgba);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_rgb(PyObject *, PyObject *);}
static PyObject *meth_QColor_rgb(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            QRgb sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rgb();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_rgb);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_hue(PyObject *, PyObject *);}
static PyObject *meth_QColor_hue(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hue();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_hue);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_saturation(PyObject *, PyObject *);}
static PyObject *meth_QColor_saturation(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->saturation();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_saturation);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_value(PyObject *, PyObject *);}
static PyObject *meth_QColor_value(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->value();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_value);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_hueF(PyObject *, PyObject *);}
static PyObject *meth_QColor_hueF(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hueF();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_hueF);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_saturationF(PyObject *, PyObject *);}
static PyObject *meth_QColor_saturationF(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->saturationF();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_saturationF);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_valueF(PyObject *, PyObject *);}
static PyObject *meth_QColor_valueF(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->valueF();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_valueF);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_getHsv(PyObject *, PyObject *);}
static PyObject *meth_QColor_getHsv(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->getHsv(&a0,&a1,&a2,&a3);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(iiii)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_getHsv);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_setHsv(PyObject *, PyObject *);}
static PyObject *meth_QColor_setHsv(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        int a2;
        int a3 = 255;
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Biii|i",&sipSelf,sipType_QColor,&sipCpp,&a0,&a1,&a2,&a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHsv(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_setHsv);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_getHsvF(PyObject *, PyObject *);}
static PyObject *meth_QColor_getHsvF(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->getHsvF(&a0,&a1,&a2,&a3);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(dddd)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_getHsvF);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_setHsvF(PyObject *, PyObject *);}
static PyObject *meth_QColor_setHsvF(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3 = 1;
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bddd|d",&sipSelf,sipType_QColor,&sipCpp,&a0,&a1,&a2,&a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHsvF(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_setHsvF);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_cyan(PyObject *, PyObject *);}
static PyObject *meth_QColor_cyan(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cyan();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_cyan);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_magenta(PyObject *, PyObject *);}
static PyObject *meth_QColor_magenta(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->magenta();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_magenta);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_yellow(PyObject *, PyObject *);}
static PyObject *meth_QColor_yellow(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->yellow();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_yellow);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_black(PyObject *, PyObject *);}
static PyObject *meth_QColor_black(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->black();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_black);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_cyanF(PyObject *, PyObject *);}
static PyObject *meth_QColor_cyanF(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cyanF();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_cyanF);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_magentaF(PyObject *, PyObject *);}
static PyObject *meth_QColor_magentaF(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->magentaF();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_magentaF);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_yellowF(PyObject *, PyObject *);}
static PyObject *meth_QColor_yellowF(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->yellowF();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_yellowF);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_blackF(PyObject *, PyObject *);}
static PyObject *meth_QColor_blackF(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->blackF();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_blackF);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_getCmyk(PyObject *, PyObject *);}
static PyObject *meth_QColor_getCmyk(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4;
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->getCmyk(&a0,&a1,&a2,&a3,&a4);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(iiiii)",a0,a1,a2,a3,a4);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_getCmyk);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_setCmyk(PyObject *, PyObject *);}
static PyObject *meth_QColor_setCmyk(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4 = 255;
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Biiii|i",&sipSelf,sipType_QColor,&sipCpp,&a0,&a1,&a2,&a3,&a4))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCmyk(a0,a1,a2,a3,a4);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_setCmyk);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_getCmykF(PyObject *, PyObject *);}
static PyObject *meth_QColor_getCmykF(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        qreal a4;
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->getCmykF(&a0,&a1,&a2,&a3,&a4);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(ddddd)",a0,a1,a2,a3,a4);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_getCmykF);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_setCmykF(PyObject *, PyObject *);}
static PyObject *meth_QColor_setCmykF(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        qreal a4 = 1;
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bdddd|d",&sipSelf,sipType_QColor,&sipCpp,&a0,&a1,&a2,&a3,&a4))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCmykF(a0,a1,a2,a3,a4);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_setCmykF);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_toRgb(PyObject *, PyObject *);}
static PyObject *meth_QColor_toRgb(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(sipCpp->toRgb());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_toRgb);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_toHsv(PyObject *, PyObject *);}
static PyObject *meth_QColor_toHsv(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(sipCpp->toHsv());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_toHsv);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_toCmyk(PyObject *, PyObject *);}
static PyObject *meth_QColor_toCmyk(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(sipCpp->toCmyk());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_toCmyk);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_convertTo(PyObject *, PyObject *);}
static PyObject *meth_QColor_convertTo(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor::Spec a0;
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QColor,&sipCpp,sipType_QColor_Spec,&a0))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(sipCpp->convertTo(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_convertTo);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_fromRgb(PyObject *, PyObject *);}
static PyObject *meth_QColor_fromRgb(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QRgb a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"u",&a0))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(QColor::fromRgb(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3 = 255;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"iii|i",&a0,&a1,&a2,&a3))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(QColor::fromRgb(a0,a1,a2,a3));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_fromRgb);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_fromRgba(PyObject *, PyObject *);}
static PyObject *meth_QColor_fromRgba(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QRgb a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"u",&a0))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(QColor::fromRgba(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_fromRgba);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_fromRgbF(PyObject *, PyObject *);}
static PyObject *meth_QColor_fromRgbF(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3 = 1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"ddd|d",&a0,&a1,&a2,&a3))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(QColor::fromRgbF(a0,a1,a2,a3));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_fromRgbF);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_fromHsv(PyObject *, PyObject *);}
static PyObject *meth_QColor_fromHsv(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        int a2;
        int a3 = 255;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"iii|i",&a0,&a1,&a2,&a3))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(QColor::fromHsv(a0,a1,a2,a3));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_fromHsv);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_fromHsvF(PyObject *, PyObject *);}
static PyObject *meth_QColor_fromHsvF(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3 = 1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"ddd|d",&a0,&a1,&a2,&a3))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(QColor::fromHsvF(a0,a1,a2,a3));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_fromHsvF);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_fromCmyk(PyObject *, PyObject *);}
static PyObject *meth_QColor_fromCmyk(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        int a4 = 255;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"iiii|i",&a0,&a1,&a2,&a3,&a4))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(QColor::fromCmyk(a0,a1,a2,a3,a4));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_fromCmyk);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_fromCmykF(PyObject *, PyObject *);}
static PyObject *meth_QColor_fromCmykF(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qreal a0;
        qreal a1;
        qreal a2;
        qreal a3;
        qreal a4 = 1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"dddd|d",&a0,&a1,&a2,&a3,&a4))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(QColor::fromCmykF(a0,a1,a2,a3,a4));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_fromCmykF);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_light(PyObject *, PyObject *);}
static PyObject *meth_QColor_light(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0 = 150;
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|i",&sipSelf,sipType_QColor,&sipCpp,&a0))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(sipCpp->light(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_light);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_dark(PyObject *, PyObject *);}
static PyObject *meth_QColor_dark(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0 = 200;
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|i",&sipSelf,sipType_QColor,&sipCpp,&a0))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(sipCpp->dark(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_dark);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_isValid(PyObject *, PyObject *);}
static PyObject *meth_QColor_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QColor,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_isValid);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_allowX11ColorNames(PyObject *, PyObject *);}
static PyObject *meth_QColor_allowX11ColorNames(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QColor::allowX11ColorNames();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_allowX11ColorNames);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_setAllowX11ColorNames(PyObject *, PyObject *);}
static PyObject *meth_QColor_setAllowX11ColorNames(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"b",&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QColor::setAllowX11ColorNames(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_setAllowX11ColorNames);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_lighter(PyObject *, PyObject *);}
static PyObject *meth_QColor_lighter(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0 = 150;
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|i",&sipSelf,sipType_QColor,&sipCpp,&a0))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(sipCpp->lighter(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_lighter);

    return NULL;
}


extern "C" {static PyObject *meth_QColor_darker(PyObject *, PyObject *);}
static PyObject *meth_QColor_darker(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0 = 200;
        QColor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|i",&sipSelf,sipType_QColor,&sipCpp,&a0))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(sipCpp->darker(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QColor,sipName_darker);

    return NULL;
}


extern "C" {static PyObject *slot_QColor___ne__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QColor___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QColor *sipCpp = reinterpret_cast<QColor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QColor));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QColor * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QColor,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QColor::operator!=(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtGui,ne_slot,sipType_QColor,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QColor___eq__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QColor___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QColor *sipCpp = reinterpret_cast<QColor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QColor));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QColor * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QColor,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QColor::operator==(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtGui,eq_slot,sipType_QColor,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QColor(void *, const sipTypeDef *);}
static void *cast_QColor(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QColor)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QColor(void *, int);}
static void release_QColor(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QColor *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static PyObject *pickle_QColor(void *);}
static PyObject *pickle_QColor(void *sipCppV)
{
    QColor *sipCpp = reinterpret_cast<QColor *>(sipCppV);
    PyObject *sipRes;

#line 67 "sip/QtGui/qcolor.sip"
    sipRes = Py_BuildValue((char *)"iiii", sipCpp->red(), sipCpp->green(), sipCpp->blue(), sipCpp->alpha());
#line 2046 "sipQtGuiQColor.cpp"

    return sipRes;
}


extern "C" {static void assign_QColor(void *, SIP_SSIZE_T, const void *);}
static void assign_QColor(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QColor *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QColor *>(sipSrc);
}


extern "C" {static void *array_QColor(SIP_SSIZE_T);}
static void *array_QColor(SIP_SSIZE_T sipNrElem)
{
    return new QColor[sipNrElem];
}


extern "C" {static void *copy_QColor(const void *, SIP_SSIZE_T);}
static void *copy_QColor(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QColor(reinterpret_cast<const QColor *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QColor(sipSimpleWrapper *);}
static void dealloc_QColor(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QColor(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QColor(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QColor(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QColor *sipCpp = 0;

    if (!sipCpp)
    {
        Qt::GlobalColor a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"XE",sipType_Qt_GlobalColor,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QColor(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        QRgb a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"u",&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QColor(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QVariant * a0;
        int a0State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1",sipType_QVariant,&a0,&a0State))
        {
#line 83 "sip/QtGui/qcolor.sip"
        sipCpp = new QColor(qVariantValue<QColor>(*a0));
#line 2121 "sipQtGuiQColor.cpp"

            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);
        }
    }

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QColor();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        int a0;
        int a1;
        int a2;
        int a3 = 255;

        if (sipParseArgs(sipArgsParsed,sipArgs,"iii|i",&a0,&a1,&a2,&a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QColor(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1",sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QColor(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
        }
    }

    if (!sipCpp)
    {
        const QColor * a0;
        int a0State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1",sipType_QColor,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QColor(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);
        }
    }

    return sipCpp;
}


extern "C" {static int convertTo_QColor(PyObject *, void **, int *, PyObject *);}
static int convertTo_QColor(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QColor **sipCppPtr = reinterpret_cast<QColor **>(sipCppPtrV);

#line 45 "sip/QtGui/qcolor.sip"
// SIP doesn't support automatic type convertors so we explicitly allow a
// Qt::GlobalColor to be used whenever a QColor is expected.  Note that SIP
// must process QColor before QBrush so that the former's QVariant cast
// operator is applied before the latter's.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_GlobalColor)) ||
            sipCanConvertToType(sipPy, sipType_QColor, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_GlobalColor)))
{
    *sipCppPtr = new QColor((Qt::GlobalColor)SIPLong_AsLong(sipPy));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QColor *>(sipConvertToType(sipPy, sipType_QColor, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 2211 "sipQtGuiQColor.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QColor[] = {
    {(void *)slot_QColor___ne__, ne_slot},
    {(void *)slot_QColor___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QColor[] = {
    {SIP_MLNAME_CAST(sipName_allowX11ColorNames), meth_QColor_allowX11ColorNames, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_alpha), meth_QColor_alpha, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_alphaF), meth_QColor_alphaF, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_black), meth_QColor_black, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_blackF), meth_QColor_blackF, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_blue), meth_QColor_blue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_blueF), meth_QColor_blueF, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_colorNames), meth_QColor_colorNames, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_convertTo), meth_QColor_convertTo, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_cyan), meth_QColor_cyan, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_cyanF), meth_QColor_cyanF, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dark), meth_QColor_dark, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_darker), meth_QColor_darker, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromCmyk), meth_QColor_fromCmyk, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromCmykF), meth_QColor_fromCmykF, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromHsv), meth_QColor_fromHsv, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromHsvF), meth_QColor_fromHsvF, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromRgb), meth_QColor_fromRgb, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromRgbF), meth_QColor_fromRgbF, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromRgba), meth_QColor_fromRgba, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getCmyk), meth_QColor_getCmyk, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getCmykF), meth_QColor_getCmykF, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getHsv), meth_QColor_getHsv, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getHsvF), meth_QColor_getHsvF, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getRgb), meth_QColor_getRgb, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getRgbF), meth_QColor_getRgbF, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_green), meth_QColor_green, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_greenF), meth_QColor_greenF, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hue), meth_QColor_hue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hueF), meth_QColor_hueF, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QColor_isValid, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_light), meth_QColor_light, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lighter), meth_QColor_lighter, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_magenta), meth_QColor_magenta, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_magentaF), meth_QColor_magentaF, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_name), meth_QColor_name, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_red), meth_QColor_red, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_redF), meth_QColor_redF, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rgb), meth_QColor_rgb, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rgba), meth_QColor_rgba, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_saturation), meth_QColor_saturation, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_saturationF), meth_QColor_saturationF, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAllowX11ColorNames), meth_QColor_setAllowX11ColorNames, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAlpha), meth_QColor_setAlpha, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAlphaF), meth_QColor_setAlphaF, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBlue), meth_QColor_setBlue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBlueF), meth_QColor_setBlueF, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCmyk), meth_QColor_setCmyk, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCmykF), meth_QColor_setCmykF, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setGreen), meth_QColor_setGreen, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setGreenF), meth_QColor_setGreenF, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setHsv), meth_QColor_setHsv, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setHsvF), meth_QColor_setHsvF, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setNamedColor), meth_QColor_setNamedColor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRed), meth_QColor_setRed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRedF), meth_QColor_setRedF, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRgb), meth_QColor_setRgb, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRgbF), meth_QColor_setRgbF, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRgba), meth_QColor_setRgba, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_spec), meth_QColor_spec, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toCmyk), meth_QColor_toCmyk, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toHsv), meth_QColor_toHsv, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toRgb), meth_QColor_toRgb, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_value), meth_QColor_value, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_valueF), meth_QColor_valueF, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_yellow), meth_QColor_yellow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_yellowF), meth_QColor_yellowF, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QColor[] = {
    {sipName_Cmyk, QColor::Cmyk, 55},
    {sipName_Hsv, QColor::Hsv, 55},
    {sipName_Invalid, QColor::Invalid, 55},
    {sipName_Rgb, QColor::Rgb, 55},
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QColor = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QColor,
        {0}
    },
    {
        sipNameNr_QColor,
        {0, 0, 1},
        67, methods_QColor,
        4, enummembers_QColor,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QColor,
    init_QColor,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QColor,
    assign_QColor,
    array_QColor,
    copy_QColor,
    release_QColor,
    cast_QColor,
    convertTo_QColor,
    0,
    pickle_QColor
},
    0,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:23 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 41 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 39 "sipQtGuiQPalette.cpp"

#line 41 "sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 43 "sipQtGuiQPalette.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 46 "sipQtGuiQPalette.cpp"
#line 41 "sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 49 "sipQtGuiQPalette.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 52 "sipQtGuiQPalette.cpp"


extern "C" {static PyObject *meth_QPalette_currentColorGroup(PyObject *, PyObject *);}
static PyObject *meth_QPalette_currentColorGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPalette,&sipCpp))
        {
            QPalette::ColorGroup sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentColorGroup();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QPalette_ColorGroup);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_currentColorGroup);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_setCurrentColorGroup(PyObject *, PyObject *);}
static PyObject *meth_QPalette_setCurrentColorGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette::ColorGroup a0;
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QPalette,&sipCpp,sipType_QPalette_ColorGroup,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentColorGroup(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_setCurrentColorGroup);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_color(PyObject *, PyObject *);}
static PyObject *meth_QPalette_color(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette::ColorGroup a0;
        QPalette::ColorRole a1;
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BEE",&sipSelf,sipType_QPalette,&sipCpp,sipType_QPalette_ColorGroup,&a0,sipType_QPalette_ColorRole,&a1))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(sipCpp->color(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    {
        QPalette::ColorRole a0;
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QPalette,&sipCpp,sipType_QPalette_ColorRole,&a0))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(sipCpp->color(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_color);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_brush(PyObject *, PyObject *);}
static PyObject *meth_QPalette_brush(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette::ColorGroup a0;
        QPalette::ColorRole a1;
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BEE",&sipSelf,sipType_QPalette,&sipCpp,sipType_QPalette_ColorGroup,&a0,sipType_QPalette_ColorRole,&a1))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->brush(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    {
        QPalette::ColorRole a0;
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QPalette,&sipCpp,sipType_QPalette_ColorRole,&a0))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->brush(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_brush);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_setBrush(PyObject *, PyObject *);}
static PyObject *meth_QPalette_setBrush(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette::ColorGroup a0;
        QPalette::ColorRole a1;
        const QBrush * a2;
        int a2State = 0;
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BEEJ1",&sipSelf,sipType_QPalette,&sipCpp,sipType_QPalette_ColorGroup,&a0,sipType_QPalette_ColorRole,&a1,sipType_QBrush,&a2,&a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBrush(a0,a1,*a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QBrush *>(a2),sipType_QBrush,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QPalette::ColorRole a0;
        const QBrush * a1;
        int a1State = 0;
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BEJ1",&sipSelf,sipType_QPalette,&sipCpp,sipType_QPalette_ColorRole,&a0,sipType_QBrush,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBrush(a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QBrush *>(a1),sipType_QBrush,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_setBrush);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_setColorGroup(PyObject *, PyObject *);}
static PyObject *meth_QPalette_setColorGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette::ColorGroup a0;
        const QBrush * a1;
        int a1State = 0;
        const QBrush * a2;
        int a2State = 0;
        const QBrush * a3;
        int a3State = 0;
        const QBrush * a4;
        int a4State = 0;
        const QBrush * a5;
        int a5State = 0;
        const QBrush * a6;
        int a6State = 0;
        const QBrush * a7;
        int a7State = 0;
        const QBrush * a8;
        int a8State = 0;
        const QBrush * a9;
        int a9State = 0;
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BEJ1J1J1J1J1J1J1J1J1",&sipSelf,sipType_QPalette,&sipCpp,sipType_QPalette_ColorGroup,&a0,sipType_QBrush,&a1,&a1State,sipType_QBrush,&a2,&a2State,sipType_QBrush,&a3,&a3State,sipType_QBrush,&a4,&a4State,sipType_QBrush,&a5,&a5State,sipType_QBrush,&a6,&a6State,sipType_QBrush,&a7,&a7State,sipType_QBrush,&a8,&a8State,sipType_QBrush,&a9,&a9State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setColorGroup(a0,*a1,*a2,*a3,*a4,*a5,*a6,*a7,*a8,*a9);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QBrush *>(a1),sipType_QBrush,a1State);
            sipReleaseType(const_cast<QBrush *>(a2),sipType_QBrush,a2State);
            sipReleaseType(const_cast<QBrush *>(a3),sipType_QBrush,a3State);
            sipReleaseType(const_cast<QBrush *>(a4),sipType_QBrush,a4State);
            sipReleaseType(const_cast<QBrush *>(a5),sipType_QBrush,a5State);
            sipReleaseType(const_cast<QBrush *>(a6),sipType_QBrush,a6State);
            sipReleaseType(const_cast<QBrush *>(a7),sipType_QBrush,a7State);
            sipReleaseType(const_cast<QBrush *>(a8),sipType_QBrush,a8State);
            sipReleaseType(const_cast<QBrush *>(a9),sipType_QBrush,a9State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_setColorGroup);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_isEqual(PyObject *, PyObject *);}
static PyObject *meth_QPalette_isEqual(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette::ColorGroup a0;
        QPalette::ColorGroup a1;
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BEE",&sipSelf,sipType_QPalette,&sipCpp,sipType_QPalette_ColorGroup,&a0,sipType_QPalette_ColorGroup,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEqual(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_isEqual);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_foreground(PyObject *, PyObject *);}
static PyObject *meth_QPalette_foreground(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPalette,&sipCpp))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->foreground());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_foreground);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_windowText(PyObject *, PyObject *);}
static PyObject *meth_QPalette_windowText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPalette,&sipCpp))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->windowText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_windowText);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_button(PyObject *, PyObject *);}
static PyObject *meth_QPalette_button(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPalette,&sipCpp))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->button());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_button);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_light(PyObject *, PyObject *);}
static PyObject *meth_QPalette_light(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPalette,&sipCpp))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->light());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_light);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_dark(PyObject *, PyObject *);}
static PyObject *meth_QPalette_dark(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPalette,&sipCpp))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->dark());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_dark);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_mid(PyObject *, PyObject *);}
static PyObject *meth_QPalette_mid(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPalette,&sipCpp))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->mid());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_mid);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_text(PyObject *, PyObject *);}
static PyObject *meth_QPalette_text(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPalette,&sipCpp))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->text());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_text);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_base(PyObject *, PyObject *);}
static PyObject *meth_QPalette_base(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPalette,&sipCpp))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->base());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_base);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_alternateBase(PyObject *, PyObject *);}
static PyObject *meth_QPalette_alternateBase(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPalette,&sipCpp))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->alternateBase());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_alternateBase);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_window(PyObject *, PyObject *);}
static PyObject *meth_QPalette_window(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPalette,&sipCpp))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->window());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_window);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_background(PyObject *, PyObject *);}
static PyObject *meth_QPalette_background(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPalette,&sipCpp))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->background());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_background);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_midlight(PyObject *, PyObject *);}
static PyObject *meth_QPalette_midlight(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPalette,&sipCpp))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->midlight());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_midlight);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_brightText(PyObject *, PyObject *);}
static PyObject *meth_QPalette_brightText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPalette,&sipCpp))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->brightText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_brightText);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_buttonText(PyObject *, PyObject *);}
static PyObject *meth_QPalette_buttonText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPalette,&sipCpp))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->buttonText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_buttonText);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_shadow(PyObject *, PyObject *);}
static PyObject *meth_QPalette_shadow(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPalette,&sipCpp))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->shadow());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_shadow);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_highlight(PyObject *, PyObject *);}
static PyObject *meth_QPalette_highlight(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPalette,&sipCpp))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->highlight());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_highlight);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_highlightedText(PyObject *, PyObject *);}
static PyObject *meth_QPalette_highlightedText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPalette,&sipCpp))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->highlightedText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_highlightedText);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_link(PyObject *, PyObject *);}
static PyObject *meth_QPalette_link(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPalette,&sipCpp))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->link());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_link);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_linkVisited(PyObject *, PyObject *);}
static PyObject *meth_QPalette_linkVisited(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPalette,&sipCpp))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->linkVisited());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_linkVisited);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_toolTipBase(PyObject *, PyObject *);}
static PyObject *meth_QPalette_toolTipBase(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPalette,&sipCpp))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->toolTipBase());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_toolTipBase);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_toolTipText(PyObject *, PyObject *);}
static PyObject *meth_QPalette_toolTipText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPalette,&sipCpp))
        {
            QBrush *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QBrush(sipCpp->toolTipText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QBrush,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_toolTipText);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_isCopyOf(PyObject *, PyObject *);}
static PyObject *meth_QPalette_isCopyOf(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPalette * a0;
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QPalette,&sipCpp,sipType_QPalette,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isCopyOf(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_isCopyOf);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_serialNumber(PyObject *, PyObject *);}
static PyObject *meth_QPalette_serialNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPalette,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->serialNumber();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_serialNumber);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_resolve(PyObject *, PyObject *);}
static PyObject *meth_QPalette_resolve(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPalette * a0;
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QPalette,&sipCpp,sipType_QPalette,&a0))
        {
            QPalette *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPalette(sipCpp->resolve(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPalette,NULL);
        }
    }

    {
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPalette,&sipCpp))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->resolve();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    {
        uint a0;
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bu",&sipSelf,sipType_QPalette,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resolve(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_resolve);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_setColor(PyObject *, PyObject *);}
static PyObject *meth_QPalette_setColor(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette::ColorGroup a0;
        QPalette::ColorRole a1;
        const QColor * a2;
        int a2State = 0;
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BEEJ1",&sipSelf,sipType_QPalette,&sipCpp,sipType_QPalette_ColorGroup,&a0,sipType_QPalette_ColorRole,&a1,sipType_QColor,&a2,&a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setColor(a0,a1,*a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QColor *>(a2),sipType_QColor,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QPalette::ColorRole a0;
        const QColor * a1;
        int a1State = 0;
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BEJ1",&sipSelf,sipType_QPalette,&sipCpp,sipType_QPalette_ColorRole,&a0,sipType_QColor,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setColor(a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QColor *>(a1),sipType_QColor,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_setColor);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_isBrushSet(PyObject *, PyObject *);}
static PyObject *meth_QPalette_isBrushSet(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette::ColorGroup a0;
        QPalette::ColorRole a1;
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BEE",&sipSelf,sipType_QPalette,&sipCpp,sipType_QPalette_ColorGroup,&a0,sipType_QPalette_ColorRole,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isBrushSet(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_isBrushSet);

    return NULL;
}


extern "C" {static PyObject *meth_QPalette_cacheKey(PyObject *, PyObject *);}
static PyObject *meth_QPalette_cacheKey(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPalette *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPalette,&sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cacheKey();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPalette,sipName_cacheKey);

    return NULL;
}


extern "C" {static PyObject *slot_QPalette___ne__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QPalette___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QPalette *sipCpp = reinterpret_cast<QPalette *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPalette));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QPalette * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QPalette,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QPalette::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtGui,ne_slot,sipType_QPalette,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QPalette___eq__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QPalette___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QPalette *sipCpp = reinterpret_cast<QPalette *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QPalette));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QPalette * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QPalette,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QPalette::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtGui,eq_slot,sipType_QPalette,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QPalette(void *, const sipTypeDef *);}
static void *cast_QPalette(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QPalette)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPalette(void *, int);}
static void release_QPalette(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QPalette *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QPalette(void *, SIP_SSIZE_T, const void *);}
static void assign_QPalette(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QPalette *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QPalette *>(sipSrc);
}


extern "C" {static void *array_QPalette(SIP_SSIZE_T);}
static void *array_QPalette(SIP_SSIZE_T sipNrElem)
{
    return new QPalette[sipNrElem];
}


extern "C" {static void *copy_QPalette(const void *, SIP_SSIZE_T);}
static void *copy_QPalette(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QPalette(reinterpret_cast<const QPalette *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QPalette(sipSimpleWrapper *);}
static void dealloc_QPalette(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QPalette(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QPalette(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QPalette(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QPalette *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QPalette();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QColor * a0;
        int a0State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1",sipType_QColor,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QPalette(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);
        }
    }

    if (!sipCpp)
    {
        Qt::GlobalColor a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"E",sipType_Qt_GlobalColor,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QPalette(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QColor * a0;
        int a0State = 0;
        const QColor * a1;
        int a1State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1J1",sipType_QColor,&a0,&a0State,sipType_QColor,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QPalette(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);
            sipReleaseType(const_cast<QColor *>(a1),sipType_QColor,a1State);
        }
    }

    if (!sipCpp)
    {
        const QBrush * a0;
        int a0State = 0;
        const QBrush * a1;
        int a1State = 0;
        const QBrush * a2;
        int a2State = 0;
        const QBrush * a3;
        int a3State = 0;
        const QBrush * a4;
        int a4State = 0;
        const QBrush * a5;
        int a5State = 0;
        const QBrush * a6;
        int a6State = 0;
        const QBrush * a7;
        int a7State = 0;
        const QBrush * a8;
        int a8State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1J1J1J1J1J1J1J1J1",sipType_QBrush,&a0,&a0State,sipType_QBrush,&a1,&a1State,sipType_QBrush,&a2,&a2State,sipType_QBrush,&a3,&a3State,sipType_QBrush,&a4,&a4State,sipType_QBrush,&a5,&a5State,sipType_QBrush,&a6,&a6State,sipType_QBrush,&a7,&a7State,sipType_QBrush,&a8,&a8State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QPalette(*a0,*a1,*a2,*a3,*a4,*a5,*a6,*a7,*a8);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QBrush *>(a0),sipType_QBrush,a0State);
            sipReleaseType(const_cast<QBrush *>(a1),sipType_QBrush,a1State);
            sipReleaseType(const_cast<QBrush *>(a2),sipType_QBrush,a2State);
            sipReleaseType(const_cast<QBrush *>(a3),sipType_QBrush,a3State);
            sipReleaseType(const_cast<QBrush *>(a4),sipType_QBrush,a4State);
            sipReleaseType(const_cast<QBrush *>(a5),sipType_QBrush,a5State);
            sipReleaseType(const_cast<QBrush *>(a6),sipType_QBrush,a6State);
            sipReleaseType(const_cast<QBrush *>(a7),sipType_QBrush,a7State);
            sipReleaseType(const_cast<QBrush *>(a8),sipType_QBrush,a8State);
        }
    }

    if (!sipCpp)
    {
        const QColor * a0;
        int a0State = 0;
        const QColor * a1;
        int a1State = 0;
        const QColor * a2;
        int a2State = 0;
        const QColor * a3;
        int a3State = 0;
        const QColor * a4;
        int a4State = 0;
        const QColor * a5;
        int a5State = 0;
        const QColor * a6;
        int a6State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1J1J1J1J1J1J1",sipType_QColor,&a0,&a0State,sipType_QColor,&a1,&a1State,sipType_QColor,&a2,&a2State,sipType_QColor,&a3,&a3State,sipType_QColor,&a4,&a4State,sipType_QColor,&a5,&a5State,sipType_QColor,&a6,&a6State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QPalette(*a0,*a1,*a2,*a3,*a4,*a5,*a6);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);
            sipReleaseType(const_cast<QColor *>(a1),sipType_QColor,a1State);
            sipReleaseType(const_cast<QColor *>(a2),sipType_QColor,a2State);
            sipReleaseType(const_cast<QColor *>(a3),sipType_QColor,a3State);
            sipReleaseType(const_cast<QColor *>(a4),sipType_QColor,a4State);
            sipReleaseType(const_cast<QColor *>(a5),sipType_QColor,a5State);
            sipReleaseType(const_cast<QColor *>(a6),sipType_QColor,a6State);
        }
    }

    if (!sipCpp)
    {
        const QPalette * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QPalette,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QPalette(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QVariant * a0;
        int a0State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1",sipType_QVariant,&a0,&a0State))
        {
#line 54 "sip/QtGui/qpalette.sip"
        sipCpp = new QPalette(qVariantValue<QPalette>(*a0));
#line 1386 "sipQtGuiQPalette.cpp"

            sipReleaseType(const_cast<QVariant *>(a0),sipType_QVariant,a0State);
        }
    }

    return sipCpp;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QPalette[] = {
    {(void *)slot_QPalette___ne__, ne_slot},
    {(void *)slot_QPalette___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QPalette[] = {
    {SIP_MLNAME_CAST(sipName_alternateBase), meth_QPalette_alternateBase, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_background), meth_QPalette_background, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_base), meth_QPalette_base, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_brightText), meth_QPalette_brightText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_brush), meth_QPalette_brush, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_button), meth_QPalette_button, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_buttonText), meth_QPalette_buttonText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_cacheKey), meth_QPalette_cacheKey, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_color), meth_QPalette_color, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentColorGroup), meth_QPalette_currentColorGroup, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dark), meth_QPalette_dark, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_foreground), meth_QPalette_foreground, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_highlight), meth_QPalette_highlight, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_highlightedText), meth_QPalette_highlightedText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isBrushSet), meth_QPalette_isBrushSet, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isCopyOf), meth_QPalette_isCopyOf, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isEqual), meth_QPalette_isEqual, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_light), meth_QPalette_light, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_link), meth_QPalette_link, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_linkVisited), meth_QPalette_linkVisited, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mid), meth_QPalette_mid, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_midlight), meth_QPalette_midlight, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resolve), meth_QPalette_resolve, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_serialNumber), meth_QPalette_serialNumber, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBrush), meth_QPalette_setBrush, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setColor), meth_QPalette_setColor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setColorGroup), meth_QPalette_setColorGroup, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCurrentColorGroup), meth_QPalette_setCurrentColorGroup, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_shadow), meth_QPalette_shadow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_text), meth_QPalette_text, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toolTipBase), meth_QPalette_toolTipBase, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toolTipText), meth_QPalette_toolTipText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_window), meth_QPalette_window, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_windowText), meth_QPalette_windowText, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QPalette[] = {
    {sipName_Active, QPalette::Active, 338},
    {sipName_All, QPalette::All, 338},
    {sipName_AlternateBase, QPalette::AlternateBase, 339},
    {sipName_Background, QPalette::Background, 339},
    {sipName_Base, QPalette::Base, 339},
    {sipName_BrightText, QPalette::BrightText, 339},
    {sipName_Button, QPalette::Button, 339},
    {sipName_ButtonText, QPalette::ButtonText, 339},
    {sipName_Current, QPalette::Current, 338},
    {sipName_Dark, QPalette::Dark, 339},
    {sipName_Disabled, QPalette::Disabled, 338},
    {sipName_Foreground, QPalette::Foreground, 339},
    {sipName_Highlight, QPalette::Highlight, 339},
    {sipName_HighlightedText, QPalette::HighlightedText, 339},
    {sipName_Inactive, QPalette::Inactive, 338},
    {sipName_Light, QPalette::Light, 339},
    {sipName_Link, QPalette::Link, 339},
    {sipName_LinkVisited, QPalette::LinkVisited, 339},
    {sipName_Mid, QPalette::Mid, 339},
    {sipName_Midlight, QPalette::Midlight, 339},
    {sipName_NColorGroups, QPalette::NColorGroups, 338},
    {sipName_NColorRoles, QPalette::NColorRoles, 339},
    {sipName_NoRole, QPalette::NoRole, 339},
    {sipName_Normal, QPalette::Normal, 338},
    {sipName_Shadow, QPalette::Shadow, 339},
    {sipName_Text, QPalette::Text, 339},
    {sipName_ToolTipBase, QPalette::ToolTipBase, 339},
    {sipName_ToolTipText, QPalette::ToolTipText, 339},
    {sipName_Window, QPalette::Window, 339},
    {sipName_WindowText, QPalette::WindowText, 339},
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QPalette = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QPalette,
        {0}
    },
    {
        sipNameNr_QPalette,
        {0, 0, 1},
        34, methods_QPalette,
        30, enummembers_QPalette,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QPalette,
    init_QPalette,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPalette,
    assign_QPalette,
    array_QPalette,
    copy_QPalette,
    release_QPalette,
    cast_QPalette,
    0,
    0,
    0
},
    0,
    0,
    0
};

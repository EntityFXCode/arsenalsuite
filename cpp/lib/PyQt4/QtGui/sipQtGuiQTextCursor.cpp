/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:22 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 37 "sip/QtGui/qtextcursor.sip"
#include <qtextcursor.h>
#line 39 "sipQtGuiQTextCursor.cpp"

#line 66 "sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 43 "sipQtGuiQTextCursor.cpp"
#line 78 "sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 96 "sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 48 "sipQtGuiQTextCursor.cpp"
#line 144 "sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 170 "sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 53 "sipQtGuiQTextCursor.cpp"
#line 511 "sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 56 "sipQtGuiQTextCursor.cpp"
#line 529 "sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 59 "sipQtGuiQTextCursor.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 62 "sipQtGuiQTextCursor.cpp"
#line 41 "sip/QtGui/qimage.sip"
#include <qimage.h>
#line 65 "sipQtGuiQTextCursor.cpp"
#line 37 "sip/QtGui/qtextdocumentfragment.sip"
#include <qtextdocumentfragment.h>
#line 68 "sipQtGuiQTextCursor.cpp"
#line 66 "sip/QtGui/qtexttable.sip"
#include <qtexttable.h>
#line 71 "sipQtGuiQTextCursor.cpp"
#line 623 "sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 74 "sipQtGuiQTextCursor.cpp"
#line 37 "sip/QtGui/qtextlist.sip"
#include <qtextlist.h>
#line 77 "sipQtGuiQTextCursor.cpp"
#line 483 "sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 80 "sipQtGuiQTextCursor.cpp"
#line 443 "sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 83 "sipQtGuiQTextCursor.cpp"
#line 312 "sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 86 "sipQtGuiQTextCursor.cpp"


extern "C" {static PyObject *meth_QTextCursor_isNull(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNull();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_isNull);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_setPosition(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_setPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QTextCursor::MoveMode a1 = QTextCursor::MoveAnchor;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi|E",&sipSelf,sipType_QTextCursor,&sipCpp,&a0,sipType_QTextCursor_MoveMode,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPosition(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_setPosition);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_position(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_position(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->position();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_position);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_anchor(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_anchor(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->anchor();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_anchor);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_insertText(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_insertText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QTextCursor,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertText(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QTextCharFormat * a1;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J9",&sipSelf,sipType_QTextCursor,&sipCpp,sipType_QString,&a0,&a0State,sipType_QTextCharFormat,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertText(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_insertText);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_movePosition(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_movePosition(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor::MoveOperation a0;
        QTextCursor::MoveMode a1 = QTextCursor::MoveAnchor;
        int a2 = 1;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE|Ei",&sipSelf,sipType_QTextCursor,&sipCpp,sipType_QTextCursor_MoveOperation,&a0,sipType_QTextCursor_MoveMode,&a1,&a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->movePosition(a0,a1,a2);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_movePosition);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_deleteChar(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_deleteChar(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->deleteChar();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_deleteChar);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_deletePreviousChar(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_deletePreviousChar(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->deletePreviousChar();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_deletePreviousChar);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_select(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_select(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor::SelectionType a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QTextCursor,&sipCpp,sipType_QTextCursor_SelectionType,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->select(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_select);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_hasSelection(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_hasSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasSelection();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_hasSelection);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_hasComplexSelection(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_hasComplexSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasComplexSelection();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_hasComplexSelection);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_removeSelectedText(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_removeSelectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->removeSelectedText();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_removeSelectedText);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_clearSelection(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_clearSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearSelection();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_clearSelection);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_selectionStart(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_selectionStart(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->selectionStart();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_selectionStart);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_selectionEnd(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_selectionEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->selectionEnd();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_selectionEnd);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_selectedText(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_selectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->selectedText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_selectedText);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_selection(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_selection(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            QTextDocumentFragment *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextDocumentFragment(sipCpp->selection());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextDocumentFragment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_selection);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_selectedTableCells(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_selectedTableCells(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->selectedTableCells(&a0,&a1,&a2,&a3);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(iiii)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_selectedTableCells);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_block(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_block(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            QTextBlock *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextBlock(sipCpp->block());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextBlock,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_block);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_charFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_charFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            QTextCharFormat *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextCharFormat(sipCpp->charFormat());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_charFormat);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_setCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_setCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QTextCharFormat * a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QTextCursor,&sipCpp,sipType_QTextCharFormat,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCharFormat(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_setCharFormat);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_mergeCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_mergeCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QTextCharFormat * a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QTextCursor,&sipCpp,sipType_QTextCharFormat,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->mergeCharFormat(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_mergeCharFormat);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_blockFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_blockFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            QTextBlockFormat *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextBlockFormat(sipCpp->blockFormat());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextBlockFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_blockFormat);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_setBlockFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_setBlockFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QTextBlockFormat * a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QTextCursor,&sipCpp,sipType_QTextBlockFormat,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBlockFormat(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_setBlockFormat);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_mergeBlockFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_mergeBlockFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QTextBlockFormat * a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QTextCursor,&sipCpp,sipType_QTextBlockFormat,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->mergeBlockFormat(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_mergeBlockFormat);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_blockCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_blockCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            QTextCharFormat *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextCharFormat(sipCpp->blockCharFormat());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_blockCharFormat);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_setBlockCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_setBlockCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QTextCharFormat * a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QTextCursor,&sipCpp,sipType_QTextCharFormat,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBlockCharFormat(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_setBlockCharFormat);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_mergeBlockCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_mergeBlockCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QTextCharFormat * a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QTextCursor,&sipCpp,sipType_QTextCharFormat,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->mergeBlockCharFormat(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_mergeBlockCharFormat);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_atBlockStart(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_atBlockStart(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->atBlockStart();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_atBlockStart);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_atBlockEnd(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_atBlockEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->atBlockEnd();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_atBlockEnd);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_atStart(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_atStart(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->atStart();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_atStart);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->atEnd();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_atEnd);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_insertBlock(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_insertBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertBlock();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QTextBlockFormat * a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QTextCursor,&sipCpp,sipType_QTextBlockFormat,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertBlock(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QTextBlockFormat * a0;
        const QTextCharFormat * a1;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9J9",&sipSelf,sipType_QTextCursor,&sipCpp,sipType_QTextBlockFormat,&a0,sipType_QTextCharFormat,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertBlock(*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_insertBlock);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_insertList(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_insertList(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QTextListFormat * a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QTextCursor,&sipCpp,sipType_QTextListFormat,&a0))
        {
            QTextList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->insertList(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextList,NULL);
        }
    }

    {
        QTextListFormat::Style a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QTextCursor,&sipCpp,sipType_QTextListFormat_Style,&a0))
        {
            QTextList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->insertList(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_insertList);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_createList(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_createList(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QTextListFormat * a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QTextCursor,&sipCpp,sipType_QTextListFormat,&a0))
        {
            QTextList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->createList(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextList,NULL);
        }
    }

    {
        QTextListFormat::Style a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QTextCursor,&sipCpp,sipType_QTextListFormat_Style,&a0))
        {
            QTextList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->createList(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_createList);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_currentList(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_currentList(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            QTextList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentList();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_currentList);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_insertTable(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_insertTable(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        const QTextTableFormat * a2;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiiJ9",&sipSelf,sipType_QTextCursor,&sipCpp,&a0,&a1,sipType_QTextTableFormat,&a2))
        {
            QTextTable *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->insertTable(a0,a1,*a2);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextTable,NULL);
        }
    }

    {
        int a0;
        int a1;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii",&sipSelf,sipType_QTextCursor,&sipCpp,&a0,&a1))
        {
            QTextTable *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->insertTable(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextTable,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_insertTable);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_currentTable(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_currentTable(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            QTextTable *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentTable();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextTable,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_currentTable);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_insertFrame(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_insertFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QTextFrameFormat * a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QTextCursor,&sipCpp,sipType_QTextFrameFormat,&a0))
        {
            QTextFrame *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->insertFrame(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextFrame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_insertFrame);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_currentFrame(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_currentFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            QTextFrame *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentFrame();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextFrame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_currentFrame);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_insertFragment(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_insertFragment(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QTextDocumentFragment * a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QTextCursor,&sipCpp,sipType_QTextDocumentFragment,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertFragment(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_insertFragment);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_insertHtml(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_insertHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QTextCursor,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertHtml(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_insertHtml);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_insertImage(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_insertImage(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QTextImageFormat * a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QTextCursor,&sipCpp,sipType_QTextImageFormat,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertImage(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QTextImageFormat * a0;
        QTextFrameFormat::Position a1;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9E",&sipSelf,sipType_QTextCursor,&sipCpp,sipType_QTextImageFormat,&a0,sipType_QTextFrameFormat_Position,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertImage(*a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QTextCursor,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertImage(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QImage * a0;
        const QString& a1def = QString();
        const QString * a1 = &a1def;
        int a1State = 0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9|J1",&sipSelf,sipType_QTextCursor,&sipCpp,sipType_QImage,&a0,sipType_QString,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertImage(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_insertImage);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_beginEditBlock(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_beginEditBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->beginEditBlock();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_beginEditBlock);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_joinPreviousEditBlock(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_joinPreviousEditBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->joinPreviousEditBlock();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_joinPreviousEditBlock);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_endEditBlock(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_endEditBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->endEditBlock();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_endEditBlock);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_blockNumber(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_blockNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->blockNumber();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_blockNumber);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_columnNumber(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_columnNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->columnNumber();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_columnNumber);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_isCopyOf(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_isCopyOf(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QTextCursor * a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QTextCursor,&sipCpp,sipType_QTextCursor,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isCopyOf(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_isCopyOf);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_visualNavigation(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_visualNavigation(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->visualNavigation();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_visualNavigation);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_setVisualNavigation(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_setVisualNavigation(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QTextCursor,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setVisualNavigation(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_setVisualNavigation);

    return NULL;
}


extern "C" {static PyObject *meth_QTextCursor_document(PyObject *, PyObject *);}
static PyObject *meth_QTextCursor_document(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextCursor,&sipCpp))
        {
            QTextDocument *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->document();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextDocument,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextCursor,sipName_document);

    return NULL;
}


extern "C" {static PyObject *slot_QTextCursor___gt__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QTextCursor___gt__(PyObject *sipSelf,PyObject *sipArg)
{
    QTextCursor *sipCpp = reinterpret_cast<QTextCursor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextCursor));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QTextCursor * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QTextCursor,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QTextCursor::operator>(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtGui,gt_slot,sipType_QTextCursor,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QTextCursor___ge__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QTextCursor___ge__(PyObject *sipSelf,PyObject *sipArg)
{
    QTextCursor *sipCpp = reinterpret_cast<QTextCursor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextCursor));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QTextCursor * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QTextCursor,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QTextCursor::operator>=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtGui,ge_slot,sipType_QTextCursor,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QTextCursor___eq__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QTextCursor___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QTextCursor *sipCpp = reinterpret_cast<QTextCursor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextCursor));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QTextCursor * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QTextCursor,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QTextCursor::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtGui,eq_slot,sipType_QTextCursor,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QTextCursor___le__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QTextCursor___le__(PyObject *sipSelf,PyObject *sipArg)
{
    QTextCursor *sipCpp = reinterpret_cast<QTextCursor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextCursor));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QTextCursor * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QTextCursor,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QTextCursor::operator<=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtGui,le_slot,sipType_QTextCursor,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QTextCursor___lt__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QTextCursor___lt__(PyObject *sipSelf,PyObject *sipArg)
{
    QTextCursor *sipCpp = reinterpret_cast<QTextCursor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextCursor));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QTextCursor * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QTextCursor,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QTextCursor::operator<(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtGui,lt_slot,sipType_QTextCursor,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QTextCursor___ne__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QTextCursor___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QTextCursor *sipCpp = reinterpret_cast<QTextCursor *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QTextCursor));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QTextCursor * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QTextCursor,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QTextCursor::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtGui,ne_slot,sipType_QTextCursor,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTextCursor(void *, const sipTypeDef *);}
static void *cast_QTextCursor(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QTextCursor)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextCursor(void *, int);}
static void release_QTextCursor(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QTextCursor *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QTextCursor(void *, SIP_SSIZE_T, const void *);}
static void assign_QTextCursor(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QTextCursor *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QTextCursor *>(sipSrc);
}


extern "C" {static void *array_QTextCursor(SIP_SSIZE_T);}
static void *array_QTextCursor(SIP_SSIZE_T sipNrElem)
{
    return new QTextCursor[sipNrElem];
}


extern "C" {static void *copy_QTextCursor(const void *, SIP_SSIZE_T);}
static void *copy_QTextCursor(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QTextCursor(reinterpret_cast<const QTextCursor *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextCursor(sipSimpleWrapper *);}
static void dealloc_QTextCursor(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QTextCursor(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QTextCursor(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QTextCursor(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QTextCursor *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextCursor();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        QTextDocument * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J8",sipType_QTextDocument,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextCursor(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        QTextFrame * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J8",sipType_QTextFrame,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextCursor(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QTextBlock * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QTextBlock,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextCursor(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QTextCursor * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QTextCursor,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextCursor(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    return sipCpp;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QTextCursor[] = {
    {(void *)slot_QTextCursor___gt__, gt_slot},
    {(void *)slot_QTextCursor___ge__, ge_slot},
    {(void *)slot_QTextCursor___eq__, eq_slot},
    {(void *)slot_QTextCursor___le__, le_slot},
    {(void *)slot_QTextCursor___lt__, lt_slot},
    {(void *)slot_QTextCursor___ne__, ne_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QTextCursor[] = {
    {SIP_MLNAME_CAST(sipName_anchor), meth_QTextCursor_anchor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_atBlockEnd), meth_QTextCursor_atBlockEnd, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_atBlockStart), meth_QTextCursor_atBlockStart, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_atEnd), meth_QTextCursor_atEnd, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_atStart), meth_QTextCursor_atStart, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_beginEditBlock), meth_QTextCursor_beginEditBlock, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_block), meth_QTextCursor_block, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_blockCharFormat), meth_QTextCursor_blockCharFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_blockFormat), meth_QTextCursor_blockFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_blockNumber), meth_QTextCursor_blockNumber, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_charFormat), meth_QTextCursor_charFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clearSelection), meth_QTextCursor_clearSelection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_columnNumber), meth_QTextCursor_columnNumber, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createList), meth_QTextCursor_createList, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentFrame), meth_QTextCursor_currentFrame, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentList), meth_QTextCursor_currentList, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentTable), meth_QTextCursor_currentTable, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_deleteChar), meth_QTextCursor_deleteChar, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_deletePreviousChar), meth_QTextCursor_deletePreviousChar, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_document), meth_QTextCursor_document, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_endEditBlock), meth_QTextCursor_endEditBlock, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasComplexSelection), meth_QTextCursor_hasComplexSelection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasSelection), meth_QTextCursor_hasSelection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertBlock), meth_QTextCursor_insertBlock, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertFragment), meth_QTextCursor_insertFragment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertFrame), meth_QTextCursor_insertFrame, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertHtml), meth_QTextCursor_insertHtml, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertImage), meth_QTextCursor_insertImage, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertList), meth_QTextCursor_insertList, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertTable), meth_QTextCursor_insertTable, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertText), meth_QTextCursor_insertText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isCopyOf), meth_QTextCursor_isCopyOf, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QTextCursor_isNull, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_joinPreviousEditBlock), meth_QTextCursor_joinPreviousEditBlock, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mergeBlockCharFormat), meth_QTextCursor_mergeBlockCharFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mergeBlockFormat), meth_QTextCursor_mergeBlockFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mergeCharFormat), meth_QTextCursor_mergeCharFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_movePosition), meth_QTextCursor_movePosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_position), meth_QTextCursor_position, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeSelectedText), meth_QTextCursor_removeSelectedText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_select), meth_QTextCursor_select, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_selectedTableCells), meth_QTextCursor_selectedTableCells, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_selectedText), meth_QTextCursor_selectedText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_selection), meth_QTextCursor_selection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_selectionEnd), meth_QTextCursor_selectionEnd, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_selectionStart), meth_QTextCursor_selectionStart, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBlockCharFormat), meth_QTextCursor_setBlockCharFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBlockFormat), meth_QTextCursor_setBlockFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCharFormat), meth_QTextCursor_setCharFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPosition), meth_QTextCursor_setPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setVisualNavigation), meth_QTextCursor_setVisualNavigation, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_visualNavigation), meth_QTextCursor_visualNavigation, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QTextCursor[] = {
    {sipName_BlockUnderCursor, QTextCursor::BlockUnderCursor, 593},
    {sipName_Document, QTextCursor::Document, 593},
    {sipName_Down, QTextCursor::Down, 592},
    {sipName_End, QTextCursor::End, 592},
    {sipName_EndOfBlock, QTextCursor::EndOfBlock, 592},
    {sipName_EndOfLine, QTextCursor::EndOfLine, 592},
    {sipName_EndOfWord, QTextCursor::EndOfWord, 592},
    {sipName_KeepAnchor, QTextCursor::KeepAnchor, 591},
    {sipName_Left, QTextCursor::Left, 592},
    {sipName_LineUnderCursor, QTextCursor::LineUnderCursor, 593},
    {sipName_MoveAnchor, QTextCursor::MoveAnchor, 591},
    {sipName_NextBlock, QTextCursor::NextBlock, 592},
    {sipName_NextCell, QTextCursor::NextCell, 592},
    {sipName_NextCharacter, QTextCursor::NextCharacter, 592},
    {sipName_NextRow, QTextCursor::NextRow, 592},
    {sipName_NextWord, QTextCursor::NextWord, 592},
    {sipName_NoMove, QTextCursor::NoMove, 592},
    {sipName_PreviousBlock, QTextCursor::PreviousBlock, 592},
    {sipName_PreviousCell, QTextCursor::PreviousCell, 592},
    {sipName_PreviousCharacter, QTextCursor::PreviousCharacter, 592},
    {sipName_PreviousRow, QTextCursor::PreviousRow, 592},
    {sipName_PreviousWord, QTextCursor::PreviousWord, 592},
    {sipName_Right, QTextCursor::Right, 592},
    {sipName_Start, QTextCursor::Start, 592},
    {sipName_StartOfBlock, QTextCursor::StartOfBlock, 592},
    {sipName_StartOfLine, QTextCursor::StartOfLine, 592},
    {sipName_StartOfWord, QTextCursor::StartOfWord, 592},
    {sipName_Up, QTextCursor::Up, 592},
    {sipName_WordLeft, QTextCursor::WordLeft, 592},
    {sipName_WordRight, QTextCursor::WordRight, 592},
    {sipName_WordUnderCursor, QTextCursor::WordUnderCursor, 593},
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QTextCursor = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QTextCursor,
        {0}
    },
    {
        sipNameNr_QTextCursor,
        {0, 0, 1},
        52, methods_QTextCursor,
        31, enummembers_QTextCursor,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QTextCursor,
    init_QTextCursor,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextCursor,
    assign_QTextCursor,
    array_QTextCursor,
    copy_QTextCursor,
    release_QTextCursor,
    cast_QTextCursor,
    0,
    0,
    0
},
    0,
    0,
    0
};

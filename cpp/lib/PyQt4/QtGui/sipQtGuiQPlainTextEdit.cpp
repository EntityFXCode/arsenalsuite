/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:23 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 39 "sip/QtGui/qplaintextedit.sip"
#include <qplaintextedit.h>
#line 39 "sipQtGuiQPlainTextEdit.cpp"

#line 41 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 43 "sipQtGuiQPlainTextEdit.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 46 "sipQtGuiQPlainTextEdit.cpp"
#line 37 "sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 48 "sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 59 "sip/QtGui/qabstracttextdocumentlayout.sip"
#include <qabstracttextdocumentlayout.h>
#line 53 "sipQtGuiQPlainTextEdit.cpp"
#line 160 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 56 "sipQtGuiQPlainTextEdit.cpp"
#line 144 "sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 170 "sip/QtGui/qtextobject.sip"
#include <qtextobject.h>
#line 61 "sipQtGuiQPlainTextEdit.cpp"
#line 94 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 64 "sipQtGuiQPlainTextEdit.cpp"
#line 37 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 67 "sipQtGuiQPlainTextEdit.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 70 "sipQtGuiQPlainTextEdit.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 73 "sipQtGuiQPlainTextEdit.cpp"
#line 461 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 477 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 78 "sipQtGuiQPlainTextEdit.cpp"
#line 220 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 81 "sipQtGuiQPlainTextEdit.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 84 "sipQtGuiQPlainTextEdit.cpp"
#line 407 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 87 "sipQtGuiQPlainTextEdit.cpp"
#line 320 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 90 "sipQtGuiQPlainTextEdit.cpp"
#line 503 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 93 "sipQtGuiQPlainTextEdit.cpp"
#line 528 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 96 "sipQtGuiQPlainTextEdit.cpp"
#line 557 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 99 "sipQtGuiQPlainTextEdit.cpp"
#line 545 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 102 "sipQtGuiQPlainTextEdit.cpp"
#line 431 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 105 "sipQtGuiQPlainTextEdit.cpp"
#line 179 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 108 "sipQtGuiQPlainTextEdit.cpp"
#line 340 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 111 "sipQtGuiQPlainTextEdit.cpp"
#line 369 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 114 "sipQtGuiQPlainTextEdit.cpp"
#line 291 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 117 "sipQtGuiQPlainTextEdit.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 120 "sipQtGuiQPlainTextEdit.cpp"
#line 41 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 123 "sipQtGuiQPlainTextEdit.cpp"
#line 37 "sip/QtGui/qprinter.sip"
#include <qprinter.h>
#line 126 "sipQtGuiQPlainTextEdit.cpp"
#line 37 "sip/QtGui/qtextcursor.sip"
#include <qtextcursor.h>
#line 129 "sipQtGuiQPlainTextEdit.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 132 "sipQtGuiQPlainTextEdit.cpp"
#line 41 "sip/QtGui/qtextedit.sip"
#include <qtextedit.h>
#line 51 "sip/QtGui/qtextedit.sip"
#include <qtextedit.h>
#line 137 "sipQtGuiQPlainTextEdit.cpp"
#line 41 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 140 "sipQtGuiQPlainTextEdit.cpp"
#line 37 "sip/QtGui/qmenu.sip"
#include <qmenu.h>
#line 143 "sipQtGuiQPlainTextEdit.cpp"
#line 41 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 146 "sipQtGuiQPlainTextEdit.cpp"
#line 66 "sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 149 "sipQtGuiQPlainTextEdit.cpp"
#line 41 "sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 109 "sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 154 "sipQtGuiQPlainTextEdit.cpp"
#line 312 "sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 157 "sipQtGuiQPlainTextEdit.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 160 "sipQtGuiQPlainTextEdit.cpp"
#line 66 "sip/QtGui/qtextdocument.sip"
#include <qtextdocument.h>
#line 163 "sipQtGuiQPlainTextEdit.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 166 "sipQtGuiQPlainTextEdit.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 169 "sipQtGuiQPlainTextEdit.cpp"
#line 37 "sip/QtGui/qscrollbar.sip"
#include <qscrollbar.h>
#line 172 "sipQtGuiQPlainTextEdit.cpp"
#line 41 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 175 "sipQtGuiQPlainTextEdit.cpp"
#line 41 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 178 "sipQtGuiQPlainTextEdit.cpp"
#line 37 "sip/QtGui/qframe.sip"
#include <qframe.h>
#line 181 "sipQtGuiQPlainTextEdit.cpp"
#line 39 "sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 184 "sipQtGuiQPlainTextEdit.cpp"
#line 41 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 187 "sipQtGuiQPlainTextEdit.cpp"
#line 37 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 190 "sipQtGuiQPlainTextEdit.cpp"
#line 41 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 193 "sipQtGuiQPlainTextEdit.cpp"
#line 41 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 196 "sipQtGuiQPlainTextEdit.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 199 "sipQtGuiQPlainTextEdit.cpp"
#line 37 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 202 "sipQtGuiQPlainTextEdit.cpp"
#line 37 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 205 "sipQtGuiQPlainTextEdit.cpp"
#line 41 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 208 "sipQtGuiQPlainTextEdit.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 211 "sipQtGuiQPlainTextEdit.cpp"
#line 41 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 214 "sipQtGuiQPlainTextEdit.cpp"
#line 419 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 217 "sipQtGuiQPlainTextEdit.cpp"
#line 613 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 220 "sipQtGuiQPlainTextEdit.cpp"
#line 242 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 223 "sipQtGuiQPlainTextEdit.cpp"
#line 383 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 226 "sipQtGuiQPlainTextEdit.cpp"
#line 355 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 229 "sipQtGuiQPlainTextEdit.cpp"
#line 37 "sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 232 "sipQtGuiQPlainTextEdit.cpp"
#line 69 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 235 "sipQtGuiQPlainTextEdit.cpp"
#line 42 "sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 238 "sipQtGuiQPlainTextEdit.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 241 "sipQtGuiQPlainTextEdit.cpp"
#line 37 "sip/QtGui/qaction.sip"
#include <qaction.h>
#line 244 "sipQtGuiQPlainTextEdit.cpp"
#line 37 "sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 247 "sipQtGuiQPlainTextEdit.cpp"
#line 41 "sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 250 "sipQtGuiQPlainTextEdit.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 253 "sipQtGuiQPlainTextEdit.cpp"
#line 41 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 256 "sipQtGuiQPlainTextEdit.cpp"
#line 41 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 259 "sipQtGuiQPlainTextEdit.cpp"
#line 41 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 262 "sipQtGuiQPlainTextEdit.cpp"
#line 41 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 265 "sipQtGuiQPlainTextEdit.cpp"
#line 41 "sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 268 "sipQtGuiQPlainTextEdit.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 271 "sipQtGuiQPlainTextEdit.cpp"
#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 274 "sipQtGuiQPlainTextEdit.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 277 "sipQtGuiQPlainTextEdit.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 280 "sipQtGuiQPlainTextEdit.cpp"
#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 283 "sipQtGuiQPlainTextEdit.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 286 "sipQtGuiQPlainTextEdit.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 289 "sipQtGuiQPlainTextEdit.cpp"


class sipQPlainTextEdit : public QPlainTextEdit
{
public:
    sipQPlainTextEdit(QWidget *);
    sipQPlainTextEdit(const QString&,QWidget *);
    virtual ~sipQPlainTextEdit();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    void sipProtectVirt_enterEvent(bool,QEvent *);
    void sipProtectVirt_leaveEvent(bool,QEvent *);
    void sipProtectVirt_moveEvent(bool,QMoveEvent *);
    void sipProtectVirt_closeEvent(bool,QCloseEvent *);
    void sipProtectVirt_tabletEvent(bool,QTabletEvent *);
    void sipProtectVirt_actionEvent(bool,QActionEvent *);
    void sipProtectVirt_hideEvent(bool,QHideEvent *);
    int sipProtectVirt_metric(bool,QPaintDevice::PaintDeviceMetric) const;
    void sipProtect_resetInputContext();
    void sipProtect_updateMicroFocus();
    void sipProtect_create(WId,bool,bool);
    void sipProtect_destroy(bool,bool);
    bool sipProtect_focusNextChild();
    bool sipProtect_focusPreviousChild();
    void sipProtectVirt_enabledChange(bool,bool);
    void sipProtectVirt_paletteChange(bool,const QPalette&);
    void sipProtectVirt_fontChange(bool,const QFont&);
    void sipProtectVirt_windowActivationChange(bool,bool);
    void sipProtectVirt_languageChange(bool);
    void sipProtect_drawFrame(QPainter *);
    void sipProtect_setViewportMargins(int,int,int,int);
    bool sipProtectVirt_viewportEvent(bool,QEvent *);
    void sipProtect_setupViewport(QWidget *);
    bool sipProtectVirt_event(bool,QEvent *);
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_keyPressEvent(bool,QKeyEvent *);
    void sipProtectVirt_keyReleaseEvent(bool,QKeyEvent *);
    void sipProtectVirt_resizeEvent(bool,QResizeEvent *);
    void sipProtectVirt_paintEvent(bool,QPaintEvent *);
    void sipProtectVirt_mousePressEvent(bool,QMouseEvent *);
    void sipProtectVirt_mouseMoveEvent(bool,QMouseEvent *);
    void sipProtectVirt_mouseReleaseEvent(bool,QMouseEvent *);
    void sipProtectVirt_mouseDoubleClickEvent(bool,QMouseEvent *);
    bool sipProtectVirt_focusNextPrevChild(bool,bool);
    void sipProtectVirt_contextMenuEvent(bool,QContextMenuEvent *);
    void sipProtectVirt_dragEnterEvent(bool,QDragEnterEvent *);
    void sipProtectVirt_dragLeaveEvent(bool,QDragLeaveEvent *);
    void sipProtectVirt_dragMoveEvent(bool,QDragMoveEvent *);
    void sipProtectVirt_dropEvent(bool,QDropEvent *);
    void sipProtectVirt_focusInEvent(bool,QFocusEvent *);
    void sipProtectVirt_focusOutEvent(bool,QFocusEvent *);
    void sipProtectVirt_showEvent(bool,QShowEvent *);
    void sipProtectVirt_changeEvent(bool,QEvent *);
    void sipProtectVirt_wheelEvent(bool,QWheelEvent *);
    void sipProtectVirt_inputMethodEvent(bool,QInputMethodEvent *);
    QVariant sipProtectVirt_inputMethodQuery(bool,Qt::InputMethodQuery) const;
    QMimeData * sipProtectVirt_createMimeDataFromSelection(bool) const;
    bool sipProtectVirt_canInsertFromMimeData(bool,const QMimeData *) const;
    void sipProtectVirt_insertFromMimeData(bool,const QMimeData *);
    void sipProtectVirt_scrollContentsBy(bool,int,int);
    QTextBlock sipProtect_firstVisibleBlock() const;
    QPointF sipProtect_contentOffset() const;
    QRectF sipProtect_blockBoundingRect(const QTextBlock&) const;
    QRectF sipProtect_blockBoundingGeometry(const QTextBlock&) const;
    QAbstractTextDocumentLayout::PaintContext sipProtect_getPaintContext() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QVariant loadResource(int,const QUrl&);
    bool event(QEvent *);
    void timerEvent(QTimerEvent *);
    void keyPressEvent(QKeyEvent *);
    void keyReleaseEvent(QKeyEvent *);
    void resizeEvent(QResizeEvent *);
    void paintEvent(QPaintEvent *);
    void mousePressEvent(QMouseEvent *);
    void mouseMoveEvent(QMouseEvent *);
    void mouseReleaseEvent(QMouseEvent *);
    void mouseDoubleClickEvent(QMouseEvent *);
    bool focusNextPrevChild(bool);
    void contextMenuEvent(QContextMenuEvent *);
    void dragEnterEvent(QDragEnterEvent *);
    void dragLeaveEvent(QDragLeaveEvent *);
    void dragMoveEvent(QDragMoveEvent *);
    void dropEvent(QDropEvent *);
    void focusInEvent(QFocusEvent *);
    void focusOutEvent(QFocusEvent *);
    void showEvent(QShowEvent *);
    void changeEvent(QEvent *);
    void wheelEvent(QWheelEvent *);
    void inputMethodEvent(QInputMethodEvent *);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    QMimeData * createMimeDataFromSelection() const;
    bool canInsertFromMimeData(const QMimeData *) const;
    void insertFromMimeData(const QMimeData *);
    void scrollContentsBy(int,int);
    QSize minimumSizeHint() const;
    QSize sizeHint() const;
    bool viewportEvent(QEvent *);
    int devType() const;
    void setVisible(bool);
    int heightForWidth(int) const;
    QPaintEngine * paintEngine() const;
    void enterEvent(QEvent *);
    void leaveEvent(QEvent *);
    void moveEvent(QMoveEvent *);
    void closeEvent(QCloseEvent *);
    void tabletEvent(QTabletEvent *);
    void actionEvent(QActionEvent *);
    void hideEvent(QHideEvent *);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void enabledChange(bool);
    void paletteChange(const QPalette&);
    void fontChange(const QFont&);
    void windowActivationChange(bool);
    void languageChange();
    bool eventFilter(QObject *,QEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQPlainTextEdit(const sipQPlainTextEdit &);
    sipQPlainTextEdit &operator = (const sipQPlainTextEdit &);

    char sipPyMethods[53];
};

sipQPlainTextEdit::sipQPlainTextEdit(QWidget *a0): QPlainTextEdit(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPlainTextEdit::sipQPlainTextEdit(const QString& a0,QWidget *a1): QPlainTextEdit(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQPlainTextEdit::~sipQPlainTextEdit()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQPlainTextEdit::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QPlainTextEdit);
}

int sipQPlainTextEdit::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QPlainTextEdit::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QPlainTextEdit,_c,_id,_a);

    return _id;
}

void *sipQPlainTextEdit::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QPlainTextEdit,_clname)) ? this : QPlainTextEdit::qt_metacast(_clname);
}

QVariant sipQPlainTextEdit::loadResource(int a0,const QUrl& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_loadResource);

    if (!meth)
        return QPlainTextEdit::loadResource(a0,a1);

    extern QVariant sipVH_QtGui_63(sip_gilstate_t,PyObject *,bool*,int,const QUrl&);

    return sipVH_QtGui_63(sipGILState,meth,0,a0,a1);
}

bool sipQPlainTextEdit::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QPlainTextEdit::event(a0);

    typedef bool (*sipVH_QtCore_12)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return ((sipVH_QtCore_12)(sipModuleAPI_QtGui_QtCore->em_virthandlers[12]))(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QPlainTextEdit::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_3)(sip_gilstate_t,PyObject *,bool*,QTimerEvent *);

    ((sipVH_QtCore_3)(sipModuleAPI_QtGui_QtCore->em_virthandlers[3]))(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::keyPressEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_keyPressEvent);

    if (!meth)
    {
        QPlainTextEdit::keyPressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,bool*,QKeyEvent *);

    sipVH_QtGui_26(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::keyReleaseEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!meth)
    {
        QPlainTextEdit::keyReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_26(sip_gilstate_t,PyObject *,bool*,QKeyEvent *);

    sipVH_QtGui_26(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::resizeEvent(QResizeEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_resizeEvent);

    if (!meth)
    {
        QPlainTextEdit::resizeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_2(sip_gilstate_t,PyObject *,bool*,QResizeEvent *);

    sipVH_QtGui_2(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::paintEvent(QPaintEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_paintEvent);

    if (!meth)
    {
        QPlainTextEdit::paintEvent(a0);
        return;
    }

    extern void sipVH_QtGui_3(sip_gilstate_t,PyObject *,bool*,QPaintEvent *);

    sipVH_QtGui_3(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::mousePressEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_mousePressEvent);

    if (!meth)
    {
        QPlainTextEdit::mousePressEvent(a0);
        return;
    }

    extern void sipVH_QtGui_27(sip_gilstate_t,PyObject *,bool*,QMouseEvent *);

    sipVH_QtGui_27(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::mouseMoveEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!meth)
    {
        QPlainTextEdit::mouseMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_27(sip_gilstate_t,PyObject *,bool*,QMouseEvent *);

    sipVH_QtGui_27(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::mouseReleaseEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!meth)
    {
        QPlainTextEdit::mouseReleaseEvent(a0);
        return;
    }

    extern void sipVH_QtGui_27(sip_gilstate_t,PyObject *,bool*,QMouseEvent *);

    sipVH_QtGui_27(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::mouseDoubleClickEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!meth)
    {
        QPlainTextEdit::mouseDoubleClickEvent(a0);
        return;
    }

    extern void sipVH_QtGui_27(sip_gilstate_t,PyObject *,bool*,QMouseEvent *);

    sipVH_QtGui_27(sipGILState,meth,0,a0);
}

bool sipQPlainTextEdit::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!meth)
        return QPlainTextEdit::focusNextPrevChild(a0);

    extern bool sipVH_QtGui_12(sip_gilstate_t,PyObject *,bool*,bool);

    return sipVH_QtGui_12(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::contextMenuEvent(QContextMenuEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!meth)
    {
        QPlainTextEdit::contextMenuEvent(a0);
        return;
    }

    extern void sipVH_QtGui_22(sip_gilstate_t,PyObject *,bool*,QContextMenuEvent *);

    sipVH_QtGui_22(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::dragEnterEvent(QDragEnterEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!meth)
    {
        QPlainTextEdit::dragEnterEvent(a0);
        return;
    }

    extern void sipVH_QtGui_19(sip_gilstate_t,PyObject *,bool*,QDragEnterEvent *);

    sipVH_QtGui_19(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::dragLeaveEvent(QDragLeaveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!meth)
    {
        QPlainTextEdit::dragLeaveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_17(sip_gilstate_t,PyObject *,bool*,QDragLeaveEvent *);

    sipVH_QtGui_17(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::dragMoveEvent(QDragMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!meth)
    {
        QPlainTextEdit::dragMoveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_18(sip_gilstate_t,PyObject *,bool*,QDragMoveEvent *);

    sipVH_QtGui_18(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::dropEvent(QDropEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_dropEvent);

    if (!meth)
    {
        QPlainTextEdit::dropEvent(a0);
        return;
    }

    extern void sipVH_QtGui_16(sip_gilstate_t,PyObject *,bool*,QDropEvent *);

    sipVH_QtGui_16(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::focusInEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_focusInEvent);

    if (!meth)
    {
        QPlainTextEdit::focusInEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,bool*,QFocusEvent *);

    sipVH_QtGui_25(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::focusOutEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_focusOutEvent);

    if (!meth)
    {
        QPlainTextEdit::focusOutEvent(a0);
        return;
    }

    extern void sipVH_QtGui_25(sip_gilstate_t,PyObject *,bool*,QFocusEvent *);

    sipVH_QtGui_25(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::showEvent(QShowEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_showEvent);

    if (!meth)
    {
        QPlainTextEdit::showEvent(a0);
        return;
    }

    extern void sipVH_QtGui_1(sip_gilstate_t,PyObject *,bool*,QShowEvent *);

    sipVH_QtGui_1(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::changeEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_changeEvent);

    if (!meth)
    {
        QPlainTextEdit::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::wheelEvent(QWheelEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_wheelEvent);

    if (!meth)
    {
        QPlainTextEdit::wheelEvent(a0);
        return;
    }

    extern void sipVH_QtGui_5(sip_gilstate_t,PyObject *,bool*,QWheelEvent *);

    sipVH_QtGui_5(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::inputMethodEvent(QInputMethodEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!meth)
    {
        QPlainTextEdit::inputMethodEvent(a0);
        return;
    }

    extern void sipVH_QtGui_14(sip_gilstate_t,PyObject *,bool*,QInputMethodEvent *);

    sipVH_QtGui_14(sipGILState,meth,0,a0);
}

QVariant sipQPlainTextEdit::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!meth)
        return QPlainTextEdit::inputMethodQuery(a0);

    extern QVariant sipVH_QtGui_13(sip_gilstate_t,PyObject *,bool*,Qt::InputMethodQuery);

    return sipVH_QtGui_13(sipGILState,meth,0,a0);
}

QMimeData * sipQPlainTextEdit::createMimeDataFromSelection() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_createMimeDataFromSelection);

    if (!meth)
        return QPlainTextEdit::createMimeDataFromSelection();

    extern QMimeData * sipVH_QtGui_62(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_62(sipGILState,meth,0);
}

bool sipQPlainTextEdit::canInsertFromMimeData(const QMimeData *a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_canInsertFromMimeData);

    if (!meth)
        return QPlainTextEdit::canInsertFromMimeData(a0);

    extern bool sipVH_QtGui_61(sip_gilstate_t,PyObject *,bool*,const QMimeData *);

    return sipVH_QtGui_61(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::insertFromMimeData(const QMimeData *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_insertFromMimeData);

    if (!meth)
    {
        QPlainTextEdit::insertFromMimeData(a0);
        return;
    }

    extern void sipVH_QtGui_60(sip_gilstate_t,PyObject *,bool*,const QMimeData *);

    sipVH_QtGui_60(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::scrollContentsBy(int a0,int a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_scrollContentsBy);

    if (!meth)
    {
        QPlainTextEdit::scrollContentsBy(a0,a1);
        return;
    }

    extern void sipVH_QtGui_33(sip_gilstate_t,PyObject *,bool*,int,int);

    sipVH_QtGui_33(sipGILState,meth,0,a0,a1);
}

QSize sipQPlainTextEdit::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!meth)
        return QAbstractScrollArea::minimumSizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_4(sipGILState,meth,0);
}

QSize sipQPlainTextEdit::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_sizeHint);

    if (!meth)
        return QAbstractScrollArea::sizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_4(sipGILState,meth,0);
}

bool sipQPlainTextEdit::viewportEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_viewportEvent);

    if (!meth)
        return QAbstractScrollArea::viewportEvent(a0);

    typedef bool (*sipVH_QtCore_12)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return ((sipVH_QtCore_12)(sipModuleAPI_QtGui_QtCore->em_virthandlers[12]))(sipGILState,meth,0,a0);
}

int sipQPlainTextEdit::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_devType);

    if (!meth)
        return QWidget::devType();

    typedef int (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtGui_QtCore->em_virthandlers[7]))(sipGILState,meth,0);
}

void sipQPlainTextEdit::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_setVisible);

    if (!meth)
    {
        QWidget::setVisible(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t,PyObject *,bool*,bool);

    sipVH_QtGui_7(sipGILState,meth,0,a0);
}

int sipQPlainTextEdit::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_heightForWidth);

    if (!meth)
        return QWidget::heightForWidth(a0);

    extern int sipVH_QtGui_29(sip_gilstate_t,PyObject *,bool*,int);

    return sipVH_QtGui_29(sipGILState,meth,0,a0);
}

QPaintEngine * sipQPlainTextEdit::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_paintEngine);

    if (!meth)
        return QWidget::paintEngine();

    extern QPaintEngine * sipVH_QtGui_28(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_28(sipGILState,meth,0);
}

void sipQPlainTextEdit::enterEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_enterEvent);

    if (!meth)
    {
        QWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::leaveEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_leaveEvent);

    if (!meth)
    {
        QWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::moveEvent(QMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_moveEvent);

    if (!meth)
    {
        QWidget::moveEvent(a0);
        return;
    }

    extern void sipVH_QtGui_24(sip_gilstate_t,PyObject *,bool*,QMoveEvent *);

    sipVH_QtGui_24(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::closeEvent(QCloseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_closeEvent);

    if (!meth)
    {
        QWidget::closeEvent(a0);
        return;
    }

    extern void sipVH_QtGui_23(sip_gilstate_t,PyObject *,bool*,QCloseEvent *);

    sipVH_QtGui_23(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::tabletEvent(QTabletEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_tabletEvent);

    if (!meth)
    {
        QWidget::tabletEvent(a0);
        return;
    }

    extern void sipVH_QtGui_21(sip_gilstate_t,PyObject *,bool*,QTabletEvent *);

    sipVH_QtGui_21(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::actionEvent(QActionEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_actionEvent);

    if (!meth)
    {
        QWidget::actionEvent(a0);
        return;
    }

    extern void sipVH_QtGui_20(sip_gilstate_t,PyObject *,bool*,QActionEvent *);

    sipVH_QtGui_20(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::hideEvent(QHideEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_hideEvent);

    if (!meth)
    {
        QWidget::hideEvent(a0);
        return;
    }

    extern void sipVH_QtGui_0(sip_gilstate_t,PyObject *,bool*,QHideEvent *);

    sipVH_QtGui_0(sipGILState,meth,0,a0);
}

int sipQPlainTextEdit::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[42]),sipPySelf,NULL,sipName_metric);

    if (!meth)
        return QWidget::metric(a0);

    extern int sipVH_QtGui_15(sip_gilstate_t,PyObject *,bool*,QPaintDevice::PaintDeviceMetric);

    return sipVH_QtGui_15(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_enabledChange);

    if (!meth)
    {
        QWidget::enabledChange(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t,PyObject *,bool*,bool);

    sipVH_QtGui_7(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_paletteChange);

    if (!meth)
    {
        QWidget::paletteChange(a0);
        return;
    }

    extern void sipVH_QtGui_11(sip_gilstate_t,PyObject *,bool*,const QPalette&);

    sipVH_QtGui_11(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_fontChange);

    if (!meth)
    {
        QWidget::fontChange(a0);
        return;
    }

    extern void sipVH_QtGui_10(sip_gilstate_t,PyObject *,bool*,const QFont&);

    sipVH_QtGui_10(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_windowActivationChange);

    if (!meth)
    {
        QWidget::windowActivationChange(a0);
        return;
    }

    extern void sipVH_QtGui_7(sip_gilstate_t,PyObject *,bool*,bool);

    sipVH_QtGui_7(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_languageChange);

    if (!meth)
    {
        QWidget::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

bool sipQPlainTextEdit::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t,PyObject *,bool*,QObject *,QEvent *);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtGui_QtCore->em_virthandlers[20]))(sipGILState,meth,0,a0,a1);
}

void sipQPlainTextEdit::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_19)(sip_gilstate_t,PyObject *,bool*,QChildEvent *);

    ((sipVH_QtCore_19)(sipModuleAPI_QtGui_QtCore->em_virthandlers[19]))(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

void sipQPlainTextEdit::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

int sipQPlainTextEdit::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQPlainTextEdit::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQPlainTextEdit::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQPlainTextEdit::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQPlainTextEdit::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

void sipQPlainTextEdit::sipProtectVirt_enterEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QWidget::enterEvent(a0) : enterEvent(a0));
}

void sipQPlainTextEdit::sipProtectVirt_leaveEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QWidget::leaveEvent(a0) : leaveEvent(a0));
}

void sipQPlainTextEdit::sipProtectVirt_moveEvent(bool sipSelfWasArg,QMoveEvent *a0)
{
    (sipSelfWasArg ? QWidget::moveEvent(a0) : moveEvent(a0));
}

void sipQPlainTextEdit::sipProtectVirt_closeEvent(bool sipSelfWasArg,QCloseEvent *a0)
{
    (sipSelfWasArg ? QWidget::closeEvent(a0) : closeEvent(a0));
}

void sipQPlainTextEdit::sipProtectVirt_tabletEvent(bool sipSelfWasArg,QTabletEvent *a0)
{
    (sipSelfWasArg ? QWidget::tabletEvent(a0) : tabletEvent(a0));
}

void sipQPlainTextEdit::sipProtectVirt_actionEvent(bool sipSelfWasArg,QActionEvent *a0)
{
    (sipSelfWasArg ? QWidget::actionEvent(a0) : actionEvent(a0));
}

void sipQPlainTextEdit::sipProtectVirt_hideEvent(bool sipSelfWasArg,QHideEvent *a0)
{
    (sipSelfWasArg ? QWidget::hideEvent(a0) : hideEvent(a0));
}

int sipQPlainTextEdit::sipProtectVirt_metric(bool sipSelfWasArg,QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ? QWidget::metric(a0) : metric(a0));
}

void sipQPlainTextEdit::sipProtect_resetInputContext()
{
    QWidget::resetInputContext();
}

void sipQPlainTextEdit::sipProtect_updateMicroFocus()
{
    QWidget::updateMicroFocus();
}

void sipQPlainTextEdit::sipProtect_create(WId a0,bool a1,bool a2)
{
    QWidget::create(a0,a1,a2);
}

void sipQPlainTextEdit::sipProtect_destroy(bool a0,bool a1)
{
    QWidget::destroy(a0,a1);
}

bool sipQPlainTextEdit::sipProtect_focusNextChild()
{
    return QWidget::focusNextChild();
}

bool sipQPlainTextEdit::sipProtect_focusPreviousChild()
{
    return QWidget::focusPreviousChild();
}

void sipQPlainTextEdit::sipProtectVirt_enabledChange(bool sipSelfWasArg,bool a0)
{
    (sipSelfWasArg ? QWidget::enabledChange(a0) : enabledChange(a0));
}

void sipQPlainTextEdit::sipProtectVirt_paletteChange(bool sipSelfWasArg,const QPalette& a0)
{
    (sipSelfWasArg ? QWidget::paletteChange(a0) : paletteChange(a0));
}

void sipQPlainTextEdit::sipProtectVirt_fontChange(bool sipSelfWasArg,const QFont& a0)
{
    (sipSelfWasArg ? QWidget::fontChange(a0) : fontChange(a0));
}

void sipQPlainTextEdit::sipProtectVirt_windowActivationChange(bool sipSelfWasArg,bool a0)
{
    (sipSelfWasArg ? QWidget::windowActivationChange(a0) : windowActivationChange(a0));
}

void sipQPlainTextEdit::sipProtectVirt_languageChange(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QWidget::languageChange() : languageChange());
}

void sipQPlainTextEdit::sipProtect_drawFrame(QPainter *a0)
{
    QFrame::drawFrame(a0);
}

void sipQPlainTextEdit::sipProtect_setViewportMargins(int a0,int a1,int a2,int a3)
{
    QAbstractScrollArea::setViewportMargins(a0,a1,a2,a3);
}

bool sipQPlainTextEdit::sipProtectVirt_viewportEvent(bool sipSelfWasArg,QEvent *a0)
{
    return (sipSelfWasArg ? QAbstractScrollArea::viewportEvent(a0) : viewportEvent(a0));
}

void sipQPlainTextEdit::sipProtect_setupViewport(QWidget *a0)
{
    QAbstractScrollArea::setupViewport(a0);
}

bool sipQPlainTextEdit::sipProtectVirt_event(bool sipSelfWasArg,QEvent *a0)
{
    return (sipSelfWasArg ? QPlainTextEdit::event(a0) : event(a0));
}

void sipQPlainTextEdit::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QPlainTextEdit::timerEvent(a0) : timerEvent(a0));
}

void sipQPlainTextEdit::sipProtectVirt_keyPressEvent(bool sipSelfWasArg,QKeyEvent *a0)
{
    (sipSelfWasArg ? QPlainTextEdit::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipQPlainTextEdit::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg,QKeyEvent *a0)
{
    (sipSelfWasArg ? QPlainTextEdit::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipQPlainTextEdit::sipProtectVirt_resizeEvent(bool sipSelfWasArg,QResizeEvent *a0)
{
    (sipSelfWasArg ? QPlainTextEdit::resizeEvent(a0) : resizeEvent(a0));
}

void sipQPlainTextEdit::sipProtectVirt_paintEvent(bool sipSelfWasArg,QPaintEvent *a0)
{
    (sipSelfWasArg ? QPlainTextEdit::paintEvent(a0) : paintEvent(a0));
}

void sipQPlainTextEdit::sipProtectVirt_mousePressEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QPlainTextEdit::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipQPlainTextEdit::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QPlainTextEdit::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipQPlainTextEdit::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QPlainTextEdit::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipQPlainTextEdit::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QPlainTextEdit::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

bool sipQPlainTextEdit::sipProtectVirt_focusNextPrevChild(bool sipSelfWasArg,bool a0)
{
    return (sipSelfWasArg ? QPlainTextEdit::focusNextPrevChild(a0) : focusNextPrevChild(a0));
}

void sipQPlainTextEdit::sipProtectVirt_contextMenuEvent(bool sipSelfWasArg,QContextMenuEvent *a0)
{
    (sipSelfWasArg ? QPlainTextEdit::contextMenuEvent(a0) : contextMenuEvent(a0));
}

void sipQPlainTextEdit::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg,QDragEnterEvent *a0)
{
    (sipSelfWasArg ? QPlainTextEdit::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipQPlainTextEdit::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg,QDragLeaveEvent *a0)
{
    (sipSelfWasArg ? QPlainTextEdit::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipQPlainTextEdit::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg,QDragMoveEvent *a0)
{
    (sipSelfWasArg ? QPlainTextEdit::dragMoveEvent(a0) : dragMoveEvent(a0));
}

void sipQPlainTextEdit::sipProtectVirt_dropEvent(bool sipSelfWasArg,QDropEvent *a0)
{
    (sipSelfWasArg ? QPlainTextEdit::dropEvent(a0) : dropEvent(a0));
}

void sipQPlainTextEdit::sipProtectVirt_focusInEvent(bool sipSelfWasArg,QFocusEvent *a0)
{
    (sipSelfWasArg ? QPlainTextEdit::focusInEvent(a0) : focusInEvent(a0));
}

void sipQPlainTextEdit::sipProtectVirt_focusOutEvent(bool sipSelfWasArg,QFocusEvent *a0)
{
    (sipSelfWasArg ? QPlainTextEdit::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipQPlainTextEdit::sipProtectVirt_showEvent(bool sipSelfWasArg,QShowEvent *a0)
{
    (sipSelfWasArg ? QPlainTextEdit::showEvent(a0) : showEvent(a0));
}

void sipQPlainTextEdit::sipProtectVirt_changeEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QPlainTextEdit::changeEvent(a0) : changeEvent(a0));
}

void sipQPlainTextEdit::sipProtectVirt_wheelEvent(bool sipSelfWasArg,QWheelEvent *a0)
{
    (sipSelfWasArg ? QPlainTextEdit::wheelEvent(a0) : wheelEvent(a0));
}

void sipQPlainTextEdit::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg,QInputMethodEvent *a0)
{
    (sipSelfWasArg ? QPlainTextEdit::inputMethodEvent(a0) : inputMethodEvent(a0));
}

QVariant sipQPlainTextEdit::sipProtectVirt_inputMethodQuery(bool sipSelfWasArg,Qt::InputMethodQuery a0) const
{
    return (sipSelfWasArg ? QPlainTextEdit::inputMethodQuery(a0) : inputMethodQuery(a0));
}

QMimeData * sipQPlainTextEdit::sipProtectVirt_createMimeDataFromSelection(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ? QPlainTextEdit::createMimeDataFromSelection() : createMimeDataFromSelection());
}

bool sipQPlainTextEdit::sipProtectVirt_canInsertFromMimeData(bool sipSelfWasArg,const QMimeData *a0) const
{
    return (sipSelfWasArg ? QPlainTextEdit::canInsertFromMimeData(a0) : canInsertFromMimeData(a0));
}

void sipQPlainTextEdit::sipProtectVirt_insertFromMimeData(bool sipSelfWasArg,const QMimeData *a0)
{
    (sipSelfWasArg ? QPlainTextEdit::insertFromMimeData(a0) : insertFromMimeData(a0));
}

void sipQPlainTextEdit::sipProtectVirt_scrollContentsBy(bool sipSelfWasArg,int a0,int a1)
{
    (sipSelfWasArg ? QPlainTextEdit::scrollContentsBy(a0,a1) : scrollContentsBy(a0,a1));
}

QTextBlock sipQPlainTextEdit::sipProtect_firstVisibleBlock() const
{
    return QPlainTextEdit::firstVisibleBlock();
}

QPointF sipQPlainTextEdit::sipProtect_contentOffset() const
{
    return QPlainTextEdit::contentOffset();
}

QRectF sipQPlainTextEdit::sipProtect_blockBoundingRect(const QTextBlock& a0) const
{
    return QPlainTextEdit::blockBoundingRect(a0);
}

QRectF sipQPlainTextEdit::sipProtect_blockBoundingGeometry(const QTextBlock& a0) const
{
    return QPlainTextEdit::blockBoundingGeometry(a0);
}

QAbstractTextDocumentLayout::PaintContext sipQPlainTextEdit::sipProtect_getPaintContext() const
{
    return QPlainTextEdit::getPaintContext();
}


extern "C" {static PyObject *meth_QPlainTextEdit_receivers(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        char * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QPlainTextEdit,&sipCpp,&a0))
        {
            int sipRes = 0;

#line 480 "sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
#line 1710 "sipQtGuiQPlainTextEdit.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_receivers);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QChildEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_childEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_customEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QPlainTextEdit,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_connectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QPlainTextEdit,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_disconnectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_enterEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_enterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_enterEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_enterEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_leaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_leaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_leaveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_leaveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_moveEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_moveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMoveEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QMoveEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_moveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_closeEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_closeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QCloseEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QCloseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_closeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_closeEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_tabletEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_tabletEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTabletEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QTabletEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_tabletEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_tabletEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_actionEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_actionEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QActionEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QActionEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_actionEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_actionEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_hideEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_hideEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QHideEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_hideEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_metric(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_metric(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pE",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QPaintDevice_PaintDeviceMetric,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_metric);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_resetInputContext(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_resetInputContext(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_resetInputContext();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_resetInputContext);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_updateMicroFocus(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_updateMicroFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_updateMicroFocus();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_updateMicroFocus);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_create(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_create(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        WId a0 = 0;
        bool a1 = 1;
        bool a2 = 1;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p|mbb",&sipSelf,sipType_QPlainTextEdit,&sipCpp,&a0,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_create(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_create);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_destroy(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0 = 1;
        bool a1 = 1;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p|bb",&sipSelf,sipType_QPlainTextEdit,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_destroy(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_destroy);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_focusNextChild(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_focusNextChild(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_focusNextChild();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_focusNextChild);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_focusPreviousChild(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_focusPreviousChild(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_focusPreviousChild();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_focusPreviousChild);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_enabledChange(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_enabledChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pb",&sipSelf,sipType_QPlainTextEdit,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_enabledChange(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_enabledChange);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_paletteChange(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_paletteChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPalette * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QPalette,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_paletteChange(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_paletteChange);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_fontChange(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_fontChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QFont * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QFont,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_fontChange(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_fontChange);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_windowActivationChange(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_windowActivationChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pb",&sipSelf,sipType_QPlainTextEdit,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_windowActivationChange(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_windowActivationChange);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_languageChange(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_languageChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_languageChange(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_languageChange);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_drawFrame(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_drawFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPainter * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QPainter,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_drawFrame(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_drawFrame);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_setViewportMargins(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setViewportMargins(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"piiii",&sipSelf,sipType_QPlainTextEdit,&sipCpp,&a0,&a1,&a2,&a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setViewportMargins(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_setViewportMargins);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_viewportEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_viewportEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QEvent,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_viewportEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_viewportEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_setupViewport(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setupViewport(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWidget * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QWidget,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_setupViewport(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_setupViewport);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_setDocument(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextDocument * a0;
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QTextDocument,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDocument(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_setDocument);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_document(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_document(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            QTextDocument *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->document();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextDocument,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_document);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_setTextCursor(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setTextCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QTextCursor * a0;
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QTextCursor,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextCursor(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_setTextCursor);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_textCursor(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_textCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            QTextCursor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextCursor(sipCpp->textCursor());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_textCursor);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_isReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_isReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isReadOnly();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_isReadOnly);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_setReadOnly(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setReadOnly(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QPlainTextEdit,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setReadOnly(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_setReadOnly);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_setTextInteractionFlags(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setTextInteractionFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Qt::TextInteractionFlags * a0;
        int a0State = 0;
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_Qt_TextInteractionFlags,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextInteractionFlags(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_Qt_TextInteractionFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_setTextInteractionFlags);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_textInteractionFlags(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_textInteractionFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            Qt::TextInteractionFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::TextInteractionFlags(sipCpp->textInteractionFlags());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_TextInteractionFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_textInteractionFlags);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_mergeCurrentCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_mergeCurrentCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QTextCharFormat * a0;
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QTextCharFormat,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->mergeCurrentCharFormat(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_mergeCurrentCharFormat);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_setCurrentCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setCurrentCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QTextCharFormat * a0;
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QTextCharFormat,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentCharFormat(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_setCurrentCharFormat);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_currentCharFormat(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_currentCharFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            QTextCharFormat *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextCharFormat(sipCpp->currentCharFormat());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextCharFormat,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_currentCharFormat);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_tabChangesFocus(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_tabChangesFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tabChangesFocus();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_tabChangesFocus);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_setTabChangesFocus(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setTabChangesFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QPlainTextEdit,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTabChangesFocus(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_setTabChangesFocus);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_setDocumentTitle(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setDocumentTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDocumentTitle(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_setDocumentTitle);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_documentTitle(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_documentTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->documentTitle());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_documentTitle);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_isUndoRedoEnabled(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_isUndoRedoEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isUndoRedoEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_isUndoRedoEnabled);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_setUndoRedoEnabled(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setUndoRedoEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QPlainTextEdit,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUndoRedoEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_setUndoRedoEnabled);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_setMaximumBlockCount(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setMaximumBlockCount(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QPlainTextEdit,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMaximumBlockCount(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_setMaximumBlockCount);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_maximumBlockCount(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_maximumBlockCount(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->maximumBlockCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_maximumBlockCount);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_lineWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_lineWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            QPlainTextEdit::LineWrapMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lineWrapMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QPlainTextEdit_LineWrapMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_lineWrapMode);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_setLineWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setLineWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit::LineWrapMode a0;
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QPlainTextEdit_LineWrapMode,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLineWrapMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_setLineWrapMode);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_wordWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_wordWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            QTextOption::WrapMode sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->wordWrapMode();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QTextOption_WrapMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_wordWrapMode);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_setWordWrapMode(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setWordWrapMode(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextOption::WrapMode a0;
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QTextOption_WrapMode,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWordWrapMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_setWordWrapMode);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_setBackgroundVisible(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setBackgroundVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QPlainTextEdit,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBackgroundVisible(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_setBackgroundVisible);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_backgroundVisible(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_backgroundVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->backgroundVisible();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_backgroundVisible);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_setCenterOnScroll(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setCenterOnScroll(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QPlainTextEdit,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCenterOnScroll(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_setCenterOnScroll);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_centerOnScroll(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_centerOnScroll(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->centerOnScroll();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_centerOnScroll);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_find(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_find(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QTextDocument::FindFlags a1def = 0;
        QTextDocument::FindFlags * a1 = &a1def;
        int a1State = 0;
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|J1",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QString,&a0,&a0State,sipType_QTextDocument_FindFlags,&a1,&a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->find(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QTextDocument_FindFlags,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_find);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_toPlainText(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_toPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toPlainText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_toPlainText);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_ensureCursorVisible(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_ensureCursorVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->ensureCursorVisible();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_ensureCursorVisible);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_loadResource(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_loadResource(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        const QUrl * a1;
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiJ9",&sipSelf,sipType_QPlainTextEdit,&sipCpp,&a0,sipType_QUrl,&a1))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QPlainTextEdit::loadResource(a0,*a1) : sipCpp->loadResource(a0,*a1)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_loadResource);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_createStandardContextMenu(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_createStandardContextMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            QMenu *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->createStandardContextMenu();
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMenu,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_createStandardContextMenu);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_cursorForPosition(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_cursorForPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPoint * a0;
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QPoint,&a0))
        {
            QTextCursor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextCursor(sipCpp->cursorForPosition(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextCursor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_cursorForPosition);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_cursorRect(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_cursorRect(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QTextCursor * a0;
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QTextCursor,&a0))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->cursorRect(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->cursorRect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_cursorRect);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_overwriteMode(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_overwriteMode(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->overwriteMode();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_overwriteMode);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_setOverwriteMode(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setOverwriteMode(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QPlainTextEdit,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setOverwriteMode(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_setOverwriteMode);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_tabStopWidth(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_tabStopWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tabStopWidth();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_tabStopWidth);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_setTabStopWidth(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setTabStopWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QPlainTextEdit,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTabStopWidth(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_setTabStopWidth);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_cursorWidth(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_cursorWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cursorWidth();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_cursorWidth);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_setCursorWidth(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setCursorWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QPlainTextEdit,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCursorWidth(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_setCursorWidth);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_setExtraSelections(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setExtraSelections(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QList<QTextEdit::ExtraSelection> * a0;
        int a0State = 0;
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QList_0100QTextEdit_ExtraSelection,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setExtraSelections(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QList<QTextEdit::ExtraSelection> *>(a0),sipType_QList_0100QTextEdit_ExtraSelection,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_setExtraSelections);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_extraSelections(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_extraSelections(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            QList<QTextEdit::ExtraSelection> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QTextEdit::ExtraSelection>(sipCpp->extraSelections());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QTextEdit_ExtraSelection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_extraSelections);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_moveCursor(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_moveCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCursor::MoveOperation a0;
        QTextCursor::MoveMode a1 = QTextCursor::MoveAnchor;
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE|E",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QTextCursor_MoveOperation,&a0,sipType_QTextCursor_MoveMode,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveCursor(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_moveCursor);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_canPaste(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_canPaste(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->canPaste();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_canPaste);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_print_(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_print_(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPrinter * a0;
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QPrinter,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->print(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_print_);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_blockCount(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_blockCount(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->blockCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_blockCount);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_setPlainText(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_setPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPlainText(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_setPlainText);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_cut(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_cut(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->cut();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_cut);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_copy(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_copy(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->copy();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_copy);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_paste(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_paste(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->paste();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_paste);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_undo(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_undo(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->undo();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_undo);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_redo(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_redo(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->redo();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_redo);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_clear(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_clear);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_selectAll(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_selectAll(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->selectAll();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_selectAll);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_insertPlainText(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_insertPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertPlainText(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_insertPlainText);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_appendPlainText(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_appendPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->appendPlainText(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_appendPlainText);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_appendHtml(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_appendHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->appendHtml(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_appendHtml);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_centerCursor(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_centerCursor(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->centerCursor();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_centerCursor);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_event(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_event(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QEvent,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_event);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QTimerEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_timerEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QKeyEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_keyPressEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QKeyEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_keyReleaseEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QResizeEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_resizeEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QPaintEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_paintEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_paintEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QMouseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_mousePressEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QMouseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_mouseMoveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QMouseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_mouseReleaseEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QMouseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_mouseDoubleClickEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pb",&sipSelf,sipType_QPlainTextEdit,&sipCpp,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_focusNextPrevChild(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_focusNextPrevChild);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QContextMenuEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_contextMenuEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_contextMenuEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_dragEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QDragEnterEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_dragEnterEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_dragLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QDragLeaveEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_dragLeaveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QDragMoveEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_dragMoveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QDropEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_dropEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QFocusEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_focusInEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QFocusEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_focusOutEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_showEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QShowEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_showEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_changeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_changeEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QWheelEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_wheelEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_inputMethodEvent(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QInputMethodEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_inputMethodEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Qt::InputMethodQuery a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pE",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_Qt_InputMethodQuery,&a0))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->sipProtectVirt_inputMethodQuery(sipSelfWasArg,a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_inputMethodQuery);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_createMimeDataFromSelection(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_createMimeDataFromSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            QMimeData *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_createMimeDataFromSelection(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMimeData,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_createMimeDataFromSelection);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_canInsertFromMimeData(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_canInsertFromMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMimeData * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QMimeData,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_canInsertFromMimeData(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_canInsertFromMimeData);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_insertFromMimeData(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_insertFromMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMimeData * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QMimeData,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_insertFromMimeData(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_insertFromMimeData);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_scrollContentsBy(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_scrollContentsBy(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pii",&sipSelf,sipType_QPlainTextEdit,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_scrollContentsBy(sipSelfWasArg,a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_scrollContentsBy);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_firstVisibleBlock(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_firstVisibleBlock(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            QTextBlock *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextBlock(sipCpp->sipProtect_firstVisibleBlock());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextBlock,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_firstVisibleBlock);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_contentOffset(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_contentOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            QPointF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPointF(sipCpp->sipProtect_contentOffset());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPointF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_contentOffset);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_blockBoundingRect(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_blockBoundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QTextBlock * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QTextBlock,&a0))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->sipProtect_blockBoundingRect(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_blockBoundingRect);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_blockBoundingGeometry(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_blockBoundingGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QTextBlock * a0;
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QPlainTextEdit,&sipCpp,sipType_QTextBlock,&a0))
        {
            QRectF *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRectF(sipCpp->sipProtect_blockBoundingGeometry(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRectF,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_blockBoundingGeometry);

    return NULL;
}


extern "C" {static PyObject *meth_QPlainTextEdit_getPaintContext(PyObject *, PyObject *);}
static PyObject *meth_QPlainTextEdit_getPaintContext(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQPlainTextEdit *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QPlainTextEdit,&sipCpp))
        {
            QAbstractTextDocumentLayout::PaintContext *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QAbstractTextDocumentLayout::PaintContext(sipCpp->sipProtect_getPaintContext());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QAbstractTextDocumentLayout_PaintContext,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QPlainTextEdit,sipName_getPaintContext);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QPlainTextEdit(void *, const sipTypeDef *);}
static void *cast_QPlainTextEdit(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QPlainTextEdit)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractScrollArea)->ctd_cast((QAbstractScrollArea *)(QPlainTextEdit *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QPlainTextEdit(void *, int);}
static void release_QPlainTextEdit(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQPlainTextEdit *>(sipCppV);
    else
        delete reinterpret_cast<QPlainTextEdit *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QPlainTextEdit(sipSimpleWrapper *);}
static void dealloc_QPlainTextEdit(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQPlainTextEdit *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QPlainTextEdit(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QPlainTextEdit(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QPlainTextEdit(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **sipOwner, int *sipArgsParsed)
{
    sipQPlainTextEdit *sipCpp = 0;

    if (!sipCpp)
    {
        QWidget * a0 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"|JH",sipType_QWidget,&a0,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQPlainTextEdit(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QString * a0;
        int a0State = 0;
        QWidget * a1 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1|JH",sipType_QString,&a0,&a0State,sipType_QWidget,&a1,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQPlainTextEdit(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QPlainTextEdit[] = {{21, 255, 1}};


static PyMethodDef methods_QPlainTextEdit[] = {
    {SIP_MLNAME_CAST(sipName_actionEvent), meth_QPlainTextEdit_actionEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_appendHtml), meth_QPlainTextEdit_appendHtml, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_appendPlainText), meth_QPlainTextEdit_appendPlainText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_backgroundVisible), meth_QPlainTextEdit_backgroundVisible, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_blockBoundingGeometry), meth_QPlainTextEdit_blockBoundingGeometry, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_blockBoundingRect), meth_QPlainTextEdit_blockBoundingRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_blockCount), meth_QPlainTextEdit_blockCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_canInsertFromMimeData), meth_QPlainTextEdit_canInsertFromMimeData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_canPaste), meth_QPlainTextEdit_canPaste, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_centerCursor), meth_QPlainTextEdit_centerCursor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_centerOnScroll), meth_QPlainTextEdit_centerOnScroll, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_QPlainTextEdit_changeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QPlainTextEdit_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clear), meth_QPlainTextEdit_clear, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_closeEvent), meth_QPlainTextEdit_closeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QPlainTextEdit_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_contentOffset), meth_QPlainTextEdit_contentOffset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), meth_QPlainTextEdit_contextMenuEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_copy), meth_QPlainTextEdit_copy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_create), meth_QPlainTextEdit_create, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createMimeDataFromSelection), meth_QPlainTextEdit_createMimeDataFromSelection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createStandardContextMenu), meth_QPlainTextEdit_createStandardContextMenu, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentCharFormat), meth_QPlainTextEdit_currentCharFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_cursorForPosition), meth_QPlainTextEdit_cursorForPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_cursorRect), meth_QPlainTextEdit_cursorRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_cursorWidth), meth_QPlainTextEdit_cursorWidth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QPlainTextEdit_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_cut), meth_QPlainTextEdit_cut, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_destroy), meth_QPlainTextEdit_destroy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QPlainTextEdit_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_document), meth_QPlainTextEdit_document, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_documentTitle), meth_QPlainTextEdit_documentTitle, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), meth_QPlainTextEdit_dragEnterEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), meth_QPlainTextEdit_dragLeaveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), meth_QPlainTextEdit_dragMoveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawFrame), meth_QPlainTextEdit_drawFrame, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dropEvent), meth_QPlainTextEdit_dropEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_enabledChange), meth_QPlainTextEdit_enabledChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_ensureCursorVisible), meth_QPlainTextEdit_ensureCursorVisible, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_enterEvent), meth_QPlainTextEdit_enterEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_event), meth_QPlainTextEdit_event, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_extraSelections), meth_QPlainTextEdit_extraSelections, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_find), meth_QPlainTextEdit_find, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_firstVisibleBlock), meth_QPlainTextEdit_firstVisibleBlock, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_QPlainTextEdit_focusInEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextChild), meth_QPlainTextEdit_focusNextChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), meth_QPlainTextEdit_focusNextPrevChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_QPlainTextEdit_focusOutEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusPreviousChild), meth_QPlainTextEdit_focusPreviousChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fontChange), meth_QPlainTextEdit_fontChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getPaintContext), meth_QPlainTextEdit_getPaintContext, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hideEvent), meth_QPlainTextEdit_hideEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), meth_QPlainTextEdit_inputMethodEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodQuery), meth_QPlainTextEdit_inputMethodQuery, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertFromMimeData), meth_QPlainTextEdit_insertFromMimeData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertPlainText), meth_QPlainTextEdit_insertPlainText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isReadOnly), meth_QPlainTextEdit_isReadOnly, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isUndoRedoEnabled), meth_QPlainTextEdit_isUndoRedoEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_QPlainTextEdit_keyPressEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), meth_QPlainTextEdit_keyReleaseEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_languageChange), meth_QPlainTextEdit_languageChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_leaveEvent), meth_QPlainTextEdit_leaveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lineWrapMode), meth_QPlainTextEdit_lineWrapMode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_loadResource), meth_QPlainTextEdit_loadResource, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_maximumBlockCount), meth_QPlainTextEdit_maximumBlockCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mergeCurrentCharFormat), meth_QPlainTextEdit_mergeCurrentCharFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_metric), meth_QPlainTextEdit_metric, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), meth_QPlainTextEdit_mouseDoubleClickEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_QPlainTextEdit_mouseMoveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_QPlainTextEdit_mousePressEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_QPlainTextEdit_mouseReleaseEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveCursor), meth_QPlainTextEdit_moveCursor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveEvent), meth_QPlainTextEdit_moveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_overwriteMode), meth_QPlainTextEdit_overwriteMode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_QPlainTextEdit_paintEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paletteChange), meth_QPlainTextEdit_paletteChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paste), meth_QPlainTextEdit_paste, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_print_), meth_QPlainTextEdit_print_, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QPlainTextEdit_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_redo), meth_QPlainTextEdit_redo, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resetInputContext), meth_QPlainTextEdit_resetInputContext, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_QPlainTextEdit_resizeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scrollContentsBy), meth_QPlainTextEdit_scrollContentsBy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_selectAll), meth_QPlainTextEdit_selectAll, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBackgroundVisible), meth_QPlainTextEdit_setBackgroundVisible, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCenterOnScroll), meth_QPlainTextEdit_setCenterOnScroll, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCurrentCharFormat), meth_QPlainTextEdit_setCurrentCharFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCursorWidth), meth_QPlainTextEdit_setCursorWidth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDocument), meth_QPlainTextEdit_setDocument, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDocumentTitle), meth_QPlainTextEdit_setDocumentTitle, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setExtraSelections), meth_QPlainTextEdit_setExtraSelections, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setLineWrapMode), meth_QPlainTextEdit_setLineWrapMode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setMaximumBlockCount), meth_QPlainTextEdit_setMaximumBlockCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setOverwriteMode), meth_QPlainTextEdit_setOverwriteMode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPlainText), meth_QPlainTextEdit_setPlainText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setReadOnly), meth_QPlainTextEdit_setReadOnly, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTabChangesFocus), meth_QPlainTextEdit_setTabChangesFocus, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTabStopWidth), meth_QPlainTextEdit_setTabStopWidth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTextCursor), meth_QPlainTextEdit_setTextCursor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTextInteractionFlags), meth_QPlainTextEdit_setTextInteractionFlags, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setUndoRedoEnabled), meth_QPlainTextEdit_setUndoRedoEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setViewportMargins), meth_QPlainTextEdit_setViewportMargins, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setWordWrapMode), meth_QPlainTextEdit_setWordWrapMode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setupViewport), meth_QPlainTextEdit_setupViewport, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_showEvent), meth_QPlainTextEdit_showEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_tabChangesFocus), meth_QPlainTextEdit_tabChangesFocus, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_tabStopWidth), meth_QPlainTextEdit_tabStopWidth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_tabletEvent), meth_QPlainTextEdit_tabletEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_textCursor), meth_QPlainTextEdit_textCursor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_textInteractionFlags), meth_QPlainTextEdit_textInteractionFlags, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QPlainTextEdit_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toPlainText), meth_QPlainTextEdit_toPlainText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_undo), meth_QPlainTextEdit_undo, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateMicroFocus), meth_QPlainTextEdit_updateMicroFocus, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_viewportEvent), meth_QPlainTextEdit_viewportEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_wheelEvent), meth_QPlainTextEdit_wheelEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_windowActivationChange), meth_QPlainTextEdit_windowActivationChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_wordWrapMode), meth_QPlainTextEdit_wordWrapMode, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QPlainTextEdit[] = {
    {sipName_NoWrap, QPlainTextEdit::NoWrap, 348},
    {sipName_WidgetWidth, QPlainTextEdit::WidgetWidth, 348},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QPlainTextEdit[] = {
    {"modificationChanged(bool)", 0},
    {"blockCountChanged(int)", 0},
    {"updateRequest(const QRect&,int)", 0},
    {"cursorPositionChanged()", 0},
    {"selectionChanged()", 0},
    {"copyAvailable(bool)", 0},
    {"redoAvailable(bool)", 0},
    {"undoAvailable(bool)", 0},
    {"textChanged()", 0},
    {0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QPlainTextEdit = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QPlainTextEdit,
        {0}
    },
    {
        sipNameNr_QPlainTextEdit,
        {0, 0, 1},
        118, methods_QPlainTextEdit,
        2, enummembers_QPlainTextEdit,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QPlainTextEdit,
    0,
    init_QPlainTextEdit,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QPlainTextEdit,
    0,
    0,
    0,
    release_QPlainTextEdit,
    cast_QPlainTextEdit,
    0,
    0,
    0
},
    &QPlainTextEdit::staticMetaObject,
    0,
    pyqt4_signals_QPlainTextEdit
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:25 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 37 "sip/QtGui/qboxlayout.sip"
#include <qboxlayout.h>
#line 39 "sipQtGuiQBoxLayout.cpp"

#line 41 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 43 "sipQtGuiQBoxLayout.cpp"
#line 37 "sip/QtGui/qlayoutitem.sip"
#include <qlayoutitem.h>
#line 46 "sipQtGuiQBoxLayout.cpp"
#line 79 "sip/QtGui/qlayoutitem.sip"
#include <qlayoutitem.h>
#line 49 "sipQtGuiQBoxLayout.cpp"
#line 41 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 52 "sipQtGuiQBoxLayout.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 55 "sipQtGuiQBoxLayout.cpp"
#line 41 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 58 "sipQtGuiQBoxLayout.cpp"
#line 37 "sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 61 "sipQtGuiQBoxLayout.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 64 "sipQtGuiQBoxLayout.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 67 "sipQtGuiQBoxLayout.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 70 "sipQtGuiQBoxLayout.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 73 "sipQtGuiQBoxLayout.cpp"
#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 76 "sipQtGuiQBoxLayout.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 79 "sipQtGuiQBoxLayout.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 82 "sipQtGuiQBoxLayout.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 85 "sipQtGuiQBoxLayout.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 88 "sipQtGuiQBoxLayout.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 91 "sipQtGuiQBoxLayout.cpp"
#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 94 "sipQtGuiQBoxLayout.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 97 "sipQtGuiQBoxLayout.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 100 "sipQtGuiQBoxLayout.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 103 "sipQtGuiQBoxLayout.cpp"
#line 41 "sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 106 "sipQtGuiQBoxLayout.cpp"


class sipQBoxLayout : public QBoxLayout
{
public:
    sipQBoxLayout(QBoxLayout::Direction,QWidget *);
    virtual ~sipQBoxLayout();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    void sipProtect_widgetEvent(QEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtect_addChildLayout(QLayout *);
    void sipProtect_addChildWidget(QWidget *);
    QRect sipProtect_alignmentRect(const QRect&) const;
    void sipProtect_insertItem(int,QLayoutItem *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void addItem(QLayoutItem *);
    QSize sizeHint() const;
    QSize minimumSize() const;
    QSize maximumSize() const;
    bool hasHeightForWidth() const;
    int heightForWidth(int) const;
    int minimumHeightForWidth(int) const;
    Qt::Orientations expandingDirections() const;
    void invalidate();
    QLayoutItem * itemAt(int) const;
    QLayoutItem * takeAt(int);
    int count() const;
    void setGeometry(const QRect&);
    QRect geometry() const;
    int indexOf(QWidget *) const;
    bool isEmpty() const;
    QLayout * layout();
    void childEvent(QChildEvent *);
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);
    QWidget * widget();
    QSpacerItem * spacerItem();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQBoxLayout(const sipQBoxLayout &);
    sipQBoxLayout &operator = (const sipQBoxLayout &);

    char sipPyMethods[26];
};

sipQBoxLayout::sipQBoxLayout(QBoxLayout::Direction a0,QWidget *a1): QBoxLayout(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQBoxLayout::~sipQBoxLayout()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQBoxLayout::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QBoxLayout);
}

int sipQBoxLayout::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QBoxLayout::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QBoxLayout,_c,_id,_a);

    return _id;
}

void *sipQBoxLayout::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QBoxLayout,_clname)) ? this : QBoxLayout::qt_metacast(_clname);
}

void sipQBoxLayout::addItem(QLayoutItem *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_addItem);

    if (!meth)
    {
        QBoxLayout::addItem(a0);
        return;
    }

    extern void sipVH_QtGui_106(sip_gilstate_t,PyObject *,bool*,QLayoutItem *);

    sipVH_QtGui_106(sipGILState,meth,0,a0);
}

QSize sipQBoxLayout::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_sizeHint);

    if (!meth)
        return QBoxLayout::sizeHint();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_4(sipGILState,meth,0);
}

QSize sipQBoxLayout::minimumSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_minimumSize);

    if (!meth)
        return QBoxLayout::minimumSize();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_4(sipGILState,meth,0);
}

QSize sipQBoxLayout::maximumSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_maximumSize);

    if (!meth)
        return QBoxLayout::maximumSize();

    extern QSize sipVH_QtGui_4(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_4(sipGILState,meth,0);
}

bool sipQBoxLayout::hasHeightForWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_hasHeightForWidth);

    if (!meth)
        return QBoxLayout::hasHeightForWidth();

    typedef bool (*sipVH_QtCore_1)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_1)(sipModuleAPI_QtGui_QtCore->em_virthandlers[1]))(sipGILState,meth,0);
}

int sipQBoxLayout::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_heightForWidth);

    if (!meth)
        return QBoxLayout::heightForWidth(a0);

    extern int sipVH_QtGui_29(sip_gilstate_t,PyObject *,bool*,int);

    return sipVH_QtGui_29(sipGILState,meth,0,a0);
}

int sipQBoxLayout::minimumHeightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_minimumHeightForWidth);

    if (!meth)
        return QBoxLayout::minimumHeightForWidth(a0);

    extern int sipVH_QtGui_29(sip_gilstate_t,PyObject *,bool*,int);

    return sipVH_QtGui_29(sipGILState,meth,0,a0);
}

Qt::Orientations sipQBoxLayout::expandingDirections() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_expandingDirections);

    if (!meth)
        return QBoxLayout::expandingDirections();

    extern Qt::Orientations sipVH_QtGui_156(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_156(sipGILState,meth,0);
}

void sipQBoxLayout::invalidate()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_invalidate);

    if (!meth)
    {
        QBoxLayout::invalidate();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

QLayoutItem * sipQBoxLayout::itemAt(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_itemAt);

    if (!meth)
        return QBoxLayout::itemAt(a0);

    extern QLayoutItem * sipVH_QtGui_105(sip_gilstate_t,PyObject *,bool*,int);

    return sipVH_QtGui_105(sipGILState,meth,0,a0);
}

QLayoutItem * sipQBoxLayout::takeAt(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_takeAt);

    if (!meth)
        return QBoxLayout::takeAt(a0);

    extern QLayoutItem * sipVH_QtGui_104(sip_gilstate_t,PyObject *,bool*,int);

    return sipVH_QtGui_104(sipGILState,meth,0,a0);
}

int sipQBoxLayout::count() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_count);

    if (!meth)
        return QBoxLayout::count();

    typedef int (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtGui_QtCore->em_virthandlers[7]))(sipGILState,meth,0);
}

void sipQBoxLayout::setGeometry(const QRect& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_setGeometry);

    if (!meth)
    {
        QBoxLayout::setGeometry(a0);
        return;
    }

    extern void sipVH_QtGui_103(sip_gilstate_t,PyObject *,bool*,const QRect&);

    sipVH_QtGui_103(sipGILState,meth,0,a0);
}

QRect sipQBoxLayout::geometry() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_geometry);

    if (!meth)
        return QLayout::geometry();

    extern QRect sipVH_QtGui_155(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_155(sipGILState,meth,0);
}

int sipQBoxLayout::indexOf(QWidget *a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_indexOf);

    if (!meth)
        return QLayout::indexOf(a0);

    extern int sipVH_QtGui_159(sip_gilstate_t,PyObject *,bool*,QWidget *);

    return sipVH_QtGui_159(sipGILState,meth,0,a0);
}

bool sipQBoxLayout::isEmpty() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_isEmpty);

    if (!meth)
        return QLayout::isEmpty();

    typedef bool (*sipVH_QtCore_1)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_1)(sipModuleAPI_QtGui_QtCore->em_virthandlers[1]))(sipGILState,meth,0);
}

QLayout * sipQBoxLayout::layout()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_layout);

    if (!meth)
        return QLayout::layout();

    extern QLayout * sipVH_QtGui_158(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_158(sipGILState,meth,0);
}

void sipQBoxLayout::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QLayout::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_19)(sip_gilstate_t,PyObject *,bool*,QChildEvent *);

    ((sipVH_QtCore_19)(sipModuleAPI_QtGui_QtCore->em_virthandlers[19]))(sipGILState,meth,0,a0);
}

bool sipQBoxLayout::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_12)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return ((sipVH_QtCore_12)(sipModuleAPI_QtGui_QtCore->em_virthandlers[12]))(sipGILState,meth,0,a0);
}

bool sipQBoxLayout::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t,PyObject *,bool*,QObject *,QEvent *);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtGui_QtCore->em_virthandlers[20]))(sipGILState,meth,0,a0,a1);
}

void sipQBoxLayout::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_3)(sip_gilstate_t,PyObject *,bool*,QTimerEvent *);

    ((sipVH_QtCore_3)(sipModuleAPI_QtGui_QtCore->em_virthandlers[3]))(sipGILState,meth,0,a0);
}

void sipQBoxLayout::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQBoxLayout::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

void sipQBoxLayout::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

QWidget * sipQBoxLayout::widget()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_widget);

    if (!meth)
        return QLayoutItem::widget();

    extern QWidget * sipVH_QtGui_107(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_107(sipGILState,meth,0);
}

QSpacerItem * sipQBoxLayout::spacerItem()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_spacerItem);

    if (!meth)
        return QLayoutItem::spacerItem();

    extern QSpacerItem * sipVH_QtGui_157(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtGui_157(sipGILState,meth,0);
}

int sipQBoxLayout::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQBoxLayout::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQBoxLayout::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQBoxLayout::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQBoxLayout::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

void sipQBoxLayout::sipProtect_widgetEvent(QEvent *a0)
{
    QLayout::widgetEvent(a0);
}

void sipQBoxLayout::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QLayout::childEvent(a0) : childEvent(a0));
}

void sipQBoxLayout::sipProtect_addChildLayout(QLayout *a0)
{
    QLayout::addChildLayout(a0);
}

void sipQBoxLayout::sipProtect_addChildWidget(QWidget *a0)
{
    QLayout::addChildWidget(a0);
}

QRect sipQBoxLayout::sipProtect_alignmentRect(const QRect& a0) const
{
    return QLayout::alignmentRect(a0);
}

void sipQBoxLayout::sipProtect_insertItem(int a0,QLayoutItem *a1)
{
    QBoxLayout::insertItem(a0,a1);
}


extern "C" {static PyObject *meth_QBoxLayout_receivers(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        char * a0;
        sipQBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QBoxLayout,&sipCpp,&a0))
        {
            int sipRes = 0;

#line 480 "sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
#line 702 "sipQtGuiQBoxLayout.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_receivers);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QBoxLayout,&sipCpp,sipType_QTimerEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_timerEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QBoxLayout,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_customEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QBoxLayout,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_connectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QBoxLayout,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_disconnectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_widgetEvent(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_widgetEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QEvent * a0;
        sipQBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QBoxLayout,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_widgetEvent(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_widgetEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QBoxLayout,&sipCpp,sipType_QChildEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_childEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_addChildLayout(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_addChildLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLayout * a0;
        sipQBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ:",&sipSelf,sipType_QBoxLayout,&sipCpp,sipType_QLayout,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_addChildLayout(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_addChildLayout);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_addChildWidget(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_addChildWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWidget * a0;
        sipQBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ:",&sipSelf,sipType_QBoxLayout,&sipCpp,sipType_QWidget,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_addChildWidget(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_addChildWidget);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_alignmentRect(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_alignmentRect(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QRect * a0;
        sipQBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QBoxLayout,&sipCpp,sipType_QRect,&a0))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->sipProtect_alignmentRect(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_alignmentRect);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_direction(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_direction(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QBoxLayout,&sipCpp))
        {
            QBoxLayout::Direction sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->direction();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QBoxLayout_Direction);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_direction);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_setDirection(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_setDirection(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QBoxLayout::Direction a0;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QBoxLayout,&sipCpp,sipType_QBoxLayout_Direction,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDirection(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_setDirection);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_addSpacing(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_addSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QBoxLayout,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addSpacing(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_addSpacing);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_addStretch(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_addStretch(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0 = 0;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|i",&sipSelf,sipType_QBoxLayout,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addStretch(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_addStretch);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_addWidget(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_addWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWidget * a0;
        int a1 = 0;
        Qt::Alignment a2def = 0;
        Qt::Alignment * a2 = &a2def;
        int a2State = 0;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ:|iJ1",&sipSelf,sipType_QBoxLayout,&sipCpp,sipType_QWidget,&a0,&a1,sipType_Qt_Alignment,&a2,&a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addWidget(a0,a1,*a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(a2,sipType_Qt_Alignment,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_addWidget);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_addLayout(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_addLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLayout * a0;
        int a1 = 0;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ:|i",&sipSelf,sipType_QBoxLayout,&sipCpp,sipType_QLayout,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addLayout(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_addLayout);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_addStrut(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_addStrut(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QBoxLayout,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addStrut(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_addStrut);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_addItem(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_addItem(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QLayoutItem * a0;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ:",&sipSelf,sipType_QBoxLayout,&sipCpp,sipType_QLayoutItem,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QBoxLayout::addItem(a0) : sipCpp->addItem(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_addItem);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_insertSpacing(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_insertSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii",&sipSelf,sipType_QBoxLayout,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertSpacing(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_insertSpacing);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_insertStretch(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_insertStretch(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1 = 0;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi|i",&sipSelf,sipType_QBoxLayout,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertStretch(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_insertStretch);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_insertWidget(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_insertWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QWidget * a1;
        int a2 = 0;
        Qt::Alignment a3def = 0;
        Qt::Alignment * a3 = &a3def;
        int a3State = 0;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiJ:|iJ1",&sipSelf,sipType_QBoxLayout,&sipCpp,&a0,sipType_QWidget,&a1,&a2,sipType_Qt_Alignment,&a3,&a3State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertWidget(a0,a1,a2,*a3);
            Py_END_ALLOW_THREADS

            sipReleaseType(a3,sipType_Qt_Alignment,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_insertWidget);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_insertLayout(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_insertLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QLayout * a1;
        int a2 = 0;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiJ:|i",&sipSelf,sipType_QBoxLayout,&sipCpp,&a0,sipType_QLayout,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertLayout(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_insertLayout);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_setStretchFactor(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_setStretchFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWidget * a0;
        int a1;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8i",&sipSelf,sipType_QBoxLayout,&sipCpp,sipType_QWidget,&a0,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setStretchFactor(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        QLayout * a0;
        int a1;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8i",&sipSelf,sipType_QBoxLayout,&sipCpp,sipType_QLayout,&a0,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setStretchFactor(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_setStretchFactor);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QBoxLayout,&sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QBoxLayout::sizeHint() : sipCpp->sizeHint()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_sizeHint);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_minimumSize(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_minimumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QBoxLayout,&sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QBoxLayout::minimumSize() : sipCpp->minimumSize()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_minimumSize);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_maximumSize(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_maximumSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QBoxLayout,&sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QBoxLayout::maximumSize() : sipCpp->maximumSize()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_maximumSize);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_hasHeightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_hasHeightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QBoxLayout,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QBoxLayout::hasHeightForWidth() : sipCpp->hasHeightForWidth());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_hasHeightForWidth);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_heightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_heightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QBoxLayout,&sipCpp,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QBoxLayout::heightForWidth(a0) : sipCpp->heightForWidth(a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_heightForWidth);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_minimumHeightForWidth(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_minimumHeightForWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QBoxLayout,&sipCpp,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QBoxLayout::minimumHeightForWidth(a0) : sipCpp->minimumHeightForWidth(a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_minimumHeightForWidth);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_expandingDirections(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_expandingDirections(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QBoxLayout,&sipCpp))
        {
            Qt::Orientations *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::Orientations((sipSelfWasArg ? sipCpp->QBoxLayout::expandingDirections() : sipCpp->expandingDirections()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_Orientations,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_expandingDirections);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_invalidate(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_invalidate(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QBoxLayout,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QBoxLayout::invalidate() : sipCpp->invalidate());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_invalidate);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_itemAt(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_itemAt(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QBoxLayout,&sipCpp,&a0))
        {
            QLayoutItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QBoxLayout::itemAt(a0) : sipCpp->itemAt(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QLayoutItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_itemAt);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_takeAt(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_takeAt(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QBoxLayout,&sipCpp,&a0))
        {
            QLayoutItem *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QBoxLayout::takeAt(a0) : sipCpp->takeAt(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QLayoutItem,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_takeAt);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_count(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_count(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QBoxLayout,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QBoxLayout::count() : sipCpp->count());
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_count);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_setGeometry(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_setGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QRect * a0;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QBoxLayout,&sipCpp,sipType_QRect,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QBoxLayout::setGeometry(*a0) : sipCpp->setGeometry(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_setGeometry);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_spacing(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_spacing(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QBoxLayout,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->spacing();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_spacing);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_setSpacing(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_setSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QBoxLayout,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSpacing(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_setSpacing);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_addSpacerItem(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_addSpacerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QSpacerItem * a0;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ:",&sipSelf,sipType_QBoxLayout,&sipCpp,sipType_QSpacerItem,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addSpacerItem(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_addSpacerItem);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_insertSpacerItem(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_insertSpacerItem(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QSpacerItem * a1;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiJ:",&sipSelf,sipType_QBoxLayout,&sipCpp,&a0,sipType_QSpacerItem,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertSpacerItem(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_insertSpacerItem);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_setStretch(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_setStretch(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii",&sipSelf,sipType_QBoxLayout,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStretch(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_setStretch);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_stretch(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_stretch(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QBoxLayout,&sipCpp,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->stretch(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_stretch);

    return NULL;
}


extern "C" {static PyObject *meth_QBoxLayout_insertItem(PyObject *, PyObject *);}
static PyObject *meth_QBoxLayout_insertItem(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QLayoutItem * a1;
        sipWrapper *sipOwner = 0;
        sipQBoxLayout *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"piJH",&sipSelf,sipType_QBoxLayout,&sipCpp,&a0,sipType_QLayoutItem,&a1,&sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_insertItem(a0,a1);
            Py_END_ALLOW_THREADS

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QBoxLayout,sipName_insertItem);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QBoxLayout(void *, const sipTypeDef *);}
static void *cast_QBoxLayout(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QBoxLayout)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QLayout)->ctd_cast((QLayout *)(QBoxLayout *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QBoxLayout(void *, int);}
static void release_QBoxLayout(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQBoxLayout *>(sipCppV);
    else
        delete reinterpret_cast<QBoxLayout *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QBoxLayout(sipSimpleWrapper *);}
static void dealloc_QBoxLayout(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQBoxLayout *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QBoxLayout(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QBoxLayout(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QBoxLayout(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **sipOwner, int *sipArgsParsed)
{
    sipQBoxLayout *sipCpp = 0;

    if (!sipCpp)
    {
        QBoxLayout::Direction a0;
        QWidget * a1 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"E|JH",sipType_QBoxLayout_Direction,&a0,sipType_QWidget,&a1,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQBoxLayout(a0,a1);
            Py_END_ALLOW_THREADS
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QBoxLayout[] = {{245, 255, 1}};


static PyMethodDef methods_QBoxLayout[] = {
    {SIP_MLNAME_CAST(sipName_addChildLayout), meth_QBoxLayout_addChildLayout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addChildWidget), meth_QBoxLayout_addChildWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addItem), meth_QBoxLayout_addItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addLayout), meth_QBoxLayout_addLayout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addSpacerItem), meth_QBoxLayout_addSpacerItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addSpacing), meth_QBoxLayout_addSpacing, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addStretch), meth_QBoxLayout_addStretch, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addStrut), meth_QBoxLayout_addStrut, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addWidget), meth_QBoxLayout_addWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_alignmentRect), meth_QBoxLayout_alignmentRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QBoxLayout_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QBoxLayout_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_count), meth_QBoxLayout_count, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QBoxLayout_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_direction), meth_QBoxLayout_direction, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QBoxLayout_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_expandingDirections), meth_QBoxLayout_expandingDirections, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasHeightForWidth), meth_QBoxLayout_hasHeightForWidth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_heightForWidth), meth_QBoxLayout_heightForWidth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertItem), meth_QBoxLayout_insertItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertLayout), meth_QBoxLayout_insertLayout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertSpacerItem), meth_QBoxLayout_insertSpacerItem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertSpacing), meth_QBoxLayout_insertSpacing, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertStretch), meth_QBoxLayout_insertStretch, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertWidget), meth_QBoxLayout_insertWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_invalidate), meth_QBoxLayout_invalidate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_itemAt), meth_QBoxLayout_itemAt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_maximumSize), meth_QBoxLayout_maximumSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_minimumHeightForWidth), meth_QBoxLayout_minimumHeightForWidth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_minimumSize), meth_QBoxLayout_minimumSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QBoxLayout_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDirection), meth_QBoxLayout_setDirection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setGeometry), meth_QBoxLayout_setGeometry, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSpacing), meth_QBoxLayout_setSpacing, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setStretch), meth_QBoxLayout_setStretch, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setStretchFactor), meth_QBoxLayout_setStretchFactor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QBoxLayout_sizeHint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_spacing), meth_QBoxLayout_spacing, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_stretch), meth_QBoxLayout_stretch, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_takeAt), meth_QBoxLayout_takeAt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QBoxLayout_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_widgetEvent), meth_QBoxLayout_widgetEvent, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QBoxLayout[] = {
    {sipName_BottomToTop, QBoxLayout::BottomToTop, 43},
    {sipName_Down, QBoxLayout::Down, 43},
    {sipName_LeftToRight, QBoxLayout::LeftToRight, 43},
    {sipName_RightToLeft, QBoxLayout::RightToLeft, 43},
    {sipName_TopToBottom, QBoxLayout::TopToBottom, 43},
    {sipName_Up, QBoxLayout::Up, 43},
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QBoxLayout = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QBoxLayout,
        {0}
    },
    {
        sipNameNr_QBoxLayout,
        {0, 0, 1},
        42, methods_QBoxLayout,
        6, enummembers_QBoxLayout,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QBoxLayout,
    0,
    init_QBoxLayout,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QBoxLayout,
    0,
    0,
    0,
    release_QBoxLayout,
    cast_QBoxLayout,
    0,
    0,
    0
},
    &QBoxLayout::staticMetaObject,
    0,
    0
};

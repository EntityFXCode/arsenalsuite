/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:23 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 37 "sip/QtGui/qstylepainter.sip"
#include <qstylepainter.h>
#line 39 "sipQtGuiQStylePainter.cpp"

#line 41 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 43 "sipQtGuiQStylePainter.cpp"
#line 37 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 46 "sipQtGuiQStylePainter.cpp"
#line 41 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 49 "sipQtGuiQStylePainter.cpp"
#line 41 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 52 "sipQtGuiQStylePainter.cpp"
#line 41 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 55 "sipQtGuiQStylePainter.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 58 "sipQtGuiQStylePainter.cpp"
#line 41 "sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 61 "sipQtGuiQStylePainter.cpp"
#line 983 "sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 64 "sipQtGuiQStylePainter.cpp"
#line 41 "sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 67 "sipQtGuiQStylePainter.cpp"
#line 160 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 70 "sipQtGuiQStylePainter.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 73 "sipQtGuiQStylePainter.cpp"
#line 41 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 76 "sipQtGuiQStylePainter.cpp"
#line 45 "sip/QtGui/qtransform.sip"
#include <qtransform.h>
#line 79 "sipQtGuiQStylePainter.cpp"
#line 41 "sip/QtGui/qmatrix.sip"
#include <qmatrix.h>
#line 82 "sipQtGuiQStylePainter.cpp"
#line 94 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 85 "sipQtGuiQStylePainter.cpp"
#line 41 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 88 "sipQtGuiQStylePainter.cpp"
#line 109 "sip/QtCore/qline.sip"
#include <qline.h>
#line 91 "sipQtGuiQStylePainter.cpp"
#line 41 "sip/QtCore/qline.sip"
#include <qline.h>
#line 94 "sipQtGuiQStylePainter.cpp"
#line 69 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 97 "sipQtGuiQStylePainter.cpp"
#line 41 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 100 "sipQtGuiQStylePainter.cpp"
#line 41 "sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 103 "sipQtGuiQStylePainter.cpp"
#line 41 "sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 106 "sipQtGuiQStylePainter.cpp"
#line 41 "sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 109 "sip/QtGui/qtextoption.sip"
#include <qtextoption.h>
#line 111 "sipQtGuiQStylePainter.cpp"
#line 41 "sip/QtGui/qimage.sip"
#include <qimage.h>
#line 114 "sipQtGuiQStylePainter.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 117 "sipQtGuiQStylePainter.cpp"
#line 41 "sip/QtGui/qpicture.sip"
#include <qpicture.h>
#line 120 "sipQtGuiQStylePainter.cpp"
#line 329 "sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 123 "sipQtGuiQStylePainter.cpp"
#line 41 "sip/QtGui/qpolygon.sip"
#include <qpolygon.h>
#line 126 "sipQtGuiQStylePainter.cpp"
#line 38 "sip/QtCore/qvector.sip"
#include <qvector.h>
#line 129 "sipQtGuiQStylePainter.cpp"
#line 38 "sip/QtCore/qvector.sip"
#include <qvector.h>
#line 132 "sipQtGuiQStylePainter.cpp"
#line 38 "sip/QtCore/qvector.sip"
#include <qvector.h>
#line 135 "sipQtGuiQStylePainter.cpp"
#line 38 "sip/QtCore/qvector.sip"
#include <qvector.h>
#line 138 "sipQtGuiQStylePainter.cpp"
#line 38 "sip/QtCore/qvector.sip"
#include <qvector.h>
#line 141 "sipQtGuiQStylePainter.cpp"
#line 38 "sip/QtCore/qvector.sip"
#include <qvector.h>
#line 144 "sipQtGuiQStylePainter.cpp"
#line 41 "sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 57 "sip/QtGui/qpainterpath.sip"
#include <qpainterpath.h>
#line 149 "sipQtGuiQStylePainter.cpp"
#line 41 "sip/QtGui/qpen.sip"
#include <qpen.h>
#line 152 "sipQtGuiQStylePainter.cpp"
#line 41 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 155 "sipQtGuiQStylePainter.cpp"
#line 37 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 158 "sipQtGuiQStylePainter.cpp"
#line 37 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 161 "sipQtGuiQStylePainter.cpp"
#line 41 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 164 "sipQtGuiQStylePainter.cpp"


extern "C" {static PyObject *meth_QStylePainter_begin(PyObject *, PyObject *);}
static PyObject *meth_QStylePainter_begin(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWidget * a0;
        QStylePainter *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QStylePainter,&sipCpp,sipType_QWidget,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->begin(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        QPaintDevice * a0;
        QWidget * a1;
        QStylePainter *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8J8",&sipSelf,sipType_QStylePainter,&sipCpp,sipType_QPaintDevice,&a0,sipType_QWidget,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->begin(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStylePainter,sipName_begin);

    return NULL;
}


extern "C" {static PyObject *meth_QStylePainter_style(PyObject *, PyObject *);}
static PyObject *meth_QStylePainter_style(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStylePainter *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStylePainter,&sipCpp))
        {
            QStyle *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->style();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QStyle,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStylePainter,sipName_style);

    return NULL;
}


extern "C" {static PyObject *meth_QStylePainter_drawPrimitive(PyObject *, PyObject *);}
static PyObject *meth_QStylePainter_drawPrimitive(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStyle::PrimitiveElement a0;
        const QStyleOption * a1;
        QStylePainter *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BEJ9",&sipSelf,sipType_QStylePainter,&sipCpp,sipType_QStyle_PrimitiveElement,&a0,sipType_QStyleOption,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawPrimitive(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStylePainter,sipName_drawPrimitive);

    return NULL;
}


extern "C" {static PyObject *meth_QStylePainter_drawControl(PyObject *, PyObject *);}
static PyObject *meth_QStylePainter_drawControl(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStyle::ControlElement a0;
        const QStyleOption * a1;
        QStylePainter *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BEJ9",&sipSelf,sipType_QStylePainter,&sipCpp,sipType_QStyle_ControlElement,&a0,sipType_QStyleOption,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawControl(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStylePainter,sipName_drawControl);

    return NULL;
}


extern "C" {static PyObject *meth_QStylePainter_drawComplexControl(PyObject *, PyObject *);}
static PyObject *meth_QStylePainter_drawComplexControl(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStyle::ComplexControl a0;
        const QStyleOptionComplex * a1;
        QStylePainter *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BEJ9",&sipSelf,sipType_QStylePainter,&sipCpp,sipType_QStyle_ComplexControl,&a0,sipType_QStyleOptionComplex,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawComplexControl(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStylePainter,sipName_drawComplexControl);

    return NULL;
}


extern "C" {static PyObject *meth_QStylePainter_drawItemText(PyObject *, PyObject *);}
static PyObject *meth_QStylePainter_drawItemText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QRect * a0;
        int a1;
        const QPalette * a2;
        bool a3;
        const QString * a4;
        int a4State = 0;
        QPalette::ColorRole a5 = QPalette::NoRole;
        QStylePainter *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9iJ9bJ1|E",&sipSelf,sipType_QStylePainter,&sipCpp,sipType_QRect,&a0,&a1,sipType_QPalette,&a2,&a3,sipType_QString,&a4,&a4State,sipType_QPalette_ColorRole,&a5))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawItemText(*a0,a1,*a2,a3,*a4,a5);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a4),sipType_QString,a4State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStylePainter,sipName_drawItemText);

    return NULL;
}


extern "C" {static PyObject *meth_QStylePainter_drawItemPixmap(PyObject *, PyObject *);}
static PyObject *meth_QStylePainter_drawItemPixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QRect * a0;
        int a1;
        const QPixmap * a2;
        QStylePainter *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9iJ9",&sipSelf,sipType_QStylePainter,&sipCpp,sipType_QRect,&a0,&a1,sipType_QPixmap,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->drawItemPixmap(*a0,a1,*a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStylePainter,sipName_drawItemPixmap);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QStylePainter(void *, const sipTypeDef *);}
static void *cast_QStylePainter(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QStylePainter)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QPainter)->ctd_cast((QPainter *)(QStylePainter *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QStylePainter(void *, int);}
static void release_QStylePainter(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QStylePainter *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QStylePainter(sipSimpleWrapper *);}
static void dealloc_QStylePainter(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QStylePainter(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QStylePainter(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QStylePainter(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QStylePainter *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QStylePainter();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        QWidget * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J8",sipType_QWidget,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QStylePainter(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        QPaintDevice * a0;
        QWidget * a1;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J8J8",sipType_QPaintDevice,&a0,sipType_QWidget,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QStylePainter(a0,a1);
            Py_END_ALLOW_THREADS
        }
    }

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QStylePainter[] = {{329, 255, 1}};


static PyMethodDef methods_QStylePainter[] = {
    {SIP_MLNAME_CAST(sipName_begin), meth_QStylePainter_begin, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawComplexControl), meth_QStylePainter_drawComplexControl, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawControl), meth_QStylePainter_drawControl, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawItemPixmap), meth_QStylePainter_drawItemPixmap, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawItemText), meth_QStylePainter_drawItemText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawPrimitive), meth_QStylePainter_drawPrimitive, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_style), meth_QStylePainter_style, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QStylePainter = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QStylePainter,
        {0}
    },
    {
        sipNameNr_QStylePainter,
        {0, 0, 1},
        7, methods_QStylePainter,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QStylePainter,
    0,
    init_QStylePainter,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QStylePainter,
    0,
    0,
    0,
    release_QStylePainter,
    cast_QStylePainter,
    0,
    0,
    0
},
    0,
    0,
    0
};

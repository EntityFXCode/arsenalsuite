/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:22 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 660 "sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 39 "sipQtGuiQTextTableCellFormat.cpp"

#line 41 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 43 "sipQtGuiQTextTableCellFormat.cpp"
#line 41 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 46 "sipQtGuiQTextTableCellFormat.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 49 "sipQtGuiQTextTableCellFormat.cpp"
#line 312 "sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 52 "sipQtGuiQTextTableCellFormat.cpp"
#line 41 "sip/QtGui/qpen.sip"
#include <qpen.h>
#line 55 "sipQtGuiQTextTableCellFormat.cpp"
#line 41 "sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 58 "sipQtGuiQTextTableCellFormat.cpp"
#line 41 "sip/QtGui/qbrush.sip"
#include <qbrush.h>
#line 61 "sipQtGuiQTextTableCellFormat.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 64 "sipQtGuiQTextTableCellFormat.cpp"
#line 72 "sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 67 "sipQtGuiQTextTableCellFormat.cpp"
#line 511 "sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 70 "sipQtGuiQTextTableCellFormat.cpp"
#line 529 "sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 73 "sipQtGuiQTextTableCellFormat.cpp"
#line 623 "sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 76 "sipQtGuiQTextTableCellFormat.cpp"
#line 483 "sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 79 "sipQtGuiQTextTableCellFormat.cpp"
#line 443 "sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 82 "sipQtGuiQTextTableCellFormat.cpp"
#line 149 "sip/QtCore/qmap.sip"
#include <qmap.h>
#line 85 "sipQtGuiQTextTableCellFormat.cpp"
#line 131 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 88 "sipQtGuiQTextTableCellFormat.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 91 "sipQtGuiQTextTableCellFormat.cpp"
#line 38 "sip/QtCore/qvector.sip"
#include <qvector.h>
#line 94 "sipQtGuiQTextTableCellFormat.cpp"
#line 41 "sip/QtGui/qtextformat.sip"
#include <qtextformat.h>
#line 97 "sipQtGuiQTextTableCellFormat.cpp"


extern "C" {static PyObject *meth_QTextTableCellFormat_isValid(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCellFormat_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextTableCellFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextTableCellFormat,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextTableCellFormat,sipName_isValid);

    return NULL;
}


extern "C" {static PyObject *meth_QTextTableCellFormat_setTopPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCellFormat_setTopPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qreal a0;
        QTextTableCellFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bd",&sipSelf,sipType_QTextTableCellFormat,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTopPadding(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextTableCellFormat,sipName_setTopPadding);

    return NULL;
}


extern "C" {static PyObject *meth_QTextTableCellFormat_topPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCellFormat_topPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextTableCellFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextTableCellFormat,&sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->topPadding();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextTableCellFormat,sipName_topPadding);

    return NULL;
}


extern "C" {static PyObject *meth_QTextTableCellFormat_setBottomPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCellFormat_setBottomPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qreal a0;
        QTextTableCellFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bd",&sipSelf,sipType_QTextTableCellFormat,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBottomPadding(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextTableCellFormat,sipName_setBottomPadding);

    return NULL;
}


extern "C" {static PyObject *meth_QTextTableCellFormat_bottomPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCellFormat_bottomPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextTableCellFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextTableCellFormat,&sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->bottomPadding();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextTableCellFormat,sipName_bottomPadding);

    return NULL;
}


extern "C" {static PyObject *meth_QTextTableCellFormat_setLeftPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCellFormat_setLeftPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qreal a0;
        QTextTableCellFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bd",&sipSelf,sipType_QTextTableCellFormat,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLeftPadding(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextTableCellFormat,sipName_setLeftPadding);

    return NULL;
}


extern "C" {static PyObject *meth_QTextTableCellFormat_leftPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCellFormat_leftPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextTableCellFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextTableCellFormat,&sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->leftPadding();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextTableCellFormat,sipName_leftPadding);

    return NULL;
}


extern "C" {static PyObject *meth_QTextTableCellFormat_setRightPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCellFormat_setRightPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qreal a0;
        QTextTableCellFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bd",&sipSelf,sipType_QTextTableCellFormat,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRightPadding(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextTableCellFormat,sipName_setRightPadding);

    return NULL;
}


extern "C" {static PyObject *meth_QTextTableCellFormat_rightPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCellFormat_rightPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextTableCellFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTextTableCellFormat,&sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rightPadding();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextTableCellFormat,sipName_rightPadding);

    return NULL;
}


extern "C" {static PyObject *meth_QTextTableCellFormat_setPadding(PyObject *, PyObject *);}
static PyObject *meth_QTextTableCellFormat_setPadding(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qreal a0;
        QTextTableCellFormat *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bd",&sipSelf,sipType_QTextTableCellFormat,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPadding(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTextTableCellFormat,sipName_setPadding);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTextTableCellFormat(void *, const sipTypeDef *);}
static void *cast_QTextTableCellFormat(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTextTableCellFormat)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QTextCharFormat)->ctd_cast((QTextCharFormat *)(QTextTableCellFormat *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTextTableCellFormat(void *, int);}
static void release_QTextTableCellFormat(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QTextTableCellFormat *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QTextTableCellFormat(void *, SIP_SSIZE_T, const void *);}
static void assign_QTextTableCellFormat(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QTextTableCellFormat *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QTextTableCellFormat *>(sipSrc);
}


extern "C" {static void *array_QTextTableCellFormat(SIP_SSIZE_T);}
static void *array_QTextTableCellFormat(SIP_SSIZE_T sipNrElem)
{
    return new QTextTableCellFormat[sipNrElem];
}


extern "C" {static void *copy_QTextTableCellFormat(const void *, SIP_SSIZE_T);}
static void *copy_QTextTableCellFormat(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QTextTableCellFormat(reinterpret_cast<const QTextTableCellFormat *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QTextTableCellFormat(sipSimpleWrapper *);}
static void dealloc_QTextTableCellFormat(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QTextTableCellFormat(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QTextTableCellFormat(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QTextTableCellFormat(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QTextTableCellFormat *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextTableCellFormat();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QTextTableCellFormat * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QTextTableCellFormat,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QTextTableCellFormat(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTextTableCellFormat[] = {{587, 255, 1}};


static PyMethodDef methods_QTextTableCellFormat[] = {
    {SIP_MLNAME_CAST(sipName_bottomPadding), meth_QTextTableCellFormat_bottomPadding, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QTextTableCellFormat_isValid, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_leftPadding), meth_QTextTableCellFormat_leftPadding, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rightPadding), meth_QTextTableCellFormat_rightPadding, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBottomPadding), meth_QTextTableCellFormat_setBottomPadding, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setLeftPadding), meth_QTextTableCellFormat_setLeftPadding, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPadding), meth_QTextTableCellFormat_setPadding, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRightPadding), meth_QTextTableCellFormat_setRightPadding, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTopPadding), meth_QTextTableCellFormat_setTopPadding, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_topPadding), meth_QTextTableCellFormat_topPadding, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QTextTableCellFormat = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QTextTableCellFormat,
        {0}
    },
    {
        sipNameNr_QTextTableCellFormat,
        {0, 0, 1},
        10, methods_QTextTableCellFormat,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QTextTableCellFormat,
    0,
    init_QTextTableCellFormat,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTextTableCellFormat,
    assign_QTextTableCellFormat,
    array_QTextTableCellFormat,
    copy_QTextTableCellFormat,
    release_QTextTableCellFormat,
    cast_QTextTableCellFormat,
    0,
    0,
    0
},
    0,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:24 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 82 "sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 39 "sipQtGuiQItemSelectionModel.cpp"

#line 128 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 43 "sipQtGuiQItemSelectionModel.cpp"
#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 46 "sipQtGuiQItemSelectionModel.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 49 "sipQtGuiQItemSelectionModel.cpp"
#line 37 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 52 "sipQtGuiQItemSelectionModel.cpp"
#line 156 "sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 55 "sipQtGuiQItemSelectionModel.cpp"
#line 82 "sip/QtGui/qitemselectionmodel.sip"
#include <qitemselectionmodel.h>
#line 58 "sipQtGuiQItemSelectionModel.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 61 "sipQtGuiQItemSelectionModel.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 64 "sipQtGuiQItemSelectionModel.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 67 "sipQtGuiQItemSelectionModel.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 70 "sipQtGuiQItemSelectionModel.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 73 "sipQtGuiQItemSelectionModel.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 76 "sipQtGuiQItemSelectionModel.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 79 "sipQtGuiQItemSelectionModel.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 82 "sipQtGuiQItemSelectionModel.cpp"
#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 85 "sipQtGuiQItemSelectionModel.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 88 "sipQtGuiQItemSelectionModel.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 91 "sipQtGuiQItemSelectionModel.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 94 "sipQtGuiQItemSelectionModel.cpp"


class sipQItemSelectionModel : public QItemSelectionModel
{
public:
    sipQItemSelectionModel(QAbstractItemModel *);
    sipQItemSelectionModel(QAbstractItemModel *,QObject *);
    virtual ~sipQItemSelectionModel();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    void sipProtect_emitSelectionChanged(const QItemSelection&,const QItemSelection&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void clear();
    void reset();
    void select(const QModelIndex&,QItemSelectionModel::SelectionFlags);
    void select(const QItemSelection&,QItemSelectionModel::SelectionFlags);
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQItemSelectionModel(const sipQItemSelectionModel &);
    sipQItemSelectionModel &operator = (const sipQItemSelectionModel &);

    char sipPyMethods[11];
};

sipQItemSelectionModel::sipQItemSelectionModel(QAbstractItemModel *a0): QItemSelectionModel(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQItemSelectionModel::sipQItemSelectionModel(QAbstractItemModel *a0,QObject *a1): QItemSelectionModel(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQItemSelectionModel::~sipQItemSelectionModel()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQItemSelectionModel::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QItemSelectionModel);
}

int sipQItemSelectionModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QItemSelectionModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QItemSelectionModel,_c,_id,_a);

    return _id;
}

void *sipQItemSelectionModel::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QItemSelectionModel,_clname)) ? this : QItemSelectionModel::qt_metacast(_clname);
}

void sipQItemSelectionModel::clear()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_clear);

    if (!meth)
    {
        QItemSelectionModel::clear();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

void sipQItemSelectionModel::reset()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_reset);

    if (!meth)
    {
        QItemSelectionModel::reset();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtGui_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

void sipQItemSelectionModel::select(const QModelIndex& a0,QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_select);

    if (!meth)
    {
        QItemSelectionModel::select(a0,a1);
        return;
    }

    extern void sipVH_QtGui_174(sip_gilstate_t,PyObject *,bool*,const QModelIndex&,QItemSelectionModel::SelectionFlags);

    sipVH_QtGui_174(sipGILState,meth,0,a0,a1);
}

void sipQItemSelectionModel::select(const QItemSelection& a0,QItemSelectionModel::SelectionFlags a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_select);

    if (!meth)
    {
        QItemSelectionModel::select(a0,a1);
        return;
    }

    extern void sipVH_QtGui_173(sip_gilstate_t,PyObject *,bool*,const QItemSelection&,QItemSelectionModel::SelectionFlags);

    sipVH_QtGui_173(sipGILState,meth,0,a0,a1);
}

bool sipQItemSelectionModel::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_12)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return ((sipVH_QtCore_12)(sipModuleAPI_QtGui_QtCore->em_virthandlers[12]))(sipGILState,meth,0,a0);
}

bool sipQItemSelectionModel::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t,PyObject *,bool*,QObject *,QEvent *);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtGui_QtCore->em_virthandlers[20]))(sipGILState,meth,0,a0,a1);
}

void sipQItemSelectionModel::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_3)(sip_gilstate_t,PyObject *,bool*,QTimerEvent *);

    ((sipVH_QtCore_3)(sipModuleAPI_QtGui_QtCore->em_virthandlers[3]))(sipGILState,meth,0,a0);
}

void sipQItemSelectionModel::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_19)(sip_gilstate_t,PyObject *,bool*,QChildEvent *);

    ((sipVH_QtCore_19)(sipModuleAPI_QtGui_QtCore->em_virthandlers[19]))(sipGILState,meth,0,a0);
}

void sipQItemSelectionModel::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQItemSelectionModel::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

void sipQItemSelectionModel::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

int sipQItemSelectionModel::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQItemSelectionModel::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQItemSelectionModel::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQItemSelectionModel::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQItemSelectionModel::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQItemSelectionModel::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

void sipQItemSelectionModel::sipProtect_emitSelectionChanged(const QItemSelection& a0,const QItemSelection& a1)
{
    QItemSelectionModel::emitSelectionChanged(a0,a1);
}


extern "C" {static PyObject *meth_QItemSelectionModel_receivers(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        char * a0;
        sipQItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QItemSelectionModel,&sipCpp,&a0))
        {
            int sipRes = 0;

#line 480 "sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
#line 435 "sipQtGuiQItemSelectionModel.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelectionModel,sipName_receivers);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelectionModel_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QItemSelectionModel,&sipCpp,sipType_QTimerEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelectionModel,sipName_timerEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelectionModel_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QItemSelectionModel,&sipCpp,sipType_QChildEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelectionModel,sipName_childEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelectionModel_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QItemSelectionModel,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelectionModel,sipName_customEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelectionModel_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QItemSelectionModel,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelectionModel,sipName_connectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelectionModel_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QItemSelectionModel,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelectionModel,sipName_disconnectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelectionModel_currentIndex(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_currentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QItemSelectionModel,&sipCpp))
        {
            QModelIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->currentIndex());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelectionModel,sipName_currentIndex);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelectionModel_isSelected(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_isSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;
        QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QItemSelectionModel,&sipCpp,sipType_QModelIndex,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSelected(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelectionModel,sipName_isSelected);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelectionModel_isRowSelected(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_isRowSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        const QModelIndex * a1;
        QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiJ9",&sipSelf,sipType_QItemSelectionModel,&sipCpp,&a0,sipType_QModelIndex,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isRowSelected(a0,*a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelectionModel,sipName_isRowSelected);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelectionModel_isColumnSelected(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_isColumnSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        const QModelIndex * a1;
        QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiJ9",&sipSelf,sipType_QItemSelectionModel,&sipCpp,&a0,sipType_QModelIndex,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isColumnSelected(a0,*a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelectionModel,sipName_isColumnSelected);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelectionModel_rowIntersectsSelection(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_rowIntersectsSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        const QModelIndex * a1;
        QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiJ9",&sipSelf,sipType_QItemSelectionModel,&sipCpp,&a0,sipType_QModelIndex,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rowIntersectsSelection(a0,*a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelectionModel,sipName_rowIntersectsSelection);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelectionModel_columnIntersectsSelection(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_columnIntersectsSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        const QModelIndex * a1;
        QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiJ9",&sipSelf,sipType_QItemSelectionModel,&sipCpp,&a0,sipType_QModelIndex,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->columnIntersectsSelection(a0,*a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelectionModel,sipName_columnIntersectsSelection);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelectionModel_selectedIndexes(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_selectedIndexes(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QItemSelectionModel,&sipCpp))
        {
            QModelIndexList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndexList(sipCpp->selectedIndexes());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelectionModel,sipName_selectedIndexes);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelectionModel_selection(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_selection(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QItemSelectionModel,&sipCpp))
        {
            QItemSelection *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QItemSelection(sipCpp->selection());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QItemSelection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelectionModel,sipName_selection);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelectionModel_model(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_model(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QItemSelectionModel,&sipCpp))
        {
            const QAbstractItemModel *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->model();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(const_cast<QAbstractItemModel *>(sipRes),sipType_QAbstractItemModel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelectionModel,sipName_model);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelectionModel_clear(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QItemSelectionModel,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QItemSelectionModel::clear() : sipCpp->clear());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelectionModel,sipName_clear);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelectionModel_clearSelection(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_clearSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QItemSelectionModel,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearSelection();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelectionModel,sipName_clearSelection);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelectionModel_reset(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QItemSelectionModel,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QItemSelectionModel::reset() : sipCpp->reset());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelectionModel,sipName_reset);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelectionModel_select(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_select(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QItemSelectionModel::SelectionFlags * a1;
        int a1State = 0;
        QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9J1",&sipSelf,sipType_QItemSelectionModel,&sipCpp,sipType_QModelIndex,&a0,sipType_QItemSelectionModel_SelectionFlags,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QItemSelectionModel::select(*a0,*a1) : sipCpp->select(*a0,*a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QItemSelection * a0;
        QItemSelectionModel::SelectionFlags * a1;
        int a1State = 0;
        QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9J1",&sipSelf,sipType_QItemSelectionModel,&sipCpp,sipType_QItemSelection,&a0,sipType_QItemSelectionModel_SelectionFlags,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QItemSelectionModel::select(*a0,*a1) : sipCpp->select(*a0,*a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelectionModel,sipName_select);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelectionModel_setCurrentIndex(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_setCurrentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;
        QItemSelectionModel::SelectionFlags * a1;
        int a1State = 0;
        QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9J1",&sipSelf,sipType_QItemSelectionModel,&sipCpp,sipType_QModelIndex,&a0,sipType_QItemSelectionModel_SelectionFlags,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentIndex(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_QItemSelectionModel_SelectionFlags,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelectionModel,sipName_setCurrentIndex);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelectionModel_emitSelectionChanged(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_emitSelectionChanged(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QItemSelection * a0;
        const QItemSelection * a1;
        sipQItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9J9",&sipSelf,sipType_QItemSelectionModel,&sipCpp,sipType_QItemSelection,&a0,sipType_QItemSelection,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_emitSelectionChanged(*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelectionModel,sipName_emitSelectionChanged);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelectionModel_hasSelection(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_hasSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QItemSelectionModel,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasSelection();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelectionModel,sipName_hasSelection);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelectionModel_selectedRows(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_selectedRows(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0 = 0;
        QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|i",&sipSelf,sipType_QItemSelectionModel,&sipCpp,&a0))
        {
            QModelIndexList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndexList(sipCpp->selectedRows(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelectionModel,sipName_selectedRows);

    return NULL;
}


extern "C" {static PyObject *meth_QItemSelectionModel_selectedColumns(PyObject *, PyObject *);}
static PyObject *meth_QItemSelectionModel_selectedColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0 = 0;
        QItemSelectionModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|i",&sipSelf,sipType_QItemSelectionModel,&sipCpp,&a0))
        {
            QModelIndexList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndexList(sipCpp->selectedColumns(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemSelectionModel,sipName_selectedColumns);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QItemSelectionModel(void *, const sipTypeDef *);}
static void *cast_QItemSelectionModel(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QItemSelectionModel)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QItemSelectionModel *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QItemSelectionModel(void *, int);}
static void release_QItemSelectionModel(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQItemSelectionModel *>(sipCppV);
    else
        delete reinterpret_cast<QItemSelectionModel *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QItemSelectionModel(sipSimpleWrapper *);}
static void dealloc_QItemSelectionModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQItemSelectionModel *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QItemSelectionModel(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QItemSelectionModel(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QItemSelectionModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **sipOwner, int *sipArgsParsed)
{
    sipQItemSelectionModel *sipCpp = 0;

    if (!sipCpp)
    {
        QAbstractItemModel * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J8",sipType_QAbstractItemModel,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQItemSelectionModel(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        QAbstractItemModel * a0;
        QObject * a1;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J8JH",sipType_QAbstractItemModel,&a0,sipType_QObject,&a1,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQItemSelectionModel(a0,a1);
            Py_END_ALLOW_THREADS
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QItemSelectionModel[] = {{111, 0, 1}};


static PyMethodDef methods_QItemSelectionModel[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QItemSelectionModel_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clear), meth_QItemSelectionModel_clear, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clearSelection), meth_QItemSelectionModel_clearSelection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_columnIntersectsSelection), meth_QItemSelectionModel_columnIntersectsSelection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QItemSelectionModel_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentIndex), meth_QItemSelectionModel_currentIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QItemSelectionModel_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QItemSelectionModel_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_emitSelectionChanged), meth_QItemSelectionModel_emitSelectionChanged, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasSelection), meth_QItemSelectionModel_hasSelection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isColumnSelected), meth_QItemSelectionModel_isColumnSelected, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isRowSelected), meth_QItemSelectionModel_isRowSelected, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isSelected), meth_QItemSelectionModel_isSelected, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_model), meth_QItemSelectionModel_model, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QItemSelectionModel_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_reset), meth_QItemSelectionModel_reset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rowIntersectsSelection), meth_QItemSelectionModel_rowIntersectsSelection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_select), meth_QItemSelectionModel_select, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_selectedColumns), meth_QItemSelectionModel_selectedColumns, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_selectedIndexes), meth_QItemSelectionModel_selectedIndexes, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_selectedRows), meth_QItemSelectionModel_selectedRows, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_selection), meth_QItemSelectionModel_selection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCurrentIndex), meth_QItemSelectionModel_setCurrentIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QItemSelectionModel_timerEvent, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QItemSelectionModel[] = {
    {sipName_Clear, QItemSelectionModel::Clear, 233},
    {sipName_ClearAndSelect, QItemSelectionModel::ClearAndSelect, 233},
    {sipName_Columns, QItemSelectionModel::Columns, 233},
    {sipName_Current, QItemSelectionModel::Current, 233},
    {sipName_Deselect, QItemSelectionModel::Deselect, 233},
    {sipName_NoUpdate, QItemSelectionModel::NoUpdate, 233},
    {sipName_Rows, QItemSelectionModel::Rows, 233},
    {sipName_Select, QItemSelectionModel::Select, 233},
    {sipName_SelectCurrent, QItemSelectionModel::SelectCurrent, 233},
    {sipName_Toggle, QItemSelectionModel::Toggle, 233},
    {sipName_ToggleCurrent, QItemSelectionModel::ToggleCurrent, 233},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QItemSelectionModel[] = {
    {"currentColumnChanged(const QModelIndex&,const QModelIndex&)", 0},
    {"currentRowChanged(const QModelIndex&,const QModelIndex&)", 0},
    {"currentChanged(const QModelIndex&,const QModelIndex&)", 0},
    {"selectionChanged(const QItemSelection&,const QItemSelection&)", 0},
    {0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QItemSelectionModel = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QItemSelectionModel,
        {0}
    },
    {
        sipNameNr_QItemSelectionModel,
        {0, 0, 1},
        24, methods_QItemSelectionModel,
        11, enummembers_QItemSelectionModel,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QItemSelectionModel,
    0,
    init_QItemSelectionModel,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QItemSelectionModel,
    0,
    0,
    0,
    release_QItemSelectionModel,
    cast_QItemSelectionModel,
    0,
    0,
    0
},
    &QItemSelectionModel::staticMetaObject,
    0,
    pyqt4_signals_QItemSelectionModel
};

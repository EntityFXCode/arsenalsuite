/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:23 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 1708 "sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 39 "sipQtGuiQStyleHintReturnVariant.cpp"

#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 43 "sipQtGuiQStyleHintReturnVariant.cpp"


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QStyleHintReturnVariant(void *, const sipTypeDef *);}
static void *cast_QStyleHintReturnVariant(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QStyleHintReturnVariant)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QStyleHintReturn)->ctd_cast((QStyleHintReturn *)(QStyleHintReturnVariant *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QStyleHintReturnVariant(void *, int);}
static void release_QStyleHintReturnVariant(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QStyleHintReturnVariant *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QStyleHintReturnVariant(void *, SIP_SSIZE_T, const void *);}
static void assign_QStyleHintReturnVariant(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QStyleHintReturnVariant *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QStyleHintReturnVariant *>(sipSrc);
}


extern "C" {static void *array_QStyleHintReturnVariant(SIP_SSIZE_T);}
static void *array_QStyleHintReturnVariant(SIP_SSIZE_T sipNrElem)
{
    return new QStyleHintReturnVariant[sipNrElem];
}


extern "C" {static void *copy_QStyleHintReturnVariant(const void *, SIP_SSIZE_T);}
static void *copy_QStyleHintReturnVariant(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QStyleHintReturnVariant(reinterpret_cast<const QStyleHintReturnVariant *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QStyleHintReturnVariant(sipSimpleWrapper *);}
static void dealloc_QStyleHintReturnVariant(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QStyleHintReturnVariant(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QStyleHintReturnVariant(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QStyleHintReturnVariant(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QStyleHintReturnVariant *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QStyleHintReturnVariant();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QStyleHintReturnVariant * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QStyleHintReturnVariant,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QStyleHintReturnVariant(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QStyleHintReturnVariant[] = {{430, 255, 1}};

static sipEnumMemberDef enummembers_QStyleHintReturnVariant[] = {
    {sipName_Type, QStyleHintReturnVariant::Type, 438},
    {sipName_Version, QStyleHintReturnVariant::Version, 439},
};


extern "C" {static PyObject *varget_QStyleHintReturnVariant_variant(void *, PyObject *);}
static PyObject *varget_QStyleHintReturnVariant_variant(void *sipSelf, PyObject *)
{
    QVariant *sipVal;
    QStyleHintReturnVariant *sipCpp = reinterpret_cast<QStyleHintReturnVariant *>(sipSelf);

    sipVal = &sipCpp->variant;

    return sipConvertFromType(sipVal,sipType_QVariant, NULL);
}


extern "C" {static int varset_QStyleHintReturnVariant_variant(void *, PyObject *, PyObject *);}
static int varset_QStyleHintReturnVariant_variant(void *sipSelf, PyObject *sipPy, PyObject *)
{
    QVariant *sipVal;
    QStyleHintReturnVariant *sipCpp = reinterpret_cast<QStyleHintReturnVariant *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast<QVariant *>(sipForceConvertToType(sipPy,sipType_QVariant,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->variant = *sipVal;

    sipReleaseType(sipVal, sipType_QVariant, sipValState);

    return 0;
}

sipVariableDef variables_QStyleHintReturnVariant[] = {
    {sipName_variant, varget_QStyleHintReturnVariant_variant, varset_QStyleHintReturnVariant_variant, 0},
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QStyleHintReturnVariant = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QStyleHintReturnVariant,
        {0}
    },
    {
        sipNameNr_QStyleHintReturnVariant,
        {0, 0, 1},
        0, 0,
        2, enummembers_QStyleHintReturnVariant,
        1, variables_QStyleHintReturnVariant,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QStyleHintReturnVariant,
    0,
    init_QStyleHintReturnVariant,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QStyleHintReturnVariant,
    assign_QStyleHintReturnVariant,
    array_QStyleHintReturnVariant,
    copy_QStyleHintReturnVariant,
    release_QStyleHintReturnVariant,
    cast_QStyleHintReturnVariant,
    0,
    0,
    0
},
    0,
    0,
    0
};

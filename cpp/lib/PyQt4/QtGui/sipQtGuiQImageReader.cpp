/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:24 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 37 "sip/QtGui/qimagereader.sip"
#include <qimagereader.h>
#line 39 "sipQtGuiQImageReader.cpp"

#line 41 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 43 "sipQtGuiQImageReader.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 46 "sipQtGuiQImageReader.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 49 "sipQtGuiQImageReader.cpp"
#line 37 "sip/QtGui/qimageiohandler.sip"
#include <qimageiohandler.h>
#line 52 "sipQtGuiQImageReader.cpp"
#line 41 "sip/QtGui/qcolor.sip"
#include <qcolor.h>
#line 55 "sipQtGuiQImageReader.cpp"
#line 41 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 58 "sipQtGuiQImageReader.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 61 "sipQtGuiQImageReader.cpp"
#line 41 "sip/QtGui/qimage.sip"
#include <qimage.h>
#line 64 "sipQtGuiQImageReader.cpp"
#line 41 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 67 "sipQtGuiQImageReader.cpp"
#line 41 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 70 "sipQtGuiQImageReader.cpp"


extern "C" {static PyObject *meth_QImageReader_setFormat(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QByteArray * a0;
        int a0State = 0;
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QImageReader,&sipCpp,sipType_QByteArray,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFormat(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_setFormat);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_format(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_format(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageReader,&sipCpp))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->format());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_format);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QIODevice * a0;
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QImageReader,&sipCpp,sipType_QIODevice,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDevice(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_setDevice);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_device(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_device(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageReader,&sipCpp))
        {
            QIODevice *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->device();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_device);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_setFileName(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QImageReader,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFileName(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_setFileName);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_fileName(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageReader,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->fileName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_fileName);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_size(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_size(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageReader,&sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->size());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_size);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_setClipRect(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setClipRect(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QRect * a0;
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QImageReader,&sipCpp,sipType_QRect,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setClipRect(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_setClipRect);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_clipRect(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_clipRect(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageReader,&sipCpp))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->clipRect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_clipRect);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_setScaledSize(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setScaledSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QSize * a0;
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QImageReader,&sipCpp,sipType_QSize,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setScaledSize(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_setScaledSize);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_scaledSize(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_scaledSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageReader,&sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->scaledSize());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_scaledSize);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_setScaledClipRect(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setScaledClipRect(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QRect * a0;
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QImageReader,&sipCpp,sipType_QRect,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setScaledClipRect(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_setScaledClipRect);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_scaledClipRect(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_scaledClipRect(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageReader,&sipCpp))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->scaledClipRect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_scaledClipRect);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_canRead(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_canRead(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageReader,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->canRead();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_canRead);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_read(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_read(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageReader,&sipCpp))
        {
            QImage *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QImage(sipCpp->read());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QImage,NULL);
        }
    }

    {
        QImage * a0;
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QImageReader,&sipCpp,sipType_QImage,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->read(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_read);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_jumpToNextImage(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_jumpToNextImage(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageReader,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->jumpToNextImage();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_jumpToNextImage);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_jumpToImage(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_jumpToImage(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QImageReader,&sipCpp,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->jumpToImage(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_jumpToImage);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_loopCount(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_loopCount(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageReader,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->loopCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_loopCount);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_imageCount(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_imageCount(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageReader,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->imageCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_imageCount);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_nextImageDelay(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_nextImageDelay(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageReader,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->nextImageDelay();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_nextImageDelay);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_currentImageNumber(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_currentImageNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageReader,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentImageNumber();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_currentImageNumber);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_currentImageRect(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_currentImageRect(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageReader,&sipCpp))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->currentImageRect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_currentImageRect);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_error(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_error(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageReader,&sipCpp))
        {
            QImageReader::ImageReaderError sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->error();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QImageReader_ImageReaderError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_error);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_errorString(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageReader,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->errorString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_errorString);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_imageFormat(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_imageFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1",sipType_QString,&a0,&a0State))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(QImageReader::imageFormat(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    {
        QIODevice * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8",sipType_QIODevice,&a0))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(QImageReader::imageFormat(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    {
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageReader,&sipCpp))
        {
            QImage::Format sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->imageFormat();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QImage_Format);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_imageFormat);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_supportedImageFormats(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_supportedImageFormats(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QList<QByteArray> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QByteArray>(QImageReader::supportedImageFormats());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_supportedImageFormats);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_textKeys(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_textKeys(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageReader,&sipCpp))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->textKeys());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_textKeys);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_text(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_text(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QImageReader,&sipCpp,sipType_QString,&a0,&a0State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->text(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_text);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_setBackgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setBackgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QColor * a0;
        int a0State = 0;
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QImageReader,&sipCpp,sipType_QColor,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBackgroundColor(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QColor *>(a0),sipType_QColor,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_setBackgroundColor);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_backgroundColor(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_backgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageReader,&sipCpp))
        {
            QColor *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QColor(sipCpp->backgroundColor());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QColor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_backgroundColor);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_supportsAnimation(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_supportsAnimation(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageReader,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->supportsAnimation();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_supportsAnimation);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_setQuality(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setQuality(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QImageReader,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setQuality(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_setQuality);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_quality(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_quality(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageReader,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->quality();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_quality);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_supportsOption(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_supportsOption(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageIOHandler::ImageOption a0;
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QImageReader,&sipCpp,sipType_QImageIOHandler_ImageOption,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->supportsOption(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_supportsOption);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_setAutoDetectImageFormat(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_setAutoDetectImageFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QImageReader,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoDetectImageFormat(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_setAutoDetectImageFormat);

    return NULL;
}


extern "C" {static PyObject *meth_QImageReader_autoDetectImageFormat(PyObject *, PyObject *);}
static PyObject *meth_QImageReader_autoDetectImageFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QImageReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QImageReader,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoDetectImageFormat();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QImageReader,sipName_autoDetectImageFormat);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QImageReader(void *, const sipTypeDef *);}
static void *cast_QImageReader(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QImageReader)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QImageReader(void *, int);}
static void release_QImageReader(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QImageReader *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QImageReader(sipSimpleWrapper *);}
static void dealloc_QImageReader(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QImageReader(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QImageReader(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QImageReader(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QImageReader *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QImageReader();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        QIODevice * a0;
        const QByteArray& a1def = QByteArray();
        const QByteArray * a1 = &a1def;
        int a1State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J8|J1",sipType_QIODevice,&a0,sipType_QByteArray,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QImageReader(a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);
        }
    }

    if (!sipCpp)
    {
        const QString * a0;
        int a0State = 0;
        const QByteArray& a1def = QByteArray();
        const QByteArray * a1 = &a1def;
        int a1State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1|J1",sipType_QString,&a0,&a0State,sipType_QByteArray,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QImageReader(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);
        }
    }

    return sipCpp;
}


static PyMethodDef methods_QImageReader[] = {
    {SIP_MLNAME_CAST(sipName_autoDetectImageFormat), meth_QImageReader_autoDetectImageFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_backgroundColor), meth_QImageReader_backgroundColor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_canRead), meth_QImageReader_canRead, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clipRect), meth_QImageReader_clipRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentImageNumber), meth_QImageReader_currentImageNumber, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentImageRect), meth_QImageReader_currentImageRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_device), meth_QImageReader_device, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_error), meth_QImageReader_error, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QImageReader_errorString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QImageReader_fileName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_format), meth_QImageReader_format, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_imageCount), meth_QImageReader_imageCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_imageFormat), meth_QImageReader_imageFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_jumpToImage), meth_QImageReader_jumpToImage, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_jumpToNextImage), meth_QImageReader_jumpToNextImage, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_loopCount), meth_QImageReader_loopCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_nextImageDelay), meth_QImageReader_nextImageDelay, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_quality), meth_QImageReader_quality, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_read), meth_QImageReader_read, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scaledClipRect), meth_QImageReader_scaledClipRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scaledSize), meth_QImageReader_scaledSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAutoDetectImageFormat), meth_QImageReader_setAutoDetectImageFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBackgroundColor), meth_QImageReader_setBackgroundColor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setClipRect), meth_QImageReader_setClipRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDevice), meth_QImageReader_setDevice, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFileName), meth_QImageReader_setFileName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFormat), meth_QImageReader_setFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setQuality), meth_QImageReader_setQuality, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setScaledClipRect), meth_QImageReader_setScaledClipRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setScaledSize), meth_QImageReader_setScaledSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_size), meth_QImageReader_size, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_supportedImageFormats), meth_QImageReader_supportedImageFormats, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_supportsAnimation), meth_QImageReader_supportsAnimation, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_supportsOption), meth_QImageReader_supportsOption, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_text), meth_QImageReader_text, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_textKeys), meth_QImageReader_textKeys, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QImageReader[] = {
    {sipName_DeviceError, QImageReader::DeviceError, 213},
    {sipName_FileNotFoundError, QImageReader::FileNotFoundError, 213},
    {sipName_InvalidDataError, QImageReader::InvalidDataError, 213},
    {sipName_UnknownError, QImageReader::UnknownError, 213},
    {sipName_UnsupportedFormatError, QImageReader::UnsupportedFormatError, 213},
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QImageReader = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QImageReader,
        {0}
    },
    {
        sipNameNr_QImageReader,
        {0, 0, 1},
        36, methods_QImageReader,
        5, enummembers_QImageReader,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QImageReader,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QImageReader,
    0,
    0,
    0,
    release_QImageReader,
    cast_QImageReader,
    0,
    0,
    0
},
    0,
    0,
    0
};

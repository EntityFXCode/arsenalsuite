/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:24 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtGui.h"

#line 37 "sip/QtGui/qitemdelegate.sip"
#include <qitemdelegate.h>
#line 39 "sipQtGuiQItemDelegate.cpp"

#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtGuiQItemDelegate.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 46 "sipQtGuiQItemDelegate.cpp"
#line 128 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 49 "sipQtGuiQItemDelegate.cpp"
#line 831 "sip/QtGui/qstyleoption.sip"
#include <qstyleoption.h>
#line 52 "sipQtGuiQItemDelegate.cpp"
#line 37 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 55 "sipQtGuiQItemDelegate.cpp"
#line 41 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 58 "sipQtGuiQItemDelegate.cpp"
#line 41 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 61 "sipQtGuiQItemDelegate.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 64 "sipQtGuiQItemDelegate.cpp"
#line 41 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 67 "sipQtGuiQItemDelegate.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 70 "sipQtGuiQItemDelegate.cpp"
#line 50 "sip/QtGui/qitemeditorfactory.sip"
#include <qitemeditorfactory.h>
#line 73 "sipQtGuiQItemDelegate.cpp"
#line 41 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 76 "sipQtGuiQItemDelegate.cpp"
#line 41 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 79 "sipQtGuiQItemDelegate.cpp"
#line 37 "sip/QtGui/qabstractitemdelegate.sip"
#include <qabstractitemdelegate.h>
#line 82 "sipQtGuiQItemDelegate.cpp"
#line 569 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 85 "sipQtGuiQItemDelegate.cpp"
#line 41 "sip/QtGui/qabstractitemview.sip"
#include <qabstractitemview.h>
#line 88 "sipQtGuiQItemDelegate.cpp"
#line 37 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 91 "sipQtGuiQItemDelegate.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 94 "sipQtGuiQItemDelegate.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 97 "sipQtGuiQItemDelegate.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 100 "sipQtGuiQItemDelegate.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 103 "sipQtGuiQItemDelegate.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 106 "sipQtGuiQItemDelegate.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 109 "sipQtGuiQItemDelegate.cpp"
#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 112 "sipQtGuiQItemDelegate.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 115 "sipQtGuiQItemDelegate.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 118 "sipQtGuiQItemDelegate.cpp"


class sipQItemDelegate : public QItemDelegate
{
public:
    sipQItemDelegate(QObject *);
    virtual ~sipQItemDelegate();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    void sipProtect_drawBackground(QPainter *,const QStyleOptionViewItem&,const QModelIndex&) const;
    void sipProtectVirt_drawCheck(bool,QPainter *,const QStyleOptionViewItem&,const QRect&,Qt::CheckState) const;
    void sipProtectVirt_drawDecoration(bool,QPainter *,const QStyleOptionViewItem&,const QRect&,const QPixmap&) const;
    void sipProtectVirt_drawDisplay(bool,QPainter *,const QStyleOptionViewItem&,const QRect&,const QString&) const;
    void sipProtectVirt_drawFocus(bool,QPainter *,const QStyleOptionViewItem&,const QRect&) const;
    bool sipProtectVirt_eventFilter(bool,QObject *,QEvent *);
    bool sipProtectVirt_editorEvent(bool,QEvent *,QAbstractItemModel *,const QStyleOptionViewItem&,const QModelIndex&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void paint(QPainter *,const QStyleOptionViewItem&,const QModelIndex&) const;
    QSize sizeHint(const QStyleOptionViewItem&,const QModelIndex&) const;
    QWidget * createEditor(QWidget *,const QStyleOptionViewItem&,const QModelIndex&) const;
    void setEditorData(QWidget *,const QModelIndex&) const;
    void setModelData(QWidget *,QAbstractItemModel *,const QModelIndex&) const;
    void updateEditorGeometry(QWidget *,const QStyleOptionViewItem&,const QModelIndex&) const;
    void drawCheck(QPainter *,const QStyleOptionViewItem&,const QRect&,Qt::CheckState) const;
    void drawDecoration(QPainter *,const QStyleOptionViewItem&,const QRect&,const QPixmap&) const;
    void drawDisplay(QPainter *,const QStyleOptionViewItem&,const QRect&,const QString&) const;
    void drawFocus(QPainter *,const QStyleOptionViewItem&,const QRect&) const;
    bool eventFilter(QObject *,QEvent *);
    bool editorEvent(QEvent *,QAbstractItemModel *,const QStyleOptionViewItem&,const QModelIndex&);
    bool event(QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQItemDelegate(const sipQItemDelegate &);
    sipQItemDelegate &operator = (const sipQItemDelegate &);

    char sipPyMethods[18];
};

sipQItemDelegate::sipQItemDelegate(QObject *a0): QItemDelegate(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQItemDelegate::~sipQItemDelegate()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQItemDelegate::metaObject() const
{
    return sip_QtGui_qt_metaobject(sipPySelf,sipType_QItemDelegate);
}

int sipQItemDelegate::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QItemDelegate::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtGui_qt_metacall(sipPySelf,sipType_QItemDelegate,_c,_id,_a);

    return _id;
}

void *sipQItemDelegate::qt_metacast(const char *_clname)
{
    return (sip_QtGui_qt_metacast && sip_QtGui_qt_metacast(sipPySelf,sipType_QItemDelegate,_clname)) ? this : QItemDelegate::qt_metacast(_clname);
}

void sipQItemDelegate::paint(QPainter *a0,const QStyleOptionViewItem& a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_paint);

    if (!meth)
    {
        QItemDelegate::paint(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_49(sip_gilstate_t,PyObject *,bool*,QPainter *,const QStyleOptionViewItem&,const QModelIndex&);

    sipVH_QtGui_49(sipGILState,meth,0,a0,a1,a2);
}

QSize sipQItemDelegate::sizeHint(const QStyleOptionViewItem& a0,const QModelIndex& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_sizeHint);

    if (!meth)
        return QItemDelegate::sizeHint(a0,a1);

    extern QSize sipVH_QtGui_81(sip_gilstate_t,PyObject *,bool*,const QStyleOptionViewItem&,const QModelIndex&);

    return sipVH_QtGui_81(sipGILState,meth,0,a0,a1);
}

QWidget * sipQItemDelegate::createEditor(QWidget *a0,const QStyleOptionViewItem& a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_createEditor);

    if (!meth)
        return QItemDelegate::createEditor(a0,a1,a2);

    extern QWidget * sipVH_QtGui_80(sip_gilstate_t,PyObject *,bool*,QWidget *,const QStyleOptionViewItem&,const QModelIndex&);

    return sipVH_QtGui_80(sipGILState,meth,0,a0,a1,a2);
}

void sipQItemDelegate::setEditorData(QWidget *a0,const QModelIndex& a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_setEditorData);

    if (!meth)
    {
        QItemDelegate::setEditorData(a0,a1);
        return;
    }

    extern void sipVH_QtGui_79(sip_gilstate_t,PyObject *,bool*,QWidget *,const QModelIndex&);

    sipVH_QtGui_79(sipGILState,meth,0,a0,a1);
}

void sipQItemDelegate::setModelData(QWidget *a0,QAbstractItemModel *a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_setModelData);

    if (!meth)
    {
        QItemDelegate::setModelData(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_78(sip_gilstate_t,PyObject *,bool*,QWidget *,QAbstractItemModel *,const QModelIndex&);

    sipVH_QtGui_78(sipGILState,meth,0,a0,a1,a2);
}

void sipQItemDelegate::updateEditorGeometry(QWidget *a0,const QStyleOptionViewItem& a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_updateEditorGeometry);

    if (!meth)
    {
        QItemDelegate::updateEditorGeometry(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_77(sip_gilstate_t,PyObject *,bool*,QWidget *,const QStyleOptionViewItem&,const QModelIndex&);

    sipVH_QtGui_77(sipGILState,meth,0,a0,a1,a2);
}

void sipQItemDelegate::drawCheck(QPainter *a0,const QStyleOptionViewItem& a1,const QRect& a2,Qt::CheckState a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_drawCheck);

    if (!meth)
    {
        QItemDelegate::drawCheck(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtGui_163(sip_gilstate_t,PyObject *,bool*,QPainter *,const QStyleOptionViewItem&,const QRect&,Qt::CheckState);

    sipVH_QtGui_163(sipGILState,meth,0,a0,a1,a2,a3);
}

void sipQItemDelegate::drawDecoration(QPainter *a0,const QStyleOptionViewItem& a1,const QRect& a2,const QPixmap& a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_drawDecoration);

    if (!meth)
    {
        QItemDelegate::drawDecoration(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtGui_162(sip_gilstate_t,PyObject *,bool*,QPainter *,const QStyleOptionViewItem&,const QRect&,const QPixmap&);

    sipVH_QtGui_162(sipGILState,meth,0,a0,a1,a2,a3);
}

void sipQItemDelegate::drawDisplay(QPainter *a0,const QStyleOptionViewItem& a1,const QRect& a2,const QString& a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_drawDisplay);

    if (!meth)
    {
        QItemDelegate::drawDisplay(a0,a1,a2,a3);
        return;
    }

    extern void sipVH_QtGui_161(sip_gilstate_t,PyObject *,bool*,QPainter *,const QStyleOptionViewItem&,const QRect&,const QString&);

    sipVH_QtGui_161(sipGILState,meth,0,a0,a1,a2,a3);
}

void sipQItemDelegate::drawFocus(QPainter *a0,const QStyleOptionViewItem& a1,const QRect& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_drawFocus);

    if (!meth)
    {
        QItemDelegate::drawFocus(a0,a1,a2);
        return;
    }

    extern void sipVH_QtGui_160(sip_gilstate_t,PyObject *,bool*,QPainter *,const QStyleOptionViewItem&,const QRect&);

    sipVH_QtGui_160(sipGILState,meth,0,a0,a1,a2);
}

bool sipQItemDelegate::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QItemDelegate::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t,PyObject *,bool*,QObject *,QEvent *);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtGui_QtCore->em_virthandlers[20]))(sipGILState,meth,0,a0,a1);
}

bool sipQItemDelegate::editorEvent(QEvent *a0,QAbstractItemModel *a1,const QStyleOptionViewItem& a2,const QModelIndex& a3)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_editorEvent);

    if (!meth)
        return QItemDelegate::editorEvent(a0,a1,a2,a3);

    extern bool sipVH_QtGui_74(sip_gilstate_t,PyObject *,bool*,QEvent *,QAbstractItemModel *,const QStyleOptionViewItem&,const QModelIndex&);

    return sipVH_QtGui_74(sipGILState,meth,0,a0,a1,a2,a3);
}

bool sipQItemDelegate::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_12)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return ((sipVH_QtCore_12)(sipModuleAPI_QtGui_QtCore->em_virthandlers[12]))(sipGILState,meth,0,a0);
}

void sipQItemDelegate::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_3)(sip_gilstate_t,PyObject *,bool*,QTimerEvent *);

    ((sipVH_QtCore_3)(sipModuleAPI_QtGui_QtCore->em_virthandlers[3]))(sipGILState,meth,0,a0);
}

void sipQItemDelegate::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_19)(sip_gilstate_t,PyObject *,bool*,QChildEvent *);

    ((sipVH_QtCore_19)(sipModuleAPI_QtGui_QtCore->em_virthandlers[19]))(sipGILState,meth,0,a0);
}

void sipQItemDelegate::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtGui_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQItemDelegate::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

void sipQItemDelegate::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtGui_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

int sipQItemDelegate::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQItemDelegate::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQItemDelegate::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQItemDelegate::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQItemDelegate::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQItemDelegate::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

void sipQItemDelegate::sipProtect_drawBackground(QPainter *a0,const QStyleOptionViewItem& a1,const QModelIndex& a2) const
{
    QItemDelegate::drawBackground(a0,a1,a2);
}

void sipQItemDelegate::sipProtectVirt_drawCheck(bool sipSelfWasArg,QPainter *a0,const QStyleOptionViewItem& a1,const QRect& a2,Qt::CheckState a3) const
{
    (sipSelfWasArg ? QItemDelegate::drawCheck(a0,a1,a2,a3) : drawCheck(a0,a1,a2,a3));
}

void sipQItemDelegate::sipProtectVirt_drawDecoration(bool sipSelfWasArg,QPainter *a0,const QStyleOptionViewItem& a1,const QRect& a2,const QPixmap& a3) const
{
    (sipSelfWasArg ? QItemDelegate::drawDecoration(a0,a1,a2,a3) : drawDecoration(a0,a1,a2,a3));
}

void sipQItemDelegate::sipProtectVirt_drawDisplay(bool sipSelfWasArg,QPainter *a0,const QStyleOptionViewItem& a1,const QRect& a2,const QString& a3) const
{
    (sipSelfWasArg ? QItemDelegate::drawDisplay(a0,a1,a2,a3) : drawDisplay(a0,a1,a2,a3));
}

void sipQItemDelegate::sipProtectVirt_drawFocus(bool sipSelfWasArg,QPainter *a0,const QStyleOptionViewItem& a1,const QRect& a2) const
{
    (sipSelfWasArg ? QItemDelegate::drawFocus(a0,a1,a2) : drawFocus(a0,a1,a2));
}

bool sipQItemDelegate::sipProtectVirt_eventFilter(bool sipSelfWasArg,QObject *a0,QEvent *a1)
{
    return (sipSelfWasArg ? QItemDelegate::eventFilter(a0,a1) : eventFilter(a0,a1));
}

bool sipQItemDelegate::sipProtectVirt_editorEvent(bool sipSelfWasArg,QEvent *a0,QAbstractItemModel *a1,const QStyleOptionViewItem& a2,const QModelIndex& a3)
{
    return (sipSelfWasArg ? QItemDelegate::editorEvent(a0,a1,a2,a3) : editorEvent(a0,a1,a2,a3));
}


extern "C" {static PyObject *meth_QItemDelegate_receivers(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        char * a0;
        sipQItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QItemDelegate,&sipCpp,&a0))
        {
            int sipRes = 0;

#line 480 "sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
#line 613 "sipQtGuiQItemDelegate.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemDelegate,sipName_receivers);

    return NULL;
}


extern "C" {static PyObject *meth_QItemDelegate_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QItemDelegate,&sipCpp,sipType_QTimerEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemDelegate,sipName_timerEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QItemDelegate_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QItemDelegate,&sipCpp,sipType_QChildEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemDelegate,sipName_childEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QItemDelegate_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QItemDelegate,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemDelegate,sipName_customEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QItemDelegate_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QItemDelegate,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemDelegate,sipName_connectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QItemDelegate_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QItemDelegate,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemDelegate,sipName_disconnectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QItemDelegate_paint(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_paint(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter * a0;
        const QStyleOptionViewItem * a1;
        const QModelIndex * a2;
        QItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8J9J9",&sipSelf,sipType_QItemDelegate,&sipCpp,sipType_QPainter,&a0,sipType_QStyleOptionViewItem,&a1,sipType_QModelIndex,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QItemDelegate::paint(a0,*a1,*a2) : sipCpp->paint(a0,*a1,*a2));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemDelegate,sipName_paint);

    return NULL;
}


extern "C" {static PyObject *meth_QItemDelegate_sizeHint(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_sizeHint(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QStyleOptionViewItem * a0;
        const QModelIndex * a1;
        QItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9J9",&sipSelf,sipType_QItemDelegate,&sipCpp,sipType_QStyleOptionViewItem,&a0,sipType_QModelIndex,&a1))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QItemDelegate::sizeHint(*a0,*a1) : sipCpp->sizeHint(*a0,*a1)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemDelegate,sipName_sizeHint);

    return NULL;
}


extern "C" {static PyObject *meth_QItemDelegate_createEditor(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_createEditor(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget * a0;
        const QStyleOptionViewItem * a1;
        const QModelIndex * a2;
        sipWrapper *sipOwner = 0;
        QItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJHJ9J9",&sipSelf,sipType_QItemDelegate,&sipCpp,sipType_QWidget,&a0,&sipOwner,sipType_QStyleOptionViewItem,&a1,sipType_QModelIndex,&a2))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QItemDelegate::createEditor(a0,*a1,*a2) : sipCpp->createEditor(a0,*a1,*a2));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QWidget,(PyObject *)sipOwner);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemDelegate,sipName_createEditor);

    return NULL;
}


extern "C" {static PyObject *meth_QItemDelegate_setEditorData(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_setEditorData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget * a0;
        const QModelIndex * a1;
        QItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8J9",&sipSelf,sipType_QItemDelegate,&sipCpp,sipType_QWidget,&a0,sipType_QModelIndex,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QItemDelegate::setEditorData(a0,*a1) : sipCpp->setEditorData(a0,*a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemDelegate,sipName_setEditorData);

    return NULL;
}


extern "C" {static PyObject *meth_QItemDelegate_setModelData(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_setModelData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget * a0;
        QAbstractItemModel * a1;
        PyObject *a1Keep;
        const QModelIndex * a2;
        QItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8@J8J9",&sipSelf,sipType_QItemDelegate,&sipCpp,sipType_QWidget,&a0,&a1Keep,sipType_QAbstractItemModel,&a1,sipType_QModelIndex,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QItemDelegate::setModelData(a0,a1,*a2) : sipCpp->setModelData(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, 27, a1Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemDelegate,sipName_setModelData);

    return NULL;
}


extern "C" {static PyObject *meth_QItemDelegate_updateEditorGeometry(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_updateEditorGeometry(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget * a0;
        const QStyleOptionViewItem * a1;
        const QModelIndex * a2;
        QItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8J9J9",&sipSelf,sipType_QItemDelegate,&sipCpp,sipType_QWidget,&a0,sipType_QStyleOptionViewItem,&a1,sipType_QModelIndex,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QItemDelegate::updateEditorGeometry(a0,*a1,*a2) : sipCpp->updateEditorGeometry(a0,*a1,*a2));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemDelegate,sipName_updateEditorGeometry);

    return NULL;
}


extern "C" {static PyObject *meth_QItemDelegate_itemEditorFactory(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_itemEditorFactory(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QItemDelegate,&sipCpp))
        {
            QItemEditorFactory *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->itemEditorFactory();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QItemEditorFactory,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemDelegate,sipName_itemEditorFactory);

    return NULL;
}


extern "C" {static PyObject *meth_QItemDelegate_setItemEditorFactory(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_setItemEditorFactory(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QItemEditorFactory * a0;
        PyObject *a0Keep;
        QItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B@J8",&sipSelf,sipType_QItemDelegate,&sipCpp,&a0Keep,sipType_QItemEditorFactory,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setItemEditorFactory(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, 28, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemDelegate,sipName_setItemEditorFactory);

    return NULL;
}


extern "C" {static PyObject *meth_QItemDelegate_hasClipping(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_hasClipping(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QItemDelegate,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasClipping();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemDelegate,sipName_hasClipping);

    return NULL;
}


extern "C" {static PyObject *meth_QItemDelegate_setClipping(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_setClipping(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QItemDelegate,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setClipping(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemDelegate,sipName_setClipping);

    return NULL;
}


extern "C" {static PyObject *meth_QItemDelegate_drawBackground(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_drawBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPainter * a0;
        const QStyleOptionViewItem * a1;
        const QModelIndex * a2;
        sipQItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8J9J9",&sipSelf,sipType_QItemDelegate,&sipCpp,sipType_QPainter,&a0,sipType_QStyleOptionViewItem,&a1,sipType_QModelIndex,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_drawBackground(a0,*a1,*a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemDelegate,sipName_drawBackground);

    return NULL;
}


extern "C" {static PyObject *meth_QItemDelegate_drawCheck(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_drawCheck(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter * a0;
        const QStyleOptionViewItem * a1;
        const QRect * a2;
        Qt::CheckState a3;
        sipQItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8J9J9E",&sipSelf,sipType_QItemDelegate,&sipCpp,sipType_QPainter,&a0,sipType_QStyleOptionViewItem,&a1,sipType_QRect,&a2,sipType_Qt_CheckState,&a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_drawCheck(sipSelfWasArg,a0,*a1,*a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemDelegate,sipName_drawCheck);

    return NULL;
}


extern "C" {static PyObject *meth_QItemDelegate_drawDecoration(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_drawDecoration(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter * a0;
        const QStyleOptionViewItem * a1;
        const QRect * a2;
        const QPixmap * a3;
        sipQItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8J9J9J9",&sipSelf,sipType_QItemDelegate,&sipCpp,sipType_QPainter,&a0,sipType_QStyleOptionViewItem,&a1,sipType_QRect,&a2,sipType_QPixmap,&a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_drawDecoration(sipSelfWasArg,a0,*a1,*a2,*a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemDelegate,sipName_drawDecoration);

    return NULL;
}


extern "C" {static PyObject *meth_QItemDelegate_drawDisplay(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_drawDisplay(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter * a0;
        const QStyleOptionViewItem * a1;
        const QRect * a2;
        const QString * a3;
        int a3State = 0;
        sipQItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8J9J9J1",&sipSelf,sipType_QItemDelegate,&sipCpp,sipType_QPainter,&a0,sipType_QStyleOptionViewItem,&a1,sipType_QRect,&a2,sipType_QString,&a3,&a3State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_drawDisplay(sipSelfWasArg,a0,*a1,*a2,*a3);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemDelegate,sipName_drawDisplay);

    return NULL;
}


extern "C" {static PyObject *meth_QItemDelegate_drawFocus(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_drawFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPainter * a0;
        const QStyleOptionViewItem * a1;
        const QRect * a2;
        sipQItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8J9J9",&sipSelf,sipType_QItemDelegate,&sipCpp,sipType_QPainter,&a0,sipType_QStyleOptionViewItem,&a1,sipType_QRect,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_drawFocus(sipSelfWasArg,a0,*a1,*a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemDelegate,sipName_drawFocus);

    return NULL;
}


extern "C" {static PyObject *meth_QItemDelegate_eventFilter(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_eventFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject * a0;
        QEvent * a1;
        sipQItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8J8",&sipSelf,sipType_QItemDelegate,&sipCpp,sipType_QObject,&a0,sipType_QEvent,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_eventFilter(sipSelfWasArg,a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemDelegate,sipName_eventFilter);

    return NULL;
}


extern "C" {static PyObject *meth_QItemDelegate_editorEvent(PyObject *, PyObject *);}
static PyObject *meth_QItemDelegate_editorEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        QAbstractItemModel * a1;
        const QStyleOptionViewItem * a2;
        const QModelIndex * a3;
        sipQItemDelegate *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8J8J9J9",&sipSelf,sipType_QItemDelegate,&sipCpp,sipType_QEvent,&a0,sipType_QAbstractItemModel,&a1,sipType_QStyleOptionViewItem,&a2,sipType_QModelIndex,&a3))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_editorEvent(sipSelfWasArg,a0,a1,*a2,*a3);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QItemDelegate,sipName_editorEvent);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QItemDelegate(void *, const sipTypeDef *);}
static void *cast_QItemDelegate(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QItemDelegate)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractItemDelegate)->ctd_cast((QAbstractItemDelegate *)(QItemDelegate *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QItemDelegate(void *, int);}
static void release_QItemDelegate(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQItemDelegate *>(sipCppV);
    else
        delete reinterpret_cast<QItemDelegate *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QItemDelegate(sipSimpleWrapper *);}
static void dealloc_QItemDelegate(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQItemDelegate *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QItemDelegate(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QItemDelegate(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QItemDelegate(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **sipOwner, int *sipArgsParsed)
{
    sipQItemDelegate *sipCpp = 0;

    if (!sipCpp)
    {
        QObject * a0 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"|JH",sipType_QObject,&a0,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQItemDelegate(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QItemDelegate[] = {{3, 255, 1}};


static PyMethodDef methods_QItemDelegate[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QItemDelegate_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QItemDelegate_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createEditor), meth_QItemDelegate_createEditor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QItemDelegate_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QItemDelegate_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawBackground), meth_QItemDelegate_drawBackground, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawCheck), meth_QItemDelegate_drawCheck, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawDecoration), meth_QItemDelegate_drawDecoration, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawDisplay), meth_QItemDelegate_drawDisplay, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_drawFocus), meth_QItemDelegate_drawFocus, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_editorEvent), meth_QItemDelegate_editorEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_eventFilter), meth_QItemDelegate_eventFilter, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasClipping), meth_QItemDelegate_hasClipping, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_itemEditorFactory), meth_QItemDelegate_itemEditorFactory, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paint), meth_QItemDelegate_paint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QItemDelegate_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setClipping), meth_QItemDelegate_setClipping, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setEditorData), meth_QItemDelegate_setEditorData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setItemEditorFactory), meth_QItemDelegate_setItemEditorFactory, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setModelData), meth_QItemDelegate_setModelData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sizeHint), meth_QItemDelegate_sizeHint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QItemDelegate_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateEditorGeometry), meth_QItemDelegate_updateEditorGeometry, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtGui_QItemDelegate = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QItemDelegate,
        {0}
    },
    {
        sipNameNr_QItemDelegate,
        {0, 0, 1},
        23, methods_QItemDelegate,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QItemDelegate,
    0,
    init_QItemDelegate,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QItemDelegate,
    0,
    0,
    0,
    release_QItemDelegate,
    cast_QItemDelegate,
    0,
    0,
    0
},
    &QItemDelegate::staticMetaObject,
    0,
    0
};

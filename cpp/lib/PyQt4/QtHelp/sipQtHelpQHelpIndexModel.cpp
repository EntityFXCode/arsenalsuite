/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:26 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtHelp.h"

#line 39 "sip/QtHelp/qhelpindexwidget.sip"
#include <qhelpindexwidget.h>
#line 39 "sipQtHelpQHelpIndexModel.cpp"

#line 38 "sip/QtCore/qmap.sip"
#include <qmap.h>
#line 43 "sipQtHelpQHelpIndexModel.cpp"
#line 89 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 46 "sipQtHelpQHelpIndexModel.cpp"
#line 41 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 49 "sipQtHelpQHelpIndexModel.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 52 "sipQtHelpQHelpIndexModel.cpp"
#line 37 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 55 "sipQtHelpQHelpIndexModel.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 58 "sipQtHelpQHelpIndexModel.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 61 "sipQtHelpQHelpIndexModel.cpp"
#line 41 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 64 "sipQtHelpQHelpIndexModel.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 67 "sipQtHelpQHelpIndexModel.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 70 "sipQtHelpQHelpIndexModel.cpp"
#line 37 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 73 "sipQtHelpQHelpIndexModel.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 76 "sipQtHelpQHelpIndexModel.cpp"
#line 37 "sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 79 "sipQtHelpQHelpIndexModel.cpp"
#line 41 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 82 "sipQtHelpQHelpIndexModel.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 85 "sipQtHelpQHelpIndexModel.cpp"
#line 149 "sip/QtCore/qmap.sip"
#include <qmap.h>
#line 88 "sipQtHelpQHelpIndexModel.cpp"
#line 131 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 91 "sipQtHelpQHelpIndexModel.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 94 "sipQtHelpQHelpIndexModel.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 97 "sipQtHelpQHelpIndexModel.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 100 "sipQtHelpQHelpIndexModel.cpp"
#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 103 "sipQtHelpQHelpIndexModel.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 106 "sipQtHelpQHelpIndexModel.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 109 "sipQtHelpQHelpIndexModel.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 112 "sipQtHelpQHelpIndexModel.cpp"
#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 115 "sipQtHelpQHelpIndexModel.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 118 "sipQtHelpQHelpIndexModel.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 121 "sipQtHelpQHelpIndexModel.cpp"


extern "C" {static PyObject *meth_QHelpIndexModel_createIndex(PyObject *, PyObject *);}
static PyObject *meth_QHelpIndexModel_createIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QHelpIndexModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QHelpIndexModel,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->createIndex(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpIndexModel,sipName_createIndex);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpIndexModel_filter(PyObject *, PyObject *);}
static PyObject *meth_QHelpIndexModel_filter(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        const QString& a1def = QString();
        const QString * a1 = &a1def;
        int a1State = 0;
        QHelpIndexModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|J1",&sipSelf,sipType_QHelpIndexModel,&sipCpp,sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State))
        {
            QModelIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->filter(*a0,*a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpIndexModel,sipName_filter);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpIndexModel_linksForKeyword(PyObject *, PyObject *);}
static PyObject *meth_QHelpIndexModel_linksForKeyword(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QHelpIndexModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QHelpIndexModel,&sipCpp,sipType_QString,&a0,&a0State))
        {
            QMap<QString,QUrl> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMap<QString,QUrl>(sipCpp->linksForKeyword(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QMap_0100QString_0100QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpIndexModel,sipName_linksForKeyword);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpIndexModel_isCreatingIndex(PyObject *, PyObject *);}
static PyObject *meth_QHelpIndexModel_isCreatingIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHelpIndexModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QHelpIndexModel,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isCreatingIndex();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpIndexModel,sipName_isCreatingIndex);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QHelpIndexModel(void *, const sipTypeDef *);}
static void *cast_QHelpIndexModel(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QHelpIndexModel)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QStringListModel)->ctd_cast((QStringListModel *)(QHelpIndexModel *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QHelpIndexModel(void *, int);}
static void release_QHelpIndexModel(void *,int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QHelpIndexModel[] = {{415, 1, 1}};


static PyMethodDef methods_QHelpIndexModel[] = {
    {SIP_MLNAME_CAST(sipName_createIndex), meth_QHelpIndexModel_createIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_filter), meth_QHelpIndexModel_filter, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isCreatingIndex), meth_QHelpIndexModel_isCreatingIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_linksForKeyword), meth_QHelpIndexModel_linksForKeyword, METH_VARARGS, NULL}
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QHelpIndexModel[] = {
    {"indexCreated()", 0},
    {"indexCreationStarted()", 0},
    {0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtHelp_QHelpIndexModel = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QHelpIndexModel,
        {0}
    },
    {
        sipNameNr_QHelpIndexModel,
        {0, 0, 1},
        4, methods_QHelpIndexModel,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QHelpIndexModel,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_QHelpIndexModel,
    cast_QHelpIndexModel,
    0,
    0,
    0
},
    &QHelpIndexModel::staticMetaObject,
    0,
    pyqt4_signals_QHelpIndexModel
};

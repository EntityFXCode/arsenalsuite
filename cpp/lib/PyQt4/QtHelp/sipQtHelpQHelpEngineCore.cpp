/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:27 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtHelp.h"

#line 39 "sip/QtHelp/qhelpenginecore.sip"
#include <qhelpenginecore.h>
#line 39 "sipQtHelpQHelpEngineCore.cpp"

#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 43 "sipQtHelpQHelpEngineCore.cpp"
#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 46 "sipQtHelpQHelpEngineCore.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 49 "sipQtHelpQHelpEngineCore.cpp"
#line 38 "sip/QtCore/qmap.sip"
#include <qmap.h>
#line 52 "sipQtHelpQHelpEngineCore.cpp"
#line 89 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 55 "sipQtHelpQHelpEngineCore.cpp"
#line 41 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 58 "sipQtHelpQHelpEngineCore.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 61 "sipQtHelpQHelpEngineCore.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 64 "sipQtHelpQHelpEngineCore.cpp"
#line 41 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 67 "sipQtHelpQHelpEngineCore.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 70 "sipQtHelpQHelpEngineCore.cpp"
#line 62 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 73 "sipQtHelpQHelpEngineCore.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 76 "sipQtHelpQHelpEngineCore.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 79 "sipQtHelpQHelpEngineCore.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 82 "sipQtHelpQHelpEngineCore.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 85 "sipQtHelpQHelpEngineCore.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 88 "sipQtHelpQHelpEngineCore.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 91 "sipQtHelpQHelpEngineCore.cpp"
#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 94 "sipQtHelpQHelpEngineCore.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 97 "sipQtHelpQHelpEngineCore.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 100 "sipQtHelpQHelpEngineCore.cpp"


class sipQHelpEngineCore : public QHelpEngineCore
{
public:
    sipQHelpEngineCore(const QString&,QObject *);
    virtual ~sipQHelpEngineCore();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQHelpEngineCore(const sipQHelpEngineCore &);
    sipQHelpEngineCore &operator = (const sipQHelpEngineCore &);

    char sipPyMethods[7];
};

sipQHelpEngineCore::sipQHelpEngineCore(const QString& a0,QObject *a1): QHelpEngineCore(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQHelpEngineCore::~sipQHelpEngineCore()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQHelpEngineCore::metaObject() const
{
    return sip_QtHelp_qt_metaobject(sipPySelf,sipType_QHelpEngineCore);
}

int sipQHelpEngineCore::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QHelpEngineCore::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtHelp_qt_metacall(sipPySelf,sipType_QHelpEngineCore,_c,_id,_a);

    return _id;
}

void *sipQHelpEngineCore::qt_metacast(const char *_clname)
{
    return (sip_QtHelp_qt_metacast && sip_QtHelp_qt_metacast(sipPySelf,sipType_QHelpEngineCore,_clname)) ? this : QHelpEngineCore::qt_metacast(_clname);
}

bool sipQHelpEngineCore::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_12)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return ((sipVH_QtCore_12)(sipModuleAPI_QtHelp_QtCore->em_virthandlers[12]))(sipGILState,meth,0,a0);
}

bool sipQHelpEngineCore::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t,PyObject *,bool*,QObject *,QEvent *);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtHelp_QtCore->em_virthandlers[20]))(sipGILState,meth,0,a0,a1);
}

void sipQHelpEngineCore::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_3)(sip_gilstate_t,PyObject *,bool*,QTimerEvent *);

    ((sipVH_QtCore_3)(sipModuleAPI_QtHelp_QtCore->em_virthandlers[3]))(sipGILState,meth,0,a0);
}

void sipQHelpEngineCore::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_19)(sip_gilstate_t,PyObject *,bool*,QChildEvent *);

    ((sipVH_QtCore_19)(sipModuleAPI_QtHelp_QtCore->em_virthandlers[19]))(sipGILState,meth,0,a0);
}

void sipQHelpEngineCore::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtHelp_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQHelpEngineCore::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtHelp_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

void sipQHelpEngineCore::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtHelp_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

int sipQHelpEngineCore::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQHelpEngineCore::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQHelpEngineCore::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQHelpEngineCore::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQHelpEngineCore::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQHelpEngineCore::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}


extern "C" {static PyObject *meth_QHelpEngineCore_receivers(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        char * a0;
        sipQHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QHelpEngineCore,&sipCpp,&a0))
        {
            int sipRes = 0;

#line 480 "sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
#line 353 "sipQtHelpQHelpEngineCore.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_receivers);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QHelpEngineCore,&sipCpp,sipType_QTimerEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_timerEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QHelpEngineCore,&sipCpp,sipType_QChildEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_childEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QHelpEngineCore,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_customEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QHelpEngineCore,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_connectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QHelpEngineCore,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_disconnectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_setupData(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_setupData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QHelpEngineCore,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setupData();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_setupData);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_collectionFile(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_collectionFile(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QHelpEngineCore,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->collectionFile());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_collectionFile);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_setCollectionFile(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_setCollectionFile(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QHelpEngineCore,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCollectionFile(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_setCollectionFile);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_copyCollectionFile(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_copyCollectionFile(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QHelpEngineCore,&sipCpp,sipType_QString,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->copyCollectionFile(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_copyCollectionFile);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_namespaceName(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_namespaceName(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1",sipType_QString,&a0,&a0State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QHelpEngineCore::namespaceName(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_namespaceName);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_registerDocumentation(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_registerDocumentation(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QHelpEngineCore,&sipCpp,sipType_QString,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->registerDocumentation(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_registerDocumentation);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_unregisterDocumentation(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_unregisterDocumentation(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QHelpEngineCore,&sipCpp,sipType_QString,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->unregisterDocumentation(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_unregisterDocumentation);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_documentationFileName(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_documentationFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QHelpEngineCore,&sipCpp,sipType_QString,&a0,&a0State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->documentationFileName(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_documentationFileName);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_customFilters(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_customFilters(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QHelpEngineCore,&sipCpp))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->customFilters());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_customFilters);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_removeCustomFilter(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_removeCustomFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QHelpEngineCore,&sipCpp,sipType_QString,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->removeCustomFilter(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_removeCustomFilter);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_addCustomFilter(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_addCustomFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        const QStringList * a1;
        int a1State = 0;
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1",&sipSelf,sipType_QHelpEngineCore,&sipCpp,sipType_QString,&a0,&a0State,sipType_QStringList,&a1,&a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->addCustomFilter(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QStringList *>(a1),sipType_QStringList,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_addCustomFilter);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_filterAttributes(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_filterAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QHelpEngineCore,&sipCpp))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->filterAttributes());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QHelpEngineCore,&sipCpp,sipType_QString,&a0,&a0State))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->filterAttributes(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_filterAttributes);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_currentFilter(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_currentFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QHelpEngineCore,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->currentFilter());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_currentFilter);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_setCurrentFilter(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_setCurrentFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QHelpEngineCore,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentFilter(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_setCurrentFilter);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_registeredDocumentations(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_registeredDocumentations(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QHelpEngineCore,&sipCpp))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->registeredDocumentations());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_registeredDocumentations);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_filterAttributeSets(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_filterAttributeSets(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QHelpEngineCore,&sipCpp,sipType_QString,&a0,&a0State))
        {
            QList<QStringList> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QStringList>(sipCpp->filterAttributeSets(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_filterAttributeSets);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_files(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_files(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        const QStringList * a1;
        int a1State = 0;
        const QString& a2def = QString();
        const QString * a2 = &a2def;
        int a2State = 0;
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1|J1",&sipSelf,sipType_QHelpEngineCore,&sipCpp,sipType_QString,&a0,&a0State,sipType_QStringList,&a1,&a1State,sipType_QString,&a2,&a2State))
        {
            QList<QUrl> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QUrl>(sipCpp->files(*a0,*a1,*a2));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QStringList *>(a1),sipType_QStringList,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_files);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_findFile(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_findFile(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QUrl * a0;
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QHelpEngineCore,&sipCpp,sipType_QUrl,&a0))
        {
            QUrl *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QUrl(sipCpp->findFile(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_findFile);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_fileData(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_fileData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QUrl * a0;
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QHelpEngineCore,&sipCpp,sipType_QUrl,&a0))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->fileData(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_fileData);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_linksForIdentifier(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_linksForIdentifier(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QHelpEngineCore,&sipCpp,sipType_QString,&a0,&a0State))
        {
            QMap<QString,QUrl> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMap<QString,QUrl>(sipCpp->linksForIdentifier(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QMap_0100QString_0100QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_linksForIdentifier);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_removeCustomValue(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_removeCustomValue(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QHelpEngineCore,&sipCpp,sipType_QString,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->removeCustomValue(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_removeCustomValue);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_customValue(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_customValue(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        const QVariant& a1def = QVariant();
        const QVariant * a1 = &a1def;
        int a1State = 0;
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|J1",&sipSelf,sipType_QHelpEngineCore,&sipCpp,sipType_QString,&a0,&a0State,sipType_QVariant,&a1,&a1State))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->customValue(*a0,*a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_customValue);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_setCustomValue(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_setCustomValue(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        const QVariant * a1;
        int a1State = 0;
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1",&sipSelf,sipType_QHelpEngineCore,&sipCpp,sipType_QString,&a0,&a0State,sipType_QVariant,&a1,&a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setCustomValue(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_setCustomValue);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_metaData(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_metaData(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1J1",sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(QHelpEngineCore::metaData(*a0,*a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_metaData);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_error(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_error(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QHelpEngineCore,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->error());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_error);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_autoSaveFilter(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_autoSaveFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QHelpEngineCore,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->autoSaveFilter();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_autoSaveFilter);

    return NULL;
}


extern "C" {static PyObject *meth_QHelpEngineCore_setAutoSaveFilter(PyObject *, PyObject *);}
static PyObject *meth_QHelpEngineCore_setAutoSaveFilter(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QHelpEngineCore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QHelpEngineCore,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAutoSaveFilter(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHelpEngineCore,sipName_setAutoSaveFilter);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QHelpEngineCore(void *, const sipTypeDef *);}
static void *cast_QHelpEngineCore(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QHelpEngineCore)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QHelpEngineCore *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QHelpEngineCore(void *, int);}
static void release_QHelpEngineCore(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQHelpEngineCore *>(sipCppV);
    else
        delete reinterpret_cast<QHelpEngineCore *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QHelpEngineCore(sipSimpleWrapper *);}
static void dealloc_QHelpEngineCore(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQHelpEngineCore *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QHelpEngineCore(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QHelpEngineCore(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QHelpEngineCore(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **sipOwner, int *sipArgsParsed)
{
    sipQHelpEngineCore *sipCpp = 0;

    if (!sipCpp)
    {
        const QString * a0;
        int a0State = 0;
        QObject * a1 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1|JH",sipType_QString,&a0,&a0State,sipType_QObject,&a1,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQHelpEngineCore(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QHelpEngineCore[] = {{111, 0, 1}};


static PyMethodDef methods_QHelpEngineCore[] = {
    {SIP_MLNAME_CAST(sipName_addCustomFilter), meth_QHelpEngineCore_addCustomFilter, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_autoSaveFilter), meth_QHelpEngineCore_autoSaveFilter, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QHelpEngineCore_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_collectionFile), meth_QHelpEngineCore_collectionFile, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QHelpEngineCore_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_copyCollectionFile), meth_QHelpEngineCore_copyCollectionFile, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentFilter), meth_QHelpEngineCore_currentFilter, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QHelpEngineCore_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customFilters), meth_QHelpEngineCore_customFilters, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customValue), meth_QHelpEngineCore_customValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QHelpEngineCore_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_documentationFileName), meth_QHelpEngineCore_documentationFileName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_error), meth_QHelpEngineCore_error, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fileData), meth_QHelpEngineCore_fileData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_files), meth_QHelpEngineCore_files, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_filterAttributeSets), meth_QHelpEngineCore_filterAttributeSets, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_filterAttributes), meth_QHelpEngineCore_filterAttributes, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_findFile), meth_QHelpEngineCore_findFile, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_linksForIdentifier), meth_QHelpEngineCore_linksForIdentifier, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_metaData), meth_QHelpEngineCore_metaData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_namespaceName), meth_QHelpEngineCore_namespaceName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QHelpEngineCore_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_registerDocumentation), meth_QHelpEngineCore_registerDocumentation, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_registeredDocumentations), meth_QHelpEngineCore_registeredDocumentations, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeCustomFilter), meth_QHelpEngineCore_removeCustomFilter, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeCustomValue), meth_QHelpEngineCore_removeCustomValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAutoSaveFilter), meth_QHelpEngineCore_setAutoSaveFilter, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCollectionFile), meth_QHelpEngineCore_setCollectionFile, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCurrentFilter), meth_QHelpEngineCore_setCurrentFilter, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCustomValue), meth_QHelpEngineCore_setCustomValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setupData), meth_QHelpEngineCore_setupData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QHelpEngineCore_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_unregisterDocumentation), meth_QHelpEngineCore_unregisterDocumentation, METH_VARARGS, NULL}
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QHelpEngineCore[] = {
    {"warning(const QString&)", 0},
    {"currentFilterChanged(const QString&)", 0},
    {"setupFinished()", 0},
    {"setupStarted()", 0},
    {0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtHelp_QHelpEngineCore = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QHelpEngineCore,
        {0}
    },
    {
        sipNameNr_QHelpEngineCore,
        {0, 0, 1},
        33, methods_QHelpEngineCore,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QHelpEngineCore,
    0,
    init_QHelpEngineCore,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QHelpEngineCore,
    0,
    0,
    0,
    release_QHelpEngineCore,
    cast_QHelpEngineCore,
    0,
    0,
    0
},
    &QHelpEngineCore::staticMetaObject,
    0,
    pyqt4_signals_QHelpEngineCore
};

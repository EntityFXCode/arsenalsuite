/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:37 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtXml.h"

#line 216 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 39 "sipQtXmlQDomDocument.cpp"

#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 43 "sipQtXmlQDomDocument.cpp"
#line 197 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 46 "sipQtXmlQDomDocument.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 49 "sipQtXmlQDomDocument.cpp"
#line 41 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 52 "sipQtXmlQDomDocument.cpp"
#line 91 "sip/QtXml/qxml.sip"
#include <qxml.h>
#line 55 "sipQtXmlQDomDocument.cpp"
#line 142 "sip/QtXml/qxml.sip"
#include <qxml.h>
#line 58 "sipQtXmlQDomDocument.cpp"
#line 69 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 61 "sipQtXmlQDomDocument.cpp"
#line 340 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 64 "sipQtXmlQDomDocument.cpp"
#line 41 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 67 "sipQtXmlQDomDocument.cpp"
#line 176 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 70 "sipQtXmlQDomDocument.cpp"
#line 322 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 73 "sipQtXmlQDomDocument.cpp"
#line 451 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 76 "sipQtXmlQDomDocument.cpp"
#line 464 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 79 "sipQtXmlQDomDocument.cpp"
#line 407 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 82 "sipQtXmlQDomDocument.cpp"
#line 394 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 85 "sipQtXmlQDomDocument.cpp"
#line 380 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 88 "sipQtXmlQDomDocument.cpp"
#line 288 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 91 "sipQtXmlQDomDocument.cpp"
#line 41 "sip/QtCore/qtextstream.sip"
#include <qtextstream.h>
#line 94 "sipQtXmlQDomDocument.cpp"
#line 301 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 97 "sipQtXmlQDomDocument.cpp"
#line 420 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 100 "sipQtXmlQDomDocument.cpp"
#line 435 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 103 "sipQtXmlQDomDocument.cpp"
#line 261 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 106 "sipQtXmlQDomDocument.cpp"


extern "C" {static PyObject *meth_QDomDocument_createElement(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_createElement(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QDomDocument,&sipCpp,sipType_QString,&a0,&a0State))
        {
            QDomElement *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomElement(sipCpp->createElement(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDomDocument,sipName_createElement);

    return NULL;
}


extern "C" {static PyObject *meth_QDomDocument_createDocumentFragment(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_createDocumentFragment(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDomDocument,&sipCpp))
        {
            QDomDocumentFragment *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomDocumentFragment(sipCpp->createDocumentFragment());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomDocumentFragment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDomDocument,sipName_createDocumentFragment);

    return NULL;
}


extern "C" {static PyObject *meth_QDomDocument_createTextNode(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_createTextNode(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QDomDocument,&sipCpp,sipType_QString,&a0,&a0State))
        {
            QDomText *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomText(sipCpp->createTextNode(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomText,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDomDocument,sipName_createTextNode);

    return NULL;
}


extern "C" {static PyObject *meth_QDomDocument_createComment(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_createComment(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QDomDocument,&sipCpp,sipType_QString,&a0,&a0State))
        {
            QDomComment *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomComment(sipCpp->createComment(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomComment,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDomDocument,sipName_createComment);

    return NULL;
}


extern "C" {static PyObject *meth_QDomDocument_createCDATASection(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_createCDATASection(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QDomDocument,&sipCpp,sipType_QString,&a0,&a0State))
        {
            QDomCDATASection *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomCDATASection(sipCpp->createCDATASection(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomCDATASection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDomDocument,sipName_createCDATASection);

    return NULL;
}


extern "C" {static PyObject *meth_QDomDocument_createProcessingInstruction(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_createProcessingInstruction(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1",&sipSelf,sipType_QDomDocument,&sipCpp,sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State))
        {
            QDomProcessingInstruction *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomProcessingInstruction(sipCpp->createProcessingInstruction(*a0,*a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDomProcessingInstruction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDomDocument,sipName_createProcessingInstruction);

    return NULL;
}


extern "C" {static PyObject *meth_QDomDocument_createAttribute(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_createAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QDomDocument,&sipCpp,sipType_QString,&a0,&a0State))
        {
            QDomAttr *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomAttr(sipCpp->createAttribute(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomAttr,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDomDocument,sipName_createAttribute);

    return NULL;
}


extern "C" {static PyObject *meth_QDomDocument_createEntityReference(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_createEntityReference(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QDomDocument,&sipCpp,sipType_QString,&a0,&a0State))
        {
            QDomEntityReference *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomEntityReference(sipCpp->createEntityReference(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomEntityReference,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDomDocument,sipName_createEntityReference);

    return NULL;
}


extern "C" {static PyObject *meth_QDomDocument_elementsByTagName(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_elementsByTagName(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QDomDocument,&sipCpp,sipType_QString,&a0,&a0State))
        {
            QDomNodeList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomNodeList(sipCpp->elementsByTagName(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomNodeList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDomDocument,sipName_elementsByTagName);

    return NULL;
}


extern "C" {static PyObject *meth_QDomDocument_importNode(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_importNode(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QDomNode * a0;
        bool a1;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9b",&sipSelf,sipType_QDomDocument,&sipCpp,sipType_QDomNode,&a0,&a1))
        {
            QDomNode *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomNode(sipCpp->importNode(*a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDomDocument,sipName_importNode);

    return NULL;
}


extern "C" {static PyObject *meth_QDomDocument_createElementNS(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_createElementNS(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1",&sipSelf,sipType_QDomDocument,&sipCpp,sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State))
        {
            QDomElement *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomElement(sipCpp->createElementNS(*a0,*a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDomElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDomDocument,sipName_createElementNS);

    return NULL;
}


extern "C" {static PyObject *meth_QDomDocument_createAttributeNS(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_createAttributeNS(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1",&sipSelf,sipType_QDomDocument,&sipCpp,sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State))
        {
            QDomAttr *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomAttr(sipCpp->createAttributeNS(*a0,*a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDomAttr,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDomDocument,sipName_createAttributeNS);

    return NULL;
}


extern "C" {static PyObject *meth_QDomDocument_elementsByTagNameNS(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_elementsByTagNameNS(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1",&sipSelf,sipType_QDomDocument,&sipCpp,sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State))
        {
            QDomNodeList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomNodeList(sipCpp->elementsByTagNameNS(*a0,*a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDomNodeList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDomDocument,sipName_elementsByTagNameNS);

    return NULL;
}


extern "C" {static PyObject *meth_QDomDocument_elementById(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_elementById(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QDomDocument,&sipCpp,sipType_QString,&a0,&a0State))
        {
            QDomElement *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomElement(sipCpp->elementById(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDomElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDomDocument,sipName_elementById);

    return NULL;
}


extern "C" {static PyObject *meth_QDomDocument_doctype(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_doctype(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDomDocument,&sipCpp))
        {
            QDomDocumentType *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomDocumentType(sipCpp->doctype());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomDocumentType,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDomDocument,sipName_doctype);

    return NULL;
}


extern "C" {static PyObject *meth_QDomDocument_implementation(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_implementation(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDomDocument,&sipCpp))
        {
            QDomImplementation *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomImplementation(sipCpp->implementation());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomImplementation,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDomDocument,sipName_implementation);

    return NULL;
}


extern "C" {static PyObject *meth_QDomDocument_documentElement(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_documentElement(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDomDocument,&sipCpp))
        {
            QDomElement *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDomElement(sipCpp->documentElement());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDomElement,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDomDocument,sipName_documentElement);

    return NULL;
}


extern "C" {static PyObject *meth_QDomDocument_nodeType(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_nodeType(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDomDocument,&sipCpp))
        {
            QDomNode::NodeType sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->nodeType();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QDomNode_NodeType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDomDocument,sipName_nodeType);

    return NULL;
}


extern "C" {static PyObject *meth_QDomDocument_setContent(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_setContent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QByteArray * a0;
        int a0State = 0;
        bool a1;
        QString * a2;
        int a3;
        int a4;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1b",&sipSelf,sipType_QDomDocument,&sipCpp,sipType_QByteArray,&a0,&a0State,&a1))
        {
            bool sipRes;
            PyObject *sipResult;
            a2 = new QString();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setContent(*a0,a1,a2,&a3,&a4);
            Py_END_ALLOW_THREADS

            sipResult = sipBuildResult(0,"(bDii)",sipRes,a2,sipType_QString,NULL,a3,a4);

            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);
            delete a2;

            return sipResult;
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        bool a1;
        QString * a2;
        int a3;
        int a4;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1b",&sipSelf,sipType_QDomDocument,&sipCpp,sipType_QString,&a0,&a0State,&a1))
        {
            bool sipRes;
            PyObject *sipResult;
            a2 = new QString();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setContent(*a0,a1,a2,&a3,&a4);
            Py_END_ALLOW_THREADS

            sipResult = sipBuildResult(0,"(bDii)",sipRes,a2,sipType_QString,NULL,a3,a4);

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            delete a2;

            return sipResult;
        }
    }

    {
        QIODevice * a0;
        bool a1;
        QString * a2;
        int a3;
        int a4;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8b",&sipSelf,sipType_QDomDocument,&sipCpp,sipType_QIODevice,&a0,&a1))
        {
            bool sipRes;
            PyObject *sipResult;
            a2 = new QString();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setContent(a0,a1,a2,&a3,&a4);
            Py_END_ALLOW_THREADS

            sipResult = sipBuildResult(0,"(bDii)",sipRes,a2,sipType_QString,NULL,a3,a4);
            delete a2;

            return sipResult;
        }
    }

    {
        QXmlInputSource * a0;
        bool a1;
        QString * a2;
        int a3;
        int a4;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8b",&sipSelf,sipType_QDomDocument,&sipCpp,sipType_QXmlInputSource,&a0,&a1))
        {
            bool sipRes;
            PyObject *sipResult;
            a2 = new QString();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setContent(a0,a1,a2,&a3,&a4);
            Py_END_ALLOW_THREADS

            sipResult = sipBuildResult(0,"(bDii)",sipRes,a2,sipType_QString,NULL,a3,a4);
            delete a2;

            return sipResult;
        }
    }

    {
        const QByteArray * a0;
        int a0State = 0;
        QString * a1;
        int a2;
        int a3;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QDomDocument,&sipCpp,sipType_QByteArray,&a0,&a0State))
        {
            bool sipRes;
            PyObject *sipResult;
            a1 = new QString();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setContent(*a0,a1,&a2,&a3);
            Py_END_ALLOW_THREADS

            sipResult = sipBuildResult(0,"(bDii)",sipRes,a1,sipType_QString,NULL,a2,a3);

            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);
            delete a1;

            return sipResult;
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        QString * a1;
        int a2;
        int a3;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QDomDocument,&sipCpp,sipType_QString,&a0,&a0State))
        {
            bool sipRes;
            PyObject *sipResult;
            a1 = new QString();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setContent(*a0,a1,&a2,&a3);
            Py_END_ALLOW_THREADS

            sipResult = sipBuildResult(0,"(bDii)",sipRes,a1,sipType_QString,NULL,a2,a3);

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            delete a1;

            return sipResult;
        }
    }

    {
        QIODevice * a0;
        QString * a1;
        int a2;
        int a3;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QDomDocument,&sipCpp,sipType_QIODevice,&a0))
        {
            bool sipRes;
            PyObject *sipResult;
            a1 = new QString();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setContent(a0,a1,&a2,&a3);
            Py_END_ALLOW_THREADS

            sipResult = sipBuildResult(0,"(bDii)",sipRes,a1,sipType_QString,NULL,a2,a3);
            delete a1;

            return sipResult;
        }
    }

    {
        QXmlInputSource * a0;
        QXmlReader * a1;
        QString * a2;
        int a3;
        int a4;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8J8",&sipSelf,sipType_QDomDocument,&sipCpp,sipType_QXmlInputSource,&a0,sipType_QXmlReader,&a1))
        {
            bool sipRes;
            PyObject *sipResult;
            a2 = new QString();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setContent(a0,a1,a2,&a3,&a4);
            Py_END_ALLOW_THREADS

            sipResult = sipBuildResult(0,"(bDii)",sipRes,a2,sipType_QString,NULL,a3,a4);
            delete a2;

            return sipResult;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDomDocument,sipName_setContent);

    return NULL;
}


extern "C" {static PyObject *meth_QDomDocument_toString(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_toString(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0 = 1;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|i",&sipSelf,sipType_QDomDocument,&sipCpp,&a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDomDocument,sipName_toString);

    return NULL;
}


extern "C" {static PyObject *meth_QDomDocument_toByteArray(PyObject *, PyObject *);}
static PyObject *meth_QDomDocument_toByteArray(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0 = 1;
        QDomDocument *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|i",&sipSelf,sipType_QDomDocument,&sipCpp,&a0))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->toByteArray(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDomDocument,sipName_toByteArray);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDomDocument(void *, const sipTypeDef *);}
static void *cast_QDomDocument(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QDomDocument)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QDomNode)->ctd_cast((QDomNode *)(QDomDocument *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDomDocument(void *, int);}
static void release_QDomDocument(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QDomDocument *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QDomDocument(void *, SIP_SSIZE_T, const void *);}
static void assign_QDomDocument(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QDomDocument *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QDomDocument *>(sipSrc);
}


extern "C" {static void *array_QDomDocument(SIP_SSIZE_T);}
static void *array_QDomDocument(SIP_SSIZE_T sipNrElem)
{
    return new QDomDocument[sipNrElem];
}


extern "C" {static void *copy_QDomDocument(const void *, SIP_SSIZE_T);}
static void *copy_QDomDocument(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QDomDocument(reinterpret_cast<const QDomDocument *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDomDocument(sipSimpleWrapper *);}
static void dealloc_QDomDocument(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QDomDocument(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QDomDocument(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QDomDocument(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QDomDocument *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QDomDocument();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1",sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QDomDocument(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
        }
    }

    if (!sipCpp)
    {
        const QDomDocumentType * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QDomDocumentType,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QDomDocument(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QDomDocument * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QDomDocument,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QDomDocument(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDomDocument[] = {{13, 255, 1}};


static PyMethodDef methods_QDomDocument[] = {
    {SIP_MLNAME_CAST(sipName_createAttribute), meth_QDomDocument_createAttribute, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createAttributeNS), meth_QDomDocument_createAttributeNS, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createCDATASection), meth_QDomDocument_createCDATASection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createComment), meth_QDomDocument_createComment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createDocumentFragment), meth_QDomDocument_createDocumentFragment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createElement), meth_QDomDocument_createElement, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createElementNS), meth_QDomDocument_createElementNS, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createEntityReference), meth_QDomDocument_createEntityReference, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createProcessingInstruction), meth_QDomDocument_createProcessingInstruction, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createTextNode), meth_QDomDocument_createTextNode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_doctype), meth_QDomDocument_doctype, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_documentElement), meth_QDomDocument_documentElement, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_elementById), meth_QDomDocument_elementById, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_elementsByTagName), meth_QDomDocument_elementsByTagName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_elementsByTagNameNS), meth_QDomDocument_elementsByTagNameNS, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_implementation), meth_QDomDocument_implementation, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_importNode), meth_QDomDocument_importNode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_nodeType), meth_QDomDocument_nodeType, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setContent), meth_QDomDocument_setContent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toByteArray), meth_QDomDocument_toByteArray, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toString), meth_QDomDocument_toString, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtXml_QDomDocument = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QDomDocument,
        {0}
    },
    {
        sipNameNr_QDomDocument,
        {0, 0, 1},
        21, methods_QDomDocument,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QDomDocument,
    0,
    init_QDomDocument,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDomDocument,
    assign_QDomDocument,
    array_QDomDocument,
    copy_QDomDocument,
    release_QDomDocument,
    cast_QDomDocument,
    0,
    0,
    0
},
    0,
    0,
    0
};

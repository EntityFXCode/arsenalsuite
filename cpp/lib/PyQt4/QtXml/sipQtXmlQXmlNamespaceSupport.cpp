/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:37 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtXml.h"

#line 37 "sip/QtXml/qxml.sip"
#include <qxml.h>
#line 39 "sipQtXmlQXmlNamespaceSupport.cpp"

#line 41 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 43 "sipQtXmlQXmlNamespaceSupport.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 46 "sipQtXmlQXmlNamespaceSupport.cpp"


extern "C" {static PyObject *meth_QXmlNamespaceSupport_setPrefix(PyObject *, PyObject *);}
static PyObject *meth_QXmlNamespaceSupport_setPrefix(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QXmlNamespaceSupport *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1",&sipSelf,sipType_QXmlNamespaceSupport,&sipCpp,sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPrefix(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlNamespaceSupport,sipName_setPrefix);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlNamespaceSupport_prefix(PyObject *, PyObject *);}
static PyObject *meth_QXmlNamespaceSupport_prefix(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QXmlNamespaceSupport *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QXmlNamespaceSupport,&sipCpp,sipType_QString,&a0,&a0State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->prefix(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlNamespaceSupport,sipName_prefix);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlNamespaceSupport_uri(PyObject *, PyObject *);}
static PyObject *meth_QXmlNamespaceSupport_uri(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QXmlNamespaceSupport *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QXmlNamespaceSupport,&sipCpp,sipType_QString,&a0,&a0State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->uri(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlNamespaceSupport,sipName_uri);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlNamespaceSupport_splitName(PyObject *, PyObject *);}
static PyObject *meth_QXmlNamespaceSupport_splitName(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QString * a1;
        int a1State = 0;
        QString * a2;
        int a2State = 0;
        QXmlNamespaceSupport *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1J1",&sipSelf,sipType_QXmlNamespaceSupport,&sipCpp,sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State,sipType_QString,&a2,&a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->splitName(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QString,a1State);
            sipReleaseType(a2,sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlNamespaceSupport,sipName_splitName);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlNamespaceSupport_processName(PyObject *, PyObject *);}
static PyObject *meth_QXmlNamespaceSupport_processName(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        bool a1;
        QString * a2;
        int a2State = 0;
        QString * a3;
        int a3State = 0;
        QXmlNamespaceSupport *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1bJ1J1",&sipSelf,sipType_QXmlNamespaceSupport,&sipCpp,sipType_QString,&a0,&a0State,&a1,sipType_QString,&a2,&a2State,sipType_QString,&a3,&a3State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->processName(*a0,a1,*a2,*a3);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a2,sipType_QString,a2State);
            sipReleaseType(a3,sipType_QString,a3State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlNamespaceSupport,sipName_processName);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlNamespaceSupport_prefixes(PyObject *, PyObject *);}
static PyObject *meth_QXmlNamespaceSupport_prefixes(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlNamespaceSupport *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlNamespaceSupport,&sipCpp))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->prefixes());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        QXmlNamespaceSupport *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QXmlNamespaceSupport,&sipCpp,sipType_QString,&a0,&a0State))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->prefixes(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlNamespaceSupport,sipName_prefixes);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlNamespaceSupport_pushContext(PyObject *, PyObject *);}
static PyObject *meth_QXmlNamespaceSupport_pushContext(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlNamespaceSupport *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlNamespaceSupport,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->pushContext();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlNamespaceSupport,sipName_pushContext);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlNamespaceSupport_popContext(PyObject *, PyObject *);}
static PyObject *meth_QXmlNamespaceSupport_popContext(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlNamespaceSupport *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlNamespaceSupport,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->popContext();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlNamespaceSupport,sipName_popContext);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlNamespaceSupport_reset(PyObject *, PyObject *);}
static PyObject *meth_QXmlNamespaceSupport_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlNamespaceSupport *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlNamespaceSupport,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->reset();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlNamespaceSupport,sipName_reset);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QXmlNamespaceSupport(void *, const sipTypeDef *);}
static void *cast_QXmlNamespaceSupport(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QXmlNamespaceSupport)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QXmlNamespaceSupport(void *, int);}
static void release_QXmlNamespaceSupport(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QXmlNamespaceSupport *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QXmlNamespaceSupport(sipSimpleWrapper *);}
static void dealloc_QXmlNamespaceSupport(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QXmlNamespaceSupport(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QXmlNamespaceSupport(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QXmlNamespaceSupport(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QXmlNamespaceSupport *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QXmlNamespaceSupport();
            Py_END_ALLOW_THREADS
        }
    }

    return sipCpp;
}


static PyMethodDef methods_QXmlNamespaceSupport[] = {
    {SIP_MLNAME_CAST(sipName_popContext), meth_QXmlNamespaceSupport_popContext, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_prefix), meth_QXmlNamespaceSupport_prefix, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_prefixes), meth_QXmlNamespaceSupport_prefixes, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_processName), meth_QXmlNamespaceSupport_processName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_pushContext), meth_QXmlNamespaceSupport_pushContext, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_reset), meth_QXmlNamespaceSupport_reset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPrefix), meth_QXmlNamespaceSupport_setPrefix, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_splitName), meth_QXmlNamespaceSupport_splitName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_uri), meth_QXmlNamespaceSupport_uri, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtXml_QXmlNamespaceSupport = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QXmlNamespaceSupport,
        {0}
    },
    {
        sipNameNr_QXmlNamespaceSupport,
        {0, 0, 1},
        9, methods_QXmlNamespaceSupport,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QXmlNamespaceSupport,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QXmlNamespaceSupport,
    0,
    0,
    0,
    release_QXmlNamespaceSupport,
    cast_QXmlNamespaceSupport,
    0,
    0,
    0
},
    0,
    0,
    0
};

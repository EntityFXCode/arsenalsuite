/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:37 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtXml.h"

#line 301 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 39 "sipQtXmlQDomCharacterData.cpp"

#line 69 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 43 "sipQtXmlQDomCharacterData.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 46 "sipQtXmlQDomCharacterData.cpp"
#line 340 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 49 "sipQtXmlQDomCharacterData.cpp"
#line 41 "sip/QtCore/qtextstream.sip"
#include <qtextstream.h>
#line 52 "sipQtXmlQDomCharacterData.cpp"
#line 394 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 55 "sipQtXmlQDomCharacterData.cpp"
#line 464 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 58 "sipQtXmlQDomCharacterData.cpp"
#line 420 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 61 "sipQtXmlQDomCharacterData.cpp"
#line 435 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 64 "sipQtXmlQDomCharacterData.cpp"
#line 380 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 67 "sipQtXmlQDomCharacterData.cpp"
#line 451 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 70 "sipQtXmlQDomCharacterData.cpp"
#line 197 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 73 "sipQtXmlQDomCharacterData.cpp"
#line 216 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 76 "sipQtXmlQDomCharacterData.cpp"
#line 288 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 79 "sipQtXmlQDomCharacterData.cpp"
#line 407 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 82 "sipQtXmlQDomCharacterData.cpp"
#line 322 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 85 "sipQtXmlQDomCharacterData.cpp"
#line 261 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 88 "sipQtXmlQDomCharacterData.cpp"
#line 176 "sip/QtXml/qdom.sip"
#include <qdom.h>
#line 91 "sipQtXmlQDomCharacterData.cpp"


extern "C" {static PyObject *meth_QDomCharacterData_substringData(PyObject *, PyObject *);}
static PyObject *meth_QDomCharacterData_substringData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        unsigned long a0;
        unsigned long a1;
        QDomCharacterData *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bmm",&sipSelf,sipType_QDomCharacterData,&sipCpp,&a0,&a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->substringData(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDomCharacterData,sipName_substringData);

    return NULL;
}


extern "C" {static PyObject *meth_QDomCharacterData_appendData(PyObject *, PyObject *);}
static PyObject *meth_QDomCharacterData_appendData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QDomCharacterData *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QDomCharacterData,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->appendData(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDomCharacterData,sipName_appendData);

    return NULL;
}


extern "C" {static PyObject *meth_QDomCharacterData_insertData(PyObject *, PyObject *);}
static PyObject *meth_QDomCharacterData_insertData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        unsigned long a0;
        const QString * a1;
        int a1State = 0;
        QDomCharacterData *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BmJ1",&sipSelf,sipType_QDomCharacterData,&sipCpp,&a0,sipType_QString,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertData(a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDomCharacterData,sipName_insertData);

    return NULL;
}


extern "C" {static PyObject *meth_QDomCharacterData_deleteData(PyObject *, PyObject *);}
static PyObject *meth_QDomCharacterData_deleteData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        unsigned long a0;
        unsigned long a1;
        QDomCharacterData *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bmm",&sipSelf,sipType_QDomCharacterData,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->deleteData(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDomCharacterData,sipName_deleteData);

    return NULL;
}


extern "C" {static PyObject *meth_QDomCharacterData_replaceData(PyObject *, PyObject *);}
static PyObject *meth_QDomCharacterData_replaceData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        unsigned long a0;
        unsigned long a1;
        const QString * a2;
        int a2State = 0;
        QDomCharacterData *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BmmJ1",&sipSelf,sipType_QDomCharacterData,&sipCpp,&a0,&a1,sipType_QString,&a2,&a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->replaceData(a0,a1,*a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDomCharacterData,sipName_replaceData);

    return NULL;
}


extern "C" {static PyObject *meth_QDomCharacterData_length(PyObject *, PyObject *);}
static PyObject *meth_QDomCharacterData_length(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDomCharacterData *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDomCharacterData,&sipCpp))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->length();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDomCharacterData,sipName_length);

    return NULL;
}


extern "C" {static PyObject *meth_QDomCharacterData_data(PyObject *, PyObject *);}
static PyObject *meth_QDomCharacterData_data(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDomCharacterData *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDomCharacterData,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->data());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDomCharacterData,sipName_data);

    return NULL;
}


extern "C" {static PyObject *meth_QDomCharacterData_setData(PyObject *, PyObject *);}
static PyObject *meth_QDomCharacterData_setData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QDomCharacterData *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QDomCharacterData,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setData(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDomCharacterData,sipName_setData);

    return NULL;
}


extern "C" {static PyObject *meth_QDomCharacterData_nodeType(PyObject *, PyObject *);}
static PyObject *meth_QDomCharacterData_nodeType(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDomCharacterData *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDomCharacterData,&sipCpp))
        {
            QDomNode::NodeType sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->nodeType();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QDomNode_NodeType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDomCharacterData,sipName_nodeType);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDomCharacterData(void *, const sipTypeDef *);}
static void *cast_QDomCharacterData(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QDomCharacterData)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QDomNode)->ctd_cast((QDomNode *)(QDomCharacterData *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDomCharacterData(void *, int);}
static void release_QDomCharacterData(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QDomCharacterData *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QDomCharacterData(void *, SIP_SSIZE_T, const void *);}
static void assign_QDomCharacterData(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QDomCharacterData *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QDomCharacterData *>(sipSrc);
}


extern "C" {static void *array_QDomCharacterData(SIP_SSIZE_T);}
static void *array_QDomCharacterData(SIP_SSIZE_T sipNrElem)
{
    return new QDomCharacterData[sipNrElem];
}


extern "C" {static void *copy_QDomCharacterData(const void *, SIP_SSIZE_T);}
static void *copy_QDomCharacterData(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QDomCharacterData(reinterpret_cast<const QDomCharacterData *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QDomCharacterData(sipSimpleWrapper *);}
static void dealloc_QDomCharacterData(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QDomCharacterData(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QDomCharacterData(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QDomCharacterData(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QDomCharacterData *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QDomCharacterData();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QDomCharacterData * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QDomCharacterData,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QDomCharacterData(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDomCharacterData[] = {{13, 255, 1}};


static PyMethodDef methods_QDomCharacterData[] = {
    {SIP_MLNAME_CAST(sipName_appendData), meth_QDomCharacterData_appendData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_data), meth_QDomCharacterData_data, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_deleteData), meth_QDomCharacterData_deleteData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertData), meth_QDomCharacterData_insertData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_length), meth_QDomCharacterData_length, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_nodeType), meth_QDomCharacterData_nodeType, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_replaceData), meth_QDomCharacterData_replaceData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setData), meth_QDomCharacterData_setData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_substringData), meth_QDomCharacterData_substringData, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtXml_QDomCharacterData = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QDomCharacterData,
        {0}
    },
    {
        sipNameNr_QDomCharacterData,
        {0, 0, 1},
        9, methods_QDomCharacterData,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QDomCharacterData,
    0,
    init_QDomCharacterData,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDomCharacterData,
    assign_QDomCharacterData,
    array_QDomCharacterData,
    copy_QDomCharacterData,
    release_QDomCharacterData,
    cast_QDomCharacterData,
    0,
    0,
    0
},
    0,
    0,
    0
};

/*
 * Module code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:30 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtScriptTools.h"

#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 39 "sipQtScriptToolscmodule.cpp"

/* Define the strings used by this module. */
const char sipStrings_QtScriptTools[] = {
    'Q', 'S', 'c', 'r', 'i', 'p', 't', 'E', 'n', 'g', 'i', 'n', 'e', 'D', 'e', 'b', 'u', 'g', 'g', 'e', 'r', ':', ':', 'D', 'e', 'b', 'u', 'g', 'g', 'e', 'r', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'Q', 'S', 'c', 'r', 'i', 'p', 't', 'E', 'n', 'g', 'i', 'n', 'e', 'D', 'e', 'b', 'u', 'g', 'g', 'e', 'r', ':', ':', 'D', 'e', 'b', 'u', 'g', 'g', 'e', 'r', 'W', 'i', 'd', 'g', 'e', 't', 0,
    'F', 'i', 'n', 'd', 'P', 'r', 'e', 'v', 'i', 'o', 'u', 's', 'I', 'n', 'S', 'c', 'r', 'i', 'p', 't', 'A', 'c', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'A', 'u', 't', 'o', 'S', 'h', 'o', 'w', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'a', 'u', 't', 'o', 'S', 'h', 'o', 'w', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'F', 'i', 'n', 'd', 'N', 'e', 'x', 't', 'I', 'n', 'S', 'c', 'r', 'i', 'p', 't', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'C', 'l', 'e', 'a', 'r', 'D', 'e', 'b', 'u', 'g', 'O', 'u', 't', 'p', 'u', 't', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'T', 'o', 'g', 'g', 'l', 'e', 'B', 'r', 'e', 'a', 'k', 'p', 'o', 'i', 'n', 't', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'T', 'o', 'o', 'l', 'B', 'a', 'r', 0,
    'Q', 'S', 'c', 'r', 'i', 'p', 't', 'E', 'n', 'g', 'i', 'n', 'e', 'D', 'e', 'b', 'u', 'g', 'g', 'e', 'r', 0,
    'R', 'u', 'n', 'T', 'o', 'N', 'e', 'w', 'S', 'c', 'r', 'i', 'p', 't', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'e', 'v', 'a', 'l', 'u', 'a', 't', 'i', 'o', 'n', 'S', 'u', 's', 'p', 'e', 'n', 'd', 'e', 'd', 0,
    'C', 'l', 'e', 'a', 'r', 'E', 'r', 'r', 'o', 'r', 'L', 'o', 'g', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'P', 'y', 'Q', 't', '4', '.', 'Q', 't', 'S', 'c', 'r', 'i', 'p', 't', 'T', 'o', 'o', 'l', 's', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'M', 'e', 'n', 'u', 0,
    'F', 'i', 'n', 'd', 'I', 'n', 'S', 'c', 'r', 'i', 'p', 't', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'C', 'l', 'e', 'a', 'r', 'C', 'o', 'n', 's', 'o', 'l', 'e', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'e', 'v', 'a', 'l', 'u', 'a', 't', 'i', 'o', 'n', 'R', 'e', 's', 'u', 'm', 'e', 'd', 0,
    'R', 'u', 'n', 'T', 'o', 'C', 'u', 'r', 's', 'o', 'r', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'D', 'e', 'b', 'u', 'g', 'O', 'u', 't', 'p', 'u', 't', 'W', 'i', 'd', 'g', 'e', 't', 0,
    'B', 'r', 'e', 'a', 'k', 'p', 'o', 'i', 'n', 't', 's', 'W', 'i', 'd', 'g', 'e', 't', 0,
    'C', 'o', 'd', 'e', 'F', 'i', 'n', 'd', 'e', 'r', 'W', 'i', 'd', 'g', 'e', 't', 0,
    'd', 'i', 's', 'c', 'o', 'n', 'n', 'e', 'c', 't', 'N', 'o', 't', 'i', 'f', 'y', 0,
    'I', 'n', 't', 'e', 'r', 'r', 'u', 'p', 't', 'A', 'c', 't', 'i', 'o', 'n', 0,
    's', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'G', 'o', 'T', 'o', 'L', 'i', 'n', 'e', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'S', 't', 'e', 'p', 'O', 'v', 'e', 'r', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'S', 't', 'e', 'p', 'I', 'n', 't', 'o', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'C', 'o', 'n', 't', 'i', 'n', 'u', 'e', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'E', 'r', 'r', 'o', 'r', 'L', 'o', 'g', 'W', 'i', 'd', 'g', 'e', 't', 0,
    'S', 't', 'e', 'p', 'O', 'u', 't', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'S', 'c', 'r', 'i', 'p', 't', 's', 'W', 'i', 'd', 'g', 'e', 't', 0,
    'C', 'o', 'n', 's', 'o', 'l', 'e', 'W', 'i', 'd', 'g', 'e', 't', 0,
    'L', 'o', 'c', 'a', 'l', 's', 'W', 'i', 'd', 'g', 'e', 't', 0,
    'S', 't', 'a', 'c', 'k', 'W', 'i', 'd', 'g', 'e', 't', 0,
    'c', 'u', 's', 't', 'o', 'm', 'E', 'v', 'e', 'n', 't', 0,
    'e', 'v', 'e', 'n', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'C', 'o', 'd', 'e', 'W', 'i', 'd', 'g', 'e', 't', 0,
    'c', 'h', 'i', 'l', 'd', 'E', 'v', 'e', 'n', 't', 0,
    't', 'i', 'm', 'e', 'r', 'E', 'v', 'e', 'n', 't', 0,
    'r', 'e', 'c', 'e', 'i', 'v', 'e', 'r', 's', 0,
    'a', 't', 't', 'a', 'c', 'h', 'T', 'o', 0,
    'a', 'c', 't', 'i', 'o', 'n', 0,
    'w', 'i', 'd', 'g', 'e', 't', 0,
    'd', 'e', 't', 'a', 'c', 'h', 0,
    'e', 'v', 'e', 'n', 't', 0,
};


/* Convert to a sub-class if possible. */
extern "C" {static const sipTypeDef *sipSubClass_QScriptEngineDebugger(void **);}
static const sipTypeDef *sipSubClass_QScriptEngineDebugger(void **sipCppRet)
{
    QObject *sipCpp = reinterpret_cast<QObject *>(*sipCppRet);
    const sipTypeDef *sipType;

#line 43 "sip/QtScriptTools/qscriptenginedebugger.sip"
    if (sipCpp->inherits(sipName_QScriptEngineDebugger))
        sipType = sipType_QScriptEngineDebugger;
    else
        sipType = 0;
#line 104 "sipQtScriptToolscmodule.cpp"

    return sipType;
}
static sipEnumTypeDef enumTypes[] = {
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QScriptEngineDebugger__DebuggerAction, {0}}, sipNameNr_DebuggerAction, 0, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QScriptEngineDebugger__DebuggerWidget, {0}}, sipNameNr_DebuggerWidget, 0, NULL},
};


/*
 * This defines each type in this module.
 */
static sipTypeDef *typesTable[] = {
    &sipTypeDef_QtScriptTools_QScriptEngineDebugger.super.ctd_base,
    &enumTypes[0].etd_base,
    &enumTypes[1].etd_base,
};


/* This defines the modules that this module needs to import. */
static sipImportedModuleDef importsTable[] = {
    {"PyQt4.QtCore", 0, NULL},
    {"PyQt4.QtScript", 0, NULL},
    {"PyQt4.QtGui", 0, NULL},
    {NULL, -1, NULL}
};


/* This defines the class sub-convertors that this module defines. */
static sipSubClassConvertorDef convertorsTable[] = {
    {sipSubClass_QScriptEngineDebugger, {111, 0, 0}, NULL},
    {NULL, {0, 0, 0}, NULL}
};


/* This defines this module. */
sipExportedModuleDef sipModuleAPI_QtScriptTools = {
    0,
    SIP_API_MINOR_NR,
    sipNameNr_PyQt4_QtScriptTools,
    0,
    0,
    sipStrings_QtScriptTools,
    importsTable,
    NULL,
    3,
    typesTable,
    NULL,
    0,
    NULL,
    0,
    NULL,
    NULL,
    convertorsTable,
    {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL
};


/* The SIP API and the APIs of any imported modules. */
const sipAPIDef *sipAPI_QtScriptTools;
const sipExportedModuleDef *sipModuleAPI_QtScriptTools_QtCore;
const sipExportedModuleDef *sipModuleAPI_QtScriptTools_QtScript;
const sipExportedModuleDef *sipModuleAPI_QtScriptTools_QtGui;

sip_qt_metaobject_func sip_QtScriptTools_qt_metaobject;
sip_qt_metacall_func sip_QtScriptTools_qt_metacall;
sip_qt_metacast_func sip_QtScriptTools_qt_metacast;


/* The Python module initialisation function. */
#if PY_MAJOR_VERSION >= 3
#define SIP_MODULE_ENTRY        PyInit_QtScriptTools
#define SIP_MODULE_TYPE         PyObject *
#define SIP_MODULE_DISCARD(r)   Py_DECREF(r)
#define SIP_MODULE_RETURN(r)    return (r)
#else
#define SIP_MODULE_ENTRY        initQtScriptTools
#define SIP_MODULE_TYPE         void
#define SIP_MODULE_DISCARD(r)
#define SIP_MODULE_RETURN(r)    return
#endif

#if defined(SIP_STATIC_MODULE)
extern "C" SIP_MODULE_TYPE SIP_MODULE_ENTRY()
#else
PyMODINIT_FUNC SIP_MODULE_ENTRY()
#endif
{
    static PyMethodDef sip_methods[] = {
        {0, 0, 0, 0}
    };

#if PY_MAJOR_VERSION >= 3
    static PyModuleDef sip_module_def = {
        PyModuleDef_HEAD_INIT,
        "PyQt4.QtScriptTools",
        NULL,
        -1,
        sip_methods,
        NULL,
        NULL,
        NULL,
        NULL
    };
#endif

    PyObject *sipModule, *sipModuleDict;
    PyObject *sip_sipmod, *sip_capiobj;

    /* Initialise the module and get it's dictionary. */
#if PY_MAJOR_VERSION >= 3
    sipModule = PyModule_Create(&sip_module_def);
#elif PY_VERSION_HEX >= 0x02050000
    sipModule = Py_InitModule(sipName_PyQt4_QtScriptTools, sip_methods);
#else
    sipModule = Py_InitModule(const_cast<char *>(sipName_PyQt4_QtScriptTools), sip_methods);
#endif

    if (sipModule == NULL)
        SIP_MODULE_RETURN(NULL);

    sipModuleDict = PyModule_GetDict(sipModule);

    /* Import the SIP module and get it's API. */
#if PY_VERSION_HEX >= 0x02050000
    sip_sipmod = PyImport_ImportModule("sip");
#else
    sip_sipmod = PyImport_ImportModule(const_cast<char *>("sip"));
#endif

    if (sip_sipmod == NULL)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

    sip_capiobj = PyDict_GetItemString(PyModule_GetDict(sip_sipmod), "_C_API");

    if (sip_capiobj == NULL || !PyCObject_Check(sip_capiobj))
    {
        Py_DECREF(sip_sipmod);
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

    sipAPI_QtScriptTools = reinterpret_cast<const sipAPIDef *>(PyCObject_AsVoidPtr(sip_capiobj));

    /* Export the module and publish it's API. */
    if (sipExportModule(&sipModuleAPI_QtScriptTools,SIP_API_MAJOR_NR,SIP_API_MINOR_NR,0) < 0)
    {
        Py_DECREF(sip_sipmod);
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }

    sip_QtScriptTools_qt_metaobject = (sip_qt_metaobject_func)sipImportSymbol("qtcore_qt_metaobject");
    sip_QtScriptTools_qt_metacall = (sip_qt_metacall_func)sipImportSymbol("qtcore_qt_metacall");
    sip_QtScriptTools_qt_metacast = (sip_qt_metacast_func)sipImportSymbol("qtcore_qt_metacast");

    /* Initialise the module now all its dependencies have been set up. */
    if (sipInitModule(&sipModuleAPI_QtScriptTools,sipModuleDict) < 0)
    {
        Py_DECREF(sip_sipmod);
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }

    /* Get the APIs of the modules that this one is dependent on. */
    sipModuleAPI_QtScriptTools_QtCore = sipModuleAPI_QtScriptTools.em_imports[0].im_module;
    sipModuleAPI_QtScriptTools_QtScript = sipModuleAPI_QtScriptTools.em_imports[1].im_module;
    sipModuleAPI_QtScriptTools_QtGui = sipModuleAPI_QtScriptTools.em_imports[2].im_module;

    SIP_MODULE_RETURN(sipModule);
}

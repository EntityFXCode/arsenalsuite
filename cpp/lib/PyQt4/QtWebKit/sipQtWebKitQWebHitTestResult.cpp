/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:37 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebKit.h"

#line 39 "sip/QtWebKit/qwebframe.sip"
#include <qwebframe.h>
#line 39 "sipQtWebKitQWebHitTestResult.cpp"

#line 41 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 43 "sipQtWebKitQWebHitTestResult.cpp"
#line 71 "sip/QtWebKit/qwebframe.sip"
#include <qwebframe.h>
#line 46 "sipQtWebKitQWebHitTestResult.cpp"
#line 41 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 49 "sipQtWebKitQWebHitTestResult.cpp"
#line 41 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 52 "sipQtWebKitQWebHitTestResult.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 55 "sipQtWebKitQWebHitTestResult.cpp"
#line 41 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 58 "sipQtWebKitQWebHitTestResult.cpp"


extern "C" {static PyObject *meth_QWebHitTestResult_isNull(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebHitTestResult,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNull();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebHitTestResult,sipName_isNull);

    return NULL;
}


extern "C" {static PyObject *meth_QWebHitTestResult_pos(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebHitTestResult,&sipCpp))
        {
            QPoint *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint(sipCpp->pos());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebHitTestResult,sipName_pos);

    return NULL;
}


extern "C" {static PyObject *meth_QWebHitTestResult_title(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_title(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebHitTestResult,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->title());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebHitTestResult,sipName_title);

    return NULL;
}


extern "C" {static PyObject *meth_QWebHitTestResult_linkText(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_linkText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebHitTestResult,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->linkText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebHitTestResult,sipName_linkText);

    return NULL;
}


extern "C" {static PyObject *meth_QWebHitTestResult_linkUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_linkUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebHitTestResult,&sipCpp))
        {
            QUrl *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QUrl(sipCpp->linkUrl());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebHitTestResult,sipName_linkUrl);

    return NULL;
}


extern "C" {static PyObject *meth_QWebHitTestResult_linkTitle(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_linkTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebHitTestResult,&sipCpp))
        {
            QUrl *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QUrl(sipCpp->linkTitle());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebHitTestResult,sipName_linkTitle);

    return NULL;
}


extern "C" {static PyObject *meth_QWebHitTestResult_linkTargetFrame(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_linkTargetFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebHitTestResult,&sipCpp))
        {
            QWebFrame *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->linkTargetFrame();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebFrame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebHitTestResult,sipName_linkTargetFrame);

    return NULL;
}


extern "C" {static PyObject *meth_QWebHitTestResult_alternateText(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_alternateText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebHitTestResult,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->alternateText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebHitTestResult,sipName_alternateText);

    return NULL;
}


extern "C" {static PyObject *meth_QWebHitTestResult_imageUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_imageUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebHitTestResult,&sipCpp))
        {
            QUrl *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QUrl(sipCpp->imageUrl());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebHitTestResult,sipName_imageUrl);

    return NULL;
}


extern "C" {static PyObject *meth_QWebHitTestResult_pixmap(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_pixmap(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebHitTestResult,&sipCpp))
        {
            QPixmap *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(sipCpp->pixmap());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebHitTestResult,sipName_pixmap);

    return NULL;
}


extern "C" {static PyObject *meth_QWebHitTestResult_isContentEditable(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_isContentEditable(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebHitTestResult,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isContentEditable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebHitTestResult,sipName_isContentEditable);

    return NULL;
}


extern "C" {static PyObject *meth_QWebHitTestResult_isContentSelected(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_isContentSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebHitTestResult,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isContentSelected();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebHitTestResult,sipName_isContentSelected);

    return NULL;
}


extern "C" {static PyObject *meth_QWebHitTestResult_frame(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_frame(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebHitTestResult,&sipCpp))
        {
            QWebFrame *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->frame();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebFrame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebHitTestResult,sipName_frame);

    return NULL;
}


extern "C" {static PyObject *meth_QWebHitTestResult_boundingRect(PyObject *, PyObject *);}
static PyObject *meth_QWebHitTestResult_boundingRect(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebHitTestResult *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebHitTestResult,&sipCpp))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->boundingRect());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebHitTestResult,sipName_boundingRect);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QWebHitTestResult(void *, const sipTypeDef *);}
static void *cast_QWebHitTestResult(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QWebHitTestResult)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebHitTestResult(void *, int);}
static void release_QWebHitTestResult(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QWebHitTestResult *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QWebHitTestResult(void *, SIP_SSIZE_T, const void *);}
static void assign_QWebHitTestResult(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QWebHitTestResult *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QWebHitTestResult *>(sipSrc);
}


extern "C" {static void *array_QWebHitTestResult(SIP_SSIZE_T);}
static void *array_QWebHitTestResult(SIP_SSIZE_T sipNrElem)
{
    return new QWebHitTestResult[sipNrElem];
}


extern "C" {static void *copy_QWebHitTestResult(const void *, SIP_SSIZE_T);}
static void *copy_QWebHitTestResult(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QWebHitTestResult(reinterpret_cast<const QWebHitTestResult *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QWebHitTestResult(sipSimpleWrapper *);}
static void dealloc_QWebHitTestResult(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QWebHitTestResult(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QWebHitTestResult(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QWebHitTestResult(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QWebHitTestResult *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QWebHitTestResult();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QWebHitTestResult * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QWebHitTestResult,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QWebHitTestResult(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    return sipCpp;
}


static PyMethodDef methods_QWebHitTestResult[] = {
    {SIP_MLNAME_CAST(sipName_alternateText), meth_QWebHitTestResult_alternateText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_boundingRect), meth_QWebHitTestResult_boundingRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_frame), meth_QWebHitTestResult_frame, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_imageUrl), meth_QWebHitTestResult_imageUrl, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isContentEditable), meth_QWebHitTestResult_isContentEditable, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isContentSelected), meth_QWebHitTestResult_isContentSelected, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QWebHitTestResult_isNull, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_linkTargetFrame), meth_QWebHitTestResult_linkTargetFrame, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_linkText), meth_QWebHitTestResult_linkText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_linkTitle), meth_QWebHitTestResult_linkTitle, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_linkUrl), meth_QWebHitTestResult_linkUrl, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_pixmap), meth_QWebHitTestResult_pixmap, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_pos), meth_QWebHitTestResult_pos, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_title), meth_QWebHitTestResult_title, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtWebKit_QWebHitTestResult = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QWebHitTestResult,
        {0}
    },
    {
        sipNameNr_QWebHitTestResult,
        {0, 0, 1},
        14, methods_QWebHitTestResult,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QWebHitTestResult,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebHitTestResult,
    assign_QWebHitTestResult,
    array_QWebHitTestResult,
    copy_QWebHitTestResult,
    release_QWebHitTestResult,
    cast_QWebHitTestResult,
    0,
    0,
    0
},
    0,
    0,
    0
};

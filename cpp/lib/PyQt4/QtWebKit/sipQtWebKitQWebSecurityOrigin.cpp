/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:37 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebKit.h"

#line 39 "sip/QtWebKit/qwebsecurityorigin.sip"
#include <qwebsecurityorigin.h>
#line 39 "sipQtWebKitQWebSecurityOrigin.cpp"

#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 43 "sipQtWebKitQWebSecurityOrigin.cpp"
#line 39 "sip/QtWebKit/qwebdatabase.sip"
#include <qwebdatabase.h>
#line 46 "sipQtWebKitQWebSecurityOrigin.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 49 "sipQtWebKitQWebSecurityOrigin.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 52 "sipQtWebKitQWebSecurityOrigin.cpp"


extern "C" {static PyObject *meth_QWebSecurityOrigin_allOrigins(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_allOrigins(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QList<QWebSecurityOrigin> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QWebSecurityOrigin>(QWebSecurityOrigin::allOrigins());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QWebSecurityOrigin,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSecurityOrigin,sipName_allOrigins);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSecurityOrigin_scheme(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_scheme(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebSecurityOrigin *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebSecurityOrigin,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->scheme());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSecurityOrigin,sipName_scheme);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSecurityOrigin_host(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_host(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebSecurityOrigin *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebSecurityOrigin,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->host());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSecurityOrigin,sipName_host);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSecurityOrigin_port(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_port(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebSecurityOrigin *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebSecurityOrigin,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->port();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSecurityOrigin,sipName_port);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSecurityOrigin_databaseUsage(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_databaseUsage(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebSecurityOrigin *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebSecurityOrigin,&sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->databaseUsage();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSecurityOrigin,sipName_databaseUsage);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSecurityOrigin_databaseQuota(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_databaseQuota(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebSecurityOrigin *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebSecurityOrigin,&sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->databaseQuota();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSecurityOrigin,sipName_databaseQuota);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSecurityOrigin_setDatabaseQuota(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_setDatabaseQuota(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qint64 a0;
        QWebSecurityOrigin *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bn",&sipSelf,sipType_QWebSecurityOrigin,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDatabaseQuota(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSecurityOrigin,sipName_setDatabaseQuota);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSecurityOrigin_databases(PyObject *, PyObject *);}
static PyObject *meth_QWebSecurityOrigin_databases(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebSecurityOrigin *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebSecurityOrigin,&sipCpp))
        {
            QList<QWebDatabase> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QWebDatabase>(sipCpp->databases());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QWebDatabase,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSecurityOrigin,sipName_databases);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QWebSecurityOrigin(void *, const sipTypeDef *);}
static void *cast_QWebSecurityOrigin(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QWebSecurityOrigin)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebSecurityOrigin(void *, int);}
static void release_QWebSecurityOrigin(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QWebSecurityOrigin *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QWebSecurityOrigin(sipSimpleWrapper *);}
static void dealloc_QWebSecurityOrigin(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QWebSecurityOrigin(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QWebSecurityOrigin(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QWebSecurityOrigin(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QWebSecurityOrigin *sipCpp = 0;

    if (!sipCpp)
    {
        const QWebSecurityOrigin * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QWebSecurityOrigin,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QWebSecurityOrigin(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    return sipCpp;
}


static PyMethodDef methods_QWebSecurityOrigin[] = {
    {SIP_MLNAME_CAST(sipName_allOrigins), meth_QWebSecurityOrigin_allOrigins, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_databaseQuota), meth_QWebSecurityOrigin_databaseQuota, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_databaseUsage), meth_QWebSecurityOrigin_databaseUsage, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_databases), meth_QWebSecurityOrigin_databases, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_host), meth_QWebSecurityOrigin_host, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_port), meth_QWebSecurityOrigin_port, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scheme), meth_QWebSecurityOrigin_scheme, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDatabaseQuota), meth_QWebSecurityOrigin_setDatabaseQuota, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtWebKit_QWebSecurityOrigin = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QWebSecurityOrigin,
        {0}
    },
    {
        sipNameNr_QWebSecurityOrigin,
        {0, 0, 1},
        8, methods_QWebSecurityOrigin,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QWebSecurityOrigin,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebSecurityOrigin,
    0,
    0,
    0,
    release_QWebSecurityOrigin,
    cast_QWebSecurityOrigin,
    0,
    0,
    0
},
    0,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:37 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebKit.h"

#line 39 "sip/QtWebKit/qwebsettings.sip"
#include <qwebsettings.h>
#line 39 "sipQtWebKitQWebSettings.cpp"

#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 43 "sipQtWebKitQWebSettings.cpp"
#line 41 "sip/QtGui/qpixmap.sip"
#include <qpixmap.h>
#line 46 "sipQtWebKitQWebSettings.cpp"
#line 41 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 49 "sipQtWebKitQWebSettings.cpp"
#line 41 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 52 "sipQtWebKitQWebSettings.cpp"


extern "C" {static PyObject *meth_QWebSettings_globalSettings(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_globalSettings(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QWebSettings *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QWebSettings::globalSettings();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebSettings,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSettings,sipName_globalSettings);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSettings_setFontFamily(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_setFontFamily(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebSettings::FontFamily a0;
        const QString * a1;
        int a1State = 0;
        QWebSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BEJ1",&sipSelf,sipType_QWebSettings,&sipCpp,sipType_QWebSettings_FontFamily,&a0,sipType_QString,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFontFamily(a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSettings,sipName_setFontFamily);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSettings_fontFamily(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_fontFamily(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebSettings::FontFamily a0;
        QWebSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QWebSettings,&sipCpp,sipType_QWebSettings_FontFamily,&a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->fontFamily(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSettings,sipName_fontFamily);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSettings_resetFontFamily(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_resetFontFamily(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebSettings::FontFamily a0;
        QWebSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QWebSettings,&sipCpp,sipType_QWebSettings_FontFamily,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resetFontFamily(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSettings,sipName_resetFontFamily);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSettings_setFontSize(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_setFontSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebSettings::FontSize a0;
        int a1;
        QWebSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BEi",&sipSelf,sipType_QWebSettings,&sipCpp,sipType_QWebSettings_FontSize,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFontSize(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSettings,sipName_setFontSize);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSettings_fontSize(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_fontSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebSettings::FontSize a0;
        QWebSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QWebSettings,&sipCpp,sipType_QWebSettings_FontSize,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fontSize(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSettings,sipName_fontSize);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSettings_resetFontSize(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_resetFontSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebSettings::FontSize a0;
        QWebSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QWebSettings,&sipCpp,sipType_QWebSettings_FontSize,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resetFontSize(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSettings,sipName_resetFontSize);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSettings_setAttribute(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_setAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebSettings::WebAttribute a0;
        bool a1;
        QWebSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BEb",&sipSelf,sipType_QWebSettings,&sipCpp,sipType_QWebSettings_WebAttribute,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAttribute(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSettings,sipName_setAttribute);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSettings_testAttribute(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_testAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebSettings::WebAttribute a0;
        QWebSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QWebSettings,&sipCpp,sipType_QWebSettings_WebAttribute,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->testAttribute(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSettings,sipName_testAttribute);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSettings_resetAttribute(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_resetAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebSettings::WebAttribute a0;
        QWebSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QWebSettings,&sipCpp,sipType_QWebSettings_WebAttribute,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resetAttribute(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSettings,sipName_resetAttribute);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSettings_setUserStyleSheetUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_setUserStyleSheetUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QUrl * a0;
        QWebSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QWebSettings,&sipCpp,sipType_QUrl,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUserStyleSheetUrl(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSettings,sipName_setUserStyleSheetUrl);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSettings_userStyleSheetUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_userStyleSheetUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebSettings,&sipCpp))
        {
            QUrl *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QUrl(sipCpp->userStyleSheetUrl());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSettings,sipName_userStyleSheetUrl);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSettings_setIconDatabasePath(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_setIconDatabasePath(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1",sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QWebSettings::setIconDatabasePath(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSettings,sipName_setIconDatabasePath);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSettings_iconDatabasePath(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_iconDatabasePath(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QWebSettings::iconDatabasePath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSettings,sipName_iconDatabasePath);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSettings_clearIconDatabase(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_clearIconDatabase(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            QWebSettings::clearIconDatabase();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSettings,sipName_clearIconDatabase);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSettings_iconForUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_iconForUrl(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QUrl * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QUrl,&a0))
        {
            QIcon *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QIcon(QWebSettings::iconForUrl(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSettings,sipName_iconForUrl);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSettings_setWebGraphic(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_setWebGraphic(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebSettings::WebGraphic a0;
        const QPixmap * a1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"EJ9",sipType_QWebSettings_WebGraphic,&a0,sipType_QPixmap,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            QWebSettings::setWebGraphic(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSettings,sipName_setWebGraphic);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSettings_webGraphic(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_webGraphic(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebSettings::WebGraphic a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"E",sipType_QWebSettings_WebGraphic,&a0))
        {
            QPixmap *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPixmap(QWebSettings::webGraphic(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPixmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSettings,sipName_webGraphic);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSettings_setMaximumPagesInCache(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_setMaximumPagesInCache(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"i",&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QWebSettings::setMaximumPagesInCache(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSettings,sipName_setMaximumPagesInCache);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSettings_maximumPagesInCache(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_maximumPagesInCache(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QWebSettings::maximumPagesInCache();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSettings,sipName_maximumPagesInCache);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSettings_setObjectCacheCapacities(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_setObjectCacheCapacities(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        int a2;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"iii",&a0,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            QWebSettings::setObjectCacheCapacities(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSettings,sipName_setObjectCacheCapacities);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSettings_setOfflineStoragePath(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_setOfflineStoragePath(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1",sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QWebSettings::setOfflineStoragePath(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSettings,sipName_setOfflineStoragePath);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSettings_offlineStoragePath(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_offlineStoragePath(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QWebSettings::offlineStoragePath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSettings,sipName_offlineStoragePath);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSettings_setOfflineStorageDefaultQuota(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_setOfflineStorageDefaultQuota(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qint64 a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"n",&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QWebSettings::setOfflineStorageDefaultQuota(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSettings,sipName_setOfflineStorageDefaultQuota);

    return NULL;
}


extern "C" {static PyObject *meth_QWebSettings_offlineStorageDefaultQuota(PyObject *, PyObject *);}
static PyObject *meth_QWebSettings_offlineStorageDefaultQuota(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QWebSettings::offlineStorageDefaultQuota();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebSettings,sipName_offlineStorageDefaultQuota);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QWebSettings(void *, const sipTypeDef *);}
static void *cast_QWebSettings(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QWebSettings)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebSettings(void *, int);}
static void release_QWebSettings(void *,int)
{
}


static PyMethodDef methods_QWebSettings[] = {
    {SIP_MLNAME_CAST(sipName_clearIconDatabase), meth_QWebSettings_clearIconDatabase, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fontFamily), meth_QWebSettings_fontFamily, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fontSize), meth_QWebSettings_fontSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_globalSettings), meth_QWebSettings_globalSettings, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_iconDatabasePath), meth_QWebSettings_iconDatabasePath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_iconForUrl), meth_QWebSettings_iconForUrl, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_maximumPagesInCache), meth_QWebSettings_maximumPagesInCache, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_offlineStorageDefaultQuota), meth_QWebSettings_offlineStorageDefaultQuota, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_offlineStoragePath), meth_QWebSettings_offlineStoragePath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resetAttribute), meth_QWebSettings_resetAttribute, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resetFontFamily), meth_QWebSettings_resetFontFamily, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resetFontSize), meth_QWebSettings_resetFontSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAttribute), meth_QWebSettings_setAttribute, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFontFamily), meth_QWebSettings_setFontFamily, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFontSize), meth_QWebSettings_setFontSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setIconDatabasePath), meth_QWebSettings_setIconDatabasePath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setMaximumPagesInCache), meth_QWebSettings_setMaximumPagesInCache, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setObjectCacheCapacities), meth_QWebSettings_setObjectCacheCapacities, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setOfflineStorageDefaultQuota), meth_QWebSettings_setOfflineStorageDefaultQuota, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setOfflineStoragePath), meth_QWebSettings_setOfflineStoragePath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setUserStyleSheetUrl), meth_QWebSettings_setUserStyleSheetUrl, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setWebGraphic), meth_QWebSettings_setWebGraphic, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_testAttribute), meth_QWebSettings_testAttribute, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_userStyleSheetUrl), meth_QWebSettings_userStyleSheetUrl, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_webGraphic), meth_QWebSettings_webGraphic, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QWebSettings[] = {
    {sipName_AutoLoadImages, QWebSettings::AutoLoadImages, 35},
    {sipName_CursiveFont, QWebSettings::CursiveFont, 33},
    {sipName_DefaultFixedFontSize, QWebSettings::DefaultFixedFontSize, 34},
    {sipName_DefaultFontSize, QWebSettings::DefaultFontSize, 34},
    {sipName_DefaultFrameIconGraphic, QWebSettings::DefaultFrameIconGraphic, 36},
    {sipName_DeveloperExtrasEnabled, QWebSettings::DeveloperExtrasEnabled, 35},
    {sipName_FantasyFont, QWebSettings::FantasyFont, 33},
    {sipName_FixedFont, QWebSettings::FixedFont, 33},
    {sipName_JavaEnabled, QWebSettings::JavaEnabled, 35},
    {sipName_JavascriptCanAccessClipboard, QWebSettings::JavascriptCanAccessClipboard, 35},
    {sipName_JavascriptCanOpenWindows, QWebSettings::JavascriptCanOpenWindows, 35},
    {sipName_JavascriptEnabled, QWebSettings::JavascriptEnabled, 35},
    {sipName_LinksIncludedInFocusChain, QWebSettings::LinksIncludedInFocusChain, 35},
    {sipName_LocalStorageDatabaseEnabled, QWebSettings::LocalStorageDatabaseEnabled, 35},
    {sipName_MinimumFontSize, QWebSettings::MinimumFontSize, 34},
    {sipName_MinimumLogicalFontSize, QWebSettings::MinimumLogicalFontSize, 34},
    {sipName_MissingImageGraphic, QWebSettings::MissingImageGraphic, 36},
    {sipName_MissingPluginGraphic, QWebSettings::MissingPluginGraphic, 36},
    {sipName_OfflineStorageDatabaseEnabled, QWebSettings::OfflineStorageDatabaseEnabled, 35},
    {sipName_OfflineWebApplicationCacheEnabled, QWebSettings::OfflineWebApplicationCacheEnabled, 35},
    {sipName_PluginsEnabled, QWebSettings::PluginsEnabled, 35},
    {sipName_PrintElementBackgrounds, QWebSettings::PrintElementBackgrounds, 35},
    {sipName_PrivateBrowsingEnabled, QWebSettings::PrivateBrowsingEnabled, 35},
    {sipName_SansSerifFont, QWebSettings::SansSerifFont, 33},
    {sipName_SerifFont, QWebSettings::SerifFont, 33},
    {sipName_StandardFont, QWebSettings::StandardFont, 33},
    {sipName_TextAreaSizeGripCornerGraphic, QWebSettings::TextAreaSizeGripCornerGraphic, 36},
    {sipName_ZoomTextOnly, QWebSettings::ZoomTextOnly, 35},
};


pyqt4ClassTypeDef sipTypeDef_QtWebKit_QWebSettings = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QWebSettings,
        {0}
    },
    {
        sipNameNr_QWebSettings,
        {0, 0, 1},
        25, methods_QWebSettings,
        28, enummembers_QWebSettings,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_QWebSettings,
    cast_QWebSettings,
    0,
    0,
    0
},
    0,
    0,
    0
};

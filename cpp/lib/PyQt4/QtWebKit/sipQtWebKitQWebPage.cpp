/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:37 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebKit.h"

#line 45 "sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 190 "sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 198 "sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 254 "sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 269 "sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 47 "sipQtWebKitQWebPage.cpp"

#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 51 "sipQtWebKitQWebPage.cpp"
#line 71 "sip/QtWebKit/qwebframe.sip"
#include <qwebframe.h>
#line 54 "sipQtWebKitQWebPage.cpp"
#line 39 "sip/QtWebKit/qwebhistory.sip"
#include <qwebhistory.h>
#line 57 "sipQtWebKitQWebPage.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 60 "sipQtWebKitQWebPage.cpp"
#line 37 "sip/QtGui/qmenu.sip"
#include <qmenu.h>
#line 63 "sipQtWebKitQWebPage.cpp"
#line 41 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 66 "sipQtWebKitQWebPage.cpp"
#line 39 "sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 69 "sipQtWebKitQWebPage.cpp"
#line 41 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 72 "sipQtWebKitQWebPage.cpp"
#line 39 "sip/QtNetwork/qnetworkreply.sip"
#include <qnetworkreply.h>
#line 75 "sipQtWebKitQWebPage.cpp"
#line 41 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 78 "sipQtWebKitQWebPage.cpp"
#line 45 "sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 190 "sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 198 "sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 254 "sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 269 "sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 89 "sipQtWebKitQWebPage.cpp"
#line 45 "sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 190 "sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 198 "sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 254 "sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 269 "sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 100 "sipQtWebKitQWebPage.cpp"
#line 41 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 103 "sipQtWebKitQWebPage.cpp"
#line 431 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 106 "sipQtWebKitQWebPage.cpp"
#line 41 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 109 "sipQtWebKitQWebPage.cpp"
#line 45 "sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 112 "sipQtWebKitQWebPage.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 115 "sipQtWebKitQWebPage.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 118 "sipQtWebKitQWebPage.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 121 "sipQtWebKitQWebPage.cpp"
#line 41 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 124 "sipQtWebKitQWebPage.cpp"
#line 37 "sip/QtGui/qaction.sip"
#include <qaction.h>
#line 127 "sipQtWebKitQWebPage.cpp"
#line 39 "sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 47 "sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 59 "sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 81 "sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 89 "sip/QtWebKit/qwebpluginfactory.sip"
#include <qwebpluginfactory.h>
#line 138 "sipQtWebKitQWebPage.cpp"
#line 39 "sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 141 "sipQtWebKitQWebPage.cpp"
#line 70 "sip/QtGui/qundostack.sip"
#include <qundostack.h>
#line 144 "sipQtWebKitQWebPage.cpp"
#line 41 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 147 "sipQtWebKitQWebPage.cpp"
#line 39 "sip/QtWebKit/qwebsettings.sip"
#include <qwebsettings.h>
#line 150 "sipQtWebKitQWebPage.cpp"
#line 68 "sip/QtWebKit/qwebhistory.sip"
#include <qwebhistory.h>
#line 153 "sipQtWebKitQWebPage.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 156 "sipQtWebKitQWebPage.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 159 "sipQtWebKitQWebPage.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 162 "sipQtWebKitQWebPage.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 165 "sipQtWebKitQWebPage.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 168 "sipQtWebKitQWebPage.cpp"
#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 171 "sipQtWebKitQWebPage.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 174 "sipQtWebKitQWebPage.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 177 "sipQtWebKitQWebPage.cpp"


class sipQWebPage : public QWebPage
{
public:
    sipQWebPage(QObject *);
    virtual ~sipQWebPage();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    QWebPage * sipProtectVirt_createWindow(bool,QWebPage::WebWindowType);
    QObject * sipProtectVirt_createPlugin(bool,const QString&,const QUrl&,const QStringList&,const QStringList&);
    bool sipProtectVirt_acceptNavigationRequest(bool,QWebFrame *,const QNetworkRequest&,QWebPage::NavigationType);
    QString sipProtectVirt_chooseFile(bool,QWebFrame *,const QString&);
    void sipProtectVirt_javaScriptAlert(bool,QWebFrame *,const QString&);
    bool sipProtectVirt_javaScriptConfirm(bool,QWebFrame *,const QString&);
    bool sipProtectVirt_javaScriptPrompt(bool,QWebFrame *,const QString&,const QString&,QString *);
    void sipProtectVirt_javaScriptConsoleMessage(bool,const QString&,int,const QString&);
    QString sipProtectVirt_userAgentForUrl(bool,const QUrl&) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void triggerAction(QWebPage::WebAction,bool);
    bool event(QEvent *);
    bool extension(QWebPage::Extension,const QWebPage::ExtensionOption *,QWebPage::ExtensionReturn *);
    bool supportsExtension(QWebPage::Extension) const;
    QWebPage * createWindow(QWebPage::WebWindowType);
    QObject * createPlugin(const QString&,const QUrl&,const QStringList&,const QStringList&);
    bool acceptNavigationRequest(QWebFrame *,const QNetworkRequest&,QWebPage::NavigationType);
    QString chooseFile(QWebFrame *,const QString&);
    void javaScriptAlert(QWebFrame *,const QString&);
    bool javaScriptConfirm(QWebFrame *,const QString&);
    bool javaScriptPrompt(QWebFrame *,const QString&,const QString&,QString *);
    void javaScriptConsoleMessage(const QString&,int,const QString&);
    QString userAgentForUrl(const QUrl&) const;
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQWebPage(const sipQWebPage &);
    sipQWebPage &operator = (const sipQWebPage &);

    char sipPyMethods[20];
};

sipQWebPage::sipQWebPage(QObject *a0): QWebPage(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQWebPage::~sipQWebPage()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQWebPage::metaObject() const
{
    return sip_QtWebKit_qt_metaobject(sipPySelf,sipType_QWebPage);
}

int sipQWebPage::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QWebPage::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtWebKit_qt_metacall(sipPySelf,sipType_QWebPage,_c,_id,_a);

    return _id;
}

void *sipQWebPage::qt_metacast(const char *_clname)
{
    return (sip_QtWebKit_qt_metacast && sip_QtWebKit_qt_metacast(sipPySelf,sipType_QWebPage,_clname)) ? this : QWebPage::qt_metacast(_clname);
}

void sipQWebPage::triggerAction(QWebPage::WebAction a0,bool a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_triggerAction);

    if (!meth)
    {
        QWebPage::triggerAction(a0,a1);
        return;
    }

    extern void sipVH_QtWebKit_17(sip_gilstate_t,PyObject *,bool*,QWebPage::WebAction,bool);

    sipVH_QtWebKit_17(sipGILState,meth,0,a0,a1);
}

bool sipQWebPage::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QWebPage::event(a0);

    typedef bool (*sipVH_QtCore_12)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return ((sipVH_QtCore_12)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[12]))(sipGILState,meth,0,a0);
}

bool sipQWebPage::extension(QWebPage::Extension a0,const QWebPage::ExtensionOption *a1,QWebPage::ExtensionReturn *a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_extension);

    if (!meth)
        return QWebPage::extension(a0,a1,a2);

    extern bool sipVH_QtWebKit_16(sip_gilstate_t,PyObject *,bool*,QWebPage::Extension,const QWebPage::ExtensionOption *,QWebPage::ExtensionReturn *);

    return sipVH_QtWebKit_16(sipGILState,meth,0,a0,a1,a2);
}

bool sipQWebPage::supportsExtension(QWebPage::Extension a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_supportsExtension);

    if (!meth)
        return QWebPage::supportsExtension(a0);

    extern bool sipVH_QtWebKit_15(sip_gilstate_t,PyObject *,bool*,QWebPage::Extension);

    return sipVH_QtWebKit_15(sipGILState,meth,0,a0);
}

QWebPage * sipQWebPage::createWindow(QWebPage::WebWindowType a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_createWindow);

    if (!meth)
        return QWebPage::createWindow(a0);

    extern QWebPage * sipVH_QtWebKit_14(sip_gilstate_t,PyObject *,bool*,QWebPage::WebWindowType);

    return sipVH_QtWebKit_14(sipGILState,meth,0,a0);
}

QObject * sipQWebPage::createPlugin(const QString& a0,const QUrl& a1,const QStringList& a2,const QStringList& a3)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_createPlugin);

    if (!meth)
        return QWebPage::createPlugin(a0,a1,a2,a3);

    extern QObject * sipVH_QtWebKit_13(sip_gilstate_t,PyObject *,bool*,const QString&,const QUrl&,const QStringList&,const QStringList&);

    return sipVH_QtWebKit_13(sipGILState,meth,0,a0,a1,a2,a3);
}

bool sipQWebPage::acceptNavigationRequest(QWebFrame *a0,const QNetworkRequest& a1,QWebPage::NavigationType a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_acceptNavigationRequest);

    if (!meth)
        return QWebPage::acceptNavigationRequest(a0,a1,a2);

    extern bool sipVH_QtWebKit_12(sip_gilstate_t,PyObject *,bool*,QWebFrame *,const QNetworkRequest&,QWebPage::NavigationType);

    return sipVH_QtWebKit_12(sipGILState,meth,0,a0,a1,a2);
}

QString sipQWebPage::chooseFile(QWebFrame *a0,const QString& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_chooseFile);

    if (!meth)
        return QWebPage::chooseFile(a0,a1);

    extern QString sipVH_QtWebKit_11(sip_gilstate_t,PyObject *,bool*,QWebFrame *,const QString&);

    return sipVH_QtWebKit_11(sipGILState,meth,0,a0,a1);
}

void sipQWebPage::javaScriptAlert(QWebFrame *a0,const QString& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_javaScriptAlert);

    if (!meth)
    {
        QWebPage::javaScriptAlert(a0,a1);
        return;
    }

    extern void sipVH_QtWebKit_10(sip_gilstate_t,PyObject *,bool*,QWebFrame *,const QString&);

    sipVH_QtWebKit_10(sipGILState,meth,0,a0,a1);
}

bool sipQWebPage::javaScriptConfirm(QWebFrame *a0,const QString& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_javaScriptConfirm);

    if (!meth)
        return QWebPage::javaScriptConfirm(a0,a1);

    extern bool sipVH_QtWebKit_9(sip_gilstate_t,PyObject *,bool*,QWebFrame *,const QString&);

    return sipVH_QtWebKit_9(sipGILState,meth,0,a0,a1);
}

bool sipQWebPage::javaScriptPrompt(QWebFrame *a0,const QString& a1,const QString& a2,QString *a3)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_javaScriptPrompt);

    if (!meth)
        return QWebPage::javaScriptPrompt(a0,a1,a2,a3);

    if (sipIsAPIEnabled(sipName_QString, 2, 0))
    {
        extern bool sipVH_QtWebKit_8(sip_gilstate_t,PyObject *,bool*,QWebFrame *,const QString&,const QString&,QString *);

        return sipVH_QtWebKit_8(sipGILState,meth,0,a0,a1,a2,a3);
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        extern bool sipVH_QtWebKit_7(sip_gilstate_t,PyObject *,bool*,QWebFrame *,const QString&,const QString&,QString *);

        return sipVH_QtWebKit_7(sipGILState,meth,0,a0,a1,a2,a3);
    }

    return QWebPage::javaScriptPrompt(a0,a1,a2,a3);
}

void sipQWebPage::javaScriptConsoleMessage(const QString& a0,int a1,const QString& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_javaScriptConsoleMessage);

    if (!meth)
    {
        QWebPage::javaScriptConsoleMessage(a0,a1,a2);
        return;
    }

    extern void sipVH_QtWebKit_6(sip_gilstate_t,PyObject *,bool*,const QString&,int,const QString&);

    sipVH_QtWebKit_6(sipGILState,meth,0,a0,a1,a2);
}

QString sipQWebPage::userAgentForUrl(const QUrl& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_userAgentForUrl);

    if (!meth)
        return QWebPage::userAgentForUrl(a0);

    extern QString sipVH_QtWebKit_5(sip_gilstate_t,PyObject *,bool*,const QUrl&);

    return sipVH_QtWebKit_5(sipGILState,meth,0,a0);
}

bool sipQWebPage::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t,PyObject *,bool*,QObject *,QEvent *);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[20]))(sipGILState,meth,0,a0,a1);
}

void sipQWebPage::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_3)(sip_gilstate_t,PyObject *,bool*,QTimerEvent *);

    ((sipVH_QtCore_3)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[3]))(sipGILState,meth,0,a0);
}

void sipQWebPage::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_19)(sip_gilstate_t,PyObject *,bool*,QChildEvent *);

    ((sipVH_QtCore_19)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[19]))(sipGILState,meth,0,a0);
}

void sipQWebPage::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQWebPage::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

void sipQWebPage::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtWebKit_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

int sipQWebPage::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQWebPage::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQWebPage::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQWebPage::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQWebPage::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQWebPage::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

QWebPage * sipQWebPage::sipProtectVirt_createWindow(bool sipSelfWasArg,QWebPage::WebWindowType a0)
{
    return (sipSelfWasArg ? QWebPage::createWindow(a0) : createWindow(a0));
}

QObject * sipQWebPage::sipProtectVirt_createPlugin(bool sipSelfWasArg,const QString& a0,const QUrl& a1,const QStringList& a2,const QStringList& a3)
{
    return (sipSelfWasArg ? QWebPage::createPlugin(a0,a1,a2,a3) : createPlugin(a0,a1,a2,a3));
}

bool sipQWebPage::sipProtectVirt_acceptNavigationRequest(bool sipSelfWasArg,QWebFrame *a0,const QNetworkRequest& a1,QWebPage::NavigationType a2)
{
    return (sipSelfWasArg ? QWebPage::acceptNavigationRequest(a0,a1,a2) : acceptNavigationRequest(a0,a1,a2));
}

QString sipQWebPage::sipProtectVirt_chooseFile(bool sipSelfWasArg,QWebFrame *a0,const QString& a1)
{
    return (sipSelfWasArg ? QWebPage::chooseFile(a0,a1) : chooseFile(a0,a1));
}

void sipQWebPage::sipProtectVirt_javaScriptAlert(bool sipSelfWasArg,QWebFrame *a0,const QString& a1)
{
    (sipSelfWasArg ? QWebPage::javaScriptAlert(a0,a1) : javaScriptAlert(a0,a1));
}

bool sipQWebPage::sipProtectVirt_javaScriptConfirm(bool sipSelfWasArg,QWebFrame *a0,const QString& a1)
{
    return (sipSelfWasArg ? QWebPage::javaScriptConfirm(a0,a1) : javaScriptConfirm(a0,a1));
}

bool sipQWebPage::sipProtectVirt_javaScriptPrompt(bool sipSelfWasArg,QWebFrame *a0,const QString& a1,const QString& a2,QString *a3)
{
    return (sipSelfWasArg ? QWebPage::javaScriptPrompt(a0,a1,a2,a3) : javaScriptPrompt(a0,a1,a2,a3));
}

void sipQWebPage::sipProtectVirt_javaScriptConsoleMessage(bool sipSelfWasArg,const QString& a0,int a1,const QString& a2)
{
    (sipSelfWasArg ? QWebPage::javaScriptConsoleMessage(a0,a1,a2) : javaScriptConsoleMessage(a0,a1,a2));
}

QString sipQWebPage::sipProtectVirt_userAgentForUrl(bool sipSelfWasArg,const QUrl& a0) const
{
    return (sipSelfWasArg ? QWebPage::userAgentForUrl(a0) : userAgentForUrl(a0));
}


extern "C" {static PyObject *meth_QWebPage_receivers(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        char * a0;
        sipQWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QWebPage,&sipCpp,&a0))
        {
            int sipRes = 0;

#line 480 "sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
#line 697 "sipQtWebKitQWebPage.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_receivers);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QWebPage,&sipCpp,sipType_QTimerEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_timerEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QWebPage,&sipCpp,sipType_QChildEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_childEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QWebPage,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_customEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QWebPage,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_connectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QWebPage,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_disconnectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_mainFrame(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_mainFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebPage,&sipCpp))
        {
            QWebFrame *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->mainFrame();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebFrame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_mainFrame);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_currentFrame(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_currentFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebPage,&sipCpp))
        {
            QWebFrame *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentFrame();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebFrame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_currentFrame);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_history(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_history(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebPage,&sipCpp))
        {
            QWebHistory *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->history();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebHistory,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_history);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_settings(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_settings(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebPage,&sipCpp))
        {
            QWebSettings *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->settings();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebSettings,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_settings);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_setView(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setView(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWidget * a0;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QWebPage,&sipCpp,sipType_QWidget,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setView(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_setView);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_view(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_view(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebPage,&sipCpp))
        {
            QWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->view();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_view);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_isModified(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_isModified(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebPage,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isModified();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_isModified);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_undoStack(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_undoStack(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebPage,&sipCpp))
        {
            QUndoStack *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->undoStack();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QUndoStack,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_undoStack);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_setNetworkAccessManager(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setNetworkAccessManager(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QNetworkAccessManager * a0;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QWebPage,&sipCpp,sipType_QNetworkAccessManager,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNetworkAccessManager(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_setNetworkAccessManager);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_networkAccessManager(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_networkAccessManager(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebPage,&sipCpp))
        {
            QNetworkAccessManager *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->networkAccessManager();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QNetworkAccessManager,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_networkAccessManager);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_setPluginFactory(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setPluginFactory(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebPluginFactory * a0;
        PyObject *a0Keep;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B@J8",&sipSelf,sipType_QWebPage,&sipCpp,&a0Keep,sipType_QWebPluginFactory,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPluginFactory(a0);
            Py_END_ALLOW_THREADS

            sipKeepReference(sipSelf, 1, a0Keep);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_setPluginFactory);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_pluginFactory(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_pluginFactory(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebPage,&sipCpp))
        {
            QWebPluginFactory *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->pluginFactory();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebPluginFactory,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_pluginFactory);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_totalBytes(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_totalBytes(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebPage,&sipCpp))
        {
            quint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->totalBytes();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_totalBytes);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_bytesReceived(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_bytesReceived(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebPage,&sipCpp))
        {
            quint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->bytesReceived();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_bytesReceived);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_selectedText(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_selectedText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebPage,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->selectedText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_selectedText);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_action(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_action(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebPage::WebAction a0;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QWebPage,&sipCpp,sipType_QWebPage_WebAction,&a0))
        {
            QAction *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->action(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_action);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_triggerAction(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_triggerAction(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebPage::WebAction a0;
        bool a1 = 0;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE|b",&sipSelf,sipType_QWebPage,&sipCpp,sipType_QWebPage_WebAction,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QWebPage::triggerAction(a0,a1) : sipCpp->triggerAction(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_triggerAction);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_viewportSize(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_viewportSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebPage,&sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->viewportSize());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_viewportSize);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_setViewportSize(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setViewportSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QSize * a0;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QWebPage,&sipCpp,sipType_QSize,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setViewportSize(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_setViewportSize);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_event(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_event(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QWebPage,&sipCpp,sipType_QEvent,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QWebPage::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_event);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QWebPage,&sipCpp,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->focusNextPrevChild(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_focusNextPrevChild);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_inputMethodQuery(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_inputMethodQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Qt::InputMethodQuery a0;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QWebPage,&sipCpp,sipType_Qt_InputMethodQuery,&a0))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->inputMethodQuery(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_inputMethodQuery);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_findText(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_findText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QWebPage::FindFlags a1def = 0;
        QWebPage::FindFlags * a1 = &a1def;
        int a1State = 0;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|J1",&sipSelf,sipType_QWebPage,&sipCpp,sipType_QString,&a0,&a0State,sipType_QWebPage_FindFlags,&a1,&a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->findText(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a1,sipType_QWebPage_FindFlags,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_findText);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_setForwardUnsupportedContent(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setForwardUnsupportedContent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QWebPage,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setForwardUnsupportedContent(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_setForwardUnsupportedContent);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_forwardUnsupportedContent(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_forwardUnsupportedContent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebPage,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->forwardUnsupportedContent();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_forwardUnsupportedContent);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_setLinkDelegationPolicy(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setLinkDelegationPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebPage::LinkDelegationPolicy a0;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QWebPage,&sipCpp,sipType_QWebPage_LinkDelegationPolicy,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLinkDelegationPolicy(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_setLinkDelegationPolicy);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_linkDelegationPolicy(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_linkDelegationPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebPage,&sipCpp))
        {
            QWebPage::LinkDelegationPolicy sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->linkDelegationPolicy();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QWebPage_LinkDelegationPolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_linkDelegationPolicy);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_setPalette(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setPalette(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPalette * a0;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QWebPage,&sipCpp,sipType_QPalette,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPalette(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_setPalette);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_palette(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_palette(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebPage,&sipCpp))
        {
            QPalette *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPalette(sipCpp->palette());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPalette,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_palette);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_swallowContextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_swallowContextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QContextMenuEvent * a0;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QWebPage,&sipCpp,sipType_QContextMenuEvent,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->swallowContextMenuEvent(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_swallowContextMenuEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_updatePositionDependentActions(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_updatePositionDependentActions(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPoint * a0;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QWebPage,&sipCpp,sipType_QPoint,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->updatePositionDependentActions(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_updatePositionDependentActions);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_extension(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_extension(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebPage::Extension a0;
        const QWebPage::ExtensionOption * a1 = 0;
        QWebPage::ExtensionReturn * a2 = 0;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE|J8J8",&sipSelf,sipType_QWebPage,&sipCpp,sipType_QWebPage_Extension,&a0,sipType_QWebPage_ExtensionOption,&a1,sipType_QWebPage_ExtensionReturn,&a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QWebPage::extension(a0,a1,a2) : sipCpp->extension(a0,a1,a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_extension);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_supportsExtension(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_supportsExtension(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebPage::Extension a0;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QWebPage,&sipCpp,sipType_QWebPage_Extension,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QWebPage::supportsExtension(a0) : sipCpp->supportsExtension(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_supportsExtension);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_createWindow(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_createWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebPage::WebWindowType a0;
        sipQWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pE",&sipSelf,sipType_QWebPage,&sipCpp,sipType_QWebPage_WebWindowType,&a0))
        {
            QWebPage *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_createWindow(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebPage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_createWindow);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_createPlugin(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_createPlugin(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        const QUrl * a1;
        const QStringList * a2;
        int a2State = 0;
        const QStringList * a3;
        int a3State = 0;
        sipQWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ1J9J1J1",&sipSelf,sipType_QWebPage,&sipCpp,sipType_QString,&a0,&a0State,sipType_QUrl,&a1,sipType_QStringList,&a2,&a2State,sipType_QStringList,&a3,&a3State))
        {
            QObject *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_createPlugin(sipSelfWasArg,*a0,*a1,*a2,*a3);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QStringList *>(a2),sipType_QStringList,a2State);
            sipReleaseType(const_cast<QStringList *>(a3),sipType_QStringList,a3State);

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_createPlugin);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_acceptNavigationRequest(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_acceptNavigationRequest(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebFrame * a0;
        const QNetworkRequest * a1;
        QWebPage::NavigationType a2;
        sipQWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8J9E",&sipSelf,sipType_QWebPage,&sipCpp,sipType_QWebFrame,&a0,sipType_QNetworkRequest,&a1,sipType_QWebPage_NavigationType,&a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_acceptNavigationRequest(sipSelfWasArg,a0,*a1,a2);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_acceptNavigationRequest);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_chooseFile(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_chooseFile(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebFrame * a0;
        const QString * a1;
        int a1State = 0;
        sipQWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8J1",&sipSelf,sipType_QWebPage,&sipCpp,sipType_QWebFrame,&a0,sipType_QString,&a1,&a1State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->sipProtectVirt_chooseFile(sipSelfWasArg,a0,*a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_chooseFile);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_javaScriptAlert(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_javaScriptAlert(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebFrame * a0;
        const QString * a1;
        int a1State = 0;
        sipQWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8J1",&sipSelf,sipType_QWebPage,&sipCpp,sipType_QWebFrame,&a0,sipType_QString,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_javaScriptAlert(sipSelfWasArg,a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_javaScriptAlert);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_javaScriptConfirm(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_javaScriptConfirm(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWebFrame * a0;
        const QString * a1;
        int a1State = 0;
        sipQWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8J1",&sipSelf,sipType_QWebPage,&sipCpp,sipType_QWebFrame,&a0,sipType_QString,&a1,&a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_javaScriptConfirm(sipSelfWasArg,a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_javaScriptConfirm);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_javaScriptPrompt(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_javaScriptPrompt(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    if (sipIsAPIEnabled(sipName_QString, 2, 0))
    {
        QWebFrame * a0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        QString * a3;
        sipQWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8J1J1",&sipSelf,sipType_QWebPage,&sipCpp,sipType_QWebFrame,&a0,sipType_QString,&a1,&a1State,sipType_QString,&a2,&a2State))
        {
            bool sipRes;
            PyObject *sipResult;
            a3 = new QString();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_javaScriptPrompt(sipSelfWasArg,a0,*a1,*a2,a3);
            Py_END_ALLOW_THREADS

            sipResult = sipBuildResult(0,"(bD)",sipRes,a3,sipType_QString,NULL);

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            delete a3;

            return sipResult;
        }
    }

    if (sipIsAPIEnabled(sipName_QString, 0, 2))
    {
        QWebFrame * a0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        QString * a3;
        sipQWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8J1J1J8",&sipSelf,sipType_QWebPage,&sipCpp,sipType_QWebFrame,&a0,sipType_QString,&a1,&a1State,sipType_QString,&a2,&a2State,sipType_QString,&a3))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_javaScriptPrompt(sipSelfWasArg,a0,*a1,*a2,a3);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_javaScriptPrompt);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_javaScriptConsoleMessage(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_javaScriptConsoleMessage(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        int a1;
        const QString * a2;
        int a2State = 0;
        sipQWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ1iJ1",&sipSelf,sipType_QWebPage,&sipCpp,sipType_QString,&a0,&a0State,&a1,sipType_QString,&a2,&a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_javaScriptConsoleMessage(sipSelfWasArg,*a0,a1,*a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_javaScriptConsoleMessage);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_userAgentForUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_userAgentForUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QUrl * a0;
        sipQWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QWebPage,&sipCpp,sipType_QUrl,&a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->sipProtectVirt_userAgentForUrl(sipSelfWasArg,*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_userAgentForUrl);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_setContentEditable(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_setContentEditable(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QWebPage,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setContentEditable(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_setContentEditable);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_isContentEditable(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_isContentEditable(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebPage,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isContentEditable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_isContentEditable);

    return NULL;
}


extern "C" {static PyObject *meth_QWebPage_createStandardContextMenu(PyObject *, PyObject *);}
static PyObject *meth_QWebPage_createStandardContextMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebPage *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebPage,&sipCpp))
        {
            QMenu *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->createStandardContextMenu();
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMenu,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebPage,sipName_createStandardContextMenu);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QWebPage(void *, const sipTypeDef *);}
static void *cast_QWebPage(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QWebPage)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QWebPage *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebPage(void *, int);}
static void release_QWebPage(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQWebPage *>(sipCppV);
    else
        delete reinterpret_cast<QWebPage *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QWebPage(sipSimpleWrapper *);}
static void dealloc_QWebPage(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQWebPage *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QWebPage(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QWebPage(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QWebPage(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **sipOwner, int *sipArgsParsed)
{
    sipQWebPage *sipCpp = 0;

    if (!sipCpp)
    {
        QObject * a0 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"|JH",sipType_QObject,&a0,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQWebPage(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWebPage[] = {{111, 0, 1}};


static PyMethodDef methods_QWebPage[] = {
    {SIP_MLNAME_CAST(sipName_acceptNavigationRequest), meth_QWebPage_acceptNavigationRequest, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_action), meth_QWebPage_action, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_bytesReceived), meth_QWebPage_bytesReceived, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QWebPage_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_chooseFile), meth_QWebPage_chooseFile, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QWebPage_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createPlugin), meth_QWebPage_createPlugin, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createStandardContextMenu), meth_QWebPage_createStandardContextMenu, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createWindow), meth_QWebPage_createWindow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentFrame), meth_QWebPage_currentFrame, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QWebPage_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QWebPage_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_event), meth_QWebPage_event, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_extension), meth_QWebPage_extension, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_findText), meth_QWebPage_findText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), meth_QWebPage_focusNextPrevChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_forwardUnsupportedContent), meth_QWebPage_forwardUnsupportedContent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_history), meth_QWebPage_history, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodQuery), meth_QWebPage_inputMethodQuery, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isContentEditable), meth_QWebPage_isContentEditable, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isModified), meth_QWebPage_isModified, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_javaScriptAlert), meth_QWebPage_javaScriptAlert, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_javaScriptConfirm), meth_QWebPage_javaScriptConfirm, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_javaScriptConsoleMessage), meth_QWebPage_javaScriptConsoleMessage, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_javaScriptPrompt), meth_QWebPage_javaScriptPrompt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_linkDelegationPolicy), meth_QWebPage_linkDelegationPolicy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mainFrame), meth_QWebPage_mainFrame, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_networkAccessManager), meth_QWebPage_networkAccessManager, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_palette), meth_QWebPage_palette, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_pluginFactory), meth_QWebPage_pluginFactory, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QWebPage_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_selectedText), meth_QWebPage_selectedText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setContentEditable), meth_QWebPage_setContentEditable, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setForwardUnsupportedContent), meth_QWebPage_setForwardUnsupportedContent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setLinkDelegationPolicy), meth_QWebPage_setLinkDelegationPolicy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setNetworkAccessManager), meth_QWebPage_setNetworkAccessManager, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPalette), meth_QWebPage_setPalette, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPluginFactory), meth_QWebPage_setPluginFactory, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setView), meth_QWebPage_setView, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setViewportSize), meth_QWebPage_setViewportSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_settings), meth_QWebPage_settings, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_supportsExtension), meth_QWebPage_supportsExtension, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_swallowContextMenuEvent), meth_QWebPage_swallowContextMenuEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QWebPage_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_totalBytes), meth_QWebPage_totalBytes, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_triggerAction), meth_QWebPage_triggerAction, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_undoStack), meth_QWebPage_undoStack, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updatePositionDependentActions), meth_QWebPage_updatePositionDependentActions, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_userAgentForUrl), meth_QWebPage_userAgentForUrl, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_view), meth_QWebPage_view, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_viewportSize), meth_QWebPage_viewportSize, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QWebPage[] = {
    {sipName_Back, QWebPage::Back, 23},
    {sipName_ChooseMultipleFilesExtension, QWebPage::ChooseMultipleFilesExtension, 16},
    {sipName_Copy, QWebPage::Copy, 23},
    {sipName_CopyImageToClipboard, QWebPage::CopyImageToClipboard, 23},
    {sipName_CopyLinkToClipboard, QWebPage::CopyLinkToClipboard, 23},
    {sipName_Cut, QWebPage::Cut, 23},
    {sipName_DelegateAllLinks, QWebPage::DelegateAllLinks, 21},
    {sipName_DelegateExternalLinks, QWebPage::DelegateExternalLinks, 21},
    {sipName_DeleteEndOfWord, QWebPage::DeleteEndOfWord, 23},
    {sipName_DeleteStartOfWord, QWebPage::DeleteStartOfWord, 23},
    {sipName_DontDelegateLinks, QWebPage::DontDelegateLinks, 21},
    {sipName_DownloadImageToDisk, QWebPage::DownloadImageToDisk, 23},
    {sipName_DownloadLinkToDisk, QWebPage::DownloadLinkToDisk, 23},
    {sipName_FindBackward, QWebPage::FindBackward, 19},
    {sipName_FindCaseSensitively, QWebPage::FindCaseSensitively, 19},
    {sipName_FindWrapsAroundDocument, QWebPage::FindWrapsAroundDocument, 19},
    {sipName_Forward, QWebPage::Forward, 23},
    {sipName_InsertLineSeparator, QWebPage::InsertLineSeparator, 23},
    {sipName_InsertParagraphSeparator, QWebPage::InsertParagraphSeparator, 23},
    {sipName_InspectElement, QWebPage::InspectElement, 23},
    {sipName_MoveToEndOfBlock, QWebPage::MoveToEndOfBlock, 23},
    {sipName_MoveToEndOfDocument, QWebPage::MoveToEndOfDocument, 23},
    {sipName_MoveToEndOfLine, QWebPage::MoveToEndOfLine, 23},
    {sipName_MoveToNextChar, QWebPage::MoveToNextChar, 23},
    {sipName_MoveToNextLine, QWebPage::MoveToNextLine, 23},
    {sipName_MoveToNextWord, QWebPage::MoveToNextWord, 23},
    {sipName_MoveToPreviousChar, QWebPage::MoveToPreviousChar, 23},
    {sipName_MoveToPreviousLine, QWebPage::MoveToPreviousLine, 23},
    {sipName_MoveToPreviousWord, QWebPage::MoveToPreviousWord, 23},
    {sipName_MoveToStartOfBlock, QWebPage::MoveToStartOfBlock, 23},
    {sipName_MoveToStartOfDocument, QWebPage::MoveToStartOfDocument, 23},
    {sipName_MoveToStartOfLine, QWebPage::MoveToStartOfLine, 23},
    {sipName_NavigationTypeBackOrForward, QWebPage::NavigationTypeBackOrForward, 22},
    {sipName_NavigationTypeFormResubmitted, QWebPage::NavigationTypeFormResubmitted, 22},
    {sipName_NavigationTypeFormSubmitted, QWebPage::NavigationTypeFormSubmitted, 22},
    {sipName_NavigationTypeLinkClicked, QWebPage::NavigationTypeLinkClicked, 22},
    {sipName_NavigationTypeOther, QWebPage::NavigationTypeOther, 22},
    {sipName_NavigationTypeReload, QWebPage::NavigationTypeReload, 22},
    {sipName_NoWebAction, QWebPage::NoWebAction, 23},
    {sipName_OpenFrameInNewWindow, QWebPage::OpenFrameInNewWindow, 23},
    {sipName_OpenImageInNewWindow, QWebPage::OpenImageInNewWindow, 23},
    {sipName_OpenLink, QWebPage::OpenLink, 23},
    {sipName_OpenLinkInNewWindow, QWebPage::OpenLinkInNewWindow, 23},
    {sipName_Paste, QWebPage::Paste, 23},
    {sipName_Redo, QWebPage::Redo, 23},
    {sipName_Reload, QWebPage::Reload, 23},
    {sipName_SelectAll, QWebPage::SelectAll, 23},
    {sipName_SelectEndOfBlock, QWebPage::SelectEndOfBlock, 23},
    {sipName_SelectEndOfDocument, QWebPage::SelectEndOfDocument, 23},
    {sipName_SelectEndOfLine, QWebPage::SelectEndOfLine, 23},
    {sipName_SelectNextChar, QWebPage::SelectNextChar, 23},
    {sipName_SelectNextLine, QWebPage::SelectNextLine, 23},
    {sipName_SelectNextWord, QWebPage::SelectNextWord, 23},
    {sipName_SelectPreviousChar, QWebPage::SelectPreviousChar, 23},
    {sipName_SelectPreviousLine, QWebPage::SelectPreviousLine, 23},
    {sipName_SelectPreviousWord, QWebPage::SelectPreviousWord, 23},
    {sipName_SelectStartOfBlock, QWebPage::SelectStartOfBlock, 23},
    {sipName_SelectStartOfDocument, QWebPage::SelectStartOfDocument, 23},
    {sipName_SelectStartOfLine, QWebPage::SelectStartOfLine, 23},
    {sipName_SetTextDirectionDefault, QWebPage::SetTextDirectionDefault, 23},
    {sipName_SetTextDirectionLeftToRight, QWebPage::SetTextDirectionLeftToRight, 23},
    {sipName_SetTextDirectionRightToLeft, QWebPage::SetTextDirectionRightToLeft, 23},
    {sipName_Stop, QWebPage::Stop, 23},
    {sipName_ToggleBold, QWebPage::ToggleBold, 23},
    {sipName_ToggleItalic, QWebPage::ToggleItalic, 23},
    {sipName_ToggleUnderline, QWebPage::ToggleUnderline, 23},
    {sipName_Undo, QWebPage::Undo, 23},
    {sipName_WebBrowserWindow, QWebPage::WebBrowserWindow, 24},
    {sipName_WebModalDialog, QWebPage::WebModalDialog, 24},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QWebPage[] = {
    {"restoreFrameStateRequested(QWebFrame *)", 0},
    {"saveFrameStateRequested(QWebFrame *,QWebHistoryItem *)", 0},
    {"databaseQuotaExceeded(QWebFrame *,QString)", 0},
    {"contentsChanged()", 0},
    {"microFocusChanged()", 0},
    {"downloadRequested(const QNetworkRequest&)", 0},
    {"unsupportedContent(QNetworkReply *)", 0},
    {"menuBarVisibilityChangeRequested(bool)", 0},
    {"statusBarVisibilityChangeRequested(bool)", 0},
    {"toolBarVisibilityChangeRequested(bool)", 0},
    {"linkClicked(const QUrl&)", 0},
    {"printRequested(QWebFrame *)", 0},
    {"windowCloseRequested()", 0},
    {"scrollRequested(int,int,const QRect&)", 0},
    {"repaintRequested(const QRect&)", 0},
    {"geometryChangeRequested(const QRect&)", 0},
    {"frameCreated(QWebFrame *)", 0},
    {"selectionChanged()", 0},
    {"statusBarMessage(const QString&)", 0},
    {"linkHovered(const QString&,const QString&,const QString&)", 0},
    {"loadStarted()", 0},
    {"loadProgress(int)", 0},
    {"loadFinished(bool)", 0},
    {0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtWebKit_QWebPage = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QWebPage,
        {0}
    },
    {
        sipNameNr_QWebPage,
        {0, 0, 1},
        51, methods_QWebPage,
        69, enummembers_QWebPage,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QWebPage,
    0,
    init_QWebPage,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QWebPage,
    0,
    0,
    0,
    release_QWebPage,
    cast_QWebPage,
    0,
    0,
    0
},
    &QWebPage::staticMetaObject,
    0,
    pyqt4_signals_QWebPage
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:37 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtWebKit.h"

#line 71 "sip/QtWebKit/qwebframe.sip"
#include <qwebframe.h>
#line 39 "sipQtWebKitQWebFrame.cpp"

#line 39 "sip/QtWebKit/qwebsecurityorigin.sip"
#include <qwebsecurityorigin.h>
#line 43 "sipQtWebKitQWebFrame.cpp"
#line 41 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 46 "sipQtWebKitQWebFrame.cpp"
#line 246 "sip/QtCore/qmap.sip"
#include <qmap.h>
#line 49 "sipQtWebKitQWebFrame.cpp"
#line 89 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 52 "sipQtWebKitQWebFrame.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 55 "sipQtWebKitQWebFrame.cpp"
#line 41 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 58 "sipQtWebKitQWebFrame.cpp"
#line 37 "sip/QtGui/qprinter.sip"
#include <qprinter.h>
#line 61 "sipQtWebKitQWebFrame.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 64 "sipQtWebKitQWebFrame.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 67 "sipQtWebKitQWebFrame.cpp"
#line 39 "sip/QtWebKit/qwebframe.sip"
#include <qwebframe.h>
#line 70 "sipQtWebKitQWebFrame.cpp"
#line 41 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 73 "sipQtWebKitQWebFrame.cpp"
#line 41 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 76 "sipQtWebKitQWebFrame.cpp"
#line 41 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 79 "sipQtWebKitQWebFrame.cpp"
#line 41 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 82 "sipQtWebKitQWebFrame.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 85 "sipQtWebKitQWebFrame.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 88 "sipQtWebKitQWebFrame.cpp"
#line 41 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 91 "sipQtWebKitQWebFrame.cpp"
#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 94 "sipQtWebKitQWebFrame.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 97 "sipQtWebKitQWebFrame.cpp"
#line 39 "sip/QtNetwork/qnetworkrequest.sip"
#include <qnetworkrequest.h>
#line 100 "sipQtWebKitQWebFrame.cpp"
#line 39 "sip/QtNetwork/qnetworkaccessmanager.sip"
#include <qnetworkaccessmanager.h>
#line 103 "sipQtWebKitQWebFrame.cpp"
#line 45 "sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 190 "sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 198 "sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 254 "sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 269 "sip/QtWebKit/qwebpage.sip"
#include <qwebpage.h>
#line 114 "sipQtWebKitQWebFrame.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 117 "sipQtWebKitQWebFrame.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 120 "sipQtWebKitQWebFrame.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 123 "sipQtWebKitQWebFrame.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 126 "sipQtWebKitQWebFrame.cpp"
#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 129 "sipQtWebKitQWebFrame.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 132 "sipQtWebKitQWebFrame.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 135 "sipQtWebKitQWebFrame.cpp"


extern "C" {static PyObject *meth_QWebFrame_page(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_page(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebFrame,&sipCpp))
        {
            QWebPage *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->page();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebPage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_page);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_load(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_load(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QUrl * a0;
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QWebFrame,&sipCpp,sipType_QUrl,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->load(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QNetworkRequest * a0;
        QNetworkAccessManager::Operation a1 = QNetworkAccessManager::GetOperation;
        const QByteArray& a2def = QByteArray();
        const QByteArray * a2 = &a2def;
        int a2State = 0;
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9|EJ1",&sipSelf,sipType_QWebFrame,&sipCpp,sipType_QNetworkRequest,&a0,sipType_QNetworkAccessManager_Operation,&a1,sipType_QByteArray,&a2,&a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->load(*a0,a1,*a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QByteArray *>(a2),sipType_QByteArray,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_load);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_setHtml(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_setHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        const QUrl& a1def = QUrl();
        const QUrl * a1 = &a1def;
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|J9",&sipSelf,sipType_QWebFrame,&sipCpp,sipType_QString,&a0,&a0State,sipType_QUrl,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHtml(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_setHtml);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_setContent(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_setContent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QByteArray * a0;
        int a0State = 0;
        const QString& a1def = QString();
        const QString * a1 = &a1def;
        int a1State = 0;
        const QUrl& a2def = QUrl();
        const QUrl * a2 = &a2def;
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|J1J9",&sipSelf,sipType_QWebFrame,&sipCpp,sipType_QByteArray,&a0,&a0State,sipType_QString,&a1,&a1State,sipType_QUrl,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setContent(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_setContent);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_addToJavaScriptWindowObject(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_addToJavaScriptWindowObject(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QObject * a1;
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J:",&sipSelf,sipType_QWebFrame,&sipCpp,sipType_QString,&a0,&a0State,sipType_QObject,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addToJavaScriptWindowObject(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_addToJavaScriptWindowObject);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_toHtml(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_toHtml(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebFrame,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toHtml());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_toHtml);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_toPlainText(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_toPlainText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebFrame,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toPlainText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_toPlainText);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_renderTreeDump(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_renderTreeDump(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebFrame,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->renderTreeDump());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_renderTreeDump);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_title(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_title(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebFrame,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->title());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_title);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_setUrl(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_setUrl(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QUrl * a0;
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QWebFrame,&sipCpp,sipType_QUrl,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setUrl(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_setUrl);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_url(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_url(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebFrame,&sipCpp))
        {
            QUrl *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QUrl(sipCpp->url());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_url);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_icon(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_icon(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebFrame,&sipCpp))
        {
            QIcon *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QIcon(sipCpp->icon());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QIcon,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_icon);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_frameName(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_frameName(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebFrame,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->frameName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_frameName);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_parentFrame(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_parentFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebFrame,&sipCpp))
        {
            QWebFrame *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->parentFrame();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWebFrame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_parentFrame);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_childFrames(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_childFrames(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebFrame,&sipCpp))
        {
            QList<QWebFrame *> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QWebFrame *>(sipCpp->childFrames());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0101QWebFrame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_childFrames);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_scrollBarPolicy(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_scrollBarPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Qt::Orientation a0;
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QWebFrame,&sipCpp,sipType_Qt_Orientation,&a0))
        {
            Qt::ScrollBarPolicy sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->scrollBarPolicy(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Qt_ScrollBarPolicy);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_scrollBarPolicy);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_setScrollBarPolicy(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_setScrollBarPolicy(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Qt::Orientation a0;
        Qt::ScrollBarPolicy a1;
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BEE",&sipSelf,sipType_QWebFrame,&sipCpp,sipType_Qt_Orientation,&a0,sipType_Qt_ScrollBarPolicy,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setScrollBarPolicy(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_setScrollBarPolicy);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_setScrollBarValue(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_setScrollBarValue(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Qt::Orientation a0;
        int a1;
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BEi",&sipSelf,sipType_QWebFrame,&sipCpp,sipType_Qt_Orientation,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setScrollBarValue(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_setScrollBarValue);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_scrollBarValue(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_scrollBarValue(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Qt::Orientation a0;
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QWebFrame,&sipCpp,sipType_Qt_Orientation,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->scrollBarValue(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_scrollBarValue);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_scrollBarMinimum(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_scrollBarMinimum(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Qt::Orientation a0;
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QWebFrame,&sipCpp,sipType_Qt_Orientation,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->scrollBarMinimum(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_scrollBarMinimum);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_scrollBarMaximum(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_scrollBarMaximum(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Qt::Orientation a0;
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QWebFrame,&sipCpp,sipType_Qt_Orientation,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->scrollBarMaximum(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_scrollBarMaximum);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_render(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_render(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPainter * a0;
        const QRegion * a1;
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8J9",&sipSelf,sipType_QWebFrame,&sipCpp,sipType_QPainter,&a0,sipType_QRegion,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->render(a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QPainter * a0;
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QWebFrame,&sipCpp,sipType_QPainter,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->render(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_render);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_setTextSizeMultiplier(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_setTextSizeMultiplier(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qreal a0;
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bd",&sipSelf,sipType_QWebFrame,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTextSizeMultiplier(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_setTextSizeMultiplier);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_textSizeMultiplier(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_textSizeMultiplier(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebFrame,&sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->textSizeMultiplier();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_textSizeMultiplier);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_pos(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_pos(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebFrame,&sipCpp))
        {
            QPoint *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint(sipCpp->pos());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_pos);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_geometry(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_geometry(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebFrame,&sipCpp))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->geometry());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_geometry);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_contentsSize(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_contentsSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebFrame,&sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->contentsSize());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_contentsSize);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_hitTestContent(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_hitTestContent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPoint * a0;
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QWebFrame,&sipCpp,sipType_QPoint,&a0))
        {
            QWebHitTestResult *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QWebHitTestResult(sipCpp->hitTestContent(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QWebHitTestResult,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_hitTestContent);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_event(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_event(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QWebFrame,&sipCpp,sipType_QEvent,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QWebFrame::event(a0) : sipCpp->event(a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_event);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_evaluateJavaScript(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_evaluateJavaScript(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QWebFrame,&sipCpp,sipType_QString,&a0,&a0State))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->evaluateJavaScript(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_evaluateJavaScript);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_print_(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_print_(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QPrinter * a0;
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QWebFrame,&sipCpp,sipType_QPrinter,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->print(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_print_);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_metaData(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_metaData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebFrame,&sipCpp))
        {
            QMultiMap<QString,QString> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMultiMap<QString,QString>(sipCpp->metaData());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMultiMap_0100QString_0100QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_metaData);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_scroll(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_scroll(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii",&sipSelf,sipType_QWebFrame,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->scroll(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_scroll);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_scrollPosition(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_scrollPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebFrame,&sipCpp))
        {
            QPoint *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint(sipCpp->scrollPosition());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_scrollPosition);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_setScrollPosition(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_setScrollPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPoint * a0;
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QWebFrame,&sipCpp,sipType_QPoint,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setScrollPosition(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_setScrollPosition);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_zoomFactor(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_zoomFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebFrame,&sipCpp))
        {
            qreal sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->zoomFactor();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_zoomFactor);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_setZoomFactor(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_setZoomFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qreal a0;
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bd",&sipSelf,sipType_QWebFrame,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setZoomFactor(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_setZoomFactor);

    return NULL;
}


extern "C" {static PyObject *meth_QWebFrame_securityOrigin(PyObject *, PyObject *);}
static PyObject *meth_QWebFrame_securityOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QWebFrame *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QWebFrame,&sipCpp))
        {
            QWebSecurityOrigin *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QWebSecurityOrigin(sipCpp->securityOrigin());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QWebSecurityOrigin,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QWebFrame,sipName_securityOrigin);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QWebFrame(void *, const sipTypeDef *);}
static void *cast_QWebFrame(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QWebFrame)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QWebFrame *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QWebFrame(void *, int);}
static void release_QWebFrame(void *,int)
{
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QWebFrame[] = {{111, 0, 1}};


static PyMethodDef methods_QWebFrame[] = {
    {SIP_MLNAME_CAST(sipName_addToJavaScriptWindowObject), meth_QWebFrame_addToJavaScriptWindowObject, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childFrames), meth_QWebFrame_childFrames, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_contentsSize), meth_QWebFrame_contentsSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_evaluateJavaScript), meth_QWebFrame_evaluateJavaScript, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_event), meth_QWebFrame_event, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_frameName), meth_QWebFrame_frameName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_geometry), meth_QWebFrame_geometry, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hitTestContent), meth_QWebFrame_hitTestContent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_icon), meth_QWebFrame_icon, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_load), meth_QWebFrame_load, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_metaData), meth_QWebFrame_metaData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_page), meth_QWebFrame_page, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_parentFrame), meth_QWebFrame_parentFrame, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_pos), meth_QWebFrame_pos, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_print_), meth_QWebFrame_print_, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_render), meth_QWebFrame_render, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_renderTreeDump), meth_QWebFrame_renderTreeDump, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scroll), meth_QWebFrame_scroll, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scrollBarMaximum), meth_QWebFrame_scrollBarMaximum, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scrollBarMinimum), meth_QWebFrame_scrollBarMinimum, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scrollBarPolicy), meth_QWebFrame_scrollBarPolicy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scrollBarValue), meth_QWebFrame_scrollBarValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scrollPosition), meth_QWebFrame_scrollPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_securityOrigin), meth_QWebFrame_securityOrigin, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setContent), meth_QWebFrame_setContent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setHtml), meth_QWebFrame_setHtml, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setScrollBarPolicy), meth_QWebFrame_setScrollBarPolicy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setScrollBarValue), meth_QWebFrame_setScrollBarValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setScrollPosition), meth_QWebFrame_setScrollPosition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTextSizeMultiplier), meth_QWebFrame_setTextSizeMultiplier, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setUrl), meth_QWebFrame_setUrl, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setZoomFactor), meth_QWebFrame_setZoomFactor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_textSizeMultiplier), meth_QWebFrame_textSizeMultiplier, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_title), meth_QWebFrame_title, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toHtml), meth_QWebFrame_toHtml, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toPlainText), meth_QWebFrame_toPlainText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_url), meth_QWebFrame_url, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_zoomFactor), meth_QWebFrame_zoomFactor, METH_VARARGS, NULL}
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QWebFrame[] = {
    {"iconChanged()", 0},
    {"initialLayoutCompleted()", 0},
    {"urlChanged(const QUrl&)", 0},
    {"titleChanged(const QString&)", 0},
    {"javaScriptWindowObjectCleared()", 0},
    {0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtWebKit_QWebFrame = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QWebFrame,
        {0}
    },
    {
        sipNameNr_QWebFrame,
        {0, 0, 1},
        38, methods_QWebFrame,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QWebFrame,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    0,
    0,
    0,
    0,
    release_QWebFrame,
    cast_QWebFrame,
    0,
    0,
    0
},
    &QWebFrame::staticMetaObject,
    0,
    pyqt4_signals_QWebFrame
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:32 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtSql.h"

#line 37 "sip/QtSql/qsqldriver.sip"
#include <qsqldriver.h>
#line 39 "sipQtSqlQSqlDriver.cpp"

#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtSqlQSqlDriver.cpp"
#line 41 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 46 "sipQtSqlQSqlDriver.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 49 "sipQtSqlQSqlDriver.cpp"
#line 37 "sip/QtSql/qsqlerror.sip"
#include <qsqlerror.h>
#line 52 "sipQtSqlQSqlDriver.cpp"
#line 37 "sip/QtSql/qsqlresult.sip"
#include <qsqlresult.h>
#line 55 "sipQtSqlQSqlDriver.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 58 "sipQtSqlQSqlDriver.cpp"
#line 37 "sip/QtSql/qsqlrecord.sip"
#include <qsqlrecord.h>
#line 61 "sipQtSqlQSqlDriver.cpp"
#line 37 "sip/QtSql/qsqlfield.sip"
#include <qsqlfield.h>
#line 64 "sipQtSqlQSqlDriver.cpp"
#line 37 "sip/QtSql/qsqlindex.sip"
#include <qsqlindex.h>
#line 67 "sipQtSqlQSqlDriver.cpp"
#line 40 "sip/QtSql/qsql.sip"
#include <qsql.h>
#line 70 "sipQtSqlQSqlDriver.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 73 "sipQtSqlQSqlDriver.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 76 "sipQtSqlQSqlDriver.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 79 "sipQtSqlQSqlDriver.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 82 "sipQtSqlQSqlDriver.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 85 "sipQtSqlQSqlDriver.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 88 "sipQtSqlQSqlDriver.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 91 "sipQtSqlQSqlDriver.cpp"
#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 94 "sipQtSqlQSqlDriver.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 97 "sipQtSqlQSqlDriver.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 100 "sipQtSqlQSqlDriver.cpp"


class sipQSqlDriver : public QSqlDriver
{
public:
    sipQSqlDriver(QObject *);
    virtual ~sipQSqlDriver();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    void sipProtectVirt_setOpen(bool,bool);
    void sipProtectVirt_setOpenError(bool,bool);
    void sipProtectVirt_setLastError(bool,const QSqlError&);
    bool sipProtect_subscribeToNotificationImplementation(const QString&);
    bool sipProtect_unsubscribeFromNotificationImplementation(const QString&);
    QStringList sipProtect_subscribedToNotificationsImplementation() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool isOpen() const;
    bool beginTransaction();
    bool commitTransaction();
    bool rollbackTransaction();
    QStringList tables(QSql::TableType) const;
    QSqlIndex primaryIndex(const QString&) const;
    QSqlRecord record(const QString&) const;
    QString formatValue(const QSqlField&,bool) const;
    QString escapeIdentifier(const QString&,QSqlDriver::IdentifierType) const;
    QString sqlStatement(QSqlDriver::StatementType,const QString&,const QSqlRecord&,bool) const;
    QVariant handle() const;
    bool hasFeature(QSqlDriver::DriverFeature) const;
    void close();
    QSqlResult * createResult() const;
    bool open(const QString&,const QString&,const QString&,const QString&,int,const QString&);
    void setOpen(bool);
    void setOpenError(bool);
    void setLastError(const QSqlError&);
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSqlDriver(const sipQSqlDriver &);
    sipQSqlDriver &operator = (const sipQSqlDriver &);

    char sipPyMethods[25];
};

sipQSqlDriver::sipQSqlDriver(QObject *a0): QSqlDriver(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSqlDriver::~sipQSqlDriver()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQSqlDriver::metaObject() const
{
    return sip_QtSql_qt_metaobject(sipPySelf,sipType_QSqlDriver);
}

int sipQSqlDriver::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QSqlDriver::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtSql_qt_metacall(sipPySelf,sipType_QSqlDriver,_c,_id,_a);

    return _id;
}

void *sipQSqlDriver::qt_metacast(const char *_clname)
{
    return (sip_QtSql_qt_metacast && sip_QtSql_qt_metacast(sipPySelf,sipType_QSqlDriver,_clname)) ? this : QSqlDriver::qt_metacast(_clname);
}

bool sipQSqlDriver::isOpen() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_isOpen);

    if (!meth)
        return QSqlDriver::isOpen();

    typedef bool (*sipVH_QtCore_1)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_1)(sipModuleAPI_QtSql_QtCore->em_virthandlers[1]))(sipGILState,meth,0);
}

bool sipQSqlDriver::beginTransaction()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_beginTransaction);

    if (!meth)
        return QSqlDriver::beginTransaction();

    typedef bool (*sipVH_QtCore_1)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_1)(sipModuleAPI_QtSql_QtCore->em_virthandlers[1]))(sipGILState,meth,0);
}

bool sipQSqlDriver::commitTransaction()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_commitTransaction);

    if (!meth)
        return QSqlDriver::commitTransaction();

    typedef bool (*sipVH_QtCore_1)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_1)(sipModuleAPI_QtSql_QtCore->em_virthandlers[1]))(sipGILState,meth,0);
}

bool sipQSqlDriver::rollbackTransaction()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_rollbackTransaction);

    if (!meth)
        return QSqlDriver::rollbackTransaction();

    typedef bool (*sipVH_QtCore_1)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_1)(sipModuleAPI_QtSql_QtCore->em_virthandlers[1]))(sipGILState,meth,0);
}

QStringList sipQSqlDriver::tables(QSql::TableType a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_tables);

    if (!meth)
        return QSqlDriver::tables(a0);

    extern QStringList sipVH_QtSql_18(sip_gilstate_t,PyObject *,bool*,QSql::TableType);

    return sipVH_QtSql_18(sipGILState,meth,0,a0);
}

QSqlIndex sipQSqlDriver::primaryIndex(const QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_primaryIndex);

    if (!meth)
        return QSqlDriver::primaryIndex(a0);

    extern QSqlIndex sipVH_QtSql_17(sip_gilstate_t,PyObject *,bool*,const QString&);

    return sipVH_QtSql_17(sipGILState,meth,0,a0);
}

QSqlRecord sipQSqlDriver::record(const QString& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_record);

    if (!meth)
        return QSqlDriver::record(a0);

    extern QSqlRecord sipVH_QtSql_16(sip_gilstate_t,PyObject *,bool*,const QString&);

    return sipVH_QtSql_16(sipGILState,meth,0,a0);
}

QString sipQSqlDriver::formatValue(const QSqlField& a0,bool a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_formatValue);

    if (!meth)
        return QSqlDriver::formatValue(a0,a1);

    extern QString sipVH_QtSql_15(sip_gilstate_t,PyObject *,bool*,const QSqlField&,bool);

    return sipVH_QtSql_15(sipGILState,meth,0,a0,a1);
}

QString sipQSqlDriver::escapeIdentifier(const QString& a0,QSqlDriver::IdentifierType a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_escapeIdentifier);

    if (!meth)
        return QSqlDriver::escapeIdentifier(a0,a1);

    extern QString sipVH_QtSql_14(sip_gilstate_t,PyObject *,bool*,const QString&,QSqlDriver::IdentifierType);

    return sipVH_QtSql_14(sipGILState,meth,0,a0,a1);
}

QString sipQSqlDriver::sqlStatement(QSqlDriver::StatementType a0,const QString& a1,const QSqlRecord& a2,bool a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_sqlStatement);

    if (!meth)
        return QSqlDriver::sqlStatement(a0,a1,a2,a3);

    extern QString sipVH_QtSql_13(sip_gilstate_t,PyObject *,bool*,QSqlDriver::StatementType,const QString&,const QSqlRecord&,bool);

    return sipVH_QtSql_13(sipGILState,meth,0,a0,a1,a2,a3);
}

QVariant sipQSqlDriver::handle() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_handle);

    if (!meth)
        return QSqlDriver::handle();

    extern QVariant sipVH_QtSql_3(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtSql_3(sipGILState,meth,0);
}

bool sipQSqlDriver::hasFeature(QSqlDriver::DriverFeature a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,sipName_QSqlDriver,sipName_hasFeature);

    if (!meth)
        return 0;

    extern bool sipVH_QtSql_12(sip_gilstate_t,PyObject *,bool*,QSqlDriver::DriverFeature);

    return sipVH_QtSql_12(sipGILState,meth,0,a0);
}

void sipQSqlDriver::close()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,sipName_QSqlDriver,sipName_close);

    if (!meth)
        return;

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_QtSql_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

QSqlResult * sipQSqlDriver::createResult() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,sipName_QSqlDriver,sipName_createResult);

    if (!meth)
        return 0;

    extern QSqlResult * sipVH_QtSql_11(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtSql_11(sipGILState,meth,0);
}

bool sipQSqlDriver::open(const QString& a0,const QString& a1,const QString& a2,const QString& a3,int a4,const QString& a5)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,sipName_QSqlDriver,sipName_open);

    if (!meth)
        return 0;

    extern bool sipVH_QtSql_10(sip_gilstate_t,PyObject *,bool*,const QString&,const QString&,const QString&,const QString&,int,const QString&);

    return sipVH_QtSql_10(sipGILState,meth,0,a0,a1,a2,a3,a4,a5);
}

void sipQSqlDriver::setOpen(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_setOpen);

    if (!meth)
    {
        QSqlDriver::setOpen(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t,PyObject *,bool*,bool);

    ((sipVH_QtGui_7)(sipModuleAPI_QtSql_QtGui->em_virthandlers[7]))(sipGILState,meth,0,a0);
}

void sipQSqlDriver::setOpenError(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_setOpenError);

    if (!meth)
    {
        QSqlDriver::setOpenError(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t,PyObject *,bool*,bool);

    ((sipVH_QtGui_7)(sipModuleAPI_QtSql_QtGui->em_virthandlers[7]))(sipGILState,meth,0,a0);
}

void sipQSqlDriver::setLastError(const QSqlError& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_setLastError);

    if (!meth)
    {
        QSqlDriver::setLastError(a0);
        return;
    }

    extern void sipVH_QtSql_7(sip_gilstate_t,PyObject *,bool*,const QSqlError&);

    sipVH_QtSql_7(sipGILState,meth,0,a0);
}

bool sipQSqlDriver::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_12)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return ((sipVH_QtCore_12)(sipModuleAPI_QtSql_QtCore->em_virthandlers[12]))(sipGILState,meth,0,a0);
}

bool sipQSqlDriver::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t,PyObject *,bool*,QObject *,QEvent *);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtSql_QtCore->em_virthandlers[20]))(sipGILState,meth,0,a0,a1);
}

void sipQSqlDriver::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_3)(sip_gilstate_t,PyObject *,bool*,QTimerEvent *);

    ((sipVH_QtCore_3)(sipModuleAPI_QtSql_QtCore->em_virthandlers[3]))(sipGILState,meth,0,a0);
}

void sipQSqlDriver::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_19)(sip_gilstate_t,PyObject *,bool*,QChildEvent *);

    ((sipVH_QtCore_19)(sipModuleAPI_QtSql_QtCore->em_virthandlers[19]))(sipGILState,meth,0,a0);
}

void sipQSqlDriver::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtSql_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQSqlDriver::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtSql_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

void sipQSqlDriver::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtSql_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

int sipQSqlDriver::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQSqlDriver::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQSqlDriver::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQSqlDriver::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQSqlDriver::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQSqlDriver::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

void sipQSqlDriver::sipProtectVirt_setOpen(bool sipSelfWasArg,bool a0)
{
    (sipSelfWasArg ? QSqlDriver::setOpen(a0) : setOpen(a0));
}

void sipQSqlDriver::sipProtectVirt_setOpenError(bool sipSelfWasArg,bool a0)
{
    (sipSelfWasArg ? QSqlDriver::setOpenError(a0) : setOpenError(a0));
}

void sipQSqlDriver::sipProtectVirt_setLastError(bool sipSelfWasArg,const QSqlError& a0)
{
    (sipSelfWasArg ? QSqlDriver::setLastError(a0) : setLastError(a0));
}

bool sipQSqlDriver::sipProtect_subscribeToNotificationImplementation(const QString& a0)
{
    return QSqlDriver::subscribeToNotificationImplementation(a0);
}

bool sipQSqlDriver::sipProtect_unsubscribeFromNotificationImplementation(const QString& a0)
{
    return QSqlDriver::unsubscribeFromNotificationImplementation(a0);
}

QStringList sipQSqlDriver::sipProtect_subscribedToNotificationsImplementation() const
{
    return QSqlDriver::subscribedToNotificationsImplementation();
}


extern "C" {static PyObject *meth_QSqlDriver_receivers(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        char * a0;
        sipQSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QSqlDriver,&sipCpp,&a0))
        {
            int sipRes = 0;

#line 480 "sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
#line 686 "sipQtSqlQSqlDriver.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_receivers);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QSqlDriver,&sipCpp,sipType_QTimerEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_timerEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QSqlDriver,&sipCpp,sipType_QChildEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_childEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QSqlDriver,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_customEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QSqlDriver,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_connectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QSqlDriver,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_disconnectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_isOpen(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_isOpen(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSqlDriver,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSqlDriver::isOpen() : sipCpp->isOpen());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_isOpen);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_isOpenError(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_isOpenError(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSqlDriver,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isOpenError();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_isOpenError);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_beginTransaction(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_beginTransaction(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSqlDriver,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSqlDriver::beginTransaction() : sipCpp->beginTransaction());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_beginTransaction);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_commitTransaction(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_commitTransaction(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSqlDriver,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSqlDriver::commitTransaction() : sipCpp->commitTransaction());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_commitTransaction);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_rollbackTransaction(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_rollbackTransaction(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSqlDriver,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QSqlDriver::rollbackTransaction() : sipCpp->rollbackTransaction());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_rollbackTransaction);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_tables(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_tables(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSql::TableType a0;
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QSqlDriver,&sipCpp,sipType_QSql_TableType,&a0))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList((sipSelfWasArg ? sipCpp->QSqlDriver::tables(a0) : sipCpp->tables(a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_tables);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_primaryIndex(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_primaryIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QSqlDriver,&sipCpp,sipType_QString,&a0,&a0State))
        {
            QSqlIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSqlIndex((sipSelfWasArg ? sipCpp->QSqlDriver::primaryIndex(*a0) : sipCpp->primaryIndex(*a0)));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSqlIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_primaryIndex);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_record(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_record(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QSqlDriver,&sipCpp,sipType_QString,&a0,&a0State))
        {
            QSqlRecord *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSqlRecord((sipSelfWasArg ? sipCpp->QSqlDriver::record(*a0) : sipCpp->record(*a0)));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QSqlRecord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_record);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_formatValue(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_formatValue(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSqlField * a0;
        bool a1 = 0;
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9|b",&sipSelf,sipType_QSqlDriver,&sipCpp,sipType_QSqlField,&a0,&a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString((sipSelfWasArg ? sipCpp->QSqlDriver::formatValue(*a0,a1) : sipCpp->formatValue(*a0,a1)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_formatValue);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_escapeIdentifier(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_escapeIdentifier(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QString * a0;
        int a0State = 0;
        QSqlDriver::IdentifierType a1;
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1E",&sipSelf,sipType_QSqlDriver,&sipCpp,sipType_QString,&a0,&a0State,sipType_QSqlDriver_IdentifierType,&a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString((sipSelfWasArg ? sipCpp->QSqlDriver::escapeIdentifier(*a0,a1) : sipCpp->escapeIdentifier(*a0,a1)));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_escapeIdentifier);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_sqlStatement(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_sqlStatement(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSqlDriver::StatementType a0;
        const QString * a1;
        int a1State = 0;
        const QSqlRecord * a2;
        bool a3;
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BEJ1J9b",&sipSelf,sipType_QSqlDriver,&sipCpp,sipType_QSqlDriver_StatementType,&a0,sipType_QString,&a1,&a1State,sipType_QSqlRecord,&a2,&a3))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString((sipSelfWasArg ? sipCpp->QSqlDriver::sqlStatement(a0,*a1,*a2,a3) : sipCpp->sqlStatement(a0,*a1,*a2,a3)));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_sqlStatement);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_lastError(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_lastError(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSqlDriver,&sipCpp))
        {
            QSqlError *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSqlError(sipCpp->lastError());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSqlError,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_lastError);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_handle(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_handle(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSqlDriver,&sipCpp))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QSqlDriver::handle() : sipCpp->handle()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_handle);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_hasFeature(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_hasFeature(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        QSqlDriver::DriverFeature a0;
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QSqlDriver,&sipCpp,sipType_QSqlDriver_DriverFeature,&a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlDriver, sipName_hasFeature);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasFeature(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_hasFeature);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_close(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_close(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSqlDriver,&sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlDriver, sipName_close);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->close();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_close);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_createResult(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_createResult(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSqlDriver,&sipCpp))
        {
            QSqlResult *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlDriver, sipName_createResult);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->createResult();
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSqlResult,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_createResult);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_open(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_open(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QString * a0;
        int a0State = 0;
        const QString& a1def = QString();
        const QString * a1 = &a1def;
        int a1State = 0;
        const QString& a2def = QString();
        const QString * a2 = &a2def;
        int a2State = 0;
        const QString& a3def = QString();
        const QString * a3 = &a3def;
        int a3State = 0;
        int a4 = -1;
        const QString& a5def = QString();
        const QString * a5 = &a5def;
        int a5State = 0;
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|J1J1J1iJ1",&sipSelf,sipType_QSqlDriver,&sipCpp,sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State,sipType_QString,&a2,&a2State,sipType_QString,&a3,&a3State,&a4,sipType_QString,&a5,&a5State))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QSqlDriver, sipName_open);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->open(*a0,*a1,*a2,*a3,a4,*a5);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast<QString *>(a5),sipType_QString,a5State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_open);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_setOpen(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_setOpen(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pb",&sipSelf,sipType_QSqlDriver,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_setOpen(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_setOpen);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_setOpenError(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_setOpenError(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipQSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pb",&sipSelf,sipType_QSqlDriver,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_setOpenError(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_setOpenError);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_setLastError(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_setLastError(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QSqlError * a0;
        sipQSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_QSqlDriver,&sipCpp,sipType_QSqlError,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_setLastError(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_setLastError);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_subscribeToNotification(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_subscribeToNotification(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QSqlDriver,&sipCpp,sipType_QString,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->subscribeToNotification(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_subscribeToNotification);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_unsubscribeFromNotification(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_unsubscribeFromNotification(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QSqlDriver,&sipCpp,sipType_QString,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->unsubscribeFromNotification(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_unsubscribeFromNotification);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_subscribedToNotifications(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_subscribedToNotifications(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSqlDriver,&sipCpp))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->subscribedToNotifications());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_subscribedToNotifications);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_subscribeToNotificationImplementation(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_subscribeToNotificationImplementation(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        sipQSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ1",&sipSelf,sipType_QSqlDriver,&sipCpp,sipType_QString,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_subscribeToNotificationImplementation(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_subscribeToNotificationImplementation);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_unsubscribeFromNotificationImplementation(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_unsubscribeFromNotificationImplementation(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        sipQSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ1",&sipSelf,sipType_QSqlDriver,&sipCpp,sipType_QString,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_unsubscribeFromNotificationImplementation(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_unsubscribeFromNotificationImplementation);

    return NULL;
}


extern "C" {static PyObject *meth_QSqlDriver_subscribedToNotificationsImplementation(PyObject *, PyObject *);}
static PyObject *meth_QSqlDriver_subscribedToNotificationsImplementation(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQSqlDriver *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QSqlDriver,&sipCpp))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->sipProtect_subscribedToNotificationsImplementation());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSqlDriver,sipName_subscribedToNotificationsImplementation);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSqlDriver(void *, const sipTypeDef *);}
static void *cast_QSqlDriver(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QSqlDriver)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QSqlDriver *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSqlDriver(void *, int);}
static void release_QSqlDriver(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSqlDriver *>(sipCppV);
    else
        delete reinterpret_cast<QSqlDriver *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QSqlDriver(sipSimpleWrapper *);}
static void dealloc_QSqlDriver(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQSqlDriver *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QSqlDriver(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QSqlDriver(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QSqlDriver(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **sipOwner, int *sipArgsParsed)
{
    sipQSqlDriver *sipCpp = 0;

    if (!sipCpp)
    {
        QObject * a0 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"|JH",sipType_QObject,&a0,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSqlDriver(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSqlDriver[] = {{111, 0, 1}};


static PyMethodDef methods_QSqlDriver[] = {
    {SIP_MLNAME_CAST(sipName_beginTransaction), meth_QSqlDriver_beginTransaction, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QSqlDriver_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_close), meth_QSqlDriver_close, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_commitTransaction), meth_QSqlDriver_commitTransaction, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QSqlDriver_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createResult), meth_QSqlDriver_createResult, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QSqlDriver_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QSqlDriver_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_escapeIdentifier), meth_QSqlDriver_escapeIdentifier, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_formatValue), meth_QSqlDriver_formatValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_handle), meth_QSqlDriver_handle, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasFeature), meth_QSqlDriver_hasFeature, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isOpen), meth_QSqlDriver_isOpen, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isOpenError), meth_QSqlDriver_isOpenError, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lastError), meth_QSqlDriver_lastError, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_open), meth_QSqlDriver_open, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_primaryIndex), meth_QSqlDriver_primaryIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QSqlDriver_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_record), meth_QSqlDriver_record, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rollbackTransaction), meth_QSqlDriver_rollbackTransaction, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setLastError), meth_QSqlDriver_setLastError, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setOpen), meth_QSqlDriver_setOpen, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setOpenError), meth_QSqlDriver_setOpenError, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sqlStatement), meth_QSqlDriver_sqlStatement, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_subscribeToNotification), meth_QSqlDriver_subscribeToNotification, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_subscribeToNotificationImplementation), meth_QSqlDriver_subscribeToNotificationImplementation, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_subscribedToNotifications), meth_QSqlDriver_subscribedToNotifications, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_subscribedToNotificationsImplementation), meth_QSqlDriver_subscribedToNotificationsImplementation, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_tables), meth_QSqlDriver_tables, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QSqlDriver_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_unsubscribeFromNotification), meth_QSqlDriver_unsubscribeFromNotification, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_unsubscribeFromNotificationImplementation), meth_QSqlDriver_unsubscribeFromNotificationImplementation, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QSqlDriver[] = {
    {sipName_BLOB, QSqlDriver::BLOB, 8},
    {sipName_BatchOperations, QSqlDriver::BatchOperations, 8},
    {sipName_DeleteStatement, QSqlDriver::DeleteStatement, 10},
    {sipName_EventNotifications, QSqlDriver::EventNotifications, 8},
    {sipName_FieldName, QSqlDriver::FieldName, 9},
    {sipName_FinishQuery, QSqlDriver::FinishQuery, 8},
    {sipName_InsertStatement, QSqlDriver::InsertStatement, 10},
    {sipName_LastInsertId, QSqlDriver::LastInsertId, 8},
    {sipName_LowPrecisionNumbers, QSqlDriver::LowPrecisionNumbers, 8},
    {sipName_MultipleResultSets, QSqlDriver::MultipleResultSets, 8},
    {sipName_NamedPlaceholders, QSqlDriver::NamedPlaceholders, 8},
    {sipName_PositionalPlaceholders, QSqlDriver::PositionalPlaceholders, 8},
    {sipName_PreparedQueries, QSqlDriver::PreparedQueries, 8},
    {sipName_QuerySize, QSqlDriver::QuerySize, 8},
    {sipName_SelectStatement, QSqlDriver::SelectStatement, 10},
    {sipName_SimpleLocking, QSqlDriver::SimpleLocking, 8},
    {sipName_TableName, QSqlDriver::TableName, 9},
    {sipName_Transactions, QSqlDriver::Transactions, 8},
    {sipName_Unicode, QSqlDriver::Unicode, 8},
    {sipName_UpdateStatement, QSqlDriver::UpdateStatement, 10},
    {sipName_WhereStatement, QSqlDriver::WhereStatement, 10},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QSqlDriver[] = {
    {"notification(const QString&)", 0},
    {0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtSql_QSqlDriver = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QSqlDriver,
        {0}
    },
    {
        sipNameNr_QSqlDriver,
        {0, 0, 1},
        32, methods_QSqlDriver,
        21, enummembers_QSqlDriver,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QSqlDriver,
    0,
    init_QSqlDriver,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSqlDriver,
    0,
    0,
    0,
    release_QSqlDriver,
    cast_QSqlDriver,
    0,
    0,
    0
},
    &QSqlDriver::staticMetaObject,
    0,
    pyqt4_signals_QSqlDriver
};

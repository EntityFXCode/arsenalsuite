/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:41 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtDesigner.h"

#line 37 "sip/QtDesigner/abstractformwindowmanager.sip"
#include <abstractformwindowmanager.h>
#line 39 "sipQtDesignerQDesignerFormWindowManagerInterface.cpp"

#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 37 "sip/QtDesigner/abstractformwindow.sip"
#include <abstractformwindow.h>
#line 46 "sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 37 "sip/QtDesigner/abstractformeditor.sip"
#include <abstractformeditor.h>
#line 49 "sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 41 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 52 "sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 55 "sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 37 "sip/QtGui/qaction.sip"
#include <qaction.h>
#line 58 "sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 61 "sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 64 "sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 67 "sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 70 "sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 73 "sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 76 "sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 79 "sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 82 "sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 85 "sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 88 "sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 91 "sipQtDesignerQDesignerFormWindowManagerInterface.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 94 "sipQtDesignerQDesignerFormWindowManagerInterface.cpp"


extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionCut(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionCut(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDesignerFormWindowManagerInterface,&sipCpp))
        {
            QAction *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDesignerFormWindowManagerInterface::actionCut() : sipCpp->actionCut());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerFormWindowManagerInterface,sipName_actionCut);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionCopy(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionCopy(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDesignerFormWindowManagerInterface,&sipCpp))
        {
            QAction *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDesignerFormWindowManagerInterface::actionCopy() : sipCpp->actionCopy());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerFormWindowManagerInterface,sipName_actionCopy);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionPaste(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionPaste(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDesignerFormWindowManagerInterface,&sipCpp))
        {
            QAction *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDesignerFormWindowManagerInterface::actionPaste() : sipCpp->actionPaste());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerFormWindowManagerInterface,sipName_actionPaste);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionDelete(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionDelete(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDesignerFormWindowManagerInterface,&sipCpp))
        {
            QAction *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDesignerFormWindowManagerInterface::actionDelete() : sipCpp->actionDelete());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerFormWindowManagerInterface,sipName_actionDelete);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionSelectAll(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionSelectAll(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDesignerFormWindowManagerInterface,&sipCpp))
        {
            QAction *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDesignerFormWindowManagerInterface::actionSelectAll() : sipCpp->actionSelectAll());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerFormWindowManagerInterface,sipName_actionSelectAll);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionLower(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionLower(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDesignerFormWindowManagerInterface,&sipCpp))
        {
            QAction *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDesignerFormWindowManagerInterface::actionLower() : sipCpp->actionLower());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerFormWindowManagerInterface,sipName_actionLower);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionRaise(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionRaise(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDesignerFormWindowManagerInterface,&sipCpp))
        {
            QAction *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDesignerFormWindowManagerInterface::actionRaise() : sipCpp->actionRaise());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerFormWindowManagerInterface,sipName_actionRaise);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionUndo(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionUndo(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDesignerFormWindowManagerInterface,&sipCpp))
        {
            QAction *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDesignerFormWindowManagerInterface::actionUndo() : sipCpp->actionUndo());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerFormWindowManagerInterface,sipName_actionUndo);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionRedo(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionRedo(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDesignerFormWindowManagerInterface,&sipCpp))
        {
            QAction *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDesignerFormWindowManagerInterface::actionRedo() : sipCpp->actionRedo());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerFormWindowManagerInterface,sipName_actionRedo);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionHorizontalLayout(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionHorizontalLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDesignerFormWindowManagerInterface,&sipCpp))
        {
            QAction *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDesignerFormWindowManagerInterface::actionHorizontalLayout() : sipCpp->actionHorizontalLayout());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerFormWindowManagerInterface,sipName_actionHorizontalLayout);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionVerticalLayout(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionVerticalLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDesignerFormWindowManagerInterface,&sipCpp))
        {
            QAction *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDesignerFormWindowManagerInterface::actionVerticalLayout() : sipCpp->actionVerticalLayout());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerFormWindowManagerInterface,sipName_actionVerticalLayout);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionSplitHorizontal(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionSplitHorizontal(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDesignerFormWindowManagerInterface,&sipCpp))
        {
            QAction *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDesignerFormWindowManagerInterface::actionSplitHorizontal() : sipCpp->actionSplitHorizontal());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerFormWindowManagerInterface,sipName_actionSplitHorizontal);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionSplitVertical(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionSplitVertical(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDesignerFormWindowManagerInterface,&sipCpp))
        {
            QAction *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDesignerFormWindowManagerInterface::actionSplitVertical() : sipCpp->actionSplitVertical());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerFormWindowManagerInterface,sipName_actionSplitVertical);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionGridLayout(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionGridLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDesignerFormWindowManagerInterface,&sipCpp))
        {
            QAction *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDesignerFormWindowManagerInterface::actionGridLayout() : sipCpp->actionGridLayout());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerFormWindowManagerInterface,sipName_actionGridLayout);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionBreakLayout(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionBreakLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDesignerFormWindowManagerInterface,&sipCpp))
        {
            QAction *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDesignerFormWindowManagerInterface::actionBreakLayout() : sipCpp->actionBreakLayout());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerFormWindowManagerInterface,sipName_actionBreakLayout);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionAdjustSize(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionAdjustSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDesignerFormWindowManagerInterface,&sipCpp))
        {
            QAction *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDesignerFormWindowManagerInterface::actionAdjustSize() : sipCpp->actionAdjustSize());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerFormWindowManagerInterface,sipName_actionAdjustSize);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionFormLayout(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionFormLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDesignerFormWindowManagerInterface,&sipCpp))
        {
            QAction *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->actionFormLayout();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerFormWindowManagerInterface,sipName_actionFormLayout);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_actionSimplifyLayout(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_actionSimplifyLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDesignerFormWindowManagerInterface,&sipCpp))
        {
            QAction *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->actionSimplifyLayout();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAction,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerFormWindowManagerInterface,sipName_actionSimplifyLayout);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_activeFormWindow(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_activeFormWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDesignerFormWindowManagerInterface,&sipCpp))
        {
            QDesignerFormWindowInterface *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDesignerFormWindowManagerInterface::activeFormWindow() : sipCpp->activeFormWindow());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDesignerFormWindowInterface,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerFormWindowManagerInterface,sipName_activeFormWindow);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_formWindowCount(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_formWindowCount(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDesignerFormWindowManagerInterface,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDesignerFormWindowManagerInterface::formWindowCount() : sipCpp->formWindowCount());
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerFormWindowManagerInterface,sipName_formWindowCount);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_formWindow(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_formWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QDesignerFormWindowManagerInterface,&sipCpp,&a0))
        {
            QDesignerFormWindowInterface *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDesignerFormWindowManagerInterface::formWindow(a0) : sipCpp->formWindow(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDesignerFormWindowInterface,sipSelf);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerFormWindowManagerInterface,sipName_formWindow);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_createFormWindow(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_createFormWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWidget * a0 = 0;
        Qt::WindowFlags a1def = 0;
        Qt::WindowFlags * a1 = &a1def;
        int a1State = 0;
        sipWrapper *sipOwner = 0;
        QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|JHJ1",&sipSelf,sipType_QDesignerFormWindowManagerInterface,&sipCpp,sipType_QWidget,&a0,&sipOwner,sipType_Qt_WindowFlags,&a1,&a1State))
        {
            QDesignerFormWindowInterface *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDesignerFormWindowManagerInterface::createFormWindow(a0,*a1) : sipCpp->createFormWindow(a0,*a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_Qt_WindowFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDesignerFormWindowInterface,(PyObject *)sipOwner);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerFormWindowManagerInterface,sipName_createFormWindow);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_core(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_core(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDesignerFormWindowManagerInterface,&sipCpp))
        {
            QDesignerFormEditorInterface *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QDesignerFormWindowManagerInterface::core() : sipCpp->core());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDesignerFormEditorInterface,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerFormWindowManagerInterface,sipName_core);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_addFormWindow(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_addFormWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDesignerFormWindowInterface * a0;
        QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QDesignerFormWindowManagerInterface,&sipCpp,sipType_QDesignerFormWindowInterface,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QDesignerFormWindowManagerInterface::addFormWindow(a0) : sipCpp->addFormWindow(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerFormWindowManagerInterface,sipName_addFormWindow);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_removeFormWindow(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_removeFormWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDesignerFormWindowInterface * a0;
        QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QDesignerFormWindowManagerInterface,&sipCpp,sipType_QDesignerFormWindowInterface,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QDesignerFormWindowManagerInterface::removeFormWindow(a0) : sipCpp->removeFormWindow(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerFormWindowManagerInterface,sipName_removeFormWindow);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerFormWindowManagerInterface_setActiveFormWindow(PyObject *, PyObject *);}
static PyObject *meth_QDesignerFormWindowManagerInterface_setActiveFormWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDesignerFormWindowInterface * a0;
        QDesignerFormWindowManagerInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QDesignerFormWindowManagerInterface,&sipCpp,sipType_QDesignerFormWindowInterface,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QDesignerFormWindowManagerInterface::setActiveFormWindow(a0) : sipCpp->setActiveFormWindow(a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerFormWindowManagerInterface,sipName_setActiveFormWindow);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDesignerFormWindowManagerInterface(void *, const sipTypeDef *);}
static void *cast_QDesignerFormWindowManagerInterface(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QDesignerFormWindowManagerInterface)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QDesignerFormWindowManagerInterface *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDesignerFormWindowManagerInterface(void *, int);}
static void release_QDesignerFormWindowManagerInterface(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QDesignerFormWindowManagerInterface *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QDesignerFormWindowManagerInterface(sipSimpleWrapper *);}
static void dealloc_QDesignerFormWindowManagerInterface(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QDesignerFormWindowManagerInterface(sipSelf->u.cppPtr,0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QDesignerFormWindowManagerInterface[] = {{111, 0, 1}};


static PyMethodDef methods_QDesignerFormWindowManagerInterface[] = {
    {SIP_MLNAME_CAST(sipName_actionAdjustSize), meth_QDesignerFormWindowManagerInterface_actionAdjustSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_actionBreakLayout), meth_QDesignerFormWindowManagerInterface_actionBreakLayout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_actionCopy), meth_QDesignerFormWindowManagerInterface_actionCopy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_actionCut), meth_QDesignerFormWindowManagerInterface_actionCut, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_actionDelete), meth_QDesignerFormWindowManagerInterface_actionDelete, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_actionFormLayout), meth_QDesignerFormWindowManagerInterface_actionFormLayout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_actionGridLayout), meth_QDesignerFormWindowManagerInterface_actionGridLayout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_actionHorizontalLayout), meth_QDesignerFormWindowManagerInterface_actionHorizontalLayout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_actionLower), meth_QDesignerFormWindowManagerInterface_actionLower, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_actionPaste), meth_QDesignerFormWindowManagerInterface_actionPaste, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_actionRaise), meth_QDesignerFormWindowManagerInterface_actionRaise, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_actionRedo), meth_QDesignerFormWindowManagerInterface_actionRedo, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_actionSelectAll), meth_QDesignerFormWindowManagerInterface_actionSelectAll, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_actionSimplifyLayout), meth_QDesignerFormWindowManagerInterface_actionSimplifyLayout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_actionSplitHorizontal), meth_QDesignerFormWindowManagerInterface_actionSplitHorizontal, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_actionSplitVertical), meth_QDesignerFormWindowManagerInterface_actionSplitVertical, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_actionUndo), meth_QDesignerFormWindowManagerInterface_actionUndo, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_actionVerticalLayout), meth_QDesignerFormWindowManagerInterface_actionVerticalLayout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_activeFormWindow), meth_QDesignerFormWindowManagerInterface_activeFormWindow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addFormWindow), meth_QDesignerFormWindowManagerInterface_addFormWindow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_core), meth_QDesignerFormWindowManagerInterface_core, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createFormWindow), meth_QDesignerFormWindowManagerInterface_createFormWindow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_formWindow), meth_QDesignerFormWindowManagerInterface_formWindow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_formWindowCount), meth_QDesignerFormWindowManagerInterface_formWindowCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeFormWindow), meth_QDesignerFormWindowManagerInterface_removeFormWindow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setActiveFormWindow), meth_QDesignerFormWindowManagerInterface_setActiveFormWindow, METH_VARARGS, NULL}
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QDesignerFormWindowManagerInterface[] = {
    {"activeFormWindowChanged(QDesignerFormWindowInterface *)", 0},
    {"formWindowRemoved(QDesignerFormWindowInterface *)", 0},
    {"formWindowAdded(QDesignerFormWindowInterface *)", 0},
    {0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtDesigner_QDesignerFormWindowManagerInterface = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QDesignerFormWindowManagerInterface,
        {0}
    },
    {
        sipNameNr_QDesignerFormWindowManagerInterface,
        {0, 0, 1},
        26, methods_QDesignerFormWindowManagerInterface,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QDesignerFormWindowManagerInterface,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDesignerFormWindowManagerInterface,
    0,
    0,
    0,
    release_QDesignerFormWindowManagerInterface,
    cast_QDesignerFormWindowManagerInterface,
    0,
    0,
    0
},
    &QDesignerFormWindowManagerInterface::staticMetaObject,
    0,
    pyqt4_signals_QDesignerFormWindowManagerInterface
};

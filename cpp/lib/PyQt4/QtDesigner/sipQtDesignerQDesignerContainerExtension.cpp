/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:41 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtDesigner.h"

#line 37 "sip/QtDesigner/container.sip"
#include <container.h>
#line 39 "sipQtDesignerQDesignerContainerExtension.cpp"

#line 41 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 43 "sipQtDesignerQDesignerContainerExtension.cpp"


class sipQDesignerContainerExtension : public QDesignerContainerExtension
{
public:
    sipQDesignerContainerExtension();
    sipQDesignerContainerExtension(const QDesignerContainerExtension&);
    virtual ~sipQDesignerContainerExtension();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    int count() const;
    QWidget * widget(int) const;
    int currentIndex() const;
    void setCurrentIndex(int);
    void addWidget(QWidget *);
    void insertWidget(int,QWidget *);
    void remove(int);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDesignerContainerExtension(const sipQDesignerContainerExtension &);
    sipQDesignerContainerExtension &operator = (const sipQDesignerContainerExtension &);

    char sipPyMethods[7];
};

sipQDesignerContainerExtension::sipQDesignerContainerExtension(): QDesignerContainerExtension(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDesignerContainerExtension::sipQDesignerContainerExtension(const QDesignerContainerExtension& a0): QDesignerContainerExtension(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQDesignerContainerExtension::~sipQDesignerContainerExtension()
{
    sipCommonDtor(sipPySelf);
}

int sipQDesignerContainerExtension::count() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,sipName_QDesignerContainerExtension,sipName_count);

    if (!meth)
        return 0;

    typedef int (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtDesigner_QtCore->em_virthandlers[7]))(sipGILState,meth,0);
}

QWidget * sipQDesignerContainerExtension::widget(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,sipName_QDesignerContainerExtension,sipName_widget);

    if (!meth)
        return 0;

    extern QWidget * sipVH_QtDesigner_11(sip_gilstate_t,PyObject *,bool*,int);

    return sipVH_QtDesigner_11(sipGILState,meth,0,a0);
}

int sipQDesignerContainerExtension::currentIndex() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,sipName_QDesignerContainerExtension,sipName_currentIndex);

    if (!meth)
        return 0;

    typedef int (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_7)(sipModuleAPI_QtDesigner_QtCore->em_virthandlers[7]))(sipGILState,meth,0);
}

void sipQDesignerContainerExtension::setCurrentIndex(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,sipName_QDesignerContainerExtension,sipName_setCurrentIndex);

    if (!meth)
        return;

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool*,int);

    ((sipVH_QtGui_6)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[6]))(sipGILState,meth,0,a0);
}

void sipQDesignerContainerExtension::addWidget(QWidget *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,sipName_QDesignerContainerExtension,sipName_addWidget);

    if (!meth)
        return;

    typedef void (*sipVH_QtGui_8)(sip_gilstate_t,PyObject *,bool*,QWidget *);

    ((sipVH_QtGui_8)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[8]))(sipGILState,meth,0,a0);
}

void sipQDesignerContainerExtension::insertWidget(int a0,QWidget *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,sipName_QDesignerContainerExtension,sipName_insertWidget);

    if (!meth)
        return;

    extern void sipVH_QtDesigner_10(sip_gilstate_t,PyObject *,bool*,int,QWidget *);

    sipVH_QtDesigner_10(sipGILState,meth,0,a0,a1);
}

void sipQDesignerContainerExtension::remove(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,sipName_QDesignerContainerExtension,sipName_remove);

    if (!meth)
        return;

    typedef void (*sipVH_QtGui_6)(sip_gilstate_t,PyObject *,bool*,int);

    ((sipVH_QtGui_6)(sipModuleAPI_QtDesigner_QtGui->em_virthandlers[6]))(sipGILState,meth,0,a0);
}


extern "C" {static PyObject *meth_QDesignerContainerExtension_count(PyObject *, PyObject *);}
static PyObject *meth_QDesignerContainerExtension_count(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        QDesignerContainerExtension *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDesignerContainerExtension,&sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerContainerExtension, sipName_count);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerContainerExtension,sipName_count);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerContainerExtension_widget(PyObject *, PyObject *);}
static PyObject *meth_QDesignerContainerExtension_widget(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        QDesignerContainerExtension *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QDesignerContainerExtension,&sipCpp,&a0))
        {
            QWidget *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerContainerExtension, sipName_widget);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->widget(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerContainerExtension,sipName_widget);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerContainerExtension_currentIndex(PyObject *, PyObject *);}
static PyObject *meth_QDesignerContainerExtension_currentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        QDesignerContainerExtension *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDesignerContainerExtension,&sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerContainerExtension, sipName_currentIndex);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentIndex();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerContainerExtension,sipName_currentIndex);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerContainerExtension_setCurrentIndex(PyObject *, PyObject *);}
static PyObject *meth_QDesignerContainerExtension_setCurrentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        QDesignerContainerExtension *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QDesignerContainerExtension,&sipCpp,&a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerContainerExtension, sipName_setCurrentIndex);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentIndex(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerContainerExtension,sipName_setCurrentIndex);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerContainerExtension_addWidget(PyObject *, PyObject *);}
static PyObject *meth_QDesignerContainerExtension_addWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        QWidget * a0;
        QDesignerContainerExtension *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QDesignerContainerExtension,&sipCpp,sipType_QWidget,&a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerContainerExtension, sipName_addWidget);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->addWidget(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerContainerExtension,sipName_addWidget);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerContainerExtension_insertWidget(PyObject *, PyObject *);}
static PyObject *meth_QDesignerContainerExtension_insertWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        QWidget * a1;
        QDesignerContainerExtension *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiJ8",&sipSelf,sipType_QDesignerContainerExtension,&sipCpp,&a0,sipType_QWidget,&a1))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerContainerExtension, sipName_insertWidget);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->insertWidget(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerContainerExtension,sipName_insertWidget);

    return NULL;
}


extern "C" {static PyObject *meth_QDesignerContainerExtension_remove(PyObject *, PyObject *);}
static PyObject *meth_QDesignerContainerExtension_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        QDesignerContainerExtension *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QDesignerContainerExtension,&sipCpp,&a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QDesignerContainerExtension, sipName_remove);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->remove(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDesignerContainerExtension,sipName_remove);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDesignerContainerExtension(void *, const sipTypeDef *);}
static void *cast_QDesignerContainerExtension(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QDesignerContainerExtension)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDesignerContainerExtension(void *, int);}
static void release_QDesignerContainerExtension(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQDesignerContainerExtension *>(sipCppV);
    else
        delete reinterpret_cast<QDesignerContainerExtension *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QDesignerContainerExtension(sipSimpleWrapper *);}
static void dealloc_QDesignerContainerExtension(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQDesignerContainerExtension *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QDesignerContainerExtension(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QDesignerContainerExtension(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QDesignerContainerExtension(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    sipQDesignerContainerExtension *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDesignerContainerExtension();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QDesignerContainerExtension * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QDesignerContainerExtension,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDesignerContainerExtension(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


static PyMethodDef methods_QDesignerContainerExtension[] = {
    {SIP_MLNAME_CAST(sipName_addWidget), meth_QDesignerContainerExtension_addWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_count), meth_QDesignerContainerExtension_count, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentIndex), meth_QDesignerContainerExtension_currentIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertWidget), meth_QDesignerContainerExtension_insertWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_remove), meth_QDesignerContainerExtension_remove, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCurrentIndex), meth_QDesignerContainerExtension_setCurrentIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_widget), meth_QDesignerContainerExtension_widget, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtDesigner_QDesignerContainerExtension = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_QDesignerContainerExtension,
        {0}
    },
    {
        sipNameNr_QDesignerContainerExtension,
        {0, 0, 1},
        7, methods_QDesignerContainerExtension,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QDesignerContainerExtension,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDesignerContainerExtension,
    0,
    0,
    0,
    release_QDesignerContainerExtension,
    cast_QDesignerContainerExtension,
    0,
    0,
    0
},
    0,
    0,
    0
};

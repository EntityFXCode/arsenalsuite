/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:27 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 37 "sip/QtNetwork/qftp.sip"
#include <qftp.h>
#line 39 "sipQtNetworkQFtp.cpp"

#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtNetworkQFtp.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 46 "sipQtNetworkQFtp.cpp"
#line 37 "sip/QtNetwork/qurlinfo.sip"
#include <qurlinfo.h>
#line 49 "sipQtNetworkQFtp.cpp"
#line 41 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 52 "sipQtNetworkQFtp.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 55 "sipQtNetworkQFtp.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 58 "sipQtNetworkQFtp.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 61 "sipQtNetworkQFtp.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 64 "sipQtNetworkQFtp.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 67 "sipQtNetworkQFtp.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 70 "sipQtNetworkQFtp.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 73 "sipQtNetworkQFtp.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 76 "sipQtNetworkQFtp.cpp"
#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 79 "sipQtNetworkQFtp.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 82 "sipQtNetworkQFtp.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 85 "sipQtNetworkQFtp.cpp"


class sipQFtp : public QFtp
{
public:
    sipQFtp(QObject *);
    virtual ~sipQFtp();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQFtp(const sipQFtp &);
    sipQFtp &operator = (const sipQFtp &);

    char sipPyMethods[7];
};

sipQFtp::sipQFtp(QObject *a0): QFtp(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQFtp::~sipQFtp()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQFtp::metaObject() const
{
    return sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QFtp);
}

int sipQFtp::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QFtp::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QFtp,_c,_id,_a);

    return _id;
}

void *sipQFtp::qt_metacast(const char *_clname)
{
    return (sip_QtNetwork_qt_metacast && sip_QtNetwork_qt_metacast(sipPySelf,sipType_QFtp,_clname)) ? this : QFtp::qt_metacast(_clname);
}

bool sipQFtp::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_12)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return ((sipVH_QtCore_12)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[12]))(sipGILState,meth,0,a0);
}

bool sipQFtp::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t,PyObject *,bool*,QObject *,QEvent *);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[20]))(sipGILState,meth,0,a0,a1);
}

void sipQFtp::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_3)(sip_gilstate_t,PyObject *,bool*,QTimerEvent *);

    ((sipVH_QtCore_3)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[3]))(sipGILState,meth,0,a0);
}

void sipQFtp::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_19)(sip_gilstate_t,PyObject *,bool*,QChildEvent *);

    ((sipVH_QtCore_19)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[19]))(sipGILState,meth,0,a0);
}

void sipQFtp::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQFtp::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

void sipQFtp::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

int sipQFtp::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQFtp::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQFtp::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQFtp::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQFtp::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQFtp::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}


extern "C" {static PyObject *meth_QFtp_receivers(PyObject *, PyObject *);}
static PyObject *meth_QFtp_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        char * a0;
        sipQFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QFtp,&sipCpp,&a0))
        {
            int sipRes = 0;

#line 480 "sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
#line 338 "sipQtNetworkQFtp.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_receivers);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QFtp_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QFtp,&sipCpp,sipType_QTimerEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_timerEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QFtp_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QFtp,&sipCpp,sipType_QChildEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_childEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QFtp_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QFtp,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_customEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QFtp_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QFtp,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_connectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QFtp_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QFtp,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_disconnectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_setProxy(PyObject *, PyObject *);}
static PyObject *meth_QFtp_setProxy(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        quint16 a1;
        QFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1t",&sipSelf,sipType_QFtp,&sipCpp,sipType_QString,&a0,&a0State,&a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setProxy(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_setProxy);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_connectToHost(PyObject *, PyObject *);}
static PyObject *meth_QFtp_connectToHost(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        quint16 a1 = 21;
        QFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|t",&sipSelf,sipType_QFtp,&sipCpp,sipType_QString,&a0,&a0State,&a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->connectToHost(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_connectToHost);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_login(PyObject *, PyObject *);}
static PyObject *meth_QFtp_login(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString& a0def = QString();
        const QString * a0 = &a0def;
        int a0State = 0;
        const QString& a1def = QString();
        const QString * a1 = &a1def;
        int a1State = 0;
        QFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|J1J1",&sipSelf,sipType_QFtp,&sipCpp,sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->login(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_login);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_close(PyObject *, PyObject *);}
static PyObject *meth_QFtp_close(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QFtp,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->close();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_close);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_setTransferMode(PyObject *, PyObject *);}
static PyObject *meth_QFtp_setTransferMode(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QFtp::TransferMode a0;
        QFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QFtp,&sipCpp,sipType_QFtp_TransferMode,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setTransferMode(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_setTransferMode);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_list(PyObject *, PyObject *);}
static PyObject *meth_QFtp_list(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString& a0def = QString();
        const QString * a0 = &a0def;
        int a0State = 0;
        QFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|J1",&sipSelf,sipType_QFtp,&sipCpp,sipType_QString,&a0,&a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->list(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_list);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_cd(PyObject *, PyObject *);}
static PyObject *meth_QFtp_cd(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QFtp,&sipCpp,sipType_QString,&a0,&a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cd(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_cd);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_get(PyObject *, PyObject *);}
static PyObject *meth_QFtp_get(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QIODevice * a1 = 0;
        QFtp::TransferType a2 = QFtp::Binary;
        QFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|J8E",&sipSelf,sipType_QFtp,&sipCpp,sipType_QString,&a0,&a0State,sipType_QIODevice,&a1,sipType_QFtp_TransferType,&a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->get(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_get);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_put(PyObject *, PyObject *);}
static PyObject *meth_QFtp_put(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QByteArray * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QFtp::TransferType a2 = QFtp::Binary;
        QFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1|E",&sipSelf,sipType_QFtp,&sipCpp,sipType_QByteArray,&a0,&a0State,sipType_QString,&a1,&a1State,sipType_QFtp_TransferType,&a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->put(*a0,*a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        QIODevice * a0;
        const QString * a1;
        int a1State = 0;
        QFtp::TransferType a2 = QFtp::Binary;
        QFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8J1|E",&sipSelf,sipType_QFtp,&sipCpp,sipType_QIODevice,&a0,sipType_QString,&a1,&a1State,sipType_QFtp_TransferType,&a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->put(a0,*a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_put);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_remove(PyObject *, PyObject *);}
static PyObject *meth_QFtp_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QFtp,&sipCpp,sipType_QString,&a0,&a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->remove(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_remove);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_mkdir(PyObject *, PyObject *);}
static PyObject *meth_QFtp_mkdir(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QFtp,&sipCpp,sipType_QString,&a0,&a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->mkdir(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_mkdir);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_rmdir(PyObject *, PyObject *);}
static PyObject *meth_QFtp_rmdir(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QFtp,&sipCpp,sipType_QString,&a0,&a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rmdir(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_rmdir);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_rename(PyObject *, PyObject *);}
static PyObject *meth_QFtp_rename(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1",&sipSelf,sipType_QFtp,&sipCpp,sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rename(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_rename);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_rawCommand(PyObject *, PyObject *);}
static PyObject *meth_QFtp_rawCommand(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QFtp,&sipCpp,sipType_QString,&a0,&a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rawCommand(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_rawCommand);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_bytesAvailable(PyObject *, PyObject *);}
static PyObject *meth_QFtp_bytesAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QFtp,&sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->bytesAvailable();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_bytesAvailable);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_read(PyObject *, PyObject *);}
static PyObject *meth_QFtp_read(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qint64 a0;
        QFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bn",&sipSelf,sipType_QFtp,&sipCpp,&a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 112 "sip/QtNetwork/qftp.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
            len = sipCpp->read(s, a0);
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 1028 "sipQtNetworkQFtp.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_read);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_readAll(PyObject *, PyObject *);}
static PyObject *meth_QFtp_readAll(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QFtp,&sipCpp))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->readAll());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_readAll);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_currentId(PyObject *, PyObject *);}
static PyObject *meth_QFtp_currentId(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QFtp,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentId();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_currentId);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_currentDevice(PyObject *, PyObject *);}
static PyObject *meth_QFtp_currentDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QFtp,&sipCpp))
        {
            QIODevice *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentDevice();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_currentDevice);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_currentCommand(PyObject *, PyObject *);}
static PyObject *meth_QFtp_currentCommand(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QFtp,&sipCpp))
        {
            QFtp::Command sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentCommand();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QFtp_Command);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_currentCommand);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_hasPendingCommands(PyObject *, PyObject *);}
static PyObject *meth_QFtp_hasPendingCommands(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QFtp,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasPendingCommands();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_hasPendingCommands);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_clearPendingCommands(PyObject *, PyObject *);}
static PyObject *meth_QFtp_clearPendingCommands(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QFtp,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearPendingCommands();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_clearPendingCommands);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_state(PyObject *, PyObject *);}
static PyObject *meth_QFtp_state(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QFtp,&sipCpp))
        {
            QFtp::State sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->state();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QFtp_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_state);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_error(PyObject *, PyObject *);}
static PyObject *meth_QFtp_error(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QFtp,&sipCpp))
        {
            QFtp::Error sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->error();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QFtp_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_error);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_errorString(PyObject *, PyObject *);}
static PyObject *meth_QFtp_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QFtp,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->errorString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_errorString);

    return NULL;
}


extern "C" {static PyObject *meth_QFtp_abort(PyObject *, PyObject *);}
static PyObject *meth_QFtp_abort(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QFtp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QFtp,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->abort();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QFtp,sipName_abort);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QFtp(void *, const sipTypeDef *);}
static void *cast_QFtp(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QFtp)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QFtp *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QFtp(void *, int);}
static void release_QFtp(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQFtp *>(sipCppV);
    else
        delete reinterpret_cast<QFtp *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QFtp(sipSimpleWrapper *);}
static void dealloc_QFtp(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQFtp *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QFtp(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QFtp(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QFtp(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **sipOwner, int *sipArgsParsed)
{
    sipQFtp *sipCpp = 0;

    if (!sipCpp)
    {
        QObject * a0 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"|JH",sipType_QObject,&a0,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQFtp(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QFtp[] = {{111, 0, 1}};


static PyMethodDef methods_QFtp[] = {
    {SIP_MLNAME_CAST(sipName_abort), meth_QFtp_abort, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_bytesAvailable), meth_QFtp_bytesAvailable, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_cd), meth_QFtp_cd, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QFtp_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clearPendingCommands), meth_QFtp_clearPendingCommands, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_close), meth_QFtp_close, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QFtp_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectToHost), meth_QFtp_connectToHost, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentCommand), meth_QFtp_currentCommand, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentDevice), meth_QFtp_currentDevice, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentId), meth_QFtp_currentId, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QFtp_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QFtp_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_error), meth_QFtp_error, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QFtp_errorString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_get), meth_QFtp_get, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasPendingCommands), meth_QFtp_hasPendingCommands, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_list), meth_QFtp_list, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_login), meth_QFtp_login, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mkdir), meth_QFtp_mkdir, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_put), meth_QFtp_put, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rawCommand), meth_QFtp_rawCommand, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_read), meth_QFtp_read, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readAll), meth_QFtp_readAll, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QFtp_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_remove), meth_QFtp_remove, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rename), meth_QFtp_rename, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rmdir), meth_QFtp_rmdir, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setProxy), meth_QFtp_setProxy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTransferMode), meth_QFtp_setTransferMode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_state), meth_QFtp_state, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QFtp_timerEvent, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QFtp[] = {
    {sipName_Active, QFtp::Active, 11},
    {sipName_Ascii, QFtp::Ascii, 12},
    {sipName_Binary, QFtp::Binary, 12},
    {sipName_Cd, QFtp::Cd, 8},
    {sipName_Close, QFtp::Close, 8},
    {sipName_Closing, QFtp::Closing, 10},
    {sipName_ConnectToHost, QFtp::ConnectToHost, 8},
    {sipName_Connected, QFtp::Connected, 10},
    {sipName_Connecting, QFtp::Connecting, 10},
    {sipName_ConnectionRefused, QFtp::ConnectionRefused, 9},
    {sipName_Get, QFtp::Get, 8},
    {sipName_HostLookup, QFtp::HostLookup, 10},
    {sipName_HostNotFound, QFtp::HostNotFound, 9},
    {sipName_List, QFtp::List, 8},
    {sipName_LoggedIn, QFtp::LoggedIn, 10},
    {sipName_Login, QFtp::Login, 8},
    {sipName_Mkdir, QFtp::Mkdir, 8},
    {sipName_NoError, QFtp::NoError, 9},
    {sipName_None, QFtp::None, 8},
    {sipName_NotConnected, QFtp::NotConnected, 9},
    {sipName_Passive, QFtp::Passive, 11},
    {sipName_Put, QFtp::Put, 8},
    {sipName_RawCommand, QFtp::RawCommand, 8},
    {sipName_Remove, QFtp::Remove, 8},
    {sipName_Rename, QFtp::Rename, 8},
    {sipName_Rmdir, QFtp::Rmdir, 8},
    {sipName_SetProxy, QFtp::SetProxy, 8},
    {sipName_SetTransferMode, QFtp::SetTransferMode, 8},
    {sipName_Unconnected, QFtp::Unconnected, 10},
    {sipName_UnknownError, QFtp::UnknownError, 9},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QFtp[] = {
    {"done(bool)", 0},
    {"commandFinished(int,bool)", 0},
    {"commandStarted(int)", 0},
    {"rawCommandReply(int,const QString&)", 0},
    {"dataTransferProgress(qint64,qint64)", 0},
    {"readyRead()", 0},
    {"listInfo(const QUrlInfo&)", 0},
    {"stateChanged(int)", 0},
    {0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtNetwork_QFtp = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QFtp,
        {0}
    },
    {
        sipNameNr_QFtp,
        {0, 0, 1},
        32, methods_QFtp,
        30, enummembers_QFtp,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QFtp,
    0,
    init_QFtp,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QFtp,
    0,
    0,
    0,
    release_QFtp,
    cast_QFtp,
    0,
    0,
    0
},
    &QFtp::staticMetaObject,
    0,
    pyqt4_signals_QFtp
};

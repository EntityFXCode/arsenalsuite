/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:27 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 37 "sip/QtNetwork/qtcpserver.sip"
#include <qtcpserver.h>
#line 39 "sipQtNetworkQTcpServer.cpp"

#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtNetworkQTcpServer.cpp"
#line 37 "sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 46 "sipQtNetworkQTcpServer.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 49 "sipQtNetworkQTcpServer.cpp"
#line 37 "sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 52 "sipQtNetworkQTcpServer.cpp"
#line 37 "sip/QtNetwork/qtcpsocket.sip"
#include <qtcpsocket.h>
#line 55 "sipQtNetworkQTcpServer.cpp"
#line 41 "sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 58 "sipQtNetworkQTcpServer.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 61 "sipQtNetworkQTcpServer.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 64 "sipQtNetworkQTcpServer.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 67 "sipQtNetworkQTcpServer.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 70 "sipQtNetworkQTcpServer.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 73 "sipQtNetworkQTcpServer.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 76 "sipQtNetworkQTcpServer.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 79 "sipQtNetworkQTcpServer.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 82 "sipQtNetworkQTcpServer.cpp"
#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 85 "sipQtNetworkQTcpServer.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 88 "sipQtNetworkQTcpServer.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 91 "sipQtNetworkQTcpServer.cpp"


class sipQTcpServer : public QTcpServer
{
public:
    sipQTcpServer(QObject *);
    virtual ~sipQTcpServer();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    void sipProtectVirt_incomingConnection(bool,int);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool hasPendingConnections() const;
    QTcpSocket * nextPendingConnection();
    void incomingConnection(int);
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQTcpServer(const sipQTcpServer &);
    sipQTcpServer &operator = (const sipQTcpServer &);

    char sipPyMethods[10];
};

sipQTcpServer::sipQTcpServer(QObject *a0): QTcpServer(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQTcpServer::~sipQTcpServer()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQTcpServer::metaObject() const
{
    return sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QTcpServer);
}

int sipQTcpServer::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QTcpServer::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QTcpServer,_c,_id,_a);

    return _id;
}

void *sipQTcpServer::qt_metacast(const char *_clname)
{
    return (sip_QtNetwork_qt_metacast && sip_QtNetwork_qt_metacast(sipPySelf,sipType_QTcpServer,_clname)) ? this : QTcpServer::qt_metacast(_clname);
}

bool sipQTcpServer::hasPendingConnections() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_hasPendingConnections);

    if (!meth)
        return QTcpServer::hasPendingConnections();

    typedef bool (*sipVH_QtCore_1)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_1)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[1]))(sipGILState,meth,0);
}

QTcpSocket * sipQTcpServer::nextPendingConnection()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_nextPendingConnection);

    if (!meth)
        return QTcpServer::nextPendingConnection();

    extern QTcpSocket * sipVH_QtNetwork_4(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtNetwork_4(sipGILState,meth,0);
}

void sipQTcpServer::incomingConnection(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_incomingConnection);

    if (!meth)
    {
        QTcpServer::incomingConnection(a0);
        return;
    }

    extern void sipVH_QtNetwork_1(sip_gilstate_t,PyObject *,bool*,int);

    sipVH_QtNetwork_1(sipGILState,meth,0,a0);
}

bool sipQTcpServer::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_12)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return ((sipVH_QtCore_12)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[12]))(sipGILState,meth,0,a0);
}

bool sipQTcpServer::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t,PyObject *,bool*,QObject *,QEvent *);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[20]))(sipGILState,meth,0,a0,a1);
}

void sipQTcpServer::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_3)(sip_gilstate_t,PyObject *,bool*,QTimerEvent *);

    ((sipVH_QtCore_3)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[3]))(sipGILState,meth,0,a0);
}

void sipQTcpServer::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_19)(sip_gilstate_t,PyObject *,bool*,QChildEvent *);

    ((sipVH_QtCore_19)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[19]))(sipGILState,meth,0,a0);
}

void sipQTcpServer::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQTcpServer::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

void sipQTcpServer::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

int sipQTcpServer::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQTcpServer::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQTcpServer::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQTcpServer::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQTcpServer::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQTcpServer::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

void sipQTcpServer::sipProtectVirt_incomingConnection(bool sipSelfWasArg,int a0)
{
    (sipSelfWasArg ? QTcpServer::incomingConnection(a0) : incomingConnection(a0));
}


extern "C" {static PyObject *meth_QTcpServer_receivers(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        char * a0;
        sipQTcpServer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QTcpServer,&sipCpp,&a0))
        {
            int sipRes = 0;

#line 480 "sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
#line 401 "sipQtNetworkQTcpServer.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTcpServer,sipName_receivers);

    return NULL;
}


extern "C" {static PyObject *meth_QTcpServer_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQTcpServer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTcpServer,&sipCpp,sipType_QTimerEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTcpServer,sipName_timerEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTcpServer_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQTcpServer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTcpServer,&sipCpp,sipType_QChildEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTcpServer,sipName_childEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTcpServer_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQTcpServer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QTcpServer,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTcpServer,sipName_customEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QTcpServer_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQTcpServer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QTcpServer,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTcpServer,sipName_connectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QTcpServer_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQTcpServer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QTcpServer,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTcpServer,sipName_disconnectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QTcpServer_listen(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_listen(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QHostAddress& a0def = QHostAddress::Any;
        const QHostAddress * a0 = &a0def;
        quint16 a1 = 0;
        QTcpServer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|J9t",&sipSelf,sipType_QTcpServer,&sipCpp,sipType_QHostAddress,&a0,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->listen(*a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTcpServer,sipName_listen);

    return NULL;
}


extern "C" {static PyObject *meth_QTcpServer_close(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_close(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTcpServer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTcpServer,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->close();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTcpServer,sipName_close);

    return NULL;
}


extern "C" {static PyObject *meth_QTcpServer_isListening(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_isListening(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTcpServer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTcpServer,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isListening();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTcpServer,sipName_isListening);

    return NULL;
}


extern "C" {static PyObject *meth_QTcpServer_setMaxPendingConnections(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_setMaxPendingConnections(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QTcpServer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QTcpServer,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMaxPendingConnections(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTcpServer,sipName_setMaxPendingConnections);

    return NULL;
}


extern "C" {static PyObject *meth_QTcpServer_maxPendingConnections(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_maxPendingConnections(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTcpServer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTcpServer,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->maxPendingConnections();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTcpServer,sipName_maxPendingConnections);

    return NULL;
}


extern "C" {static PyObject *meth_QTcpServer_serverPort(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_serverPort(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTcpServer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTcpServer,&sipCpp))
        {
            quint16 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->serverPort();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTcpServer,sipName_serverPort);

    return NULL;
}


extern "C" {static PyObject *meth_QTcpServer_serverAddress(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_serverAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTcpServer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTcpServer,&sipCpp))
        {
            QHostAddress *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QHostAddress(sipCpp->serverAddress());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QHostAddress,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTcpServer,sipName_serverAddress);

    return NULL;
}


extern "C" {static PyObject *meth_QTcpServer_socketDescriptor(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_socketDescriptor(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTcpServer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTcpServer,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->socketDescriptor();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTcpServer,sipName_socketDescriptor);

    return NULL;
}


extern "C" {static PyObject *meth_QTcpServer_setSocketDescriptor(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_setSocketDescriptor(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QTcpServer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QTcpServer,&sipCpp,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setSocketDescriptor(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTcpServer,sipName_setSocketDescriptor);

    return NULL;
}


extern "C" {static PyObject *meth_QTcpServer_waitForNewConnection(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_waitForNewConnection(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0 = 0;
        bool a1;
        QTcpServer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|i",&sipSelf,sipType_QTcpServer,&sipCpp,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->waitForNewConnection(a0,&a1);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(bb)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTcpServer,sipName_waitForNewConnection);

    return NULL;
}


extern "C" {static PyObject *meth_QTcpServer_hasPendingConnections(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_hasPendingConnections(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTcpServer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTcpServer,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTcpServer::hasPendingConnections() : sipCpp->hasPendingConnections());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTcpServer,sipName_hasPendingConnections);

    return NULL;
}


extern "C" {static PyObject *meth_QTcpServer_nextPendingConnection(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_nextPendingConnection(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTcpServer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTcpServer,&sipCpp))
        {
            QTcpSocket *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QTcpServer::nextPendingConnection() : sipCpp->nextPendingConnection());
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTcpSocket,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTcpServer,sipName_nextPendingConnection);

    return NULL;
}


extern "C" {static PyObject *meth_QTcpServer_serverError(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_serverError(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTcpServer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTcpServer,&sipCpp))
        {
            QAbstractSocket::SocketError sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->serverError();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QAbstractSocket_SocketError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTcpServer,sipName_serverError);

    return NULL;
}


extern "C" {static PyObject *meth_QTcpServer_errorString(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTcpServer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTcpServer,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->errorString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTcpServer,sipName_errorString);

    return NULL;
}


extern "C" {static PyObject *meth_QTcpServer_setProxy(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_setProxy(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QNetworkProxy * a0;
        QTcpServer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QTcpServer,&sipCpp,sipType_QNetworkProxy,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setProxy(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTcpServer,sipName_setProxy);

    return NULL;
}


extern "C" {static PyObject *meth_QTcpServer_proxy(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_proxy(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTcpServer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QTcpServer,&sipCpp))
        {
            QNetworkProxy *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QNetworkProxy(sipCpp->proxy());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QNetworkProxy,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTcpServer,sipName_proxy);

    return NULL;
}


extern "C" {static PyObject *meth_QTcpServer_incomingConnection(PyObject *, PyObject *);}
static PyObject *meth_QTcpServer_incomingConnection(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        sipQTcpServer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pi",&sipSelf,sipType_QTcpServer,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_incomingConnection(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QTcpServer,sipName_incomingConnection);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QTcpServer(void *, const sipTypeDef *);}
static void *cast_QTcpServer(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QTcpServer)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QTcpServer *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QTcpServer(void *, int);}
static void release_QTcpServer(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQTcpServer *>(sipCppV);
    else
        delete reinterpret_cast<QTcpServer *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QTcpServer(sipSimpleWrapper *);}
static void dealloc_QTcpServer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQTcpServer *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QTcpServer(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QTcpServer(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QTcpServer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **sipOwner, int *sipArgsParsed)
{
    sipQTcpServer *sipCpp = 0;

    if (!sipCpp)
    {
        QObject * a0 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"|JH",sipType_QObject,&a0,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQTcpServer(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QTcpServer[] = {{111, 0, 1}};


static PyMethodDef methods_QTcpServer[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QTcpServer_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_close), meth_QTcpServer_close, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QTcpServer_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QTcpServer_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QTcpServer_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QTcpServer_errorString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasPendingConnections), meth_QTcpServer_hasPendingConnections, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_incomingConnection), meth_QTcpServer_incomingConnection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isListening), meth_QTcpServer_isListening, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_listen), meth_QTcpServer_listen, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_maxPendingConnections), meth_QTcpServer_maxPendingConnections, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_nextPendingConnection), meth_QTcpServer_nextPendingConnection, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_proxy), meth_QTcpServer_proxy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QTcpServer_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_serverAddress), meth_QTcpServer_serverAddress, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_serverError), meth_QTcpServer_serverError, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_serverPort), meth_QTcpServer_serverPort, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setMaxPendingConnections), meth_QTcpServer_setMaxPendingConnections, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setProxy), meth_QTcpServer_setProxy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSocketDescriptor), meth_QTcpServer_setSocketDescriptor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_socketDescriptor), meth_QTcpServer_socketDescriptor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QTcpServer_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_waitForNewConnection), meth_QTcpServer_waitForNewConnection, METH_VARARGS, NULL}
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QTcpServer[] = {
    {"newConnection()", 0},
    {0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtNetwork_QTcpServer = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QTcpServer,
        {0}
    },
    {
        sipNameNr_QTcpServer,
        {0, 0, 1},
        23, methods_QTcpServer,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QTcpServer,
    0,
    init_QTcpServer,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QTcpServer,
    0,
    0,
    0,
    release_QTcpServer,
    cast_QTcpServer,
    0,
    0,
    0
},
    &QTcpServer::staticMetaObject,
    0,
    pyqt4_signals_QTcpServer
};

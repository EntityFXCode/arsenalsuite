/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:27 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 122 "sip/QtNetwork/qhttp.sip"
#include <qhttp.h>
#line 39 "sipQtNetworkQHttp.cpp"

#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtNetworkQHttp.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 46 "sipQtNetworkQHttp.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 49 "sipQtNetworkQHttp.cpp"
#line 40 "sip/QtNetwork/qsslerror.sip"
#include <qsslerror.h>
#line 52 "sipQtNetworkQHttp.cpp"
#line 39 "sip/QtNetwork/qauthenticator.sip"
#include <qauthenticator.h>
#line 55 "sipQtNetworkQHttp.cpp"
#line 37 "sip/QtNetwork/qnetworkproxy.sip"
#include <qnetworkproxy.h>
#line 58 "sipQtNetworkQHttp.cpp"
#line 76 "sip/QtNetwork/qhttp.sip"
#include <qhttp.h>
#line 61 "sipQtNetworkQHttp.cpp"
#line 99 "sip/QtNetwork/qhttp.sip"
#include <qhttp.h>
#line 64 "sipQtNetworkQHttp.cpp"
#line 41 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 67 "sipQtNetworkQHttp.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 70 "sipQtNetworkQHttp.cpp"
#line 37 "sip/QtNetwork/qtcpsocket.sip"
#include <qtcpsocket.h>
#line 73 "sipQtNetworkQHttp.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 76 "sipQtNetworkQHttp.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 79 "sipQtNetworkQHttp.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 82 "sipQtNetworkQHttp.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 85 "sipQtNetworkQHttp.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 88 "sipQtNetworkQHttp.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 91 "sipQtNetworkQHttp.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 94 "sipQtNetworkQHttp.cpp"
#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 97 "sipQtNetworkQHttp.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 100 "sipQtNetworkQHttp.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 103 "sipQtNetworkQHttp.cpp"


class sipQHttp : public QHttp
{
public:
    sipQHttp(QObject *);
    sipQHttp(const QString&,quint16,QObject *);
    sipQHttp(const QString&,QHttp::ConnectionMode,quint16,QObject *);
    virtual ~sipQHttp();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQHttp(const sipQHttp &);
    sipQHttp &operator = (const sipQHttp &);

    char sipPyMethods[7];
};

sipQHttp::sipQHttp(QObject *a0): QHttp(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQHttp::sipQHttp(const QString& a0,quint16 a1,QObject *a2): QHttp(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQHttp::sipQHttp(const QString& a0,QHttp::ConnectionMode a1,quint16 a2,QObject *a3): QHttp(a0,a1,a2,a3), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQHttp::~sipQHttp()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQHttp::metaObject() const
{
    return sip_QtNetwork_qt_metaobject(sipPySelf,sipType_QHttp);
}

int sipQHttp::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QHttp::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtNetwork_qt_metacall(sipPySelf,sipType_QHttp,_c,_id,_a);

    return _id;
}

void *sipQHttp::qt_metacast(const char *_clname)
{
    return (sip_QtNetwork_qt_metacast && sip_QtNetwork_qt_metacast(sipPySelf,sipType_QHttp,_clname)) ? this : QHttp::qt_metacast(_clname);
}

bool sipQHttp::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_12)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return ((sipVH_QtCore_12)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[12]))(sipGILState,meth,0,a0);
}

bool sipQHttp::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t,PyObject *,bool*,QObject *,QEvent *);

    return ((sipVH_QtCore_20)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[20]))(sipGILState,meth,0,a0,a1);
}

void sipQHttp::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_3)(sip_gilstate_t,PyObject *,bool*,QTimerEvent *);

    ((sipVH_QtCore_3)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[3]))(sipGILState,meth,0,a0);
}

void sipQHttp::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_19)(sip_gilstate_t,PyObject *,bool*,QChildEvent *);

    ((sipVH_QtCore_19)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[19]))(sipGILState,meth,0,a0);
}

void sipQHttp::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipQHttp::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

void sipQHttp::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_QtNetwork_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

int sipQHttp::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQHttp::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQHttp::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQHttp::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQHttp::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQHttp::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}


extern "C" {static PyObject *meth_QHttp_receivers(PyObject *, PyObject *);}
static PyObject *meth_QHttp_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        char * a0;
        sipQHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QHttp,&sipCpp,&a0))
        {
            int sipRes = 0;

#line 480 "sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
#line 368 "sipQtNetworkQHttp.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHttp,sipName_receivers);

    return NULL;
}


extern "C" {static PyObject *meth_QHttp_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QHttp_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QHttp,&sipCpp,sipType_QTimerEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHttp,sipName_timerEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QHttp_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QHttp_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QHttp,&sipCpp,sipType_QChildEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHttp,sipName_childEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QHttp_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QHttp_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QHttp,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHttp,sipName_customEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QHttp_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QHttp_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QHttp,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHttp,sipName_connectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QHttp_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QHttp_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QHttp,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHttp,sipName_disconnectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QHttp_setHost(PyObject *, PyObject *);}
static PyObject *meth_QHttp_setHost(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        quint16 a1 = 80;
        QHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|t",&sipSelf,sipType_QHttp,&sipCpp,sipType_QString,&a0,&a0State,&a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setHost(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        QHttp::ConnectionMode a1;
        quint16 a2 = 0;
        QHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1E|t",&sipSelf,sipType_QHttp,&sipCpp,sipType_QString,&a0,&a0State,sipType_QHttp_ConnectionMode,&a1,&a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setHost(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHttp,sipName_setHost);

    return NULL;
}


extern "C" {static PyObject *meth_QHttp_setSocket(PyObject *, PyObject *);}
static PyObject *meth_QHttp_setSocket(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTcpSocket * a0;
        QHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QHttp,&sipCpp,sipType_QTcpSocket,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setSocket(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHttp,sipName_setSocket);

    return NULL;
}


extern "C" {static PyObject *meth_QHttp_setUser(PyObject *, PyObject *);}
static PyObject *meth_QHttp_setUser(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        const QString& a1def = QString();
        const QString * a1 = &a1def;
        int a1State = 0;
        QHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|J1",&sipSelf,sipType_QHttp,&sipCpp,sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setUser(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHttp,sipName_setUser);

    return NULL;
}


extern "C" {static PyObject *meth_QHttp_setProxy(PyObject *, PyObject *);}
static PyObject *meth_QHttp_setProxy(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        int a1;
        const QString& a2def = QString();
        const QString * a2 = &a2def;
        int a2State = 0;
        const QString& a3def = QString();
        const QString * a3 = &a3def;
        int a3State = 0;
        QHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1i|J1J1",&sipSelf,sipType_QHttp,&sipCpp,sipType_QString,&a0,&a0State,&a1,sipType_QString,&a2,&a2State,sipType_QString,&a3,&a3State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setProxy(*a0,a1,*a2,*a3);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QNetworkProxy * a0;
        QHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QHttp,&sipCpp,sipType_QNetworkProxy,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setProxy(*a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHttp,sipName_setProxy);

    return NULL;
}


extern "C" {static PyObject *meth_QHttp_get(PyObject *, PyObject *);}
static PyObject *meth_QHttp_get(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QIODevice * a1 = 0;
        QHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|J8",&sipSelf,sipType_QHttp,&sipCpp,sipType_QString,&a0,&a0State,sipType_QIODevice,&a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->get(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHttp,sipName_get);

    return NULL;
}


extern "C" {static PyObject *meth_QHttp_post(PyObject *, PyObject *);}
static PyObject *meth_QHttp_post(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QIODevice * a1;
        QIODevice * a2 = 0;
        QHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J8|J8",&sipSelf,sipType_QHttp,&sipCpp,sipType_QString,&a0,&a0State,sipType_QIODevice,&a1,sipType_QIODevice,&a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->post(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QByteArray * a1;
        int a1State = 0;
        QIODevice * a2 = 0;
        QHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1|J8",&sipSelf,sipType_QHttp,&sipCpp,sipType_QString,&a0,&a0State,sipType_QByteArray,&a1,&a1State,sipType_QIODevice,&a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->post(*a0,*a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHttp,sipName_post);

    return NULL;
}


extern "C" {static PyObject *meth_QHttp_head(PyObject *, PyObject *);}
static PyObject *meth_QHttp_head(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QHttp,&sipCpp,sipType_QString,&a0,&a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->head(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHttp,sipName_head);

    return NULL;
}


extern "C" {static PyObject *meth_QHttp_request(PyObject *, PyObject *);}
static PyObject *meth_QHttp_request(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QHttpRequestHeader * a0;
        QIODevice * a1 = 0;
        QIODevice * a2 = 0;
        QHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9|J8J8",&sipSelf,sipType_QHttp,&sipCpp,sipType_QHttpRequestHeader,&a0,sipType_QIODevice,&a1,sipType_QIODevice,&a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->request(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QHttpRequestHeader * a0;
        const QByteArray * a1;
        int a1State = 0;
        QIODevice * a2 = 0;
        QHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9J1|J8",&sipSelf,sipType_QHttp,&sipCpp,sipType_QHttpRequestHeader,&a0,sipType_QByteArray,&a1,&a1State,sipType_QIODevice,&a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->request(*a0,*a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHttp,sipName_request);

    return NULL;
}


extern "C" {static PyObject *meth_QHttp_close(PyObject *, PyObject *);}
static PyObject *meth_QHttp_close(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QHttp,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->close();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHttp,sipName_close);

    return NULL;
}


extern "C" {static PyObject *meth_QHttp_bytesAvailable(PyObject *, PyObject *);}
static PyObject *meth_QHttp_bytesAvailable(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QHttp,&sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->bytesAvailable();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHttp,sipName_bytesAvailable);

    return NULL;
}


extern "C" {static PyObject *meth_QHttp_read(PyObject *, PyObject *);}
static PyObject *meth_QHttp_read(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qint64 a0;
        QHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bn",&sipSelf,sipType_QHttp,&sipCpp,&a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 191 "sip/QtNetwork/qhttp.sip"
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
            len = sipCpp->read(s, a0);
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
#line 962 "sipQtNetworkQHttp.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHttp,sipName_read);

    return NULL;
}


extern "C" {static PyObject *meth_QHttp_readAll(PyObject *, PyObject *);}
static PyObject *meth_QHttp_readAll(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QHttp,&sipCpp))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->readAll());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHttp,sipName_readAll);

    return NULL;
}


extern "C" {static PyObject *meth_QHttp_currentId(PyObject *, PyObject *);}
static PyObject *meth_QHttp_currentId(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QHttp,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentId();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHttp,sipName_currentId);

    return NULL;
}


extern "C" {static PyObject *meth_QHttp_currentSourceDevice(PyObject *, PyObject *);}
static PyObject *meth_QHttp_currentSourceDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QHttp,&sipCpp))
        {
            QIODevice *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentSourceDevice();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHttp,sipName_currentSourceDevice);

    return NULL;
}


extern "C" {static PyObject *meth_QHttp_currentDestinationDevice(PyObject *, PyObject *);}
static PyObject *meth_QHttp_currentDestinationDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QHttp,&sipCpp))
        {
            QIODevice *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentDestinationDevice();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHttp,sipName_currentDestinationDevice);

    return NULL;
}


extern "C" {static PyObject *meth_QHttp_currentRequest(PyObject *, PyObject *);}
static PyObject *meth_QHttp_currentRequest(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QHttp,&sipCpp))
        {
            QHttpRequestHeader *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QHttpRequestHeader(sipCpp->currentRequest());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QHttpRequestHeader,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHttp,sipName_currentRequest);

    return NULL;
}


extern "C" {static PyObject *meth_QHttp_lastResponse(PyObject *, PyObject *);}
static PyObject *meth_QHttp_lastResponse(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QHttp,&sipCpp))
        {
            QHttpResponseHeader *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QHttpResponseHeader(sipCpp->lastResponse());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QHttpResponseHeader,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHttp,sipName_lastResponse);

    return NULL;
}


extern "C" {static PyObject *meth_QHttp_hasPendingRequests(PyObject *, PyObject *);}
static PyObject *meth_QHttp_hasPendingRequests(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QHttp,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasPendingRequests();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHttp,sipName_hasPendingRequests);

    return NULL;
}


extern "C" {static PyObject *meth_QHttp_clearPendingRequests(PyObject *, PyObject *);}
static PyObject *meth_QHttp_clearPendingRequests(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QHttp,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearPendingRequests();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHttp,sipName_clearPendingRequests);

    return NULL;
}


extern "C" {static PyObject *meth_QHttp_state(PyObject *, PyObject *);}
static PyObject *meth_QHttp_state(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QHttp,&sipCpp))
        {
            QHttp::State sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->state();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QHttp_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHttp,sipName_state);

    return NULL;
}


extern "C" {static PyObject *meth_QHttp_error(PyObject *, PyObject *);}
static PyObject *meth_QHttp_error(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QHttp,&sipCpp))
        {
            QHttp::Error sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->error();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QHttp_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHttp,sipName_error);

    return NULL;
}


extern "C" {static PyObject *meth_QHttp_errorString(PyObject *, PyObject *);}
static PyObject *meth_QHttp_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QHttp,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->errorString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHttp,sipName_errorString);

    return NULL;
}


extern "C" {static PyObject *meth_QHttp_abort(PyObject *, PyObject *);}
static PyObject *meth_QHttp_abort(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QHttp,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->abort();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHttp,sipName_abort);

    return NULL;
}


extern "C" {static PyObject *meth_QHttp_ignoreSslErrors(PyObject *, PyObject *);}
static PyObject *meth_QHttp_ignoreSslErrors(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHttp *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QHttp,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->ignoreSslErrors();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHttp,sipName_ignoreSslErrors);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QHttp(void *, const sipTypeDef *);}
static void *cast_QHttp(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QHttp)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QHttp *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QHttp(void *, int);}
static void release_QHttp(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQHttp *>(sipCppV);
    else
        delete reinterpret_cast<QHttp *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QHttp(sipSimpleWrapper *);}
static void dealloc_QHttp(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQHttp *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QHttp(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QHttp(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QHttp(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **sipOwner, int *sipArgsParsed)
{
    sipQHttp *sipCpp = 0;

    if (!sipCpp)
    {
        QObject * a0 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"|JH",sipType_QObject,&a0,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQHttp(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QString * a0;
        int a0State = 0;
        quint16 a1 = 80;
        QObject * a2 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1|tJH",sipType_QString,&a0,&a0State,&a1,sipType_QObject,&a2,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQHttp(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
        }
    }

    if (!sipCpp)
    {
        const QString * a0;
        int a0State = 0;
        QHttp::ConnectionMode a1;
        quint16 a2 = 0;
        QObject * a3 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1E|tJH",sipType_QString,&a0,&a0State,sipType_QHttp_ConnectionMode,&a1,&a2,sipType_QObject,&a3,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQHttp(*a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QHttp[] = {{111, 0, 1}};


static PyMethodDef methods_QHttp[] = {
    {SIP_MLNAME_CAST(sipName_abort), meth_QHttp_abort, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_bytesAvailable), meth_QHttp_bytesAvailable, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QHttp_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clearPendingRequests), meth_QHttp_clearPendingRequests, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_close), meth_QHttp_close, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QHttp_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentDestinationDevice), meth_QHttp_currentDestinationDevice, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentId), meth_QHttp_currentId, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentRequest), meth_QHttp_currentRequest, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentSourceDevice), meth_QHttp_currentSourceDevice, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QHttp_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QHttp_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_error), meth_QHttp_error, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QHttp_errorString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_get), meth_QHttp_get, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasPendingRequests), meth_QHttp_hasPendingRequests, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_head), meth_QHttp_head, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_ignoreSslErrors), meth_QHttp_ignoreSslErrors, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lastResponse), meth_QHttp_lastResponse, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_post), meth_QHttp_post, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_read), meth_QHttp_read, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readAll), meth_QHttp_readAll, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QHttp_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_request), meth_QHttp_request, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setHost), meth_QHttp_setHost, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setProxy), meth_QHttp_setProxy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSocket), meth_QHttp_setSocket, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setUser), meth_QHttp_setUser, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_state), meth_QHttp_state, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QHttp_timerEvent, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QHttp[] = {
    {sipName_Aborted, QHttp::Aborted, 20},
    {sipName_AuthenticationRequiredError, QHttp::AuthenticationRequiredError, 20},
    {sipName_Closing, QHttp::Closing, 21},
    {sipName_Connected, QHttp::Connected, 21},
    {sipName_Connecting, QHttp::Connecting, 21},
    {sipName_ConnectionModeHttp, QHttp::ConnectionModeHttp, 19},
    {sipName_ConnectionModeHttps, QHttp::ConnectionModeHttps, 19},
    {sipName_ConnectionRefused, QHttp::ConnectionRefused, 20},
    {sipName_HostLookup, QHttp::HostLookup, 21},
    {sipName_HostNotFound, QHttp::HostNotFound, 20},
    {sipName_InvalidResponseHeader, QHttp::InvalidResponseHeader, 20},
    {sipName_NoError, QHttp::NoError, 20},
    {sipName_ProxyAuthenticationRequiredError, QHttp::ProxyAuthenticationRequiredError, 20},
    {sipName_Reading, QHttp::Reading, 21},
    {sipName_Sending, QHttp::Sending, 21},
    {sipName_Unconnected, QHttp::Unconnected, 21},
    {sipName_UnexpectedClose, QHttp::UnexpectedClose, 20},
    {sipName_UnknownError, QHttp::UnknownError, 20},
    {sipName_WrongContentLength, QHttp::WrongContentLength, 20},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QHttp[] = {
    {"sslErrors(const QList<QSslError>&)", 0},
    {"authenticationRequired(const QString&,quint16,QAuthenticator *)", 0},
    {"proxyAuthenticationRequired(const QNetworkProxy&,QAuthenticator *)", 0},
    {"done(bool)", 0},
    {"requestFinished(int,bool)", 0},
    {"requestStarted(int)", 0},
    {"dataReadProgress(int,int)", 0},
    {"dataSendProgress(int,int)", 0},
    {"readyRead(const QHttpResponseHeader&)", 0},
    {"responseHeaderReceived(const QHttpResponseHeader&)", 0},
    {"stateChanged(int)", 0},
    {0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtNetwork_QHttp = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QHttp,
        {0}
    },
    {
        sipNameNr_QHttp,
        {0, 0, 1},
        30, methods_QHttp,
        19, enummembers_QHttp,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QHttp,
    0,
    init_QHttp,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QHttp,
    0,
    0,
    0,
    release_QHttp,
    cast_QHttp,
    0,
    0,
    0
},
    &QHttp::staticMetaObject,
    0,
    pyqt4_signals_QHttp
};

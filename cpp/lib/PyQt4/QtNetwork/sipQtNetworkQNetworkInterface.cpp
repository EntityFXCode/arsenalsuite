/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:27 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 79 "sip/QtNetwork/qnetworkinterface.sip"
#include <qnetworkinterface.h>
#line 39 "sipQtNetworkQNetworkInterface.cpp"

#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 43 "sipQtNetworkQNetworkInterface.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 46 "sipQtNetworkQNetworkInterface.cpp"
#line 41 "sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 49 "sipQtNetworkQNetworkInterface.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 52 "sipQtNetworkQNetworkInterface.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 55 "sipQtNetworkQNetworkInterface.cpp"
#line 45 "sip/QtNetwork/qnetworkinterface.sip"
#include <qnetworkinterface.h>
#line 58 "sipQtNetworkQNetworkInterface.cpp"
#line 79 "sip/QtNetwork/qnetworkinterface.sip"
#include <qnetworkinterface.h>
#line 61 "sipQtNetworkQNetworkInterface.cpp"


extern "C" {static PyObject *meth_QNetworkInterface_isValid(PyObject *, PyObject *);}
static PyObject *meth_QNetworkInterface_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QNetworkInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QNetworkInterface,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QNetworkInterface,sipName_isValid);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkInterface_name(PyObject *, PyObject *);}
static PyObject *meth_QNetworkInterface_name(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QNetworkInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QNetworkInterface,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->name());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QNetworkInterface,sipName_name);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkInterface_flags(PyObject *, PyObject *);}
static PyObject *meth_QNetworkInterface_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QNetworkInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QNetworkInterface,&sipCpp))
        {
            QNetworkInterface::InterfaceFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QNetworkInterface::InterfaceFlags(sipCpp->flags());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QNetworkInterface_InterfaceFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QNetworkInterface,sipName_flags);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkInterface_hardwareAddress(PyObject *, PyObject *);}
static PyObject *meth_QNetworkInterface_hardwareAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QNetworkInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QNetworkInterface,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->hardwareAddress());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QNetworkInterface,sipName_hardwareAddress);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkInterface_addressEntries(PyObject *, PyObject *);}
static PyObject *meth_QNetworkInterface_addressEntries(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QNetworkInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QNetworkInterface,&sipCpp))
        {
            QList<QNetworkAddressEntry> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QNetworkAddressEntry>(sipCpp->addressEntries());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QNetworkAddressEntry,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QNetworkInterface,sipName_addressEntries);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkInterface_interfaceFromName(PyObject *, PyObject *);}
static PyObject *meth_QNetworkInterface_interfaceFromName(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1",sipType_QString,&a0,&a0State))
        {
            QNetworkInterface *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QNetworkInterface(QNetworkInterface::interfaceFromName(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QNetworkInterface,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QNetworkInterface,sipName_interfaceFromName);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkInterface_interfaceFromIndex(PyObject *, PyObject *);}
static PyObject *meth_QNetworkInterface_interfaceFromIndex(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"i",&a0))
        {
            QNetworkInterface *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QNetworkInterface(QNetworkInterface::interfaceFromIndex(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QNetworkInterface,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QNetworkInterface,sipName_interfaceFromIndex);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkInterface_allInterfaces(PyObject *, PyObject *);}
static PyObject *meth_QNetworkInterface_allInterfaces(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QList<QNetworkInterface> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QNetworkInterface>(QNetworkInterface::allInterfaces());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QNetworkInterface,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QNetworkInterface,sipName_allInterfaces);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkInterface_allAddresses(PyObject *, PyObject *);}
static PyObject *meth_QNetworkInterface_allAddresses(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QList<QHostAddress> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QHostAddress>(QNetworkInterface::allAddresses());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QHostAddress,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QNetworkInterface,sipName_allAddresses);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkInterface_index(PyObject *, PyObject *);}
static PyObject *meth_QNetworkInterface_index(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QNetworkInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QNetworkInterface,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->index();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QNetworkInterface,sipName_index);

    return NULL;
}


extern "C" {static PyObject *meth_QNetworkInterface_humanReadableName(PyObject *, PyObject *);}
static PyObject *meth_QNetworkInterface_humanReadableName(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QNetworkInterface *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QNetworkInterface,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->humanReadableName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QNetworkInterface,sipName_humanReadableName);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QNetworkInterface(void *, const sipTypeDef *);}
static void *cast_QNetworkInterface(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QNetworkInterface)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QNetworkInterface(void *, int);}
static void release_QNetworkInterface(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QNetworkInterface *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QNetworkInterface(void *, SIP_SSIZE_T, const void *);}
static void assign_QNetworkInterface(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QNetworkInterface *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QNetworkInterface *>(sipSrc);
}


extern "C" {static void *array_QNetworkInterface(SIP_SSIZE_T);}
static void *array_QNetworkInterface(SIP_SSIZE_T sipNrElem)
{
    return new QNetworkInterface[sipNrElem];
}


extern "C" {static void *copy_QNetworkInterface(const void *, SIP_SSIZE_T);}
static void *copy_QNetworkInterface(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QNetworkInterface(reinterpret_cast<const QNetworkInterface *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QNetworkInterface(sipSimpleWrapper *);}
static void dealloc_QNetworkInterface(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QNetworkInterface(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QNetworkInterface(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QNetworkInterface(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QNetworkInterface *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QNetworkInterface();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QNetworkInterface * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QNetworkInterface,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QNetworkInterface(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    return sipCpp;
}


static PyMethodDef methods_QNetworkInterface[] = {
    {SIP_MLNAME_CAST(sipName_addressEntries), meth_QNetworkInterface_addressEntries, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_allAddresses), meth_QNetworkInterface_allAddresses, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_allInterfaces), meth_QNetworkInterface_allInterfaces, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_flags), meth_QNetworkInterface_flags, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hardwareAddress), meth_QNetworkInterface_hardwareAddress, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_humanReadableName), meth_QNetworkInterface_humanReadableName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_index), meth_QNetworkInterface_index, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_interfaceFromIndex), meth_QNetworkInterface_interfaceFromIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_interfaceFromName), meth_QNetworkInterface_interfaceFromName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QNetworkInterface_isValid, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_name), meth_QNetworkInterface_name, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QNetworkInterface[] = {
    {sipName_CanBroadcast, QNetworkInterface::CanBroadcast, 47},
    {sipName_CanMulticast, QNetworkInterface::CanMulticast, 47},
    {sipName_IsLoopBack, QNetworkInterface::IsLoopBack, 47},
    {sipName_IsPointToPoint, QNetworkInterface::IsPointToPoint, 47},
    {sipName_IsRunning, QNetworkInterface::IsRunning, 47},
    {sipName_IsUp, QNetworkInterface::IsUp, 47},
};


pyqt4ClassTypeDef sipTypeDef_QtNetwork_QNetworkInterface = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QNetworkInterface,
        {0}
    },
    {
        sipNameNr_QNetworkInterface,
        {0, 0, 1},
        11, methods_QNetworkInterface,
        6, enummembers_QNetworkInterface,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QNetworkInterface,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QNetworkInterface,
    assign_QNetworkInterface,
    array_QNetworkInterface,
    copy_QNetworkInterface,
    release_QNetworkInterface,
    cast_QNetworkInterface,
    0,
    0,
    0
},
    0,
    0,
    0
};

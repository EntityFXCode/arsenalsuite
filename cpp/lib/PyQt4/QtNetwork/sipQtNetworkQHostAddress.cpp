/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:27 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtNetwork.h"

#line 41 "sip/QtNetwork/qhostaddress.sip"
#include <qhostaddress.h>
#line 39 "sipQtNetworkQHostAddress.cpp"

#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 43 "sipQtNetworkQHostAddress.cpp"
#line 66 "sip/QtCore/qpair.sip"
#include <qpair.h>
#line 46 "sipQtNetworkQHostAddress.cpp"
#line 37 "sip/QtNetwork/qabstractsocket.sip"
#include <qabstractsocket.h>
#line 49 "sipQtNetworkQHostAddress.cpp"


extern "C" {static PyObject *meth_QHostAddress_setAddress(PyObject *, PyObject *);}
static PyObject *meth_QHostAddress_setAddress(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        quint32 a0;
        QHostAddress *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bu",&sipSelf,sipType_QHostAddress,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setAddress(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        QHostAddress *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QHostAddress,&sipCpp,sipType_QString,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->setAddress(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHostAddress,sipName_setAddress);

    return NULL;
}


extern "C" {static PyObject *meth_QHostAddress_protocol(PyObject *, PyObject *);}
static PyObject *meth_QHostAddress_protocol(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHostAddress *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QHostAddress,&sipCpp))
        {
            QAbstractSocket::NetworkLayerProtocol sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->protocol();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QAbstractSocket_NetworkLayerProtocol);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHostAddress,sipName_protocol);

    return NULL;
}


extern "C" {static PyObject *meth_QHostAddress_toIPv4Address(PyObject *, PyObject *);}
static PyObject *meth_QHostAddress_toIPv4Address(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHostAddress *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QHostAddress,&sipCpp))
        {
            quint32 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toIPv4Address();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHostAddress,sipName_toIPv4Address);

    return NULL;
}


extern "C" {static PyObject *meth_QHostAddress_toString(PyObject *, PyObject *);}
static PyObject *meth_QHostAddress_toString(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHostAddress *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QHostAddress,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHostAddress,sipName_toString);

    return NULL;
}


extern "C" {static PyObject *meth_QHostAddress_scopeId(PyObject *, PyObject *);}
static PyObject *meth_QHostAddress_scopeId(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHostAddress *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QHostAddress,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->scopeId());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHostAddress,sipName_scopeId);

    return NULL;
}


extern "C" {static PyObject *meth_QHostAddress_setScopeId(PyObject *, PyObject *);}
static PyObject *meth_QHostAddress_setScopeId(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QHostAddress *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QHostAddress,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setScopeId(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHostAddress,sipName_setScopeId);

    return NULL;
}


extern "C" {static PyObject *meth_QHostAddress_isNull(PyObject *, PyObject *);}
static PyObject *meth_QHostAddress_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHostAddress *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QHostAddress,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNull();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHostAddress,sipName_isNull);

    return NULL;
}


extern "C" {static PyObject *meth_QHostAddress_clear(PyObject *, PyObject *);}
static PyObject *meth_QHostAddress_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QHostAddress *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QHostAddress,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHostAddress,sipName_clear);

    return NULL;
}


extern "C" {static PyObject *meth_QHostAddress_isInSubnet(PyObject *, PyObject *);}
static PyObject *meth_QHostAddress_isInSubnet(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QHostAddress * a0;
        int a1;
        QHostAddress *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9i",&sipSelf,sipType_QHostAddress,&sipCpp,sipType_QHostAddress,&a0,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isInSubnet(*a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QPair<QHostAddress,int> * a0;
        int a0State = 0;
        QHostAddress *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QHostAddress,&sipCpp,sipType_QPair_0100QHostAddress_1800,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isInSubnet(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QPair<QHostAddress,int> *>(a0),sipType_QPair_0100QHostAddress_1800,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHostAddress,sipName_isInSubnet);

    return NULL;
}


extern "C" {static PyObject *meth_QHostAddress_parseSubnet(PyObject *, PyObject *);}
static PyObject *meth_QHostAddress_parseSubnet(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1",sipType_QString,&a0,&a0State))
        {
            QPair<QHostAddress,int> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPair<QHostAddress,int>(QHostAddress::parseSubnet(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QPair_0100QHostAddress_1800,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QHostAddress,sipName_parseSubnet);

    return NULL;
}


extern "C" {static long slot_QHostAddress___hash__(PyObject *sipSelf);}
static long slot_QHostAddress___hash__(PyObject *sipSelf)
{
    QHostAddress *sipCpp = reinterpret_cast<QHostAddress *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHostAddress));

    if (!sipCpp)
        return 0;


    {
        {
            long sipRes = 0;

#line 81 "sip/QtNetwork/qhostaddress.sip"
        sipRes = qHash(*sipCpp);
#line 382 "sipQtNetworkQHostAddress.cpp"

            return sipRes;
        }
    }
}


extern "C" {static PyObject *slot_QHostAddress___ne__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QHostAddress___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QHostAddress *sipCpp = reinterpret_cast<QHostAddress *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHostAddress));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QHostAddress * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QHostAddress,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QHostAddress::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        QHostAddress::SpecialAddress a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1E",sipType_QHostAddress_SpecialAddress,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QHostAddress::operator!=(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtNetwork,ne_slot,sipType_QHostAddress,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QHostAddress___eq__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QHostAddress___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QHostAddress *sipCpp = reinterpret_cast<QHostAddress *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QHostAddress));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QHostAddress * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QHostAddress,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QHostAddress::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        QHostAddress::SpecialAddress a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1E",sipType_QHostAddress_SpecialAddress,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QHostAddress::operator==(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtNetwork,eq_slot,sipType_QHostAddress,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QHostAddress(void *, const sipTypeDef *);}
static void *cast_QHostAddress(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QHostAddress)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QHostAddress(void *, int);}
static void release_QHostAddress(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QHostAddress *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QHostAddress(void *, SIP_SSIZE_T, const void *);}
static void assign_QHostAddress(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QHostAddress *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QHostAddress *>(sipSrc);
}


extern "C" {static void *array_QHostAddress(SIP_SSIZE_T);}
static void *array_QHostAddress(SIP_SSIZE_T sipNrElem)
{
    return new QHostAddress[sipNrElem];
}


extern "C" {static void *copy_QHostAddress(const void *, SIP_SSIZE_T);}
static void *copy_QHostAddress(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QHostAddress(reinterpret_cast<const QHostAddress *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QHostAddress(sipSimpleWrapper *);}
static void dealloc_QHostAddress(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QHostAddress(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QHostAddress(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QHostAddress(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QHostAddress *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QHostAddress();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        QHostAddress::SpecialAddress a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"XE",sipType_QHostAddress_SpecialAddress,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QHostAddress(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        quint32 a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"u",&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QHostAddress(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1",sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QHostAddress(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
        }
    }

    if (!sipCpp)
    {
        const QHostAddress * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QHostAddress,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QHostAddress(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    return sipCpp;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QHostAddress[] = {
    {(void *)slot_QHostAddress___hash__, hash_slot},
    {(void *)slot_QHostAddress___ne__, ne_slot},
    {(void *)slot_QHostAddress___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QHostAddress[] = {
    {SIP_MLNAME_CAST(sipName_clear), meth_QHostAddress_clear, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isInSubnet), meth_QHostAddress_isInSubnet, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QHostAddress_isNull, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_parseSubnet), meth_QHostAddress_parseSubnet, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_protocol), meth_QHostAddress_protocol, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scopeId), meth_QHostAddress_scopeId, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAddress), meth_QHostAddress_setAddress, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setScopeId), meth_QHostAddress_setScopeId, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toIPv4Address), meth_QHostAddress_toIPv4Address, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toString), meth_QHostAddress_toString, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QHostAddress[] = {
    {sipName_Any, QHostAddress::Any, 15},
    {sipName_AnyIPv6, QHostAddress::AnyIPv6, 15},
    {sipName_Broadcast, QHostAddress::Broadcast, 15},
    {sipName_LocalHost, QHostAddress::LocalHost, 15},
    {sipName_LocalHostIPv6, QHostAddress::LocalHostIPv6, 15},
    {sipName_Null, QHostAddress::Null, 15},
};


pyqt4ClassTypeDef sipTypeDef_QtNetwork_QHostAddress = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QHostAddress,
        {0}
    },
    {
        sipNameNr_QHostAddress,
        {0, 0, 1},
        10, methods_QHostAddress,
        6, enummembers_QHostAddress,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QHostAddress,
    init_QHostAddress,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QHostAddress,
    assign_QHostAddress,
    array_QHostAddress,
    copy_QHostAddress,
    release_QHostAddress,
    cast_QHostAddress,
    0,
    0,
    0
},
    0,
    0,
    0
};

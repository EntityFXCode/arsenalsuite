/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:39 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIphonon.h"

#line 38 "sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 45 "sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 38 "sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 45 "sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 38 "sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 45 "sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 38 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 44 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 51 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 38 "sip/phonon/effect.sip"
#include <effect.h>
#line 45 "sip/phonon/effect.sip"
#include <effect.h>
#line 44 "sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 51 "sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 38 "sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 45 "sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 44 "sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 51 "sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 38 "sip/phonon/medianode.sip"
#include <medianode.h>
#line 45 "sip/phonon/medianode.sip"
#include <medianode.h>
#line 38 "sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 45 "sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 38 "sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 45 "sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 38 "sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 49 "sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 88 "sip/phonon/objectdescription.sip"
#include <objectdescriptionmodel.h>
#line 38 "sip/phonon/path.sip"
#include <path.h>
#line 45 "sip/phonon/path.sip"
#include <path.h>
#line 38 "sip/phonon/phononnamespace.sip"
#include <phononnamespace.h>
#line 38 "sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 45 "sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 38 "sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 45 "sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 38 "sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 45 "sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 38 "sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 45 "sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 111 "sipphononPhononMediaObject.cpp"

#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 115 "sipphononPhononMediaObject.cpp"
#line 38 "sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 45 "sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 38 "sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 45 "sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 38 "sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 45 "sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 38 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 44 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 51 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 38 "sip/phonon/effect.sip"
#include <effect.h>
#line 45 "sip/phonon/effect.sip"
#include <effect.h>
#line 44 "sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 51 "sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 38 "sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 45 "sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 44 "sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 51 "sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 38 "sip/phonon/medianode.sip"
#include <medianode.h>
#line 45 "sip/phonon/medianode.sip"
#include <medianode.h>
#line 38 "sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 45 "sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 38 "sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 45 "sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 38 "sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 49 "sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 88 "sip/phonon/objectdescription.sip"
#include <objectdescriptionmodel.h>
#line 38 "sip/phonon/path.sip"
#include <path.h>
#line 45 "sip/phonon/path.sip"
#include <path.h>
#line 38 "sip/phonon/phononnamespace.sip"
#include <phononnamespace.h>
#line 38 "sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 45 "sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 38 "sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 45 "sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 38 "sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 45 "sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 38 "sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 45 "sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 190 "sipphononPhononMediaObject.cpp"
#line 38 "sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 45 "sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 38 "sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 45 "sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 38 "sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 45 "sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 38 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 44 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 51 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 38 "sip/phonon/effect.sip"
#include <effect.h>
#line 45 "sip/phonon/effect.sip"
#include <effect.h>
#line 44 "sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 51 "sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 38 "sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 45 "sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 44 "sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 51 "sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 38 "sip/phonon/medianode.sip"
#include <medianode.h>
#line 45 "sip/phonon/medianode.sip"
#include <medianode.h>
#line 38 "sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 45 "sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 38 "sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 45 "sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 38 "sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 49 "sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 88 "sip/phonon/objectdescription.sip"
#include <objectdescriptionmodel.h>
#line 38 "sip/phonon/path.sip"
#include <path.h>
#line 45 "sip/phonon/path.sip"
#include <path.h>
#line 38 "sip/phonon/phononnamespace.sip"
#include <phononnamespace.h>
#line 38 "sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 45 "sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 38 "sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 45 "sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 38 "sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 45 "sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 38 "sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 45 "sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 265 "sipphononPhononMediaObject.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 268 "sipphononPhononMediaObject.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 271 "sipphononPhononMediaObject.cpp"
#line 41 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 274 "sipphononPhononMediaObject.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 277 "sipphononPhononMediaObject.cpp"
#line 41 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 280 "sipphononPhononMediaObject.cpp"
#line 246 "sip/QtCore/qmap.sip"
#include <qmap.h>
#line 283 "sipphononPhononMediaObject.cpp"
#line 89 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 286 "sipphononPhononMediaObject.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 289 "sipphononPhononMediaObject.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 292 "sipphononPhononMediaObject.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 295 "sipphononPhononMediaObject.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 298 "sipphononPhononMediaObject.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 301 "sipphononPhononMediaObject.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 304 "sipphononPhononMediaObject.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 307 "sipphononPhononMediaObject.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 310 "sipphononPhononMediaObject.cpp"
#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 313 "sipphononPhononMediaObject.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 316 "sipphononPhononMediaObject.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 319 "sipphononPhononMediaObject.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 322 "sipphononPhononMediaObject.cpp"
#line 38 "sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 45 "sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 38 "sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 45 "sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 38 "sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 45 "sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 38 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 44 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 51 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 38 "sip/phonon/effect.sip"
#include <effect.h>
#line 45 "sip/phonon/effect.sip"
#include <effect.h>
#line 44 "sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 51 "sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 38 "sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 45 "sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 44 "sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 51 "sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 38 "sip/phonon/medianode.sip"
#include <medianode.h>
#line 45 "sip/phonon/medianode.sip"
#include <medianode.h>
#line 38 "sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 45 "sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 38 "sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 45 "sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 38 "sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 49 "sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 88 "sip/phonon/objectdescription.sip"
#include <objectdescriptionmodel.h>
#line 38 "sip/phonon/path.sip"
#include <path.h>
#line 45 "sip/phonon/path.sip"
#include <path.h>
#line 38 "sip/phonon/phononnamespace.sip"
#include <phononnamespace.h>
#line 38 "sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 45 "sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 38 "sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 45 "sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 38 "sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 45 "sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 38 "sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 45 "sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 397 "sipphononPhononMediaObject.cpp"


class sipPhonon_MediaObject : public Phonon::MediaObject
{
public:
    sipPhonon_MediaObject(QObject *);
    virtual ~sipPhonon_MediaObject();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipPhonon_MediaObject(const sipPhonon_MediaObject &);
    sipPhonon_MediaObject &operator = (const sipPhonon_MediaObject &);

    char sipPyMethods[7];
};

sipPhonon_MediaObject::sipPhonon_MediaObject(QObject *a0): Phonon::MediaObject(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipPhonon_MediaObject::~sipPhonon_MediaObject()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipPhonon_MediaObject::metaObject() const
{
    return sip_phonon_qt_metaobject(sipPySelf,sipType_Phonon_MediaObject);
}

int sipPhonon_MediaObject::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = Phonon::MediaObject::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_phonon_qt_metacall(sipPySelf,sipType_Phonon_MediaObject,_c,_id,_a);

    return _id;
}

void *sipPhonon_MediaObject::qt_metacast(const char *_clname)
{
    return (sip_phonon_qt_metacast && sip_phonon_qt_metacast(sipPySelf,sipType_Phonon_MediaObject,_clname)) ? this : Phonon::MediaObject::qt_metacast(_clname);
}

bool sipPhonon_MediaObject::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_12)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return ((sipVH_QtCore_12)(sipModuleAPI_phonon_QtCore->em_virthandlers[12]))(sipGILState,meth,0,a0);
}

bool sipPhonon_MediaObject::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t,PyObject *,bool*,QObject *,QEvent *);

    return ((sipVH_QtCore_20)(sipModuleAPI_phonon_QtCore->em_virthandlers[20]))(sipGILState,meth,0,a0,a1);
}

void sipPhonon_MediaObject::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_3)(sip_gilstate_t,PyObject *,bool*,QTimerEvent *);

    ((sipVH_QtCore_3)(sipModuleAPI_phonon_QtCore->em_virthandlers[3]))(sipGILState,meth,0,a0);
}

void sipPhonon_MediaObject::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_19)(sip_gilstate_t,PyObject *,bool*,QChildEvent *);

    ((sipVH_QtCore_19)(sipModuleAPI_phonon_QtCore->em_virthandlers[19]))(sipGILState,meth,0,a0);
}

void sipPhonon_MediaObject::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_phonon_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipPhonon_MediaObject::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_phonon_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

void sipPhonon_MediaObject::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_phonon_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

int sipPhonon_MediaObject::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipPhonon_MediaObject::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipPhonon_MediaObject::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipPhonon_MediaObject::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipPhonon_MediaObject::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipPhonon_MediaObject::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}


extern "C" {static PyObject *meth_Phonon_MediaObject_receivers(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        char * a0;
        sipPhonon_MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_Phonon_MediaObject,&sipCpp,&a0))
        {
            int sipRes = 0;

#line 480 "sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
#line 650 "sipphononPhononMediaObject.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_receivers);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipPhonon_MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_MediaObject,&sipCpp,sipType_QTimerEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_timerEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_childEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipPhonon_MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_MediaObject,&sipCpp,sipType_QChildEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_childEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_customEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipPhonon_MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_MediaObject,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_customEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipPhonon_MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_Phonon_MediaObject,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_connectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipPhonon_MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_Phonon_MediaObject,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_disconnectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_state(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_state(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_MediaObject,&sipCpp))
        {
            Phonon::State sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->state();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Phonon_State);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_state);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_hasVideo(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_hasVideo(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_MediaObject,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasVideo();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_hasVideo);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_isSeekable(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_isSeekable(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_MediaObject,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSeekable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_isSeekable);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_tickInterval(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_tickInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_MediaObject,&sipCpp))
        {
            qint32 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tickInterval();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_tickInterval);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_metaData(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_metaData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_Phonon_MediaObject,&sipCpp,sipType_QString,&a0,&a0State))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->metaData(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    {
        Phonon::MetaData a0;
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_Phonon_MediaObject,&sipCpp,sipType_Phonon_MetaData,&a0))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->metaData(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    {
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_MediaObject,&sipCpp))
        {
            QMultiMap<QString,QString> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMultiMap<QString,QString>(sipCpp->metaData());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMultiMap_0100QString_0100QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_metaData);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_errorString(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_MediaObject,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->errorString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_errorString);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_errorType(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_errorType(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_MediaObject,&sipCpp))
        {
            Phonon::ErrorType sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->errorType();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_Phonon_ErrorType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_errorType);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_currentSource(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_currentSource(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_MediaObject,&sipCpp))
        {
            Phonon::MediaSource *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Phonon::MediaSource(sipCpp->currentSource());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Phonon_MediaSource,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_currentSource);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_setCurrentSource(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_setCurrentSource(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const Phonon::MediaSource * a0;
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_Phonon_MediaObject,&sipCpp,sipType_Phonon_MediaSource,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCurrentSource(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_setCurrentSource);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_queue(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_queue(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_MediaObject,&sipCpp))
        {
            QList<Phonon::MediaSource> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<Phonon::MediaSource>(sipCpp->queue());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100Phonon_MediaSource,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_queue);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_setQueue(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_setQueue(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QList<Phonon::MediaSource> * a0;
        int a0State = 0;
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_Phonon_MediaObject,&sipCpp,sipType_QList_0100Phonon_MediaSource,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setQueue(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QList<Phonon::MediaSource> *>(a0),sipType_QList_0100Phonon_MediaSource,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QList<QUrl> * a0;
        int a0State = 0;
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_Phonon_MediaObject,&sipCpp,sipType_QList_0100QUrl,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setQueue(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QList<QUrl> *>(a0),sipType_QList_0100QUrl,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_setQueue);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_enqueue(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_enqueue(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const Phonon::MediaSource * a0;
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_Phonon_MediaObject,&sipCpp,sipType_Phonon_MediaSource,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->enqueue(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QList<Phonon::MediaSource> * a0;
        int a0State = 0;
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_Phonon_MediaObject,&sipCpp,sipType_QList_0100Phonon_MediaSource,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->enqueue(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QList<Phonon::MediaSource> *>(a0),sipType_QList_0100Phonon_MediaSource,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QList<QUrl> * a0;
        int a0State = 0;
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_Phonon_MediaObject,&sipCpp,sipType_QList_0100QUrl,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->enqueue(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QList<QUrl> *>(a0),sipType_QList_0100QUrl,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_enqueue);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_clearQueue(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_clearQueue(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_MediaObject,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clearQueue();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_clearQueue);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_currentTime(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_currentTime(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_MediaObject,&sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentTime();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_currentTime);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_totalTime(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_totalTime(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_MediaObject,&sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->totalTime();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_totalTime);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_remainingTime(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_remainingTime(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_MediaObject,&sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->remainingTime();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_remainingTime);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_prefinishMark(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_prefinishMark(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_MediaObject,&sipCpp))
        {
            qint32 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->prefinishMark();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_prefinishMark);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_setPrefinishMark(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_setPrefinishMark(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qint32 a0;
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_Phonon_MediaObject,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPrefinishMark(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_setPrefinishMark);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_transitionTime(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_transitionTime(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_MediaObject,&sipCpp))
        {
            qint32 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->transitionTime();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_transitionTime);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_setTransitionTime(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_setTransitionTime(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qint32 a0;
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_Phonon_MediaObject,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTransitionTime(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_setTransitionTime);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_setTickInterval(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_setTickInterval(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qint32 a0;
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_Phonon_MediaObject,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTickInterval(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_setTickInterval);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_play(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_play(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_MediaObject,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->play();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_play);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_pause(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_pause(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_MediaObject,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->pause();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_pause);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_stop(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_MediaObject,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->stop();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_stop);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_seek(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_seek(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qint64 a0;
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bn",&sipSelf,sipType_Phonon_MediaObject,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->seek(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_seek);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_MediaObject_clear(PyObject *, PyObject *);}
static PyObject *meth_Phonon_MediaObject_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Phonon::MediaObject *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_MediaObject,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_MediaObject,sipName_clear);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_Phonon_MediaObject(void *, const sipTypeDef *);}
static void *cast_Phonon_MediaObject(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_Phonon_MediaObject)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(Phonon::MediaObject *)ptr,targetType)) != NULL)
        return res;

    if ((res = ((const sipClassTypeDef *)sipType_Phonon_MediaNode)->ctd_cast((Phonon::MediaNode *)(Phonon::MediaObject *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_Phonon_MediaObject(void *, int);}
static void release_Phonon_MediaObject(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipPhonon_MediaObject *>(sipCppV);
    else
        delete reinterpret_cast<Phonon::MediaObject *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_Phonon_MediaObject(sipSimpleWrapper *);}
static void dealloc_Phonon_MediaObject(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipPhonon_MediaObject *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_Phonon_MediaObject(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_Phonon_MediaObject(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_Phonon_MediaObject(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **sipOwner, int *sipArgsParsed)
{
    sipPhonon_MediaObject *sipCpp = 0;

    if (!sipCpp)
    {
        QObject * a0 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"|JH",sipType_QObject,&a0,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipPhonon_MediaObject(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_Phonon_MediaObject[] = {{111, 0, 0}, {23, 255, 1}};


static PyMethodDef methods_Phonon_MediaObject[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), meth_Phonon_MediaObject_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clear), meth_Phonon_MediaObject_clear, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clearQueue), meth_Phonon_MediaObject_clearQueue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_Phonon_MediaObject_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentSource), meth_Phonon_MediaObject_currentSource, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentTime), meth_Phonon_MediaObject_currentTime, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_Phonon_MediaObject_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_Phonon_MediaObject_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_enqueue), meth_Phonon_MediaObject_enqueue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_errorString), meth_Phonon_MediaObject_errorString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_errorType), meth_Phonon_MediaObject_errorType, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasVideo), meth_Phonon_MediaObject_hasVideo, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isSeekable), meth_Phonon_MediaObject_isSeekable, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_metaData), meth_Phonon_MediaObject_metaData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_pause), meth_Phonon_MediaObject_pause, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_play), meth_Phonon_MediaObject_play, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_prefinishMark), meth_Phonon_MediaObject_prefinishMark, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_queue), meth_Phonon_MediaObject_queue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_Phonon_MediaObject_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_remainingTime), meth_Phonon_MediaObject_remainingTime, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_seek), meth_Phonon_MediaObject_seek, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCurrentSource), meth_Phonon_MediaObject_setCurrentSource, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPrefinishMark), meth_Phonon_MediaObject_setPrefinishMark, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setQueue), meth_Phonon_MediaObject_setQueue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTickInterval), meth_Phonon_MediaObject_setTickInterval, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTransitionTime), meth_Phonon_MediaObject_setTransitionTime, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_state), meth_Phonon_MediaObject_state, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_stop), meth_Phonon_MediaObject_stop, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_tickInterval), meth_Phonon_MediaObject_tickInterval, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_Phonon_MediaObject_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_totalTime), meth_Phonon_MediaObject_totalTime, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_transitionTime), meth_Phonon_MediaObject_transitionTime, METH_VARARGS, NULL}
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_Phonon_MediaObject[] = {
    {"totalTimeChanged(qint64)", 0},
    {"prefinishMarkReached(qint32)", 0},
    {"aboutToFinish()", 0},
    {"currentSourceChanged(const Phonon::MediaSource&)", 0},
    {"finished()", 0},
    {"bufferStatus(int)", 0},
    {"hasVideoChanged(bool)", 0},
    {"seekableChanged(bool)", 0},
    {"metaDataChanged()", 0},
    {"tick(qint64)", 0},
    {"stateChanged(Phonon::State,Phonon::State)", 0},
    {0, 0}
};


pyqt4ClassTypeDef sipTypeDef_phonon_Phonon_MediaObject = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_Phonon__MediaObject,
        {0}
    },
    {
        sipNameNr_MediaObject,
        {0, 255, 0},
        32, methods_Phonon_MediaObject,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_Phonon_MediaObject,
    0,
    init_Phonon_MediaObject,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Phonon_MediaObject,
    0,
    0,
    0,
    release_Phonon_MediaObject,
    cast_Phonon_MediaObject,
    0,
    0,
    0
},
    &Phonon::MediaObject::staticMetaObject,
    0,
    pyqt4_signals_Phonon_MediaObject
};

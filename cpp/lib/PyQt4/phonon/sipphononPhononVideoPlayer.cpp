/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:39 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIphonon.h"

#line 38 "sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 45 "sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 38 "sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 45 "sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 38 "sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 45 "sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 38 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 44 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 51 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 38 "sip/phonon/effect.sip"
#include <effect.h>
#line 45 "sip/phonon/effect.sip"
#include <effect.h>
#line 44 "sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 51 "sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 38 "sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 45 "sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 44 "sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 51 "sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 38 "sip/phonon/medianode.sip"
#include <medianode.h>
#line 45 "sip/phonon/medianode.sip"
#include <medianode.h>
#line 38 "sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 45 "sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 38 "sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 45 "sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 38 "sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 49 "sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 88 "sip/phonon/objectdescription.sip"
#include <objectdescriptionmodel.h>
#line 38 "sip/phonon/path.sip"
#include <path.h>
#line 45 "sip/phonon/path.sip"
#include <path.h>
#line 38 "sip/phonon/phononnamespace.sip"
#include <phononnamespace.h>
#line 38 "sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 45 "sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 38 "sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 45 "sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 38 "sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 45 "sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 38 "sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 45 "sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 111 "sipphononPhononVideoPlayer.cpp"

#line 38 "sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 45 "sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 38 "sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 45 "sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 38 "sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 45 "sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 38 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 44 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 51 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 38 "sip/phonon/effect.sip"
#include <effect.h>
#line 45 "sip/phonon/effect.sip"
#include <effect.h>
#line 44 "sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 51 "sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 38 "sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 45 "sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 44 "sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 51 "sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 38 "sip/phonon/medianode.sip"
#include <medianode.h>
#line 45 "sip/phonon/medianode.sip"
#include <medianode.h>
#line 38 "sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 45 "sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 38 "sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 45 "sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 38 "sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 49 "sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 88 "sip/phonon/objectdescription.sip"
#include <objectdescriptionmodel.h>
#line 38 "sip/phonon/path.sip"
#include <path.h>
#line 45 "sip/phonon/path.sip"
#include <path.h>
#line 38 "sip/phonon/phononnamespace.sip"
#include <phononnamespace.h>
#line 38 "sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 45 "sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 38 "sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 45 "sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 38 "sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 45 "sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 38 "sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 45 "sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 187 "sipphononPhononVideoPlayer.cpp"
#line 41 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 190 "sipphononPhononVideoPlayer.cpp"
#line 38 "sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 45 "sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 38 "sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 45 "sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 38 "sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 45 "sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 38 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 44 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 51 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 38 "sip/phonon/effect.sip"
#include <effect.h>
#line 45 "sip/phonon/effect.sip"
#include <effect.h>
#line 44 "sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 51 "sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 38 "sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 45 "sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 44 "sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 51 "sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 38 "sip/phonon/medianode.sip"
#include <medianode.h>
#line 45 "sip/phonon/medianode.sip"
#include <medianode.h>
#line 38 "sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 45 "sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 38 "sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 45 "sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 38 "sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 49 "sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 88 "sip/phonon/objectdescription.sip"
#include <objectdescriptionmodel.h>
#line 38 "sip/phonon/path.sip"
#include <path.h>
#line 45 "sip/phonon/path.sip"
#include <path.h>
#line 38 "sip/phonon/phononnamespace.sip"
#include <phononnamespace.h>
#line 38 "sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 45 "sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 38 "sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 45 "sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 38 "sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 45 "sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 38 "sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 45 "sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 265 "sipphononPhononVideoPlayer.cpp"
#line 38 "sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 45 "sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 38 "sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 45 "sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 38 "sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 45 "sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 38 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 44 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 51 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 38 "sip/phonon/effect.sip"
#include <effect.h>
#line 45 "sip/phonon/effect.sip"
#include <effect.h>
#line 44 "sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 51 "sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 38 "sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 45 "sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 44 "sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 51 "sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 38 "sip/phonon/medianode.sip"
#include <medianode.h>
#line 45 "sip/phonon/medianode.sip"
#include <medianode.h>
#line 38 "sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 45 "sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 38 "sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 45 "sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 38 "sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 49 "sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 88 "sip/phonon/objectdescription.sip"
#include <objectdescriptionmodel.h>
#line 38 "sip/phonon/path.sip"
#include <path.h>
#line 45 "sip/phonon/path.sip"
#include <path.h>
#line 38 "sip/phonon/phononnamespace.sip"
#include <phononnamespace.h>
#line 38 "sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 45 "sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 38 "sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 45 "sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 38 "sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 45 "sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 38 "sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 45 "sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 340 "sipphononPhononVideoPlayer.cpp"
#line 38 "sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 45 "sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 38 "sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 45 "sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 38 "sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 45 "sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 38 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 44 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 51 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 38 "sip/phonon/effect.sip"
#include <effect.h>
#line 45 "sip/phonon/effect.sip"
#include <effect.h>
#line 44 "sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 51 "sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 38 "sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 45 "sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 44 "sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 51 "sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 38 "sip/phonon/medianode.sip"
#include <medianode.h>
#line 45 "sip/phonon/medianode.sip"
#include <medianode.h>
#line 38 "sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 45 "sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 38 "sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 45 "sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 38 "sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 49 "sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 88 "sip/phonon/objectdescription.sip"
#include <objectdescriptionmodel.h>
#line 38 "sip/phonon/path.sip"
#include <path.h>
#line 45 "sip/phonon/path.sip"
#include <path.h>
#line 38 "sip/phonon/phononnamespace.sip"
#include <phononnamespace.h>
#line 38 "sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 45 "sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 38 "sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 45 "sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 38 "sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 45 "sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 38 "sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 45 "sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 415 "sipphononPhononVideoPlayer.cpp"
#line 38 "sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 45 "sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 38 "sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 45 "sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 38 "sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 45 "sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 38 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 44 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 51 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 38 "sip/phonon/effect.sip"
#include <effect.h>
#line 45 "sip/phonon/effect.sip"
#include <effect.h>
#line 44 "sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 51 "sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 38 "sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 45 "sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 44 "sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 51 "sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 38 "sip/phonon/medianode.sip"
#include <medianode.h>
#line 45 "sip/phonon/medianode.sip"
#include <medianode.h>
#line 38 "sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 45 "sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 38 "sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 45 "sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 38 "sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 49 "sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 88 "sip/phonon/objectdescription.sip"
#include <objectdescriptionmodel.h>
#line 38 "sip/phonon/path.sip"
#include <path.h>
#line 45 "sip/phonon/path.sip"
#include <path.h>
#line 38 "sip/phonon/phononnamespace.sip"
#include <phononnamespace.h>
#line 38 "sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 45 "sip/phonon/seekslider.sip"
#include <seekslider.h>
#line 38 "sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 45 "sip/phonon/videoplayer.sip"
#include <videoplayer.h>
#line 38 "sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 45 "sip/phonon/videowidget.sip"
#include <videowidget.h>
#line 38 "sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 45 "sip/phonon/volumeslider.sip"
#include <volumeslider.h>
#line 490 "sipphononPhononVideoPlayer.cpp"
#line 39 "sip/QtGui/qgraphicsproxywidget.sip"
#include <qgraphicsproxywidget.h>
#line 493 "sipphononPhononVideoPlayer.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 496 "sipphononPhononVideoPlayer.cpp"
#line 41 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 499 "sipphononPhononVideoPlayer.cpp"
#line 37 "sip/QtGui/qpaintdevice.sip"
#include <qpaintdevice.h>
#line 502 "sipphononPhononVideoPlayer.cpp"
#line 41 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 505 "sipphononPhononVideoPlayer.cpp"
#line 41 "sip/QtGui/qregion.sip"
#include <qregion.h>
#line 508 "sipphononPhononVideoPlayer.cpp"
#line 41 "sip/QtGui/qwidget.sip"
#include <qwidget.h>
#line 511 "sipphononPhononVideoPlayer.cpp"
#line 41 "sip/QtGui/qpainter.sip"
#include <qpainter.h>
#line 514 "sipphononPhononVideoPlayer.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 517 "sipphononPhononVideoPlayer.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 520 "sipphononPhononVideoPlayer.cpp"
#line 41 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 523 "sipphononPhononVideoPlayer.cpp"
#line 41 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 526 "sipphononPhononVideoPlayer.cpp"
#line 37 "sip/QtGui/qfontinfo.sip"
#include <qfontinfo.h>
#line 529 "sipphononPhononVideoPlayer.cpp"
#line 37 "sip/QtGui/qfontmetrics.sip"
#include <qfontmetrics.h>
#line 532 "sipphononPhononVideoPlayer.cpp"
#line 41 "sip/QtGui/qfont.sip"
#include <qfont.h>
#line 535 "sipphononPhononVideoPlayer.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 538 "sipphononPhononVideoPlayer.cpp"
#line 41 "sip/QtGui/qpalette.sip"
#include <qpalette.h>
#line 541 "sipphononPhononVideoPlayer.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 544 "sipphononPhononVideoPlayer.cpp"
#line 461 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 477 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 549 "sipphononPhononVideoPlayer.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 552 "sipphononPhononVideoPlayer.cpp"
#line 419 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 555 "sipphononPhononVideoPlayer.cpp"
#line 407 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 558 "sipphononPhononVideoPlayer.cpp"
#line 503 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 561 "sipphononPhononVideoPlayer.cpp"
#line 557 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 564 "sipphononPhononVideoPlayer.cpp"
#line 528 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 567 "sipphononPhononVideoPlayer.cpp"
#line 545 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 570 "sipphononPhononVideoPlayer.cpp"
#line 613 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 573 "sipphononPhononVideoPlayer.cpp"
#line 242 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 576 "sipphononPhononVideoPlayer.cpp"
#line 431 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 579 "sipphononPhononVideoPlayer.cpp"
#line 383 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 582 "sipphononPhononVideoPlayer.cpp"
#line 369 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 585 "sipphononPhononVideoPlayer.cpp"
#line 355 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 588 "sipphononPhononVideoPlayer.cpp"
#line 340 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 591 "sipphononPhononVideoPlayer.cpp"
#line 320 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 594 "sipphononPhononVideoPlayer.cpp"
#line 291 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 597 "sipphononPhononVideoPlayer.cpp"
#line 220 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 600 "sipphononPhononVideoPlayer.cpp"
#line 179 "sip/QtGui/qevent.sip"
#include <qevent.h>
#line 603 "sipphononPhononVideoPlayer.cpp"
#line 37 "sip/QtGui/qinputcontext.sip"
#include <qinputcontext.h>
#line 606 "sipphononPhononVideoPlayer.cpp"
#line 69 "sip/QtGui/qpaintengine.sip"
#include <qpaintengine.h>
#line 609 "sipphononPhononVideoPlayer.cpp"
#line 42 "sip/QtGui/qx11info_x11.sip"
#include <qx11info_x11.h>
#line 612 "sipphononPhononVideoPlayer.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 615 "sipphononPhononVideoPlayer.cpp"
#line 37 "sip/QtGui/qaction.sip"
#include <qaction.h>
#line 618 "sipphononPhononVideoPlayer.cpp"
#line 37 "sip/QtGui/qlayout.sip"
#include <qlayout.h>
#line 621 "sipphononPhononVideoPlayer.cpp"
#line 41 "sip/QtGui/qsizepolicy.sip"
#include <qsizepolicy.h>
#line 624 "sipphononPhononVideoPlayer.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 627 "sipphononPhononVideoPlayer.cpp"
#line 41 "sip/QtGui/qkeysequence.sip"
#include <qkeysequence.h>
#line 630 "sipphononPhononVideoPlayer.cpp"
#line 41 "sip/QtGui/qcursor.sip"
#include <qcursor.h>
#line 633 "sipphononPhononVideoPlayer.cpp"
#line 41 "sip/QtGui/qicon.sip"
#include <qicon.h>
#line 636 "sipphononPhononVideoPlayer.cpp"
#line 41 "sip/QtGui/qbitmap.sip"
#include <qbitmap.h>
#line 639 "sipphononPhononVideoPlayer.cpp"
#line 41 "sip/QtGui/qstyle.sip"
#include <qstyle.h>
#line 642 "sipphononPhononVideoPlayer.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 645 "sipphononPhononVideoPlayer.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 648 "sipphononPhononVideoPlayer.cpp"
#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 651 "sipphononPhononVideoPlayer.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 654 "sipphononPhononVideoPlayer.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 657 "sipphononPhononVideoPlayer.cpp"
#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 660 "sipphononPhononVideoPlayer.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 663 "sipphononPhononVideoPlayer.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 666 "sipphononPhononVideoPlayer.cpp"


class sipPhonon_VideoPlayer : public Phonon::VideoPlayer
{
public:
    sipPhonon_VideoPlayer(Phonon::Category,QWidget *);
    sipPhonon_VideoPlayer(QWidget *);
    virtual ~sipPhonon_VideoPlayer();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    bool sipProtectVirt_event(bool,QEvent *);
    void sipProtectVirt_mousePressEvent(bool,QMouseEvent *);
    void sipProtectVirt_mouseReleaseEvent(bool,QMouseEvent *);
    void sipProtectVirt_mouseDoubleClickEvent(bool,QMouseEvent *);
    void sipProtectVirt_mouseMoveEvent(bool,QMouseEvent *);
    void sipProtectVirt_wheelEvent(bool,QWheelEvent *);
    void sipProtectVirt_keyPressEvent(bool,QKeyEvent *);
    void sipProtectVirt_keyReleaseEvent(bool,QKeyEvent *);
    void sipProtectVirt_focusInEvent(bool,QFocusEvent *);
    void sipProtectVirt_focusOutEvent(bool,QFocusEvent *);
    void sipProtectVirt_enterEvent(bool,QEvent *);
    void sipProtectVirt_leaveEvent(bool,QEvent *);
    void sipProtectVirt_paintEvent(bool,QPaintEvent *);
    void sipProtectVirt_moveEvent(bool,QMoveEvent *);
    void sipProtectVirt_resizeEvent(bool,QResizeEvent *);
    void sipProtectVirt_closeEvent(bool,QCloseEvent *);
    void sipProtectVirt_contextMenuEvent(bool,QContextMenuEvent *);
    void sipProtectVirt_tabletEvent(bool,QTabletEvent *);
    void sipProtectVirt_actionEvent(bool,QActionEvent *);
    void sipProtectVirt_dragEnterEvent(bool,QDragEnterEvent *);
    void sipProtectVirt_dragMoveEvent(bool,QDragMoveEvent *);
    void sipProtectVirt_dragLeaveEvent(bool,QDragLeaveEvent *);
    void sipProtectVirt_dropEvent(bool,QDropEvent *);
    void sipProtectVirt_showEvent(bool,QShowEvent *);
    void sipProtectVirt_hideEvent(bool,QHideEvent *);
    void sipProtectVirt_changeEvent(bool,QEvent *);
    int sipProtectVirt_metric(bool,QPaintDevice::PaintDeviceMetric) const;
    void sipProtectVirt_inputMethodEvent(bool,QInputMethodEvent *);
    void sipProtect_resetInputContext();
    void sipProtect_updateMicroFocus();
    void sipProtect_create(WId,bool,bool);
    void sipProtect_destroy(bool,bool);
    bool sipProtectVirt_focusNextPrevChild(bool,bool);
    bool sipProtect_focusNextChild();
    bool sipProtect_focusPreviousChild();
    void sipProtectVirt_enabledChange(bool,bool);
    void sipProtectVirt_paletteChange(bool,const QPalette&);
    void sipProtectVirt_fontChange(bool,const QFont&);
    void sipProtectVirt_windowActivationChange(bool,bool);
    void sipProtectVirt_languageChange(bool);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    int devType() const;
    void setVisible(bool);
    QSize sizeHint() const;
    QSize minimumSizeHint() const;
    int heightForWidth(int) const;
    QPaintEngine * paintEngine() const;
    bool event(QEvent *);
    void mousePressEvent(QMouseEvent *);
    void mouseReleaseEvent(QMouseEvent *);
    void mouseDoubleClickEvent(QMouseEvent *);
    void mouseMoveEvent(QMouseEvent *);
    void wheelEvent(QWheelEvent *);
    void keyPressEvent(QKeyEvent *);
    void keyReleaseEvent(QKeyEvent *);
    void focusInEvent(QFocusEvent *);
    void focusOutEvent(QFocusEvent *);
    void enterEvent(QEvent *);
    void leaveEvent(QEvent *);
    void paintEvent(QPaintEvent *);
    void moveEvent(QMoveEvent *);
    void resizeEvent(QResizeEvent *);
    void closeEvent(QCloseEvent *);
    void contextMenuEvent(QContextMenuEvent *);
    void tabletEvent(QTabletEvent *);
    void actionEvent(QActionEvent *);
    void dragEnterEvent(QDragEnterEvent *);
    void dragMoveEvent(QDragMoveEvent *);
    void dragLeaveEvent(QDragLeaveEvent *);
    void dropEvent(QDropEvent *);
    void showEvent(QShowEvent *);
    void hideEvent(QHideEvent *);
    void changeEvent(QEvent *);
    int metric(QPaintDevice::PaintDeviceMetric) const;
    void inputMethodEvent(QInputMethodEvent *);
    QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    bool focusNextPrevChild(bool);
    void enabledChange(bool);
    void paletteChange(const QPalette&);
    void fontChange(const QFont&);
    void windowActivationChange(bool);
    void languageChange();
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipPhonon_VideoPlayer(const sipPhonon_VideoPlayer &);
    sipPhonon_VideoPlayer &operator = (const sipPhonon_VideoPlayer &);

    char sipPyMethods[47];
};

sipPhonon_VideoPlayer::sipPhonon_VideoPlayer(Phonon::Category a0,QWidget *a1): Phonon::VideoPlayer(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipPhonon_VideoPlayer::sipPhonon_VideoPlayer(QWidget *a0): Phonon::VideoPlayer(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipPhonon_VideoPlayer::~sipPhonon_VideoPlayer()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipPhonon_VideoPlayer::metaObject() const
{
    return sip_phonon_qt_metaobject(sipPySelf,sipType_Phonon_VideoPlayer);
}

int sipPhonon_VideoPlayer::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = Phonon::VideoPlayer::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_phonon_qt_metacall(sipPySelf,sipType_Phonon_VideoPlayer,_c,_id,_a);

    return _id;
}

void *sipPhonon_VideoPlayer::qt_metacast(const char *_clname)
{
    return (sip_phonon_qt_metacast && sip_phonon_qt_metacast(sipPySelf,sipType_Phonon_VideoPlayer,_clname)) ? this : Phonon::VideoPlayer::qt_metacast(_clname);
}

int sipPhonon_VideoPlayer::devType() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_devType);

    if (!meth)
        return QWidget::devType();

    typedef int (*sipVH_QtCore_7)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_7)(sipModuleAPI_phonon_QtCore->em_virthandlers[7]))(sipGILState,meth,0);
}

void sipPhonon_VideoPlayer::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_setVisible);

    if (!meth)
    {
        QWidget::setVisible(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t,PyObject *,bool*,bool);

    ((sipVH_QtGui_7)(sipModuleAPI_phonon_QtGui->em_virthandlers[7]))(sipGILState,meth,0,a0);
}

QSize sipPhonon_VideoPlayer::sizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_sizeHint);

    if (!meth)
        return QWidget::sizeHint();

    typedef QSize (*sipVH_QtGui_4)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtGui_4)(sipModuleAPI_phonon_QtGui->em_virthandlers[4]))(sipGILState,meth,0);
}

QSize sipPhonon_VideoPlayer::minimumSizeHint() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_minimumSizeHint);

    if (!meth)
        return QWidget::minimumSizeHint();

    typedef QSize (*sipVH_QtGui_4)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtGui_4)(sipModuleAPI_phonon_QtGui->em_virthandlers[4]))(sipGILState,meth,0);
}

int sipPhonon_VideoPlayer::heightForWidth(int a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_heightForWidth);

    if (!meth)
        return QWidget::heightForWidth(a0);

    typedef int (*sipVH_QtGui_29)(sip_gilstate_t,PyObject *,bool*,int);

    return ((sipVH_QtGui_29)(sipModuleAPI_phonon_QtGui->em_virthandlers[29]))(sipGILState,meth,0,a0);
}

QPaintEngine * sipPhonon_VideoPlayer::paintEngine() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_paintEngine);

    if (!meth)
        return QWidget::paintEngine();

    typedef QPaintEngine * (*sipVH_QtGui_28)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtGui_28)(sipModuleAPI_phonon_QtGui->em_virthandlers[28]))(sipGILState,meth,0);
}

bool sipPhonon_VideoPlayer::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QWidget::event(a0);

    typedef bool (*sipVH_QtCore_12)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return ((sipVH_QtCore_12)(sipModuleAPI_phonon_QtCore->em_virthandlers[12]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::mousePressEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_mousePressEvent);

    if (!meth)
    {
        QWidget::mousePressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_27)(sip_gilstate_t,PyObject *,bool*,QMouseEvent *);

    ((sipVH_QtGui_27)(sipModuleAPI_phonon_QtGui->em_virthandlers[27]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::mouseReleaseEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_mouseReleaseEvent);

    if (!meth)
    {
        QWidget::mouseReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_27)(sip_gilstate_t,PyObject *,bool*,QMouseEvent *);

    ((sipVH_QtGui_27)(sipModuleAPI_phonon_QtGui->em_virthandlers[27]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::mouseDoubleClickEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_mouseDoubleClickEvent);

    if (!meth)
    {
        QWidget::mouseDoubleClickEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_27)(sip_gilstate_t,PyObject *,bool*,QMouseEvent *);

    ((sipVH_QtGui_27)(sipModuleAPI_phonon_QtGui->em_virthandlers[27]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::mouseMoveEvent(QMouseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_mouseMoveEvent);

    if (!meth)
    {
        QWidget::mouseMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_27)(sip_gilstate_t,PyObject *,bool*,QMouseEvent *);

    ((sipVH_QtGui_27)(sipModuleAPI_phonon_QtGui->em_virthandlers[27]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::wheelEvent(QWheelEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_wheelEvent);

    if (!meth)
    {
        QWidget::wheelEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_5)(sip_gilstate_t,PyObject *,bool*,QWheelEvent *);

    ((sipVH_QtGui_5)(sipModuleAPI_phonon_QtGui->em_virthandlers[5]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::keyPressEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_keyPressEvent);

    if (!meth)
    {
        QWidget::keyPressEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_26)(sip_gilstate_t,PyObject *,bool*,QKeyEvent *);

    ((sipVH_QtGui_26)(sipModuleAPI_phonon_QtGui->em_virthandlers[26]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::keyReleaseEvent(QKeyEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_keyReleaseEvent);

    if (!meth)
    {
        QWidget::keyReleaseEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_26)(sip_gilstate_t,PyObject *,bool*,QKeyEvent *);

    ((sipVH_QtGui_26)(sipModuleAPI_phonon_QtGui->em_virthandlers[26]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::focusInEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_focusInEvent);

    if (!meth)
    {
        QWidget::focusInEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_25)(sip_gilstate_t,PyObject *,bool*,QFocusEvent *);

    ((sipVH_QtGui_25)(sipModuleAPI_phonon_QtGui->em_virthandlers[25]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::focusOutEvent(QFocusEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_focusOutEvent);

    if (!meth)
    {
        QWidget::focusOutEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_25)(sip_gilstate_t,PyObject *,bool*,QFocusEvent *);

    ((sipVH_QtGui_25)(sipModuleAPI_phonon_QtGui->em_virthandlers[25]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::enterEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_enterEvent);

    if (!meth)
    {
        QWidget::enterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_phonon_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::leaveEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_leaveEvent);

    if (!meth)
    {
        QWidget::leaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_phonon_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::paintEvent(QPaintEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_paintEvent);

    if (!meth)
    {
        QWidget::paintEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_3)(sip_gilstate_t,PyObject *,bool*,QPaintEvent *);

    ((sipVH_QtGui_3)(sipModuleAPI_phonon_QtGui->em_virthandlers[3]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::moveEvent(QMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_moveEvent);

    if (!meth)
    {
        QWidget::moveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_24)(sip_gilstate_t,PyObject *,bool*,QMoveEvent *);

    ((sipVH_QtGui_24)(sipModuleAPI_phonon_QtGui->em_virthandlers[24]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::resizeEvent(QResizeEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_resizeEvent);

    if (!meth)
    {
        QWidget::resizeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_2)(sip_gilstate_t,PyObject *,bool*,QResizeEvent *);

    ((sipVH_QtGui_2)(sipModuleAPI_phonon_QtGui->em_virthandlers[2]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::closeEvent(QCloseEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_closeEvent);

    if (!meth)
    {
        QWidget::closeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_23)(sip_gilstate_t,PyObject *,bool*,QCloseEvent *);

    ((sipVH_QtGui_23)(sipModuleAPI_phonon_QtGui->em_virthandlers[23]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::contextMenuEvent(QContextMenuEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_contextMenuEvent);

    if (!meth)
    {
        QWidget::contextMenuEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_22)(sip_gilstate_t,PyObject *,bool*,QContextMenuEvent *);

    ((sipVH_QtGui_22)(sipModuleAPI_phonon_QtGui->em_virthandlers[22]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::tabletEvent(QTabletEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_tabletEvent);

    if (!meth)
    {
        QWidget::tabletEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_21)(sip_gilstate_t,PyObject *,bool*,QTabletEvent *);

    ((sipVH_QtGui_21)(sipModuleAPI_phonon_QtGui->em_virthandlers[21]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::actionEvent(QActionEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_actionEvent);

    if (!meth)
    {
        QWidget::actionEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_20)(sip_gilstate_t,PyObject *,bool*,QActionEvent *);

    ((sipVH_QtGui_20)(sipModuleAPI_phonon_QtGui->em_virthandlers[20]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::dragEnterEvent(QDragEnterEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_dragEnterEvent);

    if (!meth)
    {
        QWidget::dragEnterEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_19)(sip_gilstate_t,PyObject *,bool*,QDragEnterEvent *);

    ((sipVH_QtGui_19)(sipModuleAPI_phonon_QtGui->em_virthandlers[19]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::dragMoveEvent(QDragMoveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_dragMoveEvent);

    if (!meth)
    {
        QWidget::dragMoveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_18)(sip_gilstate_t,PyObject *,bool*,QDragMoveEvent *);

    ((sipVH_QtGui_18)(sipModuleAPI_phonon_QtGui->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::dragLeaveEvent(QDragLeaveEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_dragLeaveEvent);

    if (!meth)
    {
        QWidget::dragLeaveEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_17)(sip_gilstate_t,PyObject *,bool*,QDragLeaveEvent *);

    ((sipVH_QtGui_17)(sipModuleAPI_phonon_QtGui->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::dropEvent(QDropEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_dropEvent);

    if (!meth)
    {
        QWidget::dropEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_16)(sip_gilstate_t,PyObject *,bool*,QDropEvent *);

    ((sipVH_QtGui_16)(sipModuleAPI_phonon_QtGui->em_virthandlers[16]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::showEvent(QShowEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_showEvent);

    if (!meth)
    {
        QWidget::showEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_1)(sip_gilstate_t,PyObject *,bool*,QShowEvent *);

    ((sipVH_QtGui_1)(sipModuleAPI_phonon_QtGui->em_virthandlers[1]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::hideEvent(QHideEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_hideEvent);

    if (!meth)
    {
        QWidget::hideEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_0)(sip_gilstate_t,PyObject *,bool*,QHideEvent *);

    ((sipVH_QtGui_0)(sipModuleAPI_phonon_QtGui->em_virthandlers[0]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::changeEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_changeEvent);

    if (!meth)
    {
        QWidget::changeEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_phonon_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

int sipPhonon_VideoPlayer::metric(QPaintDevice::PaintDeviceMetric a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,NULL,sipName_metric);

    if (!meth)
        return QWidget::metric(a0);

    typedef int (*sipVH_QtGui_15)(sip_gilstate_t,PyObject *,bool*,QPaintDevice::PaintDeviceMetric);

    return ((sipVH_QtGui_15)(sipModuleAPI_phonon_QtGui->em_virthandlers[15]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::inputMethodEvent(QInputMethodEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_inputMethodEvent);

    if (!meth)
    {
        QWidget::inputMethodEvent(a0);
        return;
    }

    typedef void (*sipVH_QtGui_14)(sip_gilstate_t,PyObject *,bool*,QInputMethodEvent *);

    ((sipVH_QtGui_14)(sipModuleAPI_phonon_QtGui->em_virthandlers[14]))(sipGILState,meth,0,a0);
}

QVariant sipPhonon_VideoPlayer::inputMethodQuery(Qt::InputMethodQuery a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_inputMethodQuery);

    if (!meth)
        return QWidget::inputMethodQuery(a0);

    typedef QVariant (*sipVH_QtGui_13)(sip_gilstate_t,PyObject *,bool*,Qt::InputMethodQuery);

    return ((sipVH_QtGui_13)(sipModuleAPI_phonon_QtGui->em_virthandlers[13]))(sipGILState,meth,0,a0);
}

bool sipPhonon_VideoPlayer::focusNextPrevChild(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_focusNextPrevChild);

    if (!meth)
        return QWidget::focusNextPrevChild(a0);

    typedef bool (*sipVH_QtGui_12)(sip_gilstate_t,PyObject *,bool*,bool);

    return ((sipVH_QtGui_12)(sipModuleAPI_phonon_QtGui->em_virthandlers[12]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::enabledChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_enabledChange);

    if (!meth)
    {
        QWidget::enabledChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t,PyObject *,bool*,bool);

    ((sipVH_QtGui_7)(sipModuleAPI_phonon_QtGui->em_virthandlers[7]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::paletteChange(const QPalette& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_paletteChange);

    if (!meth)
    {
        QWidget::paletteChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_11)(sip_gilstate_t,PyObject *,bool*,const QPalette&);

    ((sipVH_QtGui_11)(sipModuleAPI_phonon_QtGui->em_virthandlers[11]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::fontChange(const QFont& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_fontChange);

    if (!meth)
    {
        QWidget::fontChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_10)(sip_gilstate_t,PyObject *,bool*,const QFont&);

    ((sipVH_QtGui_10)(sipModuleAPI_phonon_QtGui->em_virthandlers[10]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::windowActivationChange(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_windowActivationChange);

    if (!meth)
    {
        QWidget::windowActivationChange(a0);
        return;
    }

    typedef void (*sipVH_QtGui_7)(sip_gilstate_t,PyObject *,bool*,bool);

    ((sipVH_QtGui_7)(sipModuleAPI_phonon_QtGui->em_virthandlers[7]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::languageChange()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_languageChange);

    if (!meth)
    {
        QWidget::languageChange();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_phonon_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

bool sipPhonon_VideoPlayer::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t,PyObject *,bool*,QObject *,QEvent *);

    return ((sipVH_QtCore_20)(sipModuleAPI_phonon_QtCore->em_virthandlers[20]))(sipGILState,meth,0,a0,a1);
}

void sipPhonon_VideoPlayer::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_3)(sip_gilstate_t,PyObject *,bool*,QTimerEvent *);

    ((sipVH_QtCore_3)(sipModuleAPI_phonon_QtCore->em_virthandlers[3]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_19)(sip_gilstate_t,PyObject *,bool*,QChildEvent *);

    ((sipVH_QtCore_19)(sipModuleAPI_phonon_QtCore->em_virthandlers[19]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_phonon_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_phonon_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

void sipPhonon_VideoPlayer::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_phonon_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

int sipPhonon_VideoPlayer::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipPhonon_VideoPlayer::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

bool sipPhonon_VideoPlayer::sipProtectVirt_event(bool sipSelfWasArg,QEvent *a0)
{
    return (sipSelfWasArg ? QWidget::event(a0) : event(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_mousePressEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QWidget::mousePressEvent(a0) : mousePressEvent(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_mouseReleaseEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QWidget::mouseReleaseEvent(a0) : mouseReleaseEvent(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_mouseDoubleClickEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QWidget::mouseDoubleClickEvent(a0) : mouseDoubleClickEvent(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_mouseMoveEvent(bool sipSelfWasArg,QMouseEvent *a0)
{
    (sipSelfWasArg ? QWidget::mouseMoveEvent(a0) : mouseMoveEvent(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_wheelEvent(bool sipSelfWasArg,QWheelEvent *a0)
{
    (sipSelfWasArg ? QWidget::wheelEvent(a0) : wheelEvent(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_keyPressEvent(bool sipSelfWasArg,QKeyEvent *a0)
{
    (sipSelfWasArg ? QWidget::keyPressEvent(a0) : keyPressEvent(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_keyReleaseEvent(bool sipSelfWasArg,QKeyEvent *a0)
{
    (sipSelfWasArg ? QWidget::keyReleaseEvent(a0) : keyReleaseEvent(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_focusInEvent(bool sipSelfWasArg,QFocusEvent *a0)
{
    (sipSelfWasArg ? QWidget::focusInEvent(a0) : focusInEvent(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_focusOutEvent(bool sipSelfWasArg,QFocusEvent *a0)
{
    (sipSelfWasArg ? QWidget::focusOutEvent(a0) : focusOutEvent(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_enterEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QWidget::enterEvent(a0) : enterEvent(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_leaveEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QWidget::leaveEvent(a0) : leaveEvent(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_paintEvent(bool sipSelfWasArg,QPaintEvent *a0)
{
    (sipSelfWasArg ? QWidget::paintEvent(a0) : paintEvent(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_moveEvent(bool sipSelfWasArg,QMoveEvent *a0)
{
    (sipSelfWasArg ? QWidget::moveEvent(a0) : moveEvent(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_resizeEvent(bool sipSelfWasArg,QResizeEvent *a0)
{
    (sipSelfWasArg ? QWidget::resizeEvent(a0) : resizeEvent(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_closeEvent(bool sipSelfWasArg,QCloseEvent *a0)
{
    (sipSelfWasArg ? QWidget::closeEvent(a0) : closeEvent(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_contextMenuEvent(bool sipSelfWasArg,QContextMenuEvent *a0)
{
    (sipSelfWasArg ? QWidget::contextMenuEvent(a0) : contextMenuEvent(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_tabletEvent(bool sipSelfWasArg,QTabletEvent *a0)
{
    (sipSelfWasArg ? QWidget::tabletEvent(a0) : tabletEvent(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_actionEvent(bool sipSelfWasArg,QActionEvent *a0)
{
    (sipSelfWasArg ? QWidget::actionEvent(a0) : actionEvent(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_dragEnterEvent(bool sipSelfWasArg,QDragEnterEvent *a0)
{
    (sipSelfWasArg ? QWidget::dragEnterEvent(a0) : dragEnterEvent(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_dragMoveEvent(bool sipSelfWasArg,QDragMoveEvent *a0)
{
    (sipSelfWasArg ? QWidget::dragMoveEvent(a0) : dragMoveEvent(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_dragLeaveEvent(bool sipSelfWasArg,QDragLeaveEvent *a0)
{
    (sipSelfWasArg ? QWidget::dragLeaveEvent(a0) : dragLeaveEvent(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_dropEvent(bool sipSelfWasArg,QDropEvent *a0)
{
    (sipSelfWasArg ? QWidget::dropEvent(a0) : dropEvent(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_showEvent(bool sipSelfWasArg,QShowEvent *a0)
{
    (sipSelfWasArg ? QWidget::showEvent(a0) : showEvent(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_hideEvent(bool sipSelfWasArg,QHideEvent *a0)
{
    (sipSelfWasArg ? QWidget::hideEvent(a0) : hideEvent(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_changeEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QWidget::changeEvent(a0) : changeEvent(a0));
}

int sipPhonon_VideoPlayer::sipProtectVirt_metric(bool sipSelfWasArg,QPaintDevice::PaintDeviceMetric a0) const
{
    return (sipSelfWasArg ? QWidget::metric(a0) : metric(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_inputMethodEvent(bool sipSelfWasArg,QInputMethodEvent *a0)
{
    (sipSelfWasArg ? QWidget::inputMethodEvent(a0) : inputMethodEvent(a0));
}

void sipPhonon_VideoPlayer::sipProtect_resetInputContext()
{
    QWidget::resetInputContext();
}

void sipPhonon_VideoPlayer::sipProtect_updateMicroFocus()
{
    QWidget::updateMicroFocus();
}

void sipPhonon_VideoPlayer::sipProtect_create(WId a0,bool a1,bool a2)
{
    QWidget::create(a0,a1,a2);
}

void sipPhonon_VideoPlayer::sipProtect_destroy(bool a0,bool a1)
{
    QWidget::destroy(a0,a1);
}

bool sipPhonon_VideoPlayer::sipProtectVirt_focusNextPrevChild(bool sipSelfWasArg,bool a0)
{
    return (sipSelfWasArg ? QWidget::focusNextPrevChild(a0) : focusNextPrevChild(a0));
}

bool sipPhonon_VideoPlayer::sipProtect_focusNextChild()
{
    return QWidget::focusNextChild();
}

bool sipPhonon_VideoPlayer::sipProtect_focusPreviousChild()
{
    return QWidget::focusPreviousChild();
}

void sipPhonon_VideoPlayer::sipProtectVirt_enabledChange(bool sipSelfWasArg,bool a0)
{
    (sipSelfWasArg ? QWidget::enabledChange(a0) : enabledChange(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_paletteChange(bool sipSelfWasArg,const QPalette& a0)
{
    (sipSelfWasArg ? QWidget::paletteChange(a0) : paletteChange(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_fontChange(bool sipSelfWasArg,const QFont& a0)
{
    (sipSelfWasArg ? QWidget::fontChange(a0) : fontChange(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_windowActivationChange(bool sipSelfWasArg,bool a0)
{
    (sipSelfWasArg ? QWidget::windowActivationChange(a0) : windowActivationChange(a0));
}

void sipPhonon_VideoPlayer::sipProtectVirt_languageChange(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QWidget::languageChange() : languageChange());
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_receivers(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        char * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,&a0))
        {
            int sipRes = 0;

#line 480 "sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
#line 1901 "sipphononPhononVideoPlayer.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_receivers);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QTimerEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_timerEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_childEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QChildEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_childEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_customEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_customEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_connectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_disconnectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_event(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_event(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QEvent,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_event);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_mousePressEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_mousePressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QMouseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mousePressEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_mousePressEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_mouseReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_mouseReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QMouseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseReleaseEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_mouseReleaseEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_mouseDoubleClickEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_mouseDoubleClickEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QMouseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseDoubleClickEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_mouseDoubleClickEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_mouseMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_mouseMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMouseEvent * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QMouseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_mouseMoveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_mouseMoveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_wheelEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_wheelEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QWheelEvent * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QWheelEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_wheelEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_wheelEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_keyPressEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_keyPressEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QKeyEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_keyPressEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_keyPressEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_keyReleaseEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_keyReleaseEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QKeyEvent * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QKeyEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_keyReleaseEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_keyReleaseEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_focusInEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_focusInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QFocusEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_focusInEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_focusInEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_focusOutEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_focusOutEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QFocusEvent * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QFocusEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_focusOutEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_focusOutEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_enterEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_enterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_enterEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_enterEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_leaveEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_leaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_leaveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_leaveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_paintEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_paintEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintEvent * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QPaintEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_paintEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_paintEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_moveEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_moveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QMoveEvent * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QMoveEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_moveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_moveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_resizeEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_resizeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QResizeEvent * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QResizeEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_resizeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_resizeEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_closeEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_closeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QCloseEvent * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QCloseEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_closeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_closeEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_contextMenuEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_contextMenuEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QContextMenuEvent * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QContextMenuEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_contextMenuEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_contextMenuEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_tabletEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_tabletEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTabletEvent * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QTabletEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_tabletEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_tabletEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_actionEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_actionEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QActionEvent * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QActionEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_actionEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_actionEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_dragEnterEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_dragEnterEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragEnterEvent * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QDragEnterEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragEnterEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_dragEnterEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_dragMoveEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_dragMoveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragMoveEvent * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QDragMoveEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragMoveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_dragMoveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_dragLeaveEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_dragLeaveEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDragLeaveEvent * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QDragLeaveEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dragLeaveEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_dragLeaveEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_dropEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_dropEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QDropEvent * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QDropEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_dropEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_dropEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_showEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_showEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QShowEvent * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QShowEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_showEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_showEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_hideEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_hideEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QHideEvent * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QHideEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_hideEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_hideEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_changeEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_changeEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_changeEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_changeEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_metric(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_metric(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QPaintDevice::PaintDeviceMetric a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pE",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QPaintDevice_PaintDeviceMetric,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_metric(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_metric);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_inputMethodEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_inputMethodEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QInputMethodEvent * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QInputMethodEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_inputMethodEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_inputMethodEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_resetInputContext(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_resetInputContext(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_resetInputContext();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_resetInputContext);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_updateMicroFocus(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_updateMicroFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_updateMicroFocus();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_updateMicroFocus);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_create(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_create(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        WId a0 = 0;
        bool a1 = 1;
        bool a2 = 1;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p|mbb",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,&a0,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_create(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_create);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_destroy(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0 = 1;
        bool a1 = 1;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p|bb",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_destroy(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_destroy);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_focusNextPrevChild(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_focusNextPrevChild(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pb",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_focusNextPrevChild(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_focusNextPrevChild);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_focusNextChild(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_focusNextChild(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_focusNextChild();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_focusNextChild);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_focusPreviousChild(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_focusPreviousChild(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_focusPreviousChild();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_focusPreviousChild);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_enabledChange(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_enabledChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pb",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_enabledChange(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_enabledChange);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_paletteChange(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_paletteChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QPalette * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QPalette,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_paletteChange(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_paletteChange);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_fontChange(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_fontChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QFont * a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_QFont,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_fontChange(sipSelfWasArg,*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_fontChange);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_windowActivationChange(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_windowActivationChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pb",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_windowActivationChange(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_windowActivationChange);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_languageChange(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_languageChange(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipPhonon_VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_languageChange(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_languageChange);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_totalTime(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_totalTime(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Phonon::VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->totalTime();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_totalTime);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_currentTime(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_currentTime(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Phonon::VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->currentTime();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_currentTime);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_volume(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_volume(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Phonon::VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp))
        {
            float sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->volume();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_volume);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_isPlaying(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_isPlaying(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Phonon::VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isPlaying();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_isPlaying);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_isPaused(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_isPaused(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Phonon::VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isPaused();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_isPaused);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_load(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_load(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const Phonon::MediaSource * a0;
        Phonon::VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_Phonon_MediaSource,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->load(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_load);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_play(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_play(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const Phonon::MediaSource * a0;
        Phonon::VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,sipType_Phonon_MediaSource,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->play(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        Phonon::VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->play();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_play);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_pause(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_pause(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Phonon::VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->pause();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_pause);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_stop(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_stop(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Phonon::VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->stop();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_stop);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_seek(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_seek(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qint64 a0;
        Phonon::VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bn",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->seek(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_seek);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_setVolume(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_setVolume(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        float a0;
        Phonon::VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bf",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setVolume(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_setVolume);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_mediaObject(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_mediaObject(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Phonon::VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp))
        {
            Phonon::MediaObject *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->mediaObject();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_Phonon_MediaObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_mediaObject);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_audioOutput(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_audioOutput(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Phonon::VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp))
        {
            Phonon::AudioOutput *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->audioOutput();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_Phonon_AudioOutput,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_audioOutput);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_VideoPlayer_videoWidget(PyObject *, PyObject *);}
static PyObject *meth_Phonon_VideoPlayer_videoWidget(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Phonon::VideoPlayer *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_VideoPlayer,&sipCpp))
        {
            Phonon::VideoWidget *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->videoWidget();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_Phonon_VideoWidget,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_VideoPlayer,sipName_videoWidget);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_Phonon_VideoPlayer(void *, const sipTypeDef *);}
static void *cast_Phonon_VideoPlayer(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_Phonon_VideoPlayer)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QWidget)->ctd_cast((QWidget *)(Phonon::VideoPlayer *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_Phonon_VideoPlayer(void *, int);}
static void release_Phonon_VideoPlayer(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipPhonon_VideoPlayer *>(sipCppV);
    else
        delete reinterpret_cast<Phonon::VideoPlayer *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_Phonon_VideoPlayer(sipSimpleWrapper *);}
static void dealloc_Phonon_VideoPlayer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipPhonon_VideoPlayer *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_Phonon_VideoPlayer(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_Phonon_VideoPlayer(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_Phonon_VideoPlayer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **sipOwner, int *sipArgsParsed)
{
    sipPhonon_VideoPlayer *sipCpp = 0;

    if (!sipCpp)
    {
        Phonon::Category a0;
        QWidget * a1 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"E|JH",sipType_Phonon_Category,&a0,sipType_QWidget,&a1,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipPhonon_VideoPlayer(a0,a1);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        QWidget * a0 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"|JH",sipType_QWidget,&a0,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipPhonon_VideoPlayer(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_Phonon_VideoPlayer[] = {{683, 1, 1}};


static PyMethodDef methods_Phonon_VideoPlayer[] = {
    {SIP_MLNAME_CAST(sipName_actionEvent), meth_Phonon_VideoPlayer_actionEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_audioOutput), meth_Phonon_VideoPlayer_audioOutput, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changeEvent), meth_Phonon_VideoPlayer_changeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_Phonon_VideoPlayer_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_closeEvent), meth_Phonon_VideoPlayer_closeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_Phonon_VideoPlayer_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_contextMenuEvent), meth_Phonon_VideoPlayer_contextMenuEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_create), meth_Phonon_VideoPlayer_create, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentTime), meth_Phonon_VideoPlayer_currentTime, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_Phonon_VideoPlayer_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_destroy), meth_Phonon_VideoPlayer_destroy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_Phonon_VideoPlayer_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragEnterEvent), meth_Phonon_VideoPlayer_dragEnterEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragLeaveEvent), meth_Phonon_VideoPlayer_dragLeaveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dragMoveEvent), meth_Phonon_VideoPlayer_dragMoveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dropEvent), meth_Phonon_VideoPlayer_dropEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_enabledChange), meth_Phonon_VideoPlayer_enabledChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_enterEvent), meth_Phonon_VideoPlayer_enterEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_event), meth_Phonon_VideoPlayer_event, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusInEvent), meth_Phonon_VideoPlayer_focusInEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextChild), meth_Phonon_VideoPlayer_focusNextChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusNextPrevChild), meth_Phonon_VideoPlayer_focusNextPrevChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusOutEvent), meth_Phonon_VideoPlayer_focusOutEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_focusPreviousChild), meth_Phonon_VideoPlayer_focusPreviousChild, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fontChange), meth_Phonon_VideoPlayer_fontChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hideEvent), meth_Phonon_VideoPlayer_hideEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_inputMethodEvent), meth_Phonon_VideoPlayer_inputMethodEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isPaused), meth_Phonon_VideoPlayer_isPaused, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isPlaying), meth_Phonon_VideoPlayer_isPlaying, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_keyPressEvent), meth_Phonon_VideoPlayer_keyPressEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_keyReleaseEvent), meth_Phonon_VideoPlayer_keyReleaseEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_languageChange), meth_Phonon_VideoPlayer_languageChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_leaveEvent), meth_Phonon_VideoPlayer_leaveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_load), meth_Phonon_VideoPlayer_load, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mediaObject), meth_Phonon_VideoPlayer_mediaObject, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_metric), meth_Phonon_VideoPlayer_metric, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseDoubleClickEvent), meth_Phonon_VideoPlayer_mouseDoubleClickEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseMoveEvent), meth_Phonon_VideoPlayer_mouseMoveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mousePressEvent), meth_Phonon_VideoPlayer_mousePressEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mouseReleaseEvent), meth_Phonon_VideoPlayer_mouseReleaseEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveEvent), meth_Phonon_VideoPlayer_moveEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paintEvent), meth_Phonon_VideoPlayer_paintEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_paletteChange), meth_Phonon_VideoPlayer_paletteChange, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_pause), meth_Phonon_VideoPlayer_pause, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_play), meth_Phonon_VideoPlayer_play, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_Phonon_VideoPlayer_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resetInputContext), meth_Phonon_VideoPlayer_resetInputContext, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resizeEvent), meth_Phonon_VideoPlayer_resizeEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_seek), meth_Phonon_VideoPlayer_seek, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setVolume), meth_Phonon_VideoPlayer_setVolume, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_showEvent), meth_Phonon_VideoPlayer_showEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_stop), meth_Phonon_VideoPlayer_stop, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_tabletEvent), meth_Phonon_VideoPlayer_tabletEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_Phonon_VideoPlayer_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_totalTime), meth_Phonon_VideoPlayer_totalTime, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_updateMicroFocus), meth_Phonon_VideoPlayer_updateMicroFocus, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_videoWidget), meth_Phonon_VideoPlayer_videoWidget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_volume), meth_Phonon_VideoPlayer_volume, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_wheelEvent), meth_Phonon_VideoPlayer_wheelEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_windowActivationChange), meth_Phonon_VideoPlayer_windowActivationChange, METH_VARARGS, NULL}
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_Phonon_VideoPlayer[] = {
    {"finished()", 0},
    {0, 0}
};


pyqt4ClassTypeDef sipTypeDef_phonon_Phonon_VideoPlayer = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_Phonon__VideoPlayer,
        {0}
    },
    {
        sipNameNr_VideoPlayer,
        {0, 255, 0},
        60, methods_Phonon_VideoPlayer,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_Phonon_VideoPlayer,
    0,
    init_Phonon_VideoPlayer,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Phonon_VideoPlayer,
    0,
    0,
    0,
    release_Phonon_VideoPlayer,
    cast_Phonon_VideoPlayer,
    0,
    0,
    0
},
    &Phonon::VideoPlayer::staticMetaObject,
    0,
    pyqt4_signals_Phonon_VideoPlayer
};

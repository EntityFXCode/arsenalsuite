/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:39 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIphonon.h"

#line 38 "sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 45 "sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 38 "sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 45 "sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 38 "sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 45 "sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 38 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 44 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 51 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 38 "sip/phonon/effect.sip"
#include <effect.h>
#line 45 "sip/phonon/effect.sip"
#include <effect.h>
#line 44 "sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 51 "sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 38 "sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 45 "sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 44 "sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 51 "sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 38 "sip/phonon/medianode.sip"
#include <medianode.h>
#line 45 "sip/phonon/medianode.sip"
#include <medianode.h>
#line 38 "sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 45 "sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 38 "sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 45 "sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 38 "sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 49 "sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 88 "sip/phonon/objectdescription.sip"
#include <objectdescriptionmodel.h>
#line 89 "sipphononPhononAudioOutputDeviceModel.cpp"

#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 93 "sipphononPhononAudioOutputDeviceModel.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 96 "sipphononPhononAudioOutputDeviceModel.cpp"
#line 38 "sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 45 "sip/phonon/abstractaudiooutput.sip"
#include <abstractaudiooutput.h>
#line 38 "sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 45 "sip/phonon/abstractvideooutput.sip"
#include <abstractvideooutput.h>
#line 38 "sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 45 "sip/phonon/audiooutput.sip"
#include <audiooutput.h>
#line 38 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 44 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 51 "sip/phonon/backendcapabilities.sip"
#include <backendcapabilities.h>
#line 38 "sip/phonon/effect.sip"
#include <effect.h>
#line 45 "sip/phonon/effect.sip"
#include <effect.h>
#line 44 "sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 51 "sip/phonon/effectparameter.sip"
#include <effectparameter.h>
#line 38 "sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 45 "sip/phonon/effectwidget.sip"
#include <effectwidget.h>
#line 44 "sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 51 "sip/phonon/mediacontroller.sip"
#include <mediacontroller.h>
#line 38 "sip/phonon/medianode.sip"
#include <medianode.h>
#line 45 "sip/phonon/medianode.sip"
#include <medianode.h>
#line 38 "sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 45 "sip/phonon/mediaobject.sip"
#include <mediaobject.h>
#line 38 "sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 45 "sip/phonon/mediasource.sip"
#include <mediasource.h>
#line 38 "sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 49 "sip/phonon/objectdescription.sip"
#include <objectdescription.h>
#line 147 "sipphononPhononAudioOutputDeviceModel.cpp"
#line 41 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 150 "sipphononPhononAudioOutputDeviceModel.cpp"
#line 37 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 153 "sipphononPhononAudioOutputDeviceModel.cpp"
#line 37 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 156 "sipphononPhononAudioOutputDeviceModel.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 159 "sipphononPhononAudioOutputDeviceModel.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 162 "sipphononPhononAudioOutputDeviceModel.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 165 "sipphononPhononAudioOutputDeviceModel.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 168 "sipphononPhononAudioOutputDeviceModel.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 171 "sipphononPhononAudioOutputDeviceModel.cpp"
#line 632 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 174 "sipphononPhononAudioOutputDeviceModel.cpp"
#line 37 "sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 177 "sipphononPhononAudioOutputDeviceModel.cpp"
#line 41 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 180 "sipphononPhononAudioOutputDeviceModel.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 183 "sipphononPhononAudioOutputDeviceModel.cpp"
#line 149 "sip/QtCore/qmap.sip"
#include <qmap.h>
#line 186 "sipphononPhononAudioOutputDeviceModel.cpp"
#line 131 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 189 "sipphononPhononAudioOutputDeviceModel.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 192 "sipphononPhononAudioOutputDeviceModel.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 195 "sipphononPhononAudioOutputDeviceModel.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 198 "sipphononPhononAudioOutputDeviceModel.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 201 "sipphononPhononAudioOutputDeviceModel.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 204 "sipphononPhononAudioOutputDeviceModel.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 207 "sipphononPhononAudioOutputDeviceModel.cpp"
#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 210 "sipphononPhononAudioOutputDeviceModel.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 213 "sipphononPhononAudioOutputDeviceModel.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 216 "sipphononPhononAudioOutputDeviceModel.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 219 "sipphononPhononAudioOutputDeviceModel.cpp"


class sipPhonon_AudioOutputDeviceModel : public Phonon::AudioOutputDeviceModel
{
public:
    sipPhonon_AudioOutputDeviceModel(QObject *);
    sipPhonon_AudioOutputDeviceModel(const QList<Phonon::AudioOutputDevice>&,QObject *);
    virtual ~sipPhonon_AudioOutputDeviceModel();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    void sipProtect_encodeData(const QModelIndexList&,QDataStream&) const;
    bool sipProtect_decodeData(int,int,const QModelIndex&,QDataStream&);
    void sipProtect_beginInsertRows(const QModelIndex&,int,int);
    void sipProtect_endInsertRows();
    void sipProtect_beginRemoveRows(const QModelIndex&,int,int);
    void sipProtect_endRemoveRows();
    void sipProtect_beginInsertColumns(const QModelIndex&,int,int);
    void sipProtect_endInsertColumns();
    void sipProtect_beginRemoveColumns(const QModelIndex&,int,int);
    void sipProtect_endRemoveColumns();
    QModelIndexList sipProtect_persistentIndexList() const;
    void sipProtect_reset();
    void sipProtect_changePersistentIndex(const QModelIndex&,const QModelIndex&);
    void sipProtect_changePersistentIndexList(const QModelIndexList&,const QModelIndexList&);
    QModelIndex sipProtect_createIndex(int,int,void *) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QModelIndex index(int,int,const QModelIndex&) const;
    bool dropMimeData(const QMimeData *,Qt::DropAction,int,int,const QModelIndex&);
    int rowCount(const QModelIndex&) const;
    QVariant data(const QModelIndex&,int) const;
    bool setData(const QModelIndex&,const QVariant&,int);
    QVariant headerData(int,Qt::Orientation,int) const;
    bool setHeaderData(int,Qt::Orientation,const QVariant&,int);
    QMap<int,QVariant> itemData(const QModelIndex&) const;
    bool setItemData(const QModelIndex&,const QMap<int,QVariant>&);
    QStringList mimeTypes() const;
    QMimeData * mimeData(const QModelIndexList&) const;
    Qt::DropActions supportedDropActions() const;
    bool insertRows(int,int,const QModelIndex&);
    bool insertColumns(int,int,const QModelIndex&);
    bool removeRows(int,int,const QModelIndex&);
    bool removeColumns(int,int,const QModelIndex&);
    void fetchMore(const QModelIndex&);
    bool canFetchMore(const QModelIndex&) const;
    Qt::ItemFlags flags(const QModelIndex&) const;
    void sort(int,Qt::SortOrder);
    QModelIndex buddy(const QModelIndex&) const;
    QModelIndexList match(const QModelIndex&,int,const QVariant&,int,Qt::MatchFlags) const;
    QSize span(const QModelIndex&) const;
    bool submit();
    void revert();
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipPhonon_AudioOutputDeviceModel(const sipPhonon_AudioOutputDeviceModel &);
    sipPhonon_AudioOutputDeviceModel &operator = (const sipPhonon_AudioOutputDeviceModel &);

    char sipPyMethods[32];
};

sipPhonon_AudioOutputDeviceModel::sipPhonon_AudioOutputDeviceModel(QObject *a0): Phonon::AudioOutputDeviceModel(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipPhonon_AudioOutputDeviceModel::sipPhonon_AudioOutputDeviceModel(const QList<Phonon::AudioOutputDevice>& a0,QObject *a1): Phonon::AudioOutputDeviceModel(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipPhonon_AudioOutputDeviceModel::~sipPhonon_AudioOutputDeviceModel()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipPhonon_AudioOutputDeviceModel::metaObject() const
{
    return sip_phonon_qt_metaobject(sipPySelf,sipType_Phonon_AudioOutputDeviceModel);
}

int sipPhonon_AudioOutputDeviceModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = Phonon::AudioOutputDeviceModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_phonon_qt_metacall(sipPySelf,sipType_Phonon_AudioOutputDeviceModel,_c,_id,_a);

    return _id;
}

void *sipPhonon_AudioOutputDeviceModel::qt_metacast(const char *_clname)
{
    return (sip_phonon_qt_metacast && sip_phonon_qt_metacast(sipPySelf,sipType_Phonon_AudioOutputDeviceModel,_clname)) ? this : Phonon::AudioOutputDeviceModel::qt_metacast(_clname);
}

QModelIndex sipPhonon_AudioOutputDeviceModel::index(int a0,int a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_index);

    if (!meth)
        return QAbstractListModel::index(a0,a1,a2);

    typedef QModelIndex (*sipVH_QtCore_41)(sip_gilstate_t,PyObject *,bool*,int,int,const QModelIndex&);

    return ((sipVH_QtCore_41)(sipModuleAPI_phonon_QtCore->em_virthandlers[41]))(sipGILState,meth,0,a0,a1,a2);
}

bool sipPhonon_AudioOutputDeviceModel::dropMimeData(const QMimeData *a0,Qt::DropAction a1,int a2,int a3,const QModelIndex& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_dropMimeData);

    if (!meth)
        return Phonon::AudioOutputDeviceModel::dropMimeData(a0,a1,a2,a3,a4);

    typedef bool (*sipVH_QtCore_40)(sip_gilstate_t,PyObject *,bool*,const QMimeData *,Qt::DropAction,int,int,const QModelIndex&);

    return ((sipVH_QtCore_40)(sipModuleAPI_phonon_QtCore->em_virthandlers[40]))(sipGILState,meth,0,a0,a1,a2,a3,a4);
}

int sipPhonon_AudioOutputDeviceModel::rowCount(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_rowCount);

    if (!meth)
        return Phonon::AudioOutputDeviceModel::rowCount(a0);

    typedef int (*sipVH_QtCore_38)(sip_gilstate_t,PyObject *,bool*,const QModelIndex&);

    return ((sipVH_QtCore_38)(sipModuleAPI_phonon_QtCore->em_virthandlers[38]))(sipGILState,meth,0,a0);
}

QVariant sipPhonon_AudioOutputDeviceModel::data(const QModelIndex& a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_data);

    if (!meth)
        return Phonon::AudioOutputDeviceModel::data(a0,a1);

    typedef QVariant (*sipVH_QtCore_55)(sip_gilstate_t,PyObject *,bool*,const QModelIndex&,int);

    return ((sipVH_QtCore_55)(sipModuleAPI_phonon_QtCore->em_virthandlers[55]))(sipGILState,meth,0,a0,a1);
}

bool sipPhonon_AudioOutputDeviceModel::setData(const QModelIndex& a0,const QVariant& a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_setData);

    if (!meth)
        return QAbstractItemModel::setData(a0,a1,a2);

    typedef bool (*sipVH_QtCore_54)(sip_gilstate_t,PyObject *,bool*,const QModelIndex&,const QVariant&,int);

    return ((sipVH_QtCore_54)(sipModuleAPI_phonon_QtCore->em_virthandlers[54]))(sipGILState,meth,0,a0,a1,a2);
}

QVariant sipPhonon_AudioOutputDeviceModel::headerData(int a0,Qt::Orientation a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_headerData);

    if (!meth)
        return QAbstractItemModel::headerData(a0,a1,a2);

    typedef QVariant (*sipVH_QtCore_53)(sip_gilstate_t,PyObject *,bool*,int,Qt::Orientation,int);

    return ((sipVH_QtCore_53)(sipModuleAPI_phonon_QtCore->em_virthandlers[53]))(sipGILState,meth,0,a0,a1,a2);
}

bool sipPhonon_AudioOutputDeviceModel::setHeaderData(int a0,Qt::Orientation a1,const QVariant& a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_setHeaderData);

    if (!meth)
        return QAbstractItemModel::setHeaderData(a0,a1,a2,a3);

    typedef bool (*sipVH_QtCore_52)(sip_gilstate_t,PyObject *,bool*,int,Qt::Orientation,const QVariant&,int);

    return ((sipVH_QtCore_52)(sipModuleAPI_phonon_QtCore->em_virthandlers[52]))(sipGILState,meth,0,a0,a1,a2,a3);
}

QMap<int,QVariant> sipPhonon_AudioOutputDeviceModel::itemData(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_itemData);

    if (!meth)
        return QAbstractItemModel::itemData(a0);

    typedef QMap<int,QVariant> (*sipVH_QtCore_51)(sip_gilstate_t,PyObject *,bool*,const QModelIndex&);

    return ((sipVH_QtCore_51)(sipModuleAPI_phonon_QtCore->em_virthandlers[51]))(sipGILState,meth,0,a0);
}

bool sipPhonon_AudioOutputDeviceModel::setItemData(const QModelIndex& a0,const QMap<int,QVariant>& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_setItemData);

    if (!meth)
        return QAbstractItemModel::setItemData(a0,a1);

    typedef bool (*sipVH_QtCore_50)(sip_gilstate_t,PyObject *,bool*,const QModelIndex&,const QMap<int,QVariant>&);

    return ((sipVH_QtCore_50)(sipModuleAPI_phonon_QtCore->em_virthandlers[50]))(sipGILState,meth,0,a0,a1);
}

QStringList sipPhonon_AudioOutputDeviceModel::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_mimeTypes);

    if (!meth)
        return Phonon::AudioOutputDeviceModel::mimeTypes();

    typedef QStringList (*sipVH_QtCore_22)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_22)(sipModuleAPI_phonon_QtCore->em_virthandlers[22]))(sipGILState,meth,0);
}

QMimeData * sipPhonon_AudioOutputDeviceModel::mimeData(const QModelIndexList& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_mimeData);

    if (!meth)
        return Phonon::AudioOutputDeviceModel::mimeData(a0);

    typedef QMimeData * (*sipVH_QtCore_49)(sip_gilstate_t,PyObject *,bool*,const QList<QModelIndex>&);

    return ((sipVH_QtCore_49)(sipModuleAPI_phonon_QtCore->em_virthandlers[49]))(sipGILState,meth,0,a0);
}

Qt::DropActions sipPhonon_AudioOutputDeviceModel::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_supportedDropActions);

    if (!meth)
        return Phonon::AudioOutputDeviceModel::supportedDropActions();

    typedef Qt::DropActions (*sipVH_QtCore_48)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_48)(sipModuleAPI_phonon_QtCore->em_virthandlers[48]))(sipGILState,meth,0);
}

bool sipPhonon_AudioOutputDeviceModel::insertRows(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_insertRows);

    if (!meth)
        return QAbstractItemModel::insertRows(a0,a1,a2);

    typedef bool (*sipVH_QtCore_47)(sip_gilstate_t,PyObject *,bool*,int,int,const QModelIndex&);

    return ((sipVH_QtCore_47)(sipModuleAPI_phonon_QtCore->em_virthandlers[47]))(sipGILState,meth,0,a0,a1,a2);
}

bool sipPhonon_AudioOutputDeviceModel::insertColumns(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_insertColumns);

    if (!meth)
        return QAbstractItemModel::insertColumns(a0,a1,a2);

    typedef bool (*sipVH_QtCore_47)(sip_gilstate_t,PyObject *,bool*,int,int,const QModelIndex&);

    return ((sipVH_QtCore_47)(sipModuleAPI_phonon_QtCore->em_virthandlers[47]))(sipGILState,meth,0,a0,a1,a2);
}

bool sipPhonon_AudioOutputDeviceModel::removeRows(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_removeRows);

    if (!meth)
        return Phonon::AudioOutputDeviceModel::removeRows(a0,a1,a2);

    typedef bool (*sipVH_QtCore_47)(sip_gilstate_t,PyObject *,bool*,int,int,const QModelIndex&);

    return ((sipVH_QtCore_47)(sipModuleAPI_phonon_QtCore->em_virthandlers[47]))(sipGILState,meth,0,a0,a1,a2);
}

bool sipPhonon_AudioOutputDeviceModel::removeColumns(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_removeColumns);

    if (!meth)
        return QAbstractItemModel::removeColumns(a0,a1,a2);

    typedef bool (*sipVH_QtCore_47)(sip_gilstate_t,PyObject *,bool*,int,int,const QModelIndex&);

    return ((sipVH_QtCore_47)(sipModuleAPI_phonon_QtCore->em_virthandlers[47]))(sipGILState,meth,0,a0,a1,a2);
}

void sipPhonon_AudioOutputDeviceModel::fetchMore(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_fetchMore);

    if (!meth)
    {
        QAbstractItemModel::fetchMore(a0);
        return;
    }

    typedef void (*sipVH_QtCore_46)(sip_gilstate_t,PyObject *,bool*,const QModelIndex&);

    ((sipVH_QtCore_46)(sipModuleAPI_phonon_QtCore->em_virthandlers[46]))(sipGILState,meth,0,a0);
}

bool sipPhonon_AudioOutputDeviceModel::canFetchMore(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_canFetchMore);

    if (!meth)
        return QAbstractItemModel::canFetchMore(a0);

    typedef bool (*sipVH_QtCore_37)(sip_gilstate_t,PyObject *,bool*,const QModelIndex&);

    return ((sipVH_QtCore_37)(sipModuleAPI_phonon_QtCore->em_virthandlers[37]))(sipGILState,meth,0,a0);
}

Qt::ItemFlags sipPhonon_AudioOutputDeviceModel::flags(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_flags);

    if (!meth)
        return Phonon::AudioOutputDeviceModel::flags(a0);

    typedef Qt::ItemFlags (*sipVH_QtCore_45)(sip_gilstate_t,PyObject *,bool*,const QModelIndex&);

    return ((sipVH_QtCore_45)(sipModuleAPI_phonon_QtCore->em_virthandlers[45]))(sipGILState,meth,0,a0);
}

void sipPhonon_AudioOutputDeviceModel::sort(int a0,Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_sort);

    if (!meth)
    {
        QAbstractItemModel::sort(a0,a1);
        return;
    }

    typedef void (*sipVH_QtCore_44)(sip_gilstate_t,PyObject *,bool*,int,Qt::SortOrder);

    ((sipVH_QtCore_44)(sipModuleAPI_phonon_QtCore->em_virthandlers[44]))(sipGILState,meth,0,a0,a1);
}

QModelIndex sipPhonon_AudioOutputDeviceModel::buddy(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_buddy);

    if (!meth)
        return QAbstractItemModel::buddy(a0);

    typedef QModelIndex (*sipVH_QtCore_39)(sip_gilstate_t,PyObject *,bool*,const QModelIndex&);

    return ((sipVH_QtCore_39)(sipModuleAPI_phonon_QtCore->em_virthandlers[39]))(sipGILState,meth,0,a0);
}

QModelIndexList sipPhonon_AudioOutputDeviceModel::match(const QModelIndex& a0,int a1,const QVariant& a2,int a3,Qt::MatchFlags a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_match);

    if (!meth)
        return QAbstractItemModel::match(a0,a1,a2,a3,a4);

    typedef QList<QModelIndex> (*sipVH_QtCore_43)(sip_gilstate_t,PyObject *,bool*,const QModelIndex&,int,const QVariant&,int,Qt::MatchFlags);

    return ((sipVH_QtCore_43)(sipModuleAPI_phonon_QtCore->em_virthandlers[43]))(sipGILState,meth,0,a0,a1,a2,a3,a4);
}

QSize sipPhonon_AudioOutputDeviceModel::span(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_span);

    if (!meth)
        return QAbstractItemModel::span(a0);

    typedef QSize (*sipVH_QtCore_42)(sip_gilstate_t,PyObject *,bool*,const QModelIndex&);

    return ((sipVH_QtCore_42)(sipModuleAPI_phonon_QtCore->em_virthandlers[42]))(sipGILState,meth,0,a0);
}

bool sipPhonon_AudioOutputDeviceModel::submit()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_submit);

    if (!meth)
        return QAbstractItemModel::submit();

    typedef bool (*sipVH_QtCore_1)(sip_gilstate_t,PyObject *,bool*);

    return ((sipVH_QtCore_1)(sipModuleAPI_phonon_QtCore->em_virthandlers[1]))(sipGILState,meth,0);
}

void sipPhonon_AudioOutputDeviceModel::revert()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_revert);

    if (!meth)
    {
        QAbstractItemModel::revert();
        return;
    }

    typedef void (*sipVH_QtCore_5)(sip_gilstate_t,PyObject *,bool*);

    ((sipVH_QtCore_5)(sipModuleAPI_phonon_QtCore->em_virthandlers[5]))(sipGILState,meth,0);
}

bool sipPhonon_AudioOutputDeviceModel::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    typedef bool (*sipVH_QtCore_12)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return ((sipVH_QtCore_12)(sipModuleAPI_phonon_QtCore->em_virthandlers[12]))(sipGILState,meth,0,a0);
}

bool sipPhonon_AudioOutputDeviceModel::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    typedef bool (*sipVH_QtCore_20)(sip_gilstate_t,PyObject *,bool*,QObject *,QEvent *);

    return ((sipVH_QtCore_20)(sipModuleAPI_phonon_QtCore->em_virthandlers[20]))(sipGILState,meth,0,a0,a1);
}

void sipPhonon_AudioOutputDeviceModel::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_3)(sip_gilstate_t,PyObject *,bool*,QTimerEvent *);

    ((sipVH_QtCore_3)(sipModuleAPI_phonon_QtCore->em_virthandlers[3]))(sipGILState,meth,0,a0);
}

void sipPhonon_AudioOutputDeviceModel::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_19)(sip_gilstate_t,PyObject *,bool*,QChildEvent *);

    ((sipVH_QtCore_19)(sipModuleAPI_phonon_QtCore->em_virthandlers[19]))(sipGILState,meth,0,a0);
}

void sipPhonon_AudioOutputDeviceModel::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    typedef void (*sipVH_QtCore_18)(sip_gilstate_t,PyObject *,bool*,QEvent *);

    ((sipVH_QtCore_18)(sipModuleAPI_phonon_QtCore->em_virthandlers[18]))(sipGILState,meth,0,a0);
}

void sipPhonon_AudioOutputDeviceModel::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_phonon_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

void sipPhonon_AudioOutputDeviceModel::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    typedef void (*sipVH_QtCore_17)(sip_gilstate_t,PyObject *,bool*,const char *);

    ((sipVH_QtCore_17)(sipModuleAPI_phonon_QtCore->em_virthandlers[17]))(sipGILState,meth,0,a0);
}

int sipPhonon_AudioOutputDeviceModel::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipPhonon_AudioOutputDeviceModel::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipPhonon_AudioOutputDeviceModel::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipPhonon_AudioOutputDeviceModel::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipPhonon_AudioOutputDeviceModel::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipPhonon_AudioOutputDeviceModel::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

void sipPhonon_AudioOutputDeviceModel::sipProtect_encodeData(const QModelIndexList& a0,QDataStream& a1) const
{
    QAbstractItemModel::encodeData(a0,a1);
}

bool sipPhonon_AudioOutputDeviceModel::sipProtect_decodeData(int a0,int a1,const QModelIndex& a2,QDataStream& a3)
{
    return QAbstractItemModel::decodeData(a0,a1,a2,a3);
}

void sipPhonon_AudioOutputDeviceModel::sipProtect_beginInsertRows(const QModelIndex& a0,int a1,int a2)
{
    QAbstractItemModel::beginInsertRows(a0,a1,a2);
}

void sipPhonon_AudioOutputDeviceModel::sipProtect_endInsertRows()
{
    QAbstractItemModel::endInsertRows();
}

void sipPhonon_AudioOutputDeviceModel::sipProtect_beginRemoveRows(const QModelIndex& a0,int a1,int a2)
{
    QAbstractItemModel::beginRemoveRows(a0,a1,a2);
}

void sipPhonon_AudioOutputDeviceModel::sipProtect_endRemoveRows()
{
    QAbstractItemModel::endRemoveRows();
}

void sipPhonon_AudioOutputDeviceModel::sipProtect_beginInsertColumns(const QModelIndex& a0,int a1,int a2)
{
    QAbstractItemModel::beginInsertColumns(a0,a1,a2);
}

void sipPhonon_AudioOutputDeviceModel::sipProtect_endInsertColumns()
{
    QAbstractItemModel::endInsertColumns();
}

void sipPhonon_AudioOutputDeviceModel::sipProtect_beginRemoveColumns(const QModelIndex& a0,int a1,int a2)
{
    QAbstractItemModel::beginRemoveColumns(a0,a1,a2);
}

void sipPhonon_AudioOutputDeviceModel::sipProtect_endRemoveColumns()
{
    QAbstractItemModel::endRemoveColumns();
}

QModelIndexList sipPhonon_AudioOutputDeviceModel::sipProtect_persistentIndexList() const
{
    return QAbstractItemModel::persistentIndexList();
}

void sipPhonon_AudioOutputDeviceModel::sipProtect_reset()
{
    QAbstractItemModel::reset();
}

void sipPhonon_AudioOutputDeviceModel::sipProtect_changePersistentIndex(const QModelIndex& a0,const QModelIndex& a1)
{
    QAbstractItemModel::changePersistentIndex(a0,a1);
}

void sipPhonon_AudioOutputDeviceModel::sipProtect_changePersistentIndexList(const QModelIndexList& a0,const QModelIndexList& a1)
{
    QAbstractItemModel::changePersistentIndexList(a0,a1);
}

QModelIndex sipPhonon_AudioOutputDeviceModel::sipProtect_createIndex(int a0,int a1,void *a2) const
{
    return QAbstractItemModel::createIndex(a0,a1,a2);
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_receivers(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        char * a0;
        sipPhonon_AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp,&a0))
        {
            int sipRes = 0;

#line 480 "sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
#line 977 "sipphononPhononAudioOutputDeviceModel.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_receivers);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipPhonon_AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp,sipType_QTimerEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_timerEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_childEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipPhonon_AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp,sipType_QChildEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_childEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_customEvent(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipPhonon_AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_customEvent);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipPhonon_AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_connectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipPhonon_AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_disconnectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_encodeData(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_encodeData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndexList * a0;
        int a0State = 0;
        QDataStream * a1;
        sipPhonon_AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ1J9",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp,sipType_QList_0100QModelIndex,&a0,&a0State,sipType_QDataStream,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_encodeData(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QModelIndexList *>(a0),sipType_QList_0100QModelIndex,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_encodeData);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_decodeData(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_decodeData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        const QModelIndex * a2;
        QDataStream * a3;
        sipPhonon_AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"piiJ9J9",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp,&a0,&a1,sipType_QModelIndex,&a2,sipType_QDataStream,&a3))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_decodeData(a0,a1,*a2,*a3);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_decodeData);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_beginInsertRows(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_beginInsertRows(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;
        int a1;
        int a2;
        sipPhonon_AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9ii",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp,sipType_QModelIndex,&a0,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_beginInsertRows(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_beginInsertRows);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_endInsertRows(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_endInsertRows(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipPhonon_AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_endInsertRows();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_endInsertRows);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_beginRemoveRows(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_beginRemoveRows(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;
        int a1;
        int a2;
        sipPhonon_AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9ii",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp,sipType_QModelIndex,&a0,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_beginRemoveRows(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_beginRemoveRows);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_endRemoveRows(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_endRemoveRows(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipPhonon_AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_endRemoveRows();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_endRemoveRows);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_beginInsertColumns(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_beginInsertColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;
        int a1;
        int a2;
        sipPhonon_AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9ii",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp,sipType_QModelIndex,&a0,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_beginInsertColumns(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_beginInsertColumns);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_endInsertColumns(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_endInsertColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipPhonon_AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_endInsertColumns();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_endInsertColumns);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_beginRemoveColumns(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_beginRemoveColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;
        int a1;
        int a2;
        sipPhonon_AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9ii",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp,sipType_QModelIndex,&a0,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_beginRemoveColumns(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_beginRemoveColumns);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_endRemoveColumns(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_endRemoveColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipPhonon_AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_endRemoveColumns();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_endRemoveColumns);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_persistentIndexList(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_persistentIndexList(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipPhonon_AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp))
        {
            QModelIndexList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndexList(sipCpp->sipProtect_persistentIndexList());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_persistentIndexList);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_reset(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipPhonon_AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_reset();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_reset);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_changePersistentIndex(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_changePersistentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;
        const QModelIndex * a1;
        sipPhonon_AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9J9",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp,sipType_QModelIndex,&a0,sipType_QModelIndex,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_changePersistentIndex(*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_changePersistentIndex);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_changePersistentIndexList(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_changePersistentIndexList(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndexList * a0;
        int a0State = 0;
        const QModelIndexList * a1;
        int a1State = 0;
        sipPhonon_AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ1J1",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp,sipType_QList_0100QModelIndex,&a0,&a0State,sipType_QList_0100QModelIndex,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_changePersistentIndexList(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QModelIndexList *>(a0),sipType_QList_0100QModelIndex,a0State);
            sipReleaseType(const_cast<QModelIndexList *>(a1),sipType_QList_0100QModelIndex,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_changePersistentIndexList);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_createIndex(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_createIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        PyObject * a2 = 0;
        sipPhonon_AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pii|P0",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp,&a0,&a1,&a2))
        {
            QModelIndex *sipRes = 0;

#line 221 "sip/QtCore/qabstractitemmodel.sip"
        // The Qt API is broken (and won't be fixed as it would break binary
        // compatibility) regarding the internal id of a model index on different
        // architectures (32 vs 64 bits).  We choose to work around the breakage as it
        // is fairly subtle and continues to catch people out.  Instead of letting Qt
        // convert betweed an integer id and a pointer id (the internal format used by
        // Qt) we let Python do it.
        
        void *ptr;
        
        if (a2)
        {
            // Try and convert it to a Python long and fallback to the object's
            // address if it fails.
            ptr = PyLong_AsVoidPtr(a2);
        
            if (PyErr_Occurred())
            {
                PyErr_Clear();
                ptr = a2;
            }
        }
        else
        {
            ptr = 0;
        }
        
        sipRes = new QModelIndex(sipCpp->sipProtect_createIndex(a0, a1, ptr));
#line 1569 "sipphononPhononAudioOutputDeviceModel.cpp"

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_createIndex);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_tupleIndexOrder(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_tupleIndexOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Phonon::AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp))
        {
            QList<int> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<int>(sipCpp->tupleIndexOrder());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_1800,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_tupleIndexOrder);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_tupleIndexAtPositionIndex(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_tupleIndexAtPositionIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        Phonon::AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tupleIndexAtPositionIndex(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_tupleIndexAtPositionIndex);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_moveUp(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_moveUp(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;
        Phonon::AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp,sipType_QModelIndex,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveUp(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_moveUp);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_moveDown(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_moveDown(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;
        Phonon::AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp,sipType_QModelIndex,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveDown(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_moveDown);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_setModelData(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_setModelData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QList<Phonon::AudioOutputDevice> * a0;
        int a0State = 0;
        Phonon::AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp,sipType_QList_0100Phonon_AudioOutputDevice,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setModelData(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QList<Phonon::AudioOutputDevice> *>(a0),sipType_QList_0100Phonon_AudioOutputDevice,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_setModelData);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_modelData(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_modelData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Phonon::AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp))
        {
            QList<Phonon::AudioOutputDevice> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<Phonon::AudioOutputDevice>(sipCpp->modelData());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100Phonon_AudioOutputDevice,NULL);
        }
    }

    {
        const QModelIndex * a0;
        Phonon::AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp,sipType_QModelIndex,&a0))
        {
            Phonon::AudioOutputDevice *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Phonon::AudioOutputDevice(sipCpp->modelData(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Phonon_AudioOutputDevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_modelData);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_rowCount(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_rowCount(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex& a0def = QModelIndex();
        const QModelIndex * a0 = &a0def;
        Phonon::AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|J9",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp,sipType_QModelIndex,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->Phonon::AudioOutputDeviceModel::rowCount(*a0) : sipCpp->rowCount(*a0));
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_rowCount);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_data(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_data(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        int a1 = Qt::DisplayRole;
        Phonon::AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9|i",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp,sipType_QModelIndex,&a0,&a1))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->Phonon::AudioOutputDeviceModel::data(*a0,a1) : sipCpp->data(*a0,a1)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_data);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_flags(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        Phonon::AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp,sipType_QModelIndex,&a0))
        {
            Qt::ItemFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::ItemFlags((sipSelfWasArg ? sipCpp->Phonon::AudioOutputDeviceModel::flags(*a0) : sipCpp->flags(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_flags);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_mimeData(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_mimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndexList * a0;
        int a0State = 0;
        Phonon::AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp,sipType_QList_0100QModelIndex,&a0,&a0State))
        {
            QMimeData *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->Phonon::AudioOutputDeviceModel::mimeData(*a0) : sipCpp->mimeData(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QModelIndexList *>(a0),sipType_QList_0100QModelIndex,a0State);

            return sipConvertFromType(sipRes,sipType_QMimeData,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_mimeData);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_supportedDropActions(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_supportedDropActions(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Phonon::AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp))
        {
            Qt::DropActions *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::DropActions((sipSelfWasArg ? sipCpp->Phonon::AudioOutputDeviceModel::supportedDropActions() : sipCpp->supportedDropActions()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_supportedDropActions);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_dropMimeData(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_dropMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMimeData * a0;
        Qt::DropAction a1;
        int a2;
        int a3;
        const QModelIndex * a4;
        Phonon::AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8EiiJ9",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp,sipType_QMimeData,&a0,sipType_Qt_DropAction,&a1,&a2,&a3,sipType_QModelIndex,&a4))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->Phonon::AudioOutputDeviceModel::dropMimeData(a0,a1,a2,a3,*a4) : sipCpp->dropMimeData(a0,a1,a2,a3,*a4));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_dropMimeData);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_removeRows(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_removeRows(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex * a2 = &a2def;
        Phonon::AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii|J9",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp,&a0,&a1,sipType_QModelIndex,&a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->Phonon::AudioOutputDeviceModel::removeRows(a0,a1,*a2) : sipCpp->removeRows(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_removeRows);

    return NULL;
}


extern "C" {static PyObject *meth_Phonon_AudioOutputDeviceModel_mimeTypes(PyObject *, PyObject *);}
static PyObject *meth_Phonon_AudioOutputDeviceModel_mimeTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        Phonon::AudioOutputDeviceModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_Phonon_AudioOutputDeviceModel,&sipCpp))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList((sipSelfWasArg ? sipCpp->Phonon::AudioOutputDeviceModel::mimeTypes() : sipCpp->mimeTypes()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_AudioOutputDeviceModel,sipName_mimeTypes);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_Phonon_AudioOutputDeviceModel(void *, const sipTypeDef *);}
static void *cast_Phonon_AudioOutputDeviceModel(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_Phonon_AudioOutputDeviceModel)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QAbstractListModel)->ctd_cast((QAbstractListModel *)(Phonon::AudioOutputDeviceModel *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_Phonon_AudioOutputDeviceModel(void *, int);}
static void release_Phonon_AudioOutputDeviceModel(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipPhonon_AudioOutputDeviceModel *>(sipCppV);
    else
        delete reinterpret_cast<Phonon::AudioOutputDeviceModel *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_Phonon_AudioOutputDeviceModel(sipSimpleWrapper *);}
static void dealloc_Phonon_AudioOutputDeviceModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipPhonon_AudioOutputDeviceModel *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_Phonon_AudioOutputDeviceModel(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_Phonon_AudioOutputDeviceModel(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_Phonon_AudioOutputDeviceModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **sipOwner, int *sipArgsParsed)
{
    sipPhonon_AudioOutputDeviceModel *sipCpp = 0;

    if (!sipCpp)
    {
        QObject * a0 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"|JH",sipType_QObject,&a0,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipPhonon_AudioOutputDeviceModel(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QList<Phonon::AudioOutputDevice> * a0;
        int a0State = 0;
        QObject * a1 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1|JH",sipType_QList_0100Phonon_AudioOutputDevice,&a0,&a0State,sipType_QObject,&a1,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipPhonon_AudioOutputDeviceModel(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QList<Phonon::AudioOutputDevice> *>(a0),sipType_QList_0100Phonon_AudioOutputDevice,a0State);
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_Phonon_AudioOutputDeviceModel[] = {{10, 0, 1}};


static PyMethodDef methods_Phonon_AudioOutputDeviceModel[] = {
    {SIP_MLNAME_CAST(sipName_beginInsertColumns), meth_Phonon_AudioOutputDeviceModel_beginInsertColumns, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_beginInsertRows), meth_Phonon_AudioOutputDeviceModel_beginInsertRows, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_beginRemoveColumns), meth_Phonon_AudioOutputDeviceModel_beginRemoveColumns, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_beginRemoveRows), meth_Phonon_AudioOutputDeviceModel_beginRemoveRows, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changePersistentIndex), meth_Phonon_AudioOutputDeviceModel_changePersistentIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changePersistentIndexList), meth_Phonon_AudioOutputDeviceModel_changePersistentIndexList, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_Phonon_AudioOutputDeviceModel_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_Phonon_AudioOutputDeviceModel_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createIndex), meth_Phonon_AudioOutputDeviceModel_createIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_Phonon_AudioOutputDeviceModel_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_data), meth_Phonon_AudioOutputDeviceModel_data, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_decodeData), meth_Phonon_AudioOutputDeviceModel_decodeData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_Phonon_AudioOutputDeviceModel_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dropMimeData), meth_Phonon_AudioOutputDeviceModel_dropMimeData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_encodeData), meth_Phonon_AudioOutputDeviceModel_encodeData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_endInsertColumns), meth_Phonon_AudioOutputDeviceModel_endInsertColumns, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_endInsertRows), meth_Phonon_AudioOutputDeviceModel_endInsertRows, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_endRemoveColumns), meth_Phonon_AudioOutputDeviceModel_endRemoveColumns, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_endRemoveRows), meth_Phonon_AudioOutputDeviceModel_endRemoveRows, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_flags), meth_Phonon_AudioOutputDeviceModel_flags, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mimeData), meth_Phonon_AudioOutputDeviceModel_mimeData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mimeTypes), meth_Phonon_AudioOutputDeviceModel_mimeTypes, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_modelData), meth_Phonon_AudioOutputDeviceModel_modelData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveDown), meth_Phonon_AudioOutputDeviceModel_moveDown, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveUp), meth_Phonon_AudioOutputDeviceModel_moveUp, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_persistentIndexList), meth_Phonon_AudioOutputDeviceModel_persistentIndexList, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_Phonon_AudioOutputDeviceModel_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeRows), meth_Phonon_AudioOutputDeviceModel_removeRows, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_reset), meth_Phonon_AudioOutputDeviceModel_reset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rowCount), meth_Phonon_AudioOutputDeviceModel_rowCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setModelData), meth_Phonon_AudioOutputDeviceModel_setModelData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_supportedDropActions), meth_Phonon_AudioOutputDeviceModel_supportedDropActions, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_Phonon_AudioOutputDeviceModel_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_tupleIndexAtPositionIndex), meth_Phonon_AudioOutputDeviceModel_tupleIndexAtPositionIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_tupleIndexOrder), meth_Phonon_AudioOutputDeviceModel_tupleIndexOrder, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_phonon_Phonon_AudioOutputDeviceModel = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_Phonon__AudioOutputDeviceModel,
        {0}
    },
    {
        sipNameNr_AudioOutputDeviceModel,
        {0, 255, 0},
        35, methods_Phonon_AudioOutputDeviceModel,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_Phonon_AudioOutputDeviceModel,
    0,
    init_Phonon_AudioOutputDeviceModel,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Phonon_AudioOutputDeviceModel,
    0,
    0,
    0,
    release_Phonon_AudioOutputDeviceModel,
    cast_Phonon_AudioOutputDeviceModel,
    0,
    0,
    0
},
    &Phonon::AudioOutputDeviceModel::staticMetaObject,
    0,
    0
};

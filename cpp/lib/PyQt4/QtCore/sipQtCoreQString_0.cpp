/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:19 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 89 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "sipQtCoreQString_0.cpp"

#line 78 "sip/QtCore/qchar.sip"
#include <qchar.h>
#line 43 "sipQtCoreQString_0.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 46 "sipQtCoreQString_0.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 49 "sipQtCoreQString_0.cpp"
#line 41 "sip/QtCore/quuid.sip"
#include <quuid.h>
#line 52 "sipQtCoreQString_0.cpp"
#line 576 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 55 "sipQtCoreQString_0.cpp"
#line 646 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 58 "sipQtCoreQString_0.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 61 "sipQtCoreQString_0.cpp"
#line 128 "sip/QtCore/qchar.sip"
#include <qchar.h>
#line 64 "sipQtCoreQString_0.cpp"
#line 41 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 67 "sipQtCoreQString_0.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 70 "sipQtCoreQString_0.cpp"
#line 89 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 73 "sipQtCoreQString_0.cpp"
#line 93 "sip/QtCore/qstring.sip"
// This is needed by __hash__().
#include <qhash.h>


// This is needed by the %BIGetCharBufferCode.
#include <qtextcodec.h>
#line 81 "sipQtCoreQString_0.cpp"


extern "C" {static PyObject *meth_QString_0_size(PyObject *, PyObject *);}
static PyObject *meth_QString_0_size(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QString,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->size();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_size);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_count(PyObject *, PyObject *);}
static PyObject *meth_QString_0_count(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QString,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|E",&sipSelf,sipType_QString,&sipCpp,sipType_QString,&a0,&a0State,sipType_Qt_CaseSensitivity,&a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QRegExp * a0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QString,&sipCpp,sipType_QRegExp,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count(*a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_count);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_resize(PyObject *, PyObject *);}
static PyObject *meth_QString_0_resize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QString,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resize(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_resize);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_fill(PyObject *, PyObject *);}
static PyObject *meth_QString_0_fill(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar * a0;
        int a0State = 0;
        int a1 = -1;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|i",&sipSelf,sipType_QString,&sipCpp,sipType_QChar,&a0,&a0State,&a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->fill(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QChar,a0State);

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_fill);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_truncate(PyObject *, PyObject *);}
static PyObject *meth_QString_0_truncate(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QString,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->truncate(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_truncate);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_chop(PyObject *, PyObject *);}
static PyObject *meth_QString_0_chop(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QString,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->chop(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_chop);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_squeeze(PyObject *, PyObject *);}
static PyObject *meth_QString_0_squeeze(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QString,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->squeeze();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_squeeze);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_arg(PyObject *, PyObject *);}
static PyObject *meth_QString_0_arg(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1 = 0;
        int a2 = 10;
        const QChar& a3def = QLatin1Char(32);
        const QChar * a3 = &a3def;
        int a3State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BXi|iiJ1",&sipSelf,sipType_QString,&sipCpp,&a0,&a1,&a2,sipType_QChar,&a3,&a3State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->arg(a0,a1,a2,*a3));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QChar *>(a3),sipType_QChar,a3State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        double a0;
        int a1 = 0;
        char a2 = 'g';
        int a3 = -1;
        const QChar& a4def = QLatin1Char(32);
        const QChar * a4 = &a4def;
        int a4State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BXd|iciJ1",&sipSelf,sipType_QString,&sipCpp,&a0,&a1,&a2,&a3,sipType_QChar,&a4,&a4State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->arg(a0,a1,a2,a3,*a4));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QChar *>(a4),sipType_QChar,a4State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        qlonglong a0;
        int a1 = 0;
        int a2 = 10;
        const QChar& a3def = QLatin1Char(32);
        const QChar * a3 = &a3def;
        int a3State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bn|iiJ1",&sipSelf,sipType_QString,&sipCpp,&a0,&a1,&a2,sipType_QChar,&a3,&a3State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->arg(a0,a1,a2,*a3));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QChar *>(a3),sipType_QChar,a3State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        qulonglong a0;
        int a1 = 0;
        int a2 = 10;
        const QChar& a3def = QLatin1Char(32);
        const QChar * a3 = &a3def;
        int a3State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bo|iiJ1",&sipSelf,sipType_QString,&sipCpp,&a0,&a1,&a2,sipType_QChar,&a3,&a3State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->arg(a0,a1,a2,*a3));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QChar *>(a3),sipType_QChar,a3State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        int a1 = 0;
        const QChar& a2def = QLatin1Char(32);
        const QChar * a2 = &a2def;
        int a2State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|iJ1",&sipSelf,sipType_QString,&sipCpp,sipType_QString,&a0,&a0State,&a1,sipType_QChar,&a2,&a2State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->arg(*a0,a1,*a2));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QChar *>(a2),sipType_QChar,a2State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1",&sipSelf,sipType_QString,&sipCpp,sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->arg(*a0,*a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1J1",&sipSelf,sipType_QString,&sipCpp,sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State,sipType_QString,&a2,&a2State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->arg(*a0,*a1,*a2));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        const QString * a3;
        int a3State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1J1J1",&sipSelf,sipType_QString,&sipCpp,sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State,sipType_QString,&a2,&a2State,sipType_QString,&a3,&a3State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->arg(*a0,*a1,*a2,*a3));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        const QString * a3;
        int a3State = 0;
        const QString * a4;
        int a4State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1J1J1J1",&sipSelf,sipType_QString,&sipCpp,sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State,sipType_QString,&a2,&a2State,sipType_QString,&a3,&a3State,sipType_QString,&a4,&a4State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->arg(*a0,*a1,*a2,*a3,*a4));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast<QString *>(a4),sipType_QString,a4State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        const QString * a3;
        int a3State = 0;
        const QString * a4;
        int a4State = 0;
        const QString * a5;
        int a5State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1J1J1J1J1",&sipSelf,sipType_QString,&sipCpp,sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State,sipType_QString,&a2,&a2State,sipType_QString,&a3,&a3State,sipType_QString,&a4,&a4State,sipType_QString,&a5,&a5State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->arg(*a0,*a1,*a2,*a3,*a4,*a5));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast<QString *>(a4),sipType_QString,a4State);
            sipReleaseType(const_cast<QString *>(a5),sipType_QString,a5State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        const QString * a3;
        int a3State = 0;
        const QString * a4;
        int a4State = 0;
        const QString * a5;
        int a5State = 0;
        const QString * a6;
        int a6State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1J1J1J1J1J1",&sipSelf,sipType_QString,&sipCpp,sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State,sipType_QString,&a2,&a2State,sipType_QString,&a3,&a3State,sipType_QString,&a4,&a4State,sipType_QString,&a5,&a5State,sipType_QString,&a6,&a6State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->arg(*a0,*a1,*a2,*a3,*a4,*a5,*a6));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast<QString *>(a4),sipType_QString,a4State);
            sipReleaseType(const_cast<QString *>(a5),sipType_QString,a5State);
            sipReleaseType(const_cast<QString *>(a6),sipType_QString,a6State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        const QString * a3;
        int a3State = 0;
        const QString * a4;
        int a4State = 0;
        const QString * a5;
        int a5State = 0;
        const QString * a6;
        int a6State = 0;
        const QString * a7;
        int a7State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1J1J1J1J1J1J1",&sipSelf,sipType_QString,&sipCpp,sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State,sipType_QString,&a2,&a2State,sipType_QString,&a3,&a3State,sipType_QString,&a4,&a4State,sipType_QString,&a5,&a5State,sipType_QString,&a6,&a6State,sipType_QString,&a7,&a7State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->arg(*a0,*a1,*a2,*a3,*a4,*a5,*a6,*a7));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast<QString *>(a4),sipType_QString,a4State);
            sipReleaseType(const_cast<QString *>(a5),sipType_QString,a5State);
            sipReleaseType(const_cast<QString *>(a6),sipType_QString,a6State);
            sipReleaseType(const_cast<QString *>(a7),sipType_QString,a7State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        const QString * a2;
        int a2State = 0;
        const QString * a3;
        int a3State = 0;
        const QString * a4;
        int a4State = 0;
        const QString * a5;
        int a5State = 0;
        const QString * a6;
        int a6State = 0;
        const QString * a7;
        int a7State = 0;
        const QString * a8;
        int a8State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1J1J1J1J1J1J1J1",&sipSelf,sipType_QString,&sipCpp,sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State,sipType_QString,&a2,&a2State,sipType_QString,&a3,&a3State,sipType_QString,&a4,&a4State,sipType_QString,&a5,&a5State,sipType_QString,&a6,&a6State,sipType_QString,&a7,&a7State,sipType_QString,&a8,&a8State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->arg(*a0,*a1,*a2,*a3,*a4,*a5,*a6,*a7,*a8));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast<QString *>(a4),sipType_QString,a4State);
            sipReleaseType(const_cast<QString *>(a5),sipType_QString,a5State);
            sipReleaseType(const_cast<QString *>(a6),sipType_QString,a6State);
            sipReleaseType(const_cast<QString *>(a7),sipType_QString,a7State);
            sipReleaseType(const_cast<QString *>(a8),sipType_QString,a8State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_arg);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_indexOf(PyObject *, PyObject *);}
static PyObject *meth_QString_0_indexOf(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        int a1 = 0;
        Qt::CaseSensitivity a2 = Qt::CaseSensitive;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|iE",&sipSelf,sipType_QString,&sipCpp,sipType_QString,&a0,&a0State,&a1,sipType_Qt_CaseSensitivity,&a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexOf(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QLatin1String * a0;
        int a1 = 0;
        Qt::CaseSensitivity a2 = Qt::CaseSensitive;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9|iE",&sipSelf,sipType_QString,&sipCpp,sipType_QLatin1String,&a0,&a1,sipType_Qt_CaseSensitivity,&a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexOf(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QRegExp * a0;
        int a1 = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9|i",&sipSelf,sipType_QString,&sipCpp,sipType_QRegExp,&a0,&a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->indexOf(*a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_indexOf);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_lastIndexOf(PyObject *, PyObject *);}
static PyObject *meth_QString_0_lastIndexOf(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        int a1 = -1;
        Qt::CaseSensitivity a2 = Qt::CaseSensitive;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|iE",&sipSelf,sipType_QString,&sipCpp,sipType_QString,&a0,&a0State,&a1,sipType_Qt_CaseSensitivity,&a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lastIndexOf(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QLatin1String * a0;
        int a1 = -1;
        Qt::CaseSensitivity a2 = Qt::CaseSensitive;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9|iE",&sipSelf,sipType_QString,&sipCpp,sipType_QLatin1String,&a0,&a1,sipType_Qt_CaseSensitivity,&a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lastIndexOf(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QRegExp * a0;
        int a1 = -1;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9|i",&sipSelf,sipType_QString,&sipCpp,sipType_QRegExp,&a0,&a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lastIndexOf(*a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_lastIndexOf);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_contains(PyObject *, PyObject *);}
static PyObject *meth_QString_0_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|E",&sipSelf,sipType_QString,&sipCpp,sipType_QString,&a0,&a0State,sipType_Qt_CaseSensitivity,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->contains(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QRegExp * a0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QString,&sipCpp,sipType_QRegExp,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->contains(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_contains);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_section(PyObject *, PyObject *);}
static PyObject *meth_QString_0_section(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        int a1;
        int a2 = -1;
        QString::SectionFlags a3def = QString::SectionDefault;
        QString::SectionFlags * a3 = &a3def;
        int a3State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1i|iJ1",&sipSelf,sipType_QString,&sipCpp,sipType_QString,&a0,&a0State,&a1,&a2,sipType_QString_SectionFlags,&a3,&a3State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->section(*a0,a1,a2,*a3));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(a3,sipType_QString_SectionFlags,a3State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QRegExp * a0;
        int a1;
        int a2 = -1;
        QString::SectionFlags a3def = QString::SectionDefault;
        QString::SectionFlags * a3 = &a3def;
        int a3State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9i|iJ1",&sipSelf,sipType_QString,&sipCpp,sipType_QRegExp,&a0,&a1,&a2,sipType_QString_SectionFlags,&a3,&a3State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->section(*a0,a1,a2,*a3));
            Py_END_ALLOW_THREADS

            sipReleaseType(a3,sipType_QString_SectionFlags,a3State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_section);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_left(PyObject *, PyObject *);}
static PyObject *meth_QString_0_left(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QString,&sipCpp,&a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->left(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_left);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_right(PyObject *, PyObject *);}
static PyObject *meth_QString_0_right(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QString,&sipCpp,&a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->right(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_right);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_mid(PyObject *, PyObject *);}
static PyObject *meth_QString_0_mid(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1 = -1;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi|i",&sipSelf,sipType_QString,&sipCpp,&a0,&a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->mid(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_mid);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_startsWith(PyObject *, PyObject *);}
static PyObject *meth_QString_0_startsWith(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|E",&sipSelf,sipType_QString,&sipCpp,sipType_QString,&a0,&a0State,sipType_Qt_CaseSensitivity,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->startsWith(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QLatin1String * a0;
        Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9|E",&sipSelf,sipType_QString,&sipCpp,sipType_QLatin1String,&a0,sipType_Qt_CaseSensitivity,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->startsWith(*a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_startsWith);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_endsWith(PyObject *, PyObject *);}
static PyObject *meth_QString_0_endsWith(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|E",&sipSelf,sipType_QString,&sipCpp,sipType_QString,&a0,&a0State,sipType_Qt_CaseSensitivity,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->endsWith(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QLatin1String * a0;
        Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9|E",&sipSelf,sipType_QString,&sipCpp,sipType_QLatin1String,&a0,sipType_Qt_CaseSensitivity,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->endsWith(*a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_endsWith);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_leftJustified(PyObject *, PyObject *);}
static PyObject *meth_QString_0_leftJustified(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QChar a1def = QLatin1Char(32);
        QChar * a1 = &a1def;
        int a1State = 0;
        bool a2 = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi|J1b",&sipSelf,sipType_QString,&sipCpp,&a0,sipType_QChar,&a1,&a1State,&a2))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->leftJustified(a0,*a1,a2));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_QChar,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_leftJustified);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_rightJustified(PyObject *, PyObject *);}
static PyObject *meth_QString_0_rightJustified(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QChar a1def = QLatin1Char(32);
        QChar * a1 = &a1def;
        int a1State = 0;
        bool a2 = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi|J1b",&sipSelf,sipType_QString,&sipCpp,&a0,sipType_QChar,&a1,&a1State,&a2))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->rightJustified(a0,*a1,a2));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_QChar,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_rightJustified);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_toLower(PyObject *, PyObject *);}
static PyObject *meth_QString_0_toLower(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QString,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toLower());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_toLower);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_toUpper(PyObject *, PyObject *);}
static PyObject *meth_QString_0_toUpper(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QString,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toUpper());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_toUpper);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_trimmed(PyObject *, PyObject *);}
static PyObject *meth_QString_0_trimmed(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QString,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->trimmed());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_trimmed);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_simplified(PyObject *, PyObject *);}
static PyObject *meth_QString_0_simplified(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QString,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->simplified());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_simplified);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_insert(PyObject *, PyObject *);}
static PyObject *meth_QString_0_insert(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        const QString * a1;
        int a1State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiJ1",&sipSelf,sipType_QString,&sipCpp,&a0,sipType_QString,&a1,&a1State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->insert(a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    {
        int a0;
        const QLatin1String * a1;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiJ9",&sipSelf,sipType_QString,&sipCpp,&a0,sipType_QLatin1String,&a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->insert(a0,*a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_insert);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_append(PyObject *, PyObject *);}
static PyObject *meth_QString_0_append(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QString,&sipCpp,sipType_QString,&a0,&a0State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->append(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QLatin1String * a0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QString,&sipCpp,sipType_QLatin1String,&a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->append(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QByteArray * a0;
        int a0State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QString,&sipCpp,sipType_QByteArray,&a0,&a0State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->append(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_append);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_prepend(PyObject *, PyObject *);}
static PyObject *meth_QString_0_prepend(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QString,&sipCpp,sipType_QString,&a0,&a0State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->prepend(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QLatin1String * a0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QString,&sipCpp,sipType_QLatin1String,&a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->prepend(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QByteArray * a0;
        int a0State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QString,&sipCpp,sipType_QByteArray,&a0,&a0State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->prepend(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_prepend);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_remove(PyObject *, PyObject *);}
static PyObject *meth_QString_0_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii",&sipSelf,sipType_QString,&sipCpp,&a0,&a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->remove(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|E",&sipSelf,sipType_QString,&sipCpp,sipType_QString,&a0,&a0State,sipType_Qt_CaseSensitivity,&a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->remove(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QRegExp * a0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QString,&sipCpp,sipType_QRegExp,&a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->remove(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_remove);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_replace(PyObject *, PyObject *);}
static PyObject *meth_QString_0_replace(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        const QString * a2;
        int a2State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiiJ1",&sipSelf,sipType_QString,&sipCpp,&a0,&a1,sipType_QString,&a2,&a2State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->replace(a0,a1,*a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        Qt::CaseSensitivity a2 = Qt::CaseSensitive;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1|E",&sipSelf,sipType_QString,&sipCpp,sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State,sipType_Qt_CaseSensitivity,&a2))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->replace(*a0,*a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QRegExp * a0;
        const QString * a1;
        int a1State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9J1",&sipSelf,sipType_QString,&sipCpp,sipType_QRegExp,&a0,sipType_QString,&a1,&a1State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->replace(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QLatin1String * a0;
        const QLatin1String * a1;
        Qt::CaseSensitivity a2 = Qt::CaseSensitive;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9J9|E",&sipSelf,sipType_QString,&sipCpp,sipType_QLatin1String,&a0,sipType_QLatin1String,&a1,sipType_Qt_CaseSensitivity,&a2))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->replace(*a0,*a1,a2);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QLatin1String * a0;
        const QString * a1;
        int a1State = 0;
        Qt::CaseSensitivity a2 = Qt::CaseSensitive;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9J1|E",&sipSelf,sipType_QString,&sipCpp,sipType_QLatin1String,&a0,sipType_QString,&a1,&a1State,sipType_Qt_CaseSensitivity,&a2))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->replace(*a0,*a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QLatin1String * a1;
        Qt::CaseSensitivity a2 = Qt::CaseSensitive;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J9|E",&sipSelf,sipType_QString,&sipCpp,sipType_QString,&a0,&a0State,sipType_QLatin1String,&a1,sipType_Qt_CaseSensitivity,&a2))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->replace(*a0,*a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_replace);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_split(PyObject *, PyObject *);}
static PyObject *meth_QString_0_split(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QString::SplitBehavior a1 = QString::KeepEmptyParts;
        Qt::CaseSensitivity a2 = Qt::CaseSensitive;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|EE",&sipSelf,sipType_QString,&sipCpp,sipType_QString,&a0,&a0State,sipType_QString_SplitBehavior,&a1,sipType_Qt_CaseSensitivity,&a2))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->split(*a0,a1,a2));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    {
        const QRegExp * a0;
        QString::SplitBehavior a1 = QString::KeepEmptyParts;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9|E",&sipSelf,sipType_QString,&sipCpp,sipType_QRegExp,&a0,sipType_QString_SplitBehavior,&a1))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->split(*a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_split);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_normalized(PyObject *, PyObject *);}
static PyObject *meth_QString_0_normalized(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QString::NormalizationForm a0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QString,&sipCpp,sipType_QString_NormalizationForm,&a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->normalized(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        QString::NormalizationForm a0;
        QChar::UnicodeVersion a1;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BEE",&sipSelf,sipType_QString,&sipCpp,sipType_QString_NormalizationForm,&a0,sipType_QChar_UnicodeVersion,&a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->normalized(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_normalized);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_toAscii(PyObject *, PyObject *);}
static PyObject *meth_QString_0_toAscii(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QString,&sipCpp))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->toAscii());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_toAscii);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_toLatin1(PyObject *, PyObject *);}
static PyObject *meth_QString_0_toLatin1(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QString,&sipCpp))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->toLatin1());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_toLatin1);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_toUtf8(PyObject *, PyObject *);}
static PyObject *meth_QString_0_toUtf8(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QString,&sipCpp))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->toUtf8());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_toUtf8);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_toLocal8Bit(PyObject *, PyObject *);}
static PyObject *meth_QString_0_toLocal8Bit(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QString,&sipCpp))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(sipCpp->toLocal8Bit());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_toLocal8Bit);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_fromAscii(PyObject *, PyObject *);}
static PyObject *meth_QString_0_fromAscii(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const char * a0;
        PyObject *a0Keep;
        int a1 = -1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"AA|i",&a0Keep,&a0,&a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QString::fromAscii(a0,a1));
            Py_END_ALLOW_THREADS
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_fromAscii);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_fromLatin1(PyObject *, PyObject *);}
static PyObject *meth_QString_0_fromLatin1(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const char * a0;
        PyObject *a0Keep;
        int a1 = -1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"AL|i",&a0Keep,&a0,&a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QString::fromLatin1(a0,a1));
            Py_END_ALLOW_THREADS
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_fromLatin1);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_fromUtf8(PyObject *, PyObject *);}
static PyObject *meth_QString_0_fromUtf8(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const char * a0;
        PyObject *a0Keep;
        int a1 = -1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"A8|i",&a0Keep,&a0,&a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QString::fromUtf8(a0,a1));
            Py_END_ALLOW_THREADS
            Py_DECREF(a0Keep);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_fromUtf8);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_fromLocal8Bit(PyObject *, PyObject *);}
static PyObject *meth_QString_0_fromLocal8Bit(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const char * a0;
        int a1 = -1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"s|i",&a0,&a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QString::fromLocal8Bit(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_fromLocal8Bit);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_compare(PyObject *, PyObject *);}
static PyObject *meth_QString_0_compare(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QString,&sipCpp,sipType_QString,&a0,&a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->compare(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        Qt::CaseSensitivity a1;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1E",&sipSelf,sipType_QString,&sipCpp,sipType_QString,&a0,&a0State,sipType_Qt_CaseSensitivity,&a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->compare(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QLatin1String * a0;
        Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9|E",&sipSelf,sipType_QString,&sipCpp,sipType_QLatin1String,&a0,sipType_Qt_CaseSensitivity,&a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->compare(*a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QStringRef * a0;
        int a0State = 0;
        Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|E",&sipSelf,sipType_QString,&sipCpp,sipType_QStringRef,&a0,&a0State,sipType_Qt_CaseSensitivity,&a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->compare(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QStringRef *>(a0),sipType_QStringRef,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1J1",sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QString::compare(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        Qt::CaseSensitivity a2;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1J1E",sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State,sipType_Qt_CaseSensitivity,&a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QString::compare(*a0,*a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QLatin1String * a1;
        Qt::CaseSensitivity a2 = Qt::CaseSensitive;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1J9|E",sipType_QString,&a0,&a0State,sipType_QLatin1String,&a1,sipType_Qt_CaseSensitivity,&a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QString::compare(*a0,*a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QLatin1String * a0;
        const QString * a1;
        int a1State = 0;
        Qt::CaseSensitivity a2 = Qt::CaseSensitive;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9J1|E",sipType_QLatin1String,&a0,sipType_QString,&a1,&a1State,sipType_Qt_CaseSensitivity,&a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QString::compare(*a0,*a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QStringRef * a1;
        int a1State = 0;
        Qt::CaseSensitivity a2 = Qt::CaseSensitive;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1J1|E",sipType_QString,&a0,&a0State,sipType_QStringRef,&a1,&a1State,sipType_Qt_CaseSensitivity,&a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QString::compare(*a0,*a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QStringRef *>(a1),sipType_QStringRef,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_compare);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_localeAwareCompare(PyObject *, PyObject *);}
static PyObject *meth_QString_0_localeAwareCompare(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QString,&sipCpp,sipType_QString,&a0,&a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->localeAwareCompare(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QStringRef * a0;
        int a0State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QString,&sipCpp,sipType_QStringRef,&a0,&a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->localeAwareCompare(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QStringRef *>(a0),sipType_QStringRef,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1J1",sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QString::localeAwareCompare(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QStringRef * a1;
        int a1State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1J1",sipType_QString,&a0,&a0State,sipType_QStringRef,&a1,&a1State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QString::localeAwareCompare(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QStringRef *>(a1),sipType_QStringRef,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_localeAwareCompare);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_toShort(PyObject *, PyObject *);}
static PyObject *meth_QString_0_toShort(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        int a1 = 10;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|i",&sipSelf,sipType_QString,&sipCpp,&a1))
        {
            short sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toShort(&a0,a1);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(hb)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_toShort);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_toUShort(PyObject *, PyObject *);}
static PyObject *meth_QString_0_toUShort(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        int a1 = 10;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|i",&sipSelf,sipType_QString,&sipCpp,&a1))
        {
            ushort sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toUShort(&a0,a1);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(tb)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_toUShort);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_toInt(PyObject *, PyObject *);}
static PyObject *meth_QString_0_toInt(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        int a1 = 10;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|i",&sipSelf,sipType_QString,&sipCpp,&a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toInt(&a0,a1);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(ib)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_toInt);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_toUInt(PyObject *, PyObject *);}
static PyObject *meth_QString_0_toUInt(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        int a1 = 10;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|i",&sipSelf,sipType_QString,&sipCpp,&a1))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toUInt(&a0,a1);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(ub)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_toUInt);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_toLong(PyObject *, PyObject *);}
static PyObject *meth_QString_0_toLong(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        int a1 = 10;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|i",&sipSelf,sipType_QString,&sipCpp,&a1))
        {
            long sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toLong(&a0,a1);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(lb)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_toLong);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_toULong(PyObject *, PyObject *);}
static PyObject *meth_QString_0_toULong(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        int a1 = 10;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|i",&sipSelf,sipType_QString,&sipCpp,&a1))
        {
            ulong sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toULong(&a0,a1);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(mb)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_toULong);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_toLongLong(PyObject *, PyObject *);}
static PyObject *meth_QString_0_toLongLong(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        int a1 = 10;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|i",&sipSelf,sipType_QString,&sipCpp,&a1))
        {
            qlonglong sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toLongLong(&a0,a1);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(nb)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_toLongLong);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_toULongLong(PyObject *, PyObject *);}
static PyObject *meth_QString_0_toULongLong(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        int a1 = 10;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|i",&sipSelf,sipType_QString,&sipCpp,&a1))
        {
            qulonglong sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toULongLong(&a0,a1);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(ob)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_toULongLong);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_toFloat(PyObject *, PyObject *);}
static PyObject *meth_QString_0_toFloat(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QString,&sipCpp))
        {
            float sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toFloat(&a0);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(fb)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_toFloat);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_toDouble(PyObject *, PyObject *);}
static PyObject *meth_QString_0_toDouble(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QString,&sipCpp))
        {
            double sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toDouble(&a0);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(db)",sipRes,a0);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_toDouble);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_setNum(PyObject *, PyObject *);}
static PyObject *meth_QString_0_setNum(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1 = 10;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BXi|i",&sipSelf,sipType_QString,&sipCpp,&a0,&a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->setNum(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    {
        double a0;
        char a1 = 'g';
        int a2 = 6;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BXd|ci",&sipSelf,sipType_QString,&sipCpp,&a0,&a1,&a2))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->setNum(a0,a1,a2);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    {
        qlonglong a0;
        int a1 = 10;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bn|i",&sipSelf,sipType_QString,&sipCpp,&a0,&a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->setNum(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    {
        qulonglong a0;
        int a1 = 10;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bo|i",&sipSelf,sipType_QString,&sipCpp,&a0,&a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->setNum(a0,a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_setNum);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_number(PyObject *, PyObject *);}
static PyObject *meth_QString_0_number(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1 = 10;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Xi|i",&a0,&a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QString::number(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        double a0;
        char a1 = 'g';
        int a2 = 6;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Xd|ci",&a0,&a1,&a2))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QString::number(a0,a1,a2));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        qlonglong a0;
        int a1 = 10;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"n|i",&a0,&a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QString::number(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        qulonglong a0;
        int a1 = 10;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"o|i",&a0,&a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QString::number(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_number);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_push_back(PyObject *, PyObject *);}
static PyObject *meth_QString_0_push_back(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QString,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->push_back(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_push_back);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_push_front(PyObject *, PyObject *);}
static PyObject *meth_QString_0_push_front(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QString,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->push_front(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_push_front);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_isNull(PyObject *, PyObject *);}
static PyObject *meth_QString_0_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QString,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNull();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_isNull);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_isSimpleText(PyObject *, PyObject *);}
static PyObject *meth_QString_0_isSimpleText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QString,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSimpleText();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_isSimpleText);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_isRightToLeft(PyObject *, PyObject *);}
static PyObject *meth_QString_0_isRightToLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QString,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isRightToLeft();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_isRightToLeft);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_length(PyObject *, PyObject *);}
static PyObject *meth_QString_0_length(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QString,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->length();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_length);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_at(PyObject *, PyObject *);}
static PyObject *meth_QString_0_at(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QString,&sipCpp,&a0))
        {
            QChar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->at(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_at);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QString_0_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QString,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEmpty();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_isEmpty);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_clear(PyObject *, PyObject *);}
static PyObject *meth_QString_0_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QString,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_clear);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_capacity(PyObject *, PyObject *);}
static PyObject *meth_QString_0_capacity(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QString,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->capacity();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_capacity);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_reserve(PyObject *, PyObject *);}
static PyObject *meth_QString_0_reserve(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QString,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->reserve(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_reserve);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_toCaseFolded(PyObject *, PyObject *);}
static PyObject *meth_QString_0_toCaseFolded(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QString,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toCaseFolded());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_toCaseFolded);

    return NULL;
}


extern "C" {static PyObject *meth_QString_0_repeated(PyObject *, PyObject *);}
static PyObject *meth_QString_0_repeated(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QString *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QString,&sipCpp,&a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->repeated(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName_repeated);

    return NULL;
}


extern "C" {static PyObject *slot_QString_0___add__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_QString_0___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        const QByteArray * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J1J1",sipType_QString,&a0,&a0State,sipType_QByteArray,&a1,&a1State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString((*a0 + *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QByteArray *>(a1),sipType_QByteArray,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J1J1",sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString((*a0 + *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,add_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QString_0___imul__(PyObject *sipSelf,int a0);}
static PyObject *slot_QString_0___imul__(PyObject *sipSelf,int a0)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QString));

    if (!sipCpp)
        return 0;


    {
        {
#line 543 "sip/QtCore/qstring.sip"
        QString orig(*sipCpp);
        
        sipCpp->clear();
        
        while (a0-- > 0)
            *sipCpp += orig;
#line 3166 "sipQtCoreQString_0.cpp"

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }
}


extern "C" {static PyObject *slot_QString_0___mul__(PyObject *sipSelf,int a0);}
static PyObject *slot_QString_0___mul__(PyObject *sipSelf,int a0)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QString));

    if (!sipCpp)
        return 0;


    {
        {
            QString *sipRes = 0;

#line 535 "sip/QtCore/qstring.sip"
        sipRes = new QString();
        
        while (a0-- > 0)
            *sipRes += *sipCpp;
#line 3193 "sipQtCoreQString_0.cpp"

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }
}


extern "C" {static long slot_QString_0___hash__(PyObject *sipSelf);}
static long slot_QString_0___hash__(PyObject *sipSelf)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QString));

    if (!sipCpp)
        return 0;


    {
        {
            long sipRes = 0;

#line 530 "sip/QtCore/qstring.sip"
        sipRes = qHash(*sipCpp);
#line 3216 "sipQtCoreQString_0.cpp"

            return sipRes;
        }
    }
}


extern "C" {static PyObject *slot_QString_0___str__(PyObject *sipSelf);}
static PyObject *slot_QString_0___str__(PyObject *sipSelf)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QString));

    if (!sipCpp)
        return 0;


    {
        {
            PyObject * sipRes = 0;

#line 525 "sip/QtCore/qstring.sip"
        sipRes = qpycore_PyObject_FromQString(*sipCpp);
#line 3239 "sipQtCoreQString_0.cpp"

            return sipRes;
        }
    }
}


extern "C" {static int slot_QString_0___contains__(PyObject *sipSelf,PyObject *sipArg);}
static int slot_QString_0___contains__(PyObject *sipSelf,PyObject *sipArg)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QString));

    if (!sipCpp)
        return -1;

    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QString,&a0,&a0State))
        {
            int sipRes = 0;

#line 512 "sip/QtCore/qstring.sip"
        // It looks like you can't assign QBool to int.
        sipRes = bool(sipCpp->contains(*a0));
#line 3268 "sipQtCoreQString_0.cpp"

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName___contains__);

    return -1;
}


extern "C" {static int slot_QString_0___len__(PyObject *sipSelf);}
static int slot_QString_0___len__(PyObject *sipSelf)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QString));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 507 "sip/QtCore/qstring.sip"
        sipRes = sipCpp->length();
#line 3298 "sipQtCoreQString_0.cpp"

            return sipRes;
        }
    }
}


extern "C" {static PyObject *slot_QString_0___getitem__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QString_0___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QString));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        int a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1i",&a0))
        {
            QString *sipRes = 0;
            int sipIsErr = 0;

#line 473 "sip/QtCore/qstring.sip"
        // Note that we return a QString (rather than a QChar as Qt does).  This makes
        // things a bit easier in Python (because it doesn't distinguish between
        // characters and strings), although now that a QChar can be used whenever a
        // QString is expected it doesn't really matter.
        SIP_SSIZE_T idx = sipConvertFromSequenceIndex(a0, sipCpp->count());
        
        if (idx < 0)
            sipIsErr = 1;
        else
            sipRes = new QString(sipCpp->operator[]((int)idx));
#line 3335 "sipQtCoreQString_0.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        PyObject * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1T",&PySlice_Type,&a0))
        {
            QString *sipRes = 0;
            int sipIsErr = 0;

#line 487 "sip/QtCore/qstring.sip"
        SIP_SSIZE_T len, start, stop, step, slicelength, i;
        
        len = sipCpp->length();
        
        if (PySlice_GetIndicesEx((PySliceObject *)a0, len, &start, &stop, &step, &slicelength) < 0)
            sipIsErr = 1;
        else
        {
            sipRes = new QString();
        
            for (i = 0; i < slicelength; ++i)
            {
                sipRes -> append(sipCpp->at(start));
                start += step;
            }
        }
#line 3369 "sipQtCoreQString_0.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QString,sipName___getitem__);

    return 0;
}


extern "C" {static PyObject *slot_QString_0___ge__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QString_0___ge__(PyObject *sipSelf,PyObject *sipArg)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QString));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QString,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QString::operator>=(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QLatin1String * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QLatin1String,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QString::operator>=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QByteArray * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QByteArray,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QString::operator>=(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,ge_slot,sipType_QString,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QString_0___le__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QString_0___le__(PyObject *sipSelf,PyObject *sipArg)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QString));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QString,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QString::operator<=(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QLatin1String * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QLatin1String,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QString::operator<=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QByteArray * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QByteArray,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QString::operator<=(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,le_slot,sipType_QString,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QString_0___ne__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QString_0___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QString));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QStringRef * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QStringRef,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator!=((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QStringRef *>(a0),sipType_QStringRef,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QString,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QString::operator!=(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QLatin1String * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QLatin1String,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QString::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QByteArray * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QByteArray,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QString::operator!=(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,ne_slot,sipType_QString,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QString_0___gt__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QString_0___gt__(PyObject *sipSelf,PyObject *sipArg)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QString));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QString,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QString::operator>(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QLatin1String * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QLatin1String,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QString::operator>(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QByteArray * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QByteArray,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QString::operator>(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,gt_slot,sipType_QString,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QString_0___lt__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QString_0___lt__(PyObject *sipSelf,PyObject *sipArg)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QString));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QString,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QString::operator<(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QLatin1String * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QLatin1String,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QString::operator<(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QByteArray * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QByteArray,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QString::operator<(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,lt_slot,sipType_QString,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QString_0___eq__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QString_0___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QString));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QStringRef * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QStringRef,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator==((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QStringRef *>(a0),sipType_QStringRef,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QString,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QString::operator==(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QLatin1String * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QLatin1String,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QString::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QByteArray * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QByteArray,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QString::operator==(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,eq_slot,sipType_QString,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QString_0___iadd__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QString_0___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QString));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        QChar::SpecialCharacter a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1E",sipType_QChar_SpecialCharacter,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QString::operator+=(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QString::operator+=(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const QLatin1String * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QLatin1String,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QString::operator+=(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const QByteArray * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QByteArray,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QString::operator+=(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    /* Raise an exception if the argument couldn't be parsed. */
    sipBadOperatorArg(sipSelf,sipArg,iconcat_slot);

    return NULL;
}


extern "C" {static PyObject *slot_QString_0___repr__(PyObject *sipSelf);}
static PyObject *slot_QString_0___repr__(PyObject *sipSelf)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QString));

    if (!sipCpp)
        return 0;


    {
        {
            PyObject * sipRes = 0;

#line 265 "sip/QtCore/qstring.sip"
        PyObject *uni = qpycore_PyObject_FromQString(*sipCpp);
        
        if (uni)
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt4.QtCore.QString(%R)", uni);
        #else
            sipRes = PyString_FromString("PyQt4.QtCore.QString(");
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(uni));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        
            Py_DECREF(uni);
        }
#line 3918 "sipQtCoreQString_0.cpp"

            return sipRes;
        }
    }
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QString_0(void *, const sipTypeDef *);}
static void *cast_QString_0(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QString)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QString_0(void *, int);}
static void release_QString_0(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QString *>(sipCppV);

    Py_END_ALLOW_THREADS
}


#if PY_MAJOR_VERSION < 3
extern "C" {static SIP_SSIZE_T getreadbuffer_QString(PyObject *, void *, SIP_SSIZE_T, void **);}
static SIP_SSIZE_T getreadbuffer_QString(PyObject *sipSelf, void *sipCppV, SIP_SSIZE_T sipSegment, void **sipPtrPtr)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipCppV);
    SIP_SSIZE_T sipRes;

#line 175 "sip/QtCore/qstring.sip"
    if (sipSegment != 0)
    {
        PyErr_SetString(PyExc_SystemError, "accessing non-existent QString segment");
        sipRes = -1;
    }
    else
    {
        // To keep things easy we convert to a Python Unicode object, keep a
        // reference to it and expose its contents.
        PyObject *uobj = qpycore_PyObject_FromQString(*sipCpp);
    
        if (uobj)
        {
            Py_XDECREF(((sipSimpleWrapper *)sipSelf)->user);
            ((sipSimpleWrapper *)sipSelf)->user = uobj;
    
            *sipPtrPtr = (void *)PyUnicode_AS_UNICODE(uobj);
            sipRes = PyUnicode_GET_DATA_SIZE(uobj);
        }
        else
        {
            sipRes = -1;
        }
    }
#line 3981 "sipQtCoreQString_0.cpp"

    return sipRes;
}
#endif


#if PY_MAJOR_VERSION < 3
extern "C" {static SIP_SSIZE_T getsegcount_QString(PyObject *, void *, SIP_SSIZE_T *);}
static SIP_SSIZE_T getsegcount_QString(PyObject *, void *sipCppV, SIP_SSIZE_T *sipLenPtr)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipCppV);
    SIP_SSIZE_T sipRes;

#line 202 "sip/QtCore/qstring.sip"
    if (sipLenPtr)
        *sipLenPtr = sipCpp->size() * sizeof (Py_UNICODE);
    
    sipRes = 1;
#line 4000 "sipQtCoreQString_0.cpp"

    return sipRes;
}
#endif


#if PY_MAJOR_VERSION < 3
extern "C" {static SIP_SSIZE_T getcharbuffer_QString(PyObject *, void *, SIP_SSIZE_T, void **);}
static SIP_SSIZE_T getcharbuffer_QString(PyObject *sipSelf, void *sipCppV, SIP_SSIZE_T sipSegment, void **sipPtrPtr)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipCppV);
    SIP_SSIZE_T sipRes;

#line 209 "sip/QtCore/qstring.sip"
    if (sipSegment != 0)
    {
        PyErr_SetString(PyExc_SystemError, "accessing non-existent QString segment");
        sipRes = -1;
    }
    else
    {
        static QTextCodec *codec = 0;
        static bool check_codec = TRUE;
    
        // For the first time only, try and find a Qt codec that corresponds to the
        // default Python codec.  If one wasn't found then fall back to ASCII
        // (which is actually the codec returned by QTextCodec::codecForCStrings()).
        if (check_codec)
        {
            codec = QTextCodec::codecForName(PyUnicode_GetDefaultEncoding());
            check_codec = FALSE;
        }
    
        QByteArray enc;
    
        if (codec)
            enc = codec->fromUnicode(*sipCpp);
        else
            enc = sipCpp->toAscii();
    
        // A Python string is the most convenient method to save the encoded
        // version on the heap.
        PyObject *encobj = ((sipSimpleWrapper *)sipSelf)->user;
    
        Py_XDECREF(encobj);
    
        if ((encobj = PyString_FromStringAndSize(enc.data(), enc.size())) != NULL)
        {
            *sipPtrPtr = (void *)PyString_AS_STRING(encobj);
            sipRes = PyString_GET_SIZE(encobj);
    
            ((sipSimpleWrapper *)sipSelf)->user = encobj;
        }
        else
            sipRes = -1;
    }
#line 4057 "sipQtCoreQString_0.cpp"

    return sipRes;
}
#endif


extern "C" {static PyObject *pickle_QString(void *);}
static PyObject *pickle_QString(void *sipCppV)
{
    QString *sipCpp = reinterpret_cast<QString *>(sipCppV);
    PyObject *sipRes;

#line 254 "sip/QtCore/qstring.sip"
    sipRes = Py_BuildValue((char *)"(O)", qpycore_PyObject_FromQString(*sipCpp));
#line 4072 "sipQtCoreQString_0.cpp"

    return sipRes;
}


extern "C" {static void assign_QString_0(void *, SIP_SSIZE_T, const void *);}
static void assign_QString_0(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QString *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QString *>(sipSrc);
}


extern "C" {static void *array_QString_0(SIP_SSIZE_T);}
static void *array_QString_0(SIP_SSIZE_T sipNrElem)
{
    return new QString[sipNrElem];
}


extern "C" {static void *copy_QString_0(const void *, SIP_SSIZE_T);}
static void *copy_QString_0(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QString(reinterpret_cast<const QString *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QString_0(sipSimpleWrapper *);}
static void dealloc_QString_0(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QString_0(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QString_0(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QString_0(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QString *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QString();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        int a0;
        QChar * a1;
        int a1State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"iJ1",&a0,sipType_QChar,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QString(a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_QChar,a1State);
        }
    }

    if (!sipCpp)
    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1",sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QString(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
        }
    }

    if (!sipCpp)
    {
        const QByteArray * a0;
        int a0State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1",sipType_QByteArray,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QString(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);
        }
    }

    if (!sipCpp)
    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1",sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QString(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
        }
    }

    if (!sipCpp)
    {
        QUuid * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QUuid,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QString(a0->operator QString());
            Py_END_ALLOW_THREADS
        }
    }

    return sipCpp;
}


extern "C" {static int convertTo_QString_0(PyObject *, void **, int *, PyObject *);}
static int convertTo_QString_0(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    QString **sipCppPtr = reinterpret_cast<QString **>(sipCppPtrV);

#line 102 "sip/QtCore/qstring.sip"
// See the comments for the QByteArray %ConvertToTypeCode for an explanation
// of the conversions that are done below.

if (sipIsErr == NULL)
    return (PyUnicode_Check(sipPy) ||
#if PY_MAJOR_VERSION < 3
            PyString_Check(sipPy) ||
#endif
            sipCanConvertToType(sipPy, sipType_QLatin1String, 0) ||
            sipCanConvertToType(sipPy, sipType_QChar, 0) ||
            sipCanConvertToType(sipPy, sipType_QString, SIP_NO_CONVERTORS));

if (PyUnicode_Check(sipPy))
{
    *sipCppPtr = new QString(qpycore_PyObject_AsQString(sipPy));

    return sipGetState(sipTransferObj);
}

#if PY_MAJOR_VERSION < 3
if (PyString_Check(sipPy))
{
    *sipCppPtr = new QString(PyString_AS_STRING(sipPy));

    return sipGetState(sipTransferObj);
}
#endif

if (sipCanConvertToType(sipPy, sipType_QLatin1String, 0))
{
    int state;
    QLatin1String *q = reinterpret_cast<QLatin1String *>(sipConvertToType(sipPy,
            sipType_QLatin1String, 0, 0, &state, sipIsErr));

    if (*sipIsErr)
    {
        sipReleaseType(q, sipType_QLatin1String, state);
        return 0;
    }

    *sipCppPtr = new QString(*q);

    sipReleaseType(q, sipType_QLatin1String, state);

    return sipGetState(sipTransferObj);
}

if (sipCanConvertToType(sipPy, sipType_QChar, 0))
{
    int state;
    QChar *q = reinterpret_cast<QChar *>(sipConvertToType(sipPy,
            sipType_QChar, 0, 0, &state, sipIsErr));

    if (*sipIsErr)
    {
        sipReleaseType(q, sipType_QChar, state);
        return 0;
    }

    *sipCppPtr = new QString(*q);

    sipReleaseType(q, sipType_QChar, state);

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QString *>(sipConvertToType(sipPy,
        sipType_QString, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 4277 "sipQtCoreQString_0.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QString_0[] = {
    {(void *)slot_QString_0___add__, add_slot},
    {(void *)slot_QString_0___imul__, irepeat_slot},
    {(void *)slot_QString_0___mul__, repeat_slot},
    {(void *)slot_QString_0___hash__, hash_slot},
    {(void *)slot_QString_0___str__, str_slot},
    {(void *)slot_QString_0___contains__, contains_slot},
    {(void *)slot_QString_0___len__, len_slot},
    {(void *)slot_QString_0___getitem__, getitem_slot},
    {(void *)slot_QString_0___ge__, ge_slot},
    {(void *)slot_QString_0___le__, le_slot},
    {(void *)slot_QString_0___ne__, ne_slot},
    {(void *)slot_QString_0___gt__, gt_slot},
    {(void *)slot_QString_0___lt__, lt_slot},
    {(void *)slot_QString_0___eq__, eq_slot},
    {(void *)slot_QString_0___iadd__, iconcat_slot},
    {(void *)slot_QString_0___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QString_0[] = {
    {SIP_MLNAME_CAST(sipName_append), meth_QString_0_append, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_arg), meth_QString_0_arg, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_at), meth_QString_0_at, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_capacity), meth_QString_0_capacity, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_chop), meth_QString_0_chop, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clear), meth_QString_0_clear, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_compare), meth_QString_0_compare, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_contains), meth_QString_0_contains, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_count), meth_QString_0_count, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_endsWith), meth_QString_0_endsWith, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fill), meth_QString_0_fill, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromAscii), meth_QString_0_fromAscii, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromLatin1), meth_QString_0_fromLatin1, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromLocal8Bit), meth_QString_0_fromLocal8Bit, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromUtf8), meth_QString_0_fromUtf8, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_indexOf), meth_QString_0_indexOf, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insert), meth_QString_0_insert, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QString_0_isEmpty, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QString_0_isNull, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isRightToLeft), meth_QString_0_isRightToLeft, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isSimpleText), meth_QString_0_isSimpleText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lastIndexOf), meth_QString_0_lastIndexOf, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_left), meth_QString_0_left, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_leftJustified), meth_QString_0_leftJustified, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_length), meth_QString_0_length, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_localeAwareCompare), meth_QString_0_localeAwareCompare, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mid), meth_QString_0_mid, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_normalized), meth_QString_0_normalized, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_number), meth_QString_0_number, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_prepend), meth_QString_0_prepend, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_push_back), meth_QString_0_push_back, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_push_front), meth_QString_0_push_front, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_remove), meth_QString_0_remove, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_repeated), meth_QString_0_repeated, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_replace), meth_QString_0_replace, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_reserve), meth_QString_0_reserve, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resize), meth_QString_0_resize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_right), meth_QString_0_right, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rightJustified), meth_QString_0_rightJustified, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_section), meth_QString_0_section, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setNum), meth_QString_0_setNum, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_simplified), meth_QString_0_simplified, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_size), meth_QString_0_size, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_split), meth_QString_0_split, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_squeeze), meth_QString_0_squeeze, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_startsWith), meth_QString_0_startsWith, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toAscii), meth_QString_0_toAscii, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toCaseFolded), meth_QString_0_toCaseFolded, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toDouble), meth_QString_0_toDouble, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toFloat), meth_QString_0_toFloat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toInt), meth_QString_0_toInt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toLatin1), meth_QString_0_toLatin1, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toLocal8Bit), meth_QString_0_toLocal8Bit, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toLong), meth_QString_0_toLong, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toLongLong), meth_QString_0_toLongLong, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toLower), meth_QString_0_toLower, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toShort), meth_QString_0_toShort, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toUInt), meth_QString_0_toUInt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toULong), meth_QString_0_toULong, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toULongLong), meth_QString_0_toULongLong, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toUShort), meth_QString_0_toUShort, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toUpper), meth_QString_0_toUpper, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toUtf8), meth_QString_0_toUtf8, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_trimmed), meth_QString_0_trimmed, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_truncate), meth_QString_0_truncate, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QString_0[] = {
    {sipName_KeepEmptyParts, QString::KeepEmptyParts, 151},
    {sipName_NormalizationForm_C, QString::NormalizationForm_C, 148},
    {sipName_NormalizationForm_D, QString::NormalizationForm_D, 148},
    {sipName_NormalizationForm_KC, QString::NormalizationForm_KC, 148},
    {sipName_NormalizationForm_KD, QString::NormalizationForm_KD, 148},
    {sipName_SectionCaseInsensitiveSeps, QString::SectionCaseInsensitiveSeps, 149},
    {sipName_SectionDefault, QString::SectionDefault, 149},
    {sipName_SectionIncludeLeadingSep, QString::SectionIncludeLeadingSep, 149},
    {sipName_SectionIncludeTrailingSep, QString::SectionIncludeTrailingSep, 149},
    {sipName_SectionSkipEmpty, QString::SectionSkipEmpty, 149},
    {sipName_SkipEmptyParts, QString::SkipEmptyParts, 151},
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QString_0 = {
{
    {
        0,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QString,
        {0}
    },
    {
        sipNameNr_QString,
        {0, 0, 1},
        65, methods_QString_0,
        11, enummembers_QString_0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QString_0,
    init_QString_0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    getreadbuffer_QString,
    0,
    getsegcount_QString,
    getcharbuffer_QString,
#endif
    dealloc_QString_0,
    assign_QString_0,
    array_QString_0,
    copy_QString_0,
    release_QString_0,
    cast_QString_0,
    convertTo_QString_0,
    0,
    pickle_QString
},
    0,
    0,
    0
};

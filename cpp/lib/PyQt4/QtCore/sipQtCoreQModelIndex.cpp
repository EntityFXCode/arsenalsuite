/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:19 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 37 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 39 "sipQtCoreQModelIndex.cpp"

#line 86 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 43 "sipQtCoreQModelIndex.cpp"
#line 128 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 46 "sipQtCoreQModelIndex.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 49 "sipQtCoreQModelIndex.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 52 "sipQtCoreQModelIndex.cpp"


extern "C" {static PyObject *meth_QModelIndex_child(PyObject *, PyObject *);}
static PyObject *meth_QModelIndex_child(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        QModelIndex *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii",&sipSelf,sipType_QModelIndex,&sipCpp,&a0,&a1))
        {
            QModelIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->child(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QModelIndex,sipName_child);

    return NULL;
}


extern "C" {static PyObject *meth_QModelIndex_row(PyObject *, PyObject *);}
static PyObject *meth_QModelIndex_row(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QModelIndex *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QModelIndex,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->row();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QModelIndex,sipName_row);

    return NULL;
}


extern "C" {static PyObject *meth_QModelIndex_column(PyObject *, PyObject *);}
static PyObject *meth_QModelIndex_column(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QModelIndex *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QModelIndex,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->column();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QModelIndex,sipName_column);

    return NULL;
}


extern "C" {static PyObject *meth_QModelIndex_data(PyObject *, PyObject *);}
static PyObject *meth_QModelIndex_data(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0 = Qt::DisplayRole;
        QModelIndex *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|i",&sipSelf,sipType_QModelIndex,&sipCpp,&a0))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->data(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QModelIndex,sipName_data);

    return NULL;
}


extern "C" {static PyObject *meth_QModelIndex_flags(PyObject *, PyObject *);}
static PyObject *meth_QModelIndex_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QModelIndex *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QModelIndex,&sipCpp))
        {
            Qt::ItemFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::ItemFlags(sipCpp->flags());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QModelIndex,sipName_flags);

    return NULL;
}


extern "C" {static PyObject *meth_QModelIndex_internalPointer(PyObject *, PyObject *);}
static PyObject *meth_QModelIndex_internalPointer(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QModelIndex *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QModelIndex,&sipCpp))
        {
            PyObject * sipRes = 0;

#line 53 "sip/QtCore/qabstractitemmodel.sip"
        sipRes = reinterpret_cast<PyObject *>(sipCpp->internalPointer());
        
        if (!sipRes)
            sipRes = Py_None;
        
        Py_INCREF(sipRes);
#line 212 "sipQtCoreQModelIndex.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QModelIndex,sipName_internalPointer);

    return NULL;
}


extern "C" {static PyObject *meth_QModelIndex_internalId(PyObject *, PyObject *);}
static PyObject *meth_QModelIndex_internalId(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QModelIndex *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QModelIndex,&sipCpp))
        {
            PyObject * sipRes = 0;

#line 63 "sip/QtCore/qabstractitemmodel.sip"
        // Python needs to treat the result as an unsigned value (which may not happen
        // on 64 bit systems).  Instead we get the real value as it is stored (as a
        // void *) and let Python convert that.
        sipRes = PyLong_FromVoidPtr(sipCpp->internalPointer());
#line 242 "sipQtCoreQModelIndex.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QModelIndex,sipName_internalId);

    return NULL;
}


extern "C" {static PyObject *meth_QModelIndex_model(PyObject *, PyObject *);}
static PyObject *meth_QModelIndex_model(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QModelIndex *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QModelIndex,&sipCpp))
        {
            const QAbstractItemModel *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->model();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(const_cast<QAbstractItemModel *>(sipRes),sipType_QAbstractItemModel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QModelIndex,sipName_model);

    return NULL;
}


extern "C" {static PyObject *meth_QModelIndex_isValid(PyObject *, PyObject *);}
static PyObject *meth_QModelIndex_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QModelIndex *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QModelIndex,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QModelIndex,sipName_isValid);

    return NULL;
}


extern "C" {static PyObject *meth_QModelIndex_parent(PyObject *, PyObject *);}
static PyObject *meth_QModelIndex_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QModelIndex *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QModelIndex,&sipCpp))
        {
            QModelIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->parent());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QModelIndex,sipName_parent);

    return NULL;
}


extern "C" {static PyObject *meth_QModelIndex_sibling(PyObject *, PyObject *);}
static PyObject *meth_QModelIndex_sibling(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        QModelIndex *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii",&sipSelf,sipType_QModelIndex,&sipCpp,&a0,&a1))
        {
            QModelIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->sibling(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QModelIndex,sipName_sibling);

    return NULL;
}


extern "C" {static PyObject *slot_QModelIndex___ge__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QModelIndex___ge__(PyObject *sipSelf,PyObject *sipArg)
{
    QModelIndex *sipCpp = reinterpret_cast<QModelIndex *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QModelIndex));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QModelIndex,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = !sipCpp->QModelIndex::operator<(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,ge_slot,sipType_QModelIndex,sipSelf,sipArg);
}


extern "C" {static long slot_QModelIndex___hash__(PyObject *sipSelf);}
static long slot_QModelIndex___hash__(PyObject *sipSelf)
{
    QModelIndex *sipCpp = reinterpret_cast<QModelIndex *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QModelIndex));

    if (!sipCpp)
        return 0;


    {
        {
            long sipRes = 0;

#line 78 "sip/QtCore/qabstractitemmodel.sip"
        sipRes = qHash(*sipCpp);
#line 409 "sipQtCoreQModelIndex.cpp"

            return sipRes;
        }
    }
}


extern "C" {static PyObject *slot_QModelIndex___ne__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QModelIndex___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QModelIndex *sipCpp = reinterpret_cast<QModelIndex *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QModelIndex));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QModelIndex,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QModelIndex::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,ne_slot,sipType_QModelIndex,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QModelIndex___lt__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QModelIndex___lt__(PyObject *sipSelf,PyObject *sipArg)
{
    QModelIndex *sipCpp = reinterpret_cast<QModelIndex *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QModelIndex));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QModelIndex,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QModelIndex::operator<(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,lt_slot,sipType_QModelIndex,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QModelIndex___eq__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QModelIndex___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QModelIndex *sipCpp = reinterpret_cast<QModelIndex *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QModelIndex));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QModelIndex,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QModelIndex::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,eq_slot,sipType_QModelIndex,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QModelIndex(void *, const sipTypeDef *);}
static void *cast_QModelIndex(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QModelIndex)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QModelIndex(void *, int);}
static void release_QModelIndex(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QModelIndex *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QModelIndex(void *, SIP_SSIZE_T, const void *);}
static void assign_QModelIndex(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QModelIndex *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QModelIndex *>(sipSrc);
}


extern "C" {static void *array_QModelIndex(SIP_SSIZE_T);}
static void *array_QModelIndex(SIP_SSIZE_T sipNrElem)
{
    return new QModelIndex[sipNrElem];
}


extern "C" {static void *copy_QModelIndex(const void *, SIP_SSIZE_T);}
static void *copy_QModelIndex(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QModelIndex(reinterpret_cast<const QModelIndex *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QModelIndex(sipSimpleWrapper *);}
static void dealloc_QModelIndex(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QModelIndex(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QModelIndex(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QModelIndex(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QModelIndex *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QModelIndex();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QModelIndex * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QModelIndex,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QModelIndex(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QPersistentModelIndex * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QPersistentModelIndex,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QModelIndex(a0->operator const QModelIndex&());
            Py_END_ALLOW_THREADS
        }
    }

    return sipCpp;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QModelIndex[] = {
    {(void *)slot_QModelIndex___ge__, ge_slot},
    {(void *)slot_QModelIndex___hash__, hash_slot},
    {(void *)slot_QModelIndex___ne__, ne_slot},
    {(void *)slot_QModelIndex___lt__, lt_slot},
    {(void *)slot_QModelIndex___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QModelIndex[] = {
    {SIP_MLNAME_CAST(sipName_child), meth_QModelIndex_child, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_column), meth_QModelIndex_column, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_data), meth_QModelIndex_data, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_flags), meth_QModelIndex_flags, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_internalId), meth_QModelIndex_internalId, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_internalPointer), meth_QModelIndex_internalPointer, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QModelIndex_isValid, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_model), meth_QModelIndex_model, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_parent), meth_QModelIndex_parent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_row), meth_QModelIndex_row, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sibling), meth_QModelIndex_sibling, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QModelIndex = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QModelIndex,
        {0}
    },
    {
        sipNameNr_QModelIndex,
        {0, 0, 1},
        11, methods_QModelIndex,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QModelIndex,
    init_QModelIndex,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QModelIndex,
    assign_QModelIndex,
    array_QModelIndex,
    copy_QModelIndex,
    release_QModelIndex,
    cast_QModelIndex,
    0,
    0,
    0
},
    0,
    0,
    0
};

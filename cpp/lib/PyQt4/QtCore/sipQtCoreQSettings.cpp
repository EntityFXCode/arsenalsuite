/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:19 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 37 "sip/QtCore/qsettings.sip"
#include <qsettings.h>
#line 39 "sipQtCoreQSettings.cpp"

#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 43 "sipQtCoreQSettings.cpp"
#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 46 "sipQtCoreQSettings.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 49 "sipQtCoreQSettings.cpp"
#line 41 "sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 76 "sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 54 "sipQtCoreQSettings.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 57 "sipQtCoreQSettings.cpp"
#line 41 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 60 "sipQtCoreQSettings.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 63 "sipQtCoreQSettings.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 66 "sipQtCoreQSettings.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 69 "sipQtCoreQSettings.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 72 "sipQtCoreQSettings.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 75 "sipQtCoreQSettings.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 78 "sipQtCoreQSettings.cpp"
#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 81 "sipQtCoreQSettings.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 84 "sipQtCoreQSettings.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 87 "sipQtCoreQSettings.cpp"


class sipQSettings : public QSettings
{
public:
    sipQSettings(const QString&,const QString&,QObject *);
    sipQSettings(QSettings::Scope,const QString&,const QString&,QObject *);
    sipQSettings(QSettings::Format,QSettings::Scope,const QString&,const QString&,QObject *);
    sipQSettings(const QString&,QSettings::Format,QObject *);
    sipQSettings(QObject *);
    virtual ~sipQSettings();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    bool sipProtectVirt_event(bool,QEvent *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQSettings(const sipQSettings &);
    sipQSettings &operator = (const sipQSettings &);

    char sipPyMethods[7];
};

sipQSettings::sipQSettings(const QString& a0,const QString& a1,QObject *a2): QSettings(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSettings::sipQSettings(QSettings::Scope a0,const QString& a1,const QString& a2,QObject *a3): QSettings(a0,a1,a2,a3), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSettings::sipQSettings(QSettings::Format a0,QSettings::Scope a1,const QString& a2,const QString& a3,QObject *a4): QSettings(a0,a1,a2,a3,a4), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSettings::sipQSettings(const QString& a0,QSettings::Format a1,QObject *a2): QSettings(a0,a1,a2), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSettings::sipQSettings(QObject *a0): QSettings(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQSettings::~sipQSettings()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQSettings::metaObject() const
{
    return sip_QtCore_qt_metaobject(sipPySelf,sipType_QSettings);
}

int sipQSettings::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QSettings::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QSettings,_c,_id,_a);

    return _id;
}

void *sipQSettings::qt_metacast(const char *_clname)
{
    return (sip_QtCore_qt_metacast && sip_QtCore_qt_metacast(sipPySelf,sipType_QSettings,_clname)) ? this : QSettings::qt_metacast(_clname);
}

bool sipQSettings::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QSettings::event(a0);

    extern bool sipVH_QtCore_12(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return sipVH_QtCore_12(sipGILState,meth,0,a0);
}

bool sipQSettings::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    extern bool sipVH_QtCore_20(sip_gilstate_t,PyObject *,bool*,QObject *,QEvent *);

    return sipVH_QtCore_20(sipGILState,meth,0,a0,a1);
}

void sipQSettings::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t,PyObject *,bool*,QTimerEvent *);

    sipVH_QtCore_3(sipGILState,meth,0,a0);
}

void sipQSettings::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_19(sip_gilstate_t,PyObject *,bool*,QChildEvent *);

    sipVH_QtCore_19(sipGILState,meth,0,a0);
}

void sipQSettings::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_18(sip_gilstate_t,PyObject *,bool*,QEvent *);

    sipVH_QtCore_18(sipGILState,meth,0,a0);
}

void sipQSettings::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t,PyObject *,bool*,const char *);

    sipVH_QtCore_17(sipGILState,meth,0,a0);
}

void sipQSettings::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t,PyObject *,bool*,const char *);

    sipVH_QtCore_17(sipGILState,meth,0,a0);
}

int sipQSettings::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQSettings::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQSettings::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQSettings::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQSettings::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQSettings::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

bool sipQSettings::sipProtectVirt_event(bool sipSelfWasArg,QEvent *a0)
{
    return (sipSelfWasArg ? QSettings::event(a0) : event(a0));
}


extern "C" {static PyObject *meth_QSettings_receivers(PyObject *, PyObject *);}
static PyObject *meth_QSettings_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        char * a0;
        sipQSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QSettings,&sipCpp,&a0))
        {
            int sipRes = 0;

#line 480 "sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
#line 370 "sipQtCoreQSettings.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_receivers);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QSettings_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QSettings,&sipCpp,sipType_QTimerEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_timerEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QSettings_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QSettings,&sipCpp,sipType_QChildEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_childEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QSettings_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QSettings,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_customEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QSettings_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QSettings,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_connectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QSettings_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QSettings,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_disconnectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_clear(PyObject *, PyObject *);}
static PyObject *meth_QSettings_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSettings,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_clear);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_sync(PyObject *, PyObject *);}
static PyObject *meth_QSettings_sync(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSettings,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sync();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_sync);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_status(PyObject *, PyObject *);}
static PyObject *meth_QSettings_status(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSettings,&sipCpp))
        {
            QSettings::Status sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->status();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QSettings_Status);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_status);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_beginGroup(PyObject *, PyObject *);}
static PyObject *meth_QSettings_beginGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QSettings,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->beginGroup(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_beginGroup);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_endGroup(PyObject *, PyObject *);}
static PyObject *meth_QSettings_endGroup(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSettings,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->endGroup();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_endGroup);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_group(PyObject *, PyObject *);}
static PyObject *meth_QSettings_group(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSettings,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->group());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_group);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_beginReadArray(PyObject *, PyObject *);}
static PyObject *meth_QSettings_beginReadArray(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QSettings,&sipCpp,sipType_QString,&a0,&a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->beginReadArray(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_beginReadArray);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_beginWriteArray(PyObject *, PyObject *);}
static PyObject *meth_QSettings_beginWriteArray(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        int a1 = -1;
        QSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|i",&sipSelf,sipType_QSettings,&sipCpp,sipType_QString,&a0,&a0State,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->beginWriteArray(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_beginWriteArray);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_endArray(PyObject *, PyObject *);}
static PyObject *meth_QSettings_endArray(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSettings,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->endArray();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_endArray);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_setArrayIndex(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setArrayIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QSettings,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setArrayIndex(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_setArrayIndex);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_allKeys(PyObject *, PyObject *);}
static PyObject *meth_QSettings_allKeys(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSettings,&sipCpp))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->allKeys());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_allKeys);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_childKeys(PyObject *, PyObject *);}
static PyObject *meth_QSettings_childKeys(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSettings,&sipCpp))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->childKeys());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_childKeys);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_childGroups(PyObject *, PyObject *);}
static PyObject *meth_QSettings_childGroups(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSettings,&sipCpp))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(sipCpp->childGroups());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_childGroups);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_isWritable(PyObject *, PyObject *);}
static PyObject *meth_QSettings_isWritable(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSettings,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isWritable();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_isWritable);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_setValue(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setValue(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        const QVariant * a1;
        int a1State = 0;
        QSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1",&sipSelf,sipType_QSettings,&sipCpp,sipType_QString,&a0,&a0State,sipType_QVariant,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setValue(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_setValue);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_value(PyObject *, PyObject *);}
static PyObject *meth_QSettings_value(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        const QVariant& a1def = QVariant();
        const QVariant * a1 = &a1def;
        int a1State = 0;
        QSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|J1",&sipSelf,sipType_QSettings,&sipCpp,sipType_QString,&a0,&a0State,sipType_QVariant,&a1,&a1State))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->value(*a0,*a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_value);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_remove(PyObject *, PyObject *);}
static PyObject *meth_QSettings_remove(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QSettings,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->remove(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_remove);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_contains(PyObject *, PyObject *);}
static PyObject *meth_QSettings_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QSettings,&sipCpp,sipType_QString,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->contains(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_contains);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_setFallbacksEnabled(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setFallbacksEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QSettings,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setFallbacksEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_setFallbacksEnabled);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_fallbacksEnabled(PyObject *, PyObject *);}
static PyObject *meth_QSettings_fallbacksEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSettings,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->fallbacksEnabled();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_fallbacksEnabled);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_fileName(PyObject *, PyObject *);}
static PyObject *meth_QSettings_fileName(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSettings,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->fileName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_fileName);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_setSystemIniPath(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setSystemIniPath(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1",sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QSettings::setSystemIniPath(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_setSystemIniPath);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_setUserIniPath(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setUserIniPath(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1",sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QSettings::setUserIniPath(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_setUserIniPath);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_setPath(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setPath(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QSettings::Format a0;
        QSettings::Scope a1;
        const QString * a2;
        int a2State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"EEJ1",sipType_QSettings_Format,&a0,sipType_QSettings_Scope,&a1,sipType_QString,&a2,&a2State))
        {
            Py_BEGIN_ALLOW_THREADS
            QSettings::setPath(a0,a1,*a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_setPath);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_format(PyObject *, PyObject *);}
static PyObject *meth_QSettings_format(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSettings,&sipCpp))
        {
            QSettings::Format sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->format();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QSettings_Format);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_format);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_scope(PyObject *, PyObject *);}
static PyObject *meth_QSettings_scope(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSettings,&sipCpp))
        {
            QSettings::Scope sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->scope();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QSettings_Scope);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_scope);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_organizationName(PyObject *, PyObject *);}
static PyObject *meth_QSettings_organizationName(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSettings,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->organizationName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_organizationName);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_applicationName(PyObject *, PyObject *);}
static PyObject *meth_QSettings_applicationName(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSettings,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->applicationName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_applicationName);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_setDefaultFormat(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setDefaultFormat(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QSettings::Format a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"E",sipType_QSettings_Format,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QSettings::setDefaultFormat(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_setDefaultFormat);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_defaultFormat(PyObject *, PyObject *);}
static PyObject *meth_QSettings_defaultFormat(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QSettings::Format sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QSettings::defaultFormat();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QSettings_Format);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_defaultFormat);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_setIniCodec(PyObject *, PyObject *);}
static PyObject *meth_QSettings_setIniCodec(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextCodec * a0;
        QSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QSettings,&sipCpp,sipType_QTextCodec,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIniCodec(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char * a0;
        QSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bs",&sipSelf,sipType_QSettings,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setIniCodec(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_setIniCodec);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_iniCodec(PyObject *, PyObject *);}
static PyObject *meth_QSettings_iniCodec(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSettings,&sipCpp))
        {
            QTextCodec *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->iniCodec();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextCodec,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_iniCodec);

    return NULL;
}


extern "C" {static PyObject *meth_QSettings_event(PyObject *, PyObject *);}
static PyObject *meth_QSettings_event(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQSettings *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QSettings,&sipCpp,sipType_QEvent,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSettings,sipName_event);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSettings(void *, const sipTypeDef *);}
static void *cast_QSettings(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QSettings)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QSettings *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSettings(void *, int);}
static void release_QSettings(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQSettings *>(sipCppV);
    else
        delete reinterpret_cast<QSettings *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QSettings(sipSimpleWrapper *);}
static void dealloc_QSettings(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQSettings *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QSettings(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QSettings(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QSettings(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **sipOwner, int *sipArgsParsed)
{
    sipQSettings *sipCpp = 0;

    if (!sipCpp)
    {
        const QString * a0;
        int a0State = 0;
        const QString& a1def = QString();
        const QString * a1 = &a1def;
        int a1State = 0;
        QObject * a2 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1|J1JH",sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State,sipType_QObject,&a2,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSettings(*a0,*a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
        }
    }

    if (!sipCpp)
    {
        QSettings::Scope a0;
        const QString * a1;
        int a1State = 0;
        const QString& a2def = QString();
        const QString * a2 = &a2def;
        int a2State = 0;
        QObject * a3 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"EJ1|J1JH",sipType_QSettings_Scope,&a0,sipType_QString,&a1,&a1State,sipType_QString,&a2,&a2State,sipType_QObject,&a3,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSettings(a0,*a1,*a2,a3);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
        }
    }

    if (!sipCpp)
    {
        QSettings::Format a0;
        QSettings::Scope a1;
        const QString * a2;
        int a2State = 0;
        const QString& a3def = QString();
        const QString * a3 = &a3def;
        int a3State = 0;
        QObject * a4 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"EEJ1|J1JH",sipType_QSettings_Format,&a0,sipType_QSettings_Scope,&a1,sipType_QString,&a2,&a2State,sipType_QString,&a3,&a3State,sipType_QObject,&a4,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSettings(a0,a1,*a2,*a3,a4);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast<QString *>(a3),sipType_QString,a3State);
        }
    }

    if (!sipCpp)
    {
        const QString * a0;
        int a0State = 0;
        QSettings::Format a1;
        QObject * a2 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1E|JH",sipType_QString,&a0,&a0State,sipType_QSettings_Format,&a1,sipType_QObject,&a2,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSettings(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
        }
    }

    if (!sipCpp)
    {
        QObject * a0 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"|JH",sipType_QObject,&a0,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSettings(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QSettings[] = {{111, 255, 1}};


static PyMethodDef methods_QSettings[] = {
    {SIP_MLNAME_CAST(sipName_allKeys), meth_QSettings_allKeys, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_applicationName), meth_QSettings_applicationName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_beginGroup), meth_QSettings_beginGroup, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_beginReadArray), meth_QSettings_beginReadArray, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_beginWriteArray), meth_QSettings_beginWriteArray, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QSettings_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childGroups), meth_QSettings_childGroups, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childKeys), meth_QSettings_childKeys, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clear), meth_QSettings_clear, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QSettings_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_contains), meth_QSettings_contains, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QSettings_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_defaultFormat), meth_QSettings_defaultFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QSettings_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_endArray), meth_QSettings_endArray, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_endGroup), meth_QSettings_endGroup, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_event), meth_QSettings_event, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fallbacksEnabled), meth_QSettings_fallbacksEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fileName), meth_QSettings_fileName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_format), meth_QSettings_format, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_group), meth_QSettings_group, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_iniCodec), meth_QSettings_iniCodec, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isWritable), meth_QSettings_isWritable, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_organizationName), meth_QSettings_organizationName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QSettings_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_remove), meth_QSettings_remove, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_scope), meth_QSettings_scope, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setArrayIndex), meth_QSettings_setArrayIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDefaultFormat), meth_QSettings_setDefaultFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setFallbacksEnabled), meth_QSettings_setFallbacksEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setIniCodec), meth_QSettings_setIniCodec, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPath), meth_QSettings_setPath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSystemIniPath), meth_QSettings_setSystemIniPath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setUserIniPath), meth_QSettings_setUserIniPath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setValue), meth_QSettings_setValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_status), meth_QSettings_status, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sync), meth_QSettings_sync, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QSettings_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_value), meth_QSettings_value, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QSettings[] = {
    {sipName_AccessError, QSettings::AccessError, 138},
    {sipName_FormatError, QSettings::FormatError, 138},
    {sipName_IniFormat, QSettings::IniFormat, 136},
    {sipName_InvalidFormat, QSettings::InvalidFormat, 136},
    {sipName_NativeFormat, QSettings::NativeFormat, 136},
    {sipName_NoError, QSettings::NoError, 138},
    {sipName_SystemScope, QSettings::SystemScope, 137},
    {sipName_UserScope, QSettings::UserScope, 137},
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QSettings = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QSettings,
        {0}
    },
    {
        sipNameNr_QSettings,
        {0, 0, 1},
        39, methods_QSettings,
        8, enummembers_QSettings,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QSettings,
    0,
    init_QSettings,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSettings,
    0,
    0,
    0,
    release_QSettings,
    cast_QSettings,
    0,
    0,
    0
},
    &QSettings::staticMetaObject,
    0,
    0
};

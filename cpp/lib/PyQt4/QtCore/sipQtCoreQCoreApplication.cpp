/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:19 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 77 "sip/QtCore/qcoreapplication.sip"
#include <qcoreapplication.h>
#line 39 "sipQtCoreQCoreApplication.cpp"

#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 43 "sipQtCoreQCoreApplication.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 46 "sipQtCoreQCoreApplication.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 49 "sipQtCoreQCoreApplication.cpp"
#line 37 "sip/QtCore/qtranslator.sip"
#include <qtranslator.h>
#line 52 "sipQtCoreQCoreApplication.cpp"
#line 41 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 55 "sipQtCoreQCoreApplication.cpp"
#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 58 "sipQtCoreQCoreApplication.cpp"
#line 41 "sip/QtCore/qeventloop.sip"
#include <qeventloop.h>
#line 61 "sipQtCoreQCoreApplication.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 64 "sipQtCoreQCoreApplication.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 67 "sipQtCoreQCoreApplication.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 70 "sipQtCoreQCoreApplication.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 73 "sipQtCoreQCoreApplication.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 76 "sipQtCoreQCoreApplication.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 79 "sipQtCoreQCoreApplication.cpp"
#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 82 "sipQtCoreQCoreApplication.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 85 "sipQtCoreQCoreApplication.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 88 "sipQtCoreQCoreApplication.cpp"


class sipQCoreApplication : public QCoreApplication
{
public:
    sipQCoreApplication(int&,char **);
    virtual ~sipQCoreApplication();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    bool sipProtectVirt_event(bool,QEvent *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool notify(QObject *,QEvent *);
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQCoreApplication(const sipQCoreApplication &);
    sipQCoreApplication &operator = (const sipQCoreApplication &);

    char sipPyMethods[8];
};

sipQCoreApplication::sipQCoreApplication(int& a0,char **a1): QCoreApplication(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQCoreApplication::~sipQCoreApplication()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQCoreApplication::metaObject() const
{
    return sip_QtCore_qt_metaobject(sipPySelf,sipType_QCoreApplication);
}

int sipQCoreApplication::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QCoreApplication::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QCoreApplication,_c,_id,_a);

    return _id;
}

void *sipQCoreApplication::qt_metacast(const char *_clname)
{
    return (sip_QtCore_qt_metacast && sip_QtCore_qt_metacast(sipPySelf,sipType_QCoreApplication,_clname)) ? this : QCoreApplication::qt_metacast(_clname);
}

bool sipQCoreApplication::notify(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_notify);

    if (!meth)
        return QCoreApplication::notify(a0,a1);

    extern bool sipVH_QtCore_20(sip_gilstate_t,PyObject *,bool*,QObject *,QEvent *);

    return sipVH_QtCore_20(sipGILState,meth,0,a0,a1);
}

bool sipQCoreApplication::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QCoreApplication::event(a0);

    extern bool sipVH_QtCore_12(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return sipVH_QtCore_12(sipGILState,meth,0,a0);
}

bool sipQCoreApplication::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    extern bool sipVH_QtCore_20(sip_gilstate_t,PyObject *,bool*,QObject *,QEvent *);

    return sipVH_QtCore_20(sipGILState,meth,0,a0,a1);
}

void sipQCoreApplication::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t,PyObject *,bool*,QTimerEvent *);

    sipVH_QtCore_3(sipGILState,meth,0,a0);
}

void sipQCoreApplication::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_19(sip_gilstate_t,PyObject *,bool*,QChildEvent *);

    sipVH_QtCore_19(sipGILState,meth,0,a0);
}

void sipQCoreApplication::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_18(sip_gilstate_t,PyObject *,bool*,QEvent *);

    sipVH_QtCore_18(sipGILState,meth,0,a0);
}

void sipQCoreApplication::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t,PyObject *,bool*,const char *);

    sipVH_QtCore_17(sipGILState,meth,0,a0);
}

void sipQCoreApplication::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t,PyObject *,bool*,const char *);

    sipVH_QtCore_17(sipGILState,meth,0,a0);
}

int sipQCoreApplication::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQCoreApplication::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQCoreApplication::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQCoreApplication::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQCoreApplication::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQCoreApplication::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

bool sipQCoreApplication::sipProtectVirt_event(bool sipSelfWasArg,QEvent *a0)
{
    return (sipSelfWasArg ? QCoreApplication::event(a0) : event(a0));
}


extern "C" {static PyObject *meth_QCoreApplication_receivers(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        char * a0;
        sipQCoreApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QCoreApplication,&sipCpp,&a0))
        {
            int sipRes = 0;

#line 480 "sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
#line 363 "sipQtCoreQCoreApplication.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_receivers);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQCoreApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QCoreApplication,&sipCpp,sipType_QTimerEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_timerEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQCoreApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QCoreApplication,&sipCpp,sipType_QChildEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_childEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQCoreApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QCoreApplication,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_customEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQCoreApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QCoreApplication,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_connectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQCoreApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QCoreApplication,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_disconnectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_argc(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_argc(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QCoreApplication::argc();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_argc);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_argv(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_argv(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 110 "sip/QtCore/qcoreapplication.sip"
        // The Python interface returns a list of strings.
        
        int argc = QCoreApplication::argc();
        
        if ((sipRes = PyList_New(argc)) == NULL)
        {
            sipIsErr = 1;
        }
        else
        {
            char **argv = QCoreApplication::argv();
        
            for (int a = 0; a < argc; ++a)
            {
        #if PY_MAJOR_VERSION >= 3
                PyObject *arg_obj = PyUnicode_FromString(argv[a]);
        #else
                PyObject *arg_obj = PyString_FromString(argv[a]);
        #endif
        
                if (!arg_obj)
                {
                    Py_DECREF(sipRes);
                    sipIsErr = 1;
                    break;
                }
        
                PyList_SET_ITEM(sipRes, a, arg_obj);
            }
        }
#line 583 "sipQtCoreQCoreApplication.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_argv);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_setOrganizationDomain(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setOrganizationDomain(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1",sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::setOrganizationDomain(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_setOrganizationDomain);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_organizationDomain(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_organizationDomain(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QCoreApplication::organizationDomain());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_organizationDomain);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_setOrganizationName(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setOrganizationName(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1",sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::setOrganizationName(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_setOrganizationName);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_organizationName(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_organizationName(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QCoreApplication::organizationName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_organizationName);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_setApplicationName(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setApplicationName(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1",sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::setApplicationName(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_setApplicationName);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_applicationName(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_applicationName(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QCoreApplication::applicationName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_applicationName);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_arguments(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_arguments(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(QCoreApplication::arguments());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_arguments);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_instance(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_instance(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QCoreApplication *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QCoreApplication::instance();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QCoreApplication,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_instance);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_exec_(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_exec_(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            int sipRes;

            sipCallHook("__pyQtPreEventLoopHook__");

            Py_BEGIN_ALLOW_THREADS
            sipRes = QCoreApplication::exec();
            Py_END_ALLOW_THREADS


            sipCallHook("__pyQtPostEventLoopHook__");
            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_exec_);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_processEvents(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_processEvents(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QEventLoop::ProcessEventsFlags a0def = QEventLoop::AllEvents;
        QEventLoop::ProcessEventsFlags * a0 = &a0def;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"|J1",sipType_QEventLoop_ProcessEventsFlags,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::processEvents(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QEventLoop_ProcessEventsFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QEventLoop::ProcessEventsFlags * a0;
        int a0State = 0;
        int a1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1i",sipType_QEventLoop_ProcessEventsFlags,&a0,&a0State,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::processEvents(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QEventLoop_ProcessEventsFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_processEvents);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_exit(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_exit(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0 = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"|i",&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::exit(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_exit);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_sendEvent(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_sendEvent(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QObject * a0;
        QEvent * a1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8J8",sipType_QObject,&a0,sipType_QEvent,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QCoreApplication::sendEvent(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_sendEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_postEvent(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_postEvent(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QObject * a0;
        QEvent * a1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8J:",sipType_QObject,&a0,sipType_QEvent,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::postEvent(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QObject * a0;
        QEvent * a1;
        int a2;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8J:i",sipType_QObject,&a0,sipType_QEvent,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::postEvent(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_postEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_sendPostedEvents(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_sendPostedEvents(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QObject * a0;
        int a1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8i",sipType_QObject,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::sendPostedEvents(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::sendPostedEvents();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_sendPostedEvents);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_removePostedEvents(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_removePostedEvents(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QObject * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8",sipType_QObject,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::removePostedEvents(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QObject * a0;
        int a1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8i",sipType_QObject,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::removePostedEvents(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_removePostedEvents);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_hasPendingEvents(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_hasPendingEvents(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QCoreApplication::hasPendingEvents();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_hasPendingEvents);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_notify(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_notify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QObject * a0;
        QEvent * a1;
        QCoreApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8J8",&sipSelf,sipType_QCoreApplication,&sipCpp,sipType_QObject,&a0,sipType_QEvent,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QCoreApplication::notify(a0,a1) : sipCpp->notify(a0,a1));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_notify);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_startingUp(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_startingUp(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QCoreApplication::startingUp();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_startingUp);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_closingDown(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_closingDown(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QCoreApplication::closingDown();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_closingDown);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_applicationDirPath(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_applicationDirPath(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QCoreApplication::applicationDirPath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_applicationDirPath);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_applicationFilePath(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_applicationFilePath(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QCoreApplication::applicationFilePath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_applicationFilePath);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_setLibraryPaths(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setLibraryPaths(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QStringList * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1",sipType_QStringList,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::setLibraryPaths(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QStringList *>(a0),sipType_QStringList,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_setLibraryPaths);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_libraryPaths(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_libraryPaths(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList(QCoreApplication::libraryPaths());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_libraryPaths);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_addLibraryPath(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_addLibraryPath(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1",sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::addLibraryPath(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_addLibraryPath);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_removeLibraryPath(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_removeLibraryPath(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1",sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::removeLibraryPath(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_removeLibraryPath);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_installTranslator(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_installTranslator(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTranslator * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8",sipType_QTranslator,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::installTranslator(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_installTranslator);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_removeTranslator(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_removeTranslator(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTranslator * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J8",sipType_QTranslator,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::removeTranslator(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_removeTranslator);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_translate(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_translate(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const char * a0;
        PyObject * a1;
        const char * a2 = 0;
        QCoreApplication::Encoding a3 = QCoreApplication::CodecForTr;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"sP0|sE",&a0,&a1,&a2,sipType_QCoreApplication_Encoding,&a3))
        {
            QString *sipRes = 0;
            int sipIsErr = 0;

#line 210 "sip/QtCore/qcoreapplication.sip"
        const char *source = qpycore_encode(&a1, a3);
        
        if (source)
        {
            sipRes = new QString(QCoreApplication::translate(a0, source, a2, a3));
            Py_DECREF(a1);
        }
        else
        {
            sipIsErr = 1;
        }
#line 1412 "sipQtCoreQCoreApplication.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const char * a0;
        PyObject * a1;
        const char * a2;
        QCoreApplication::Encoding a3;
        int a4;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"sP0sEi",&a0,&a1,&a2,sipType_QCoreApplication_Encoding,&a3,&a4))
        {
            QString *sipRes = 0;
            int sipIsErr = 0;

#line 227 "sip/QtCore/qcoreapplication.sip"
        const char *source = qpycore_encode(&a1, a3);
        
        if (source)
        {
            sipRes = new QString(QCoreApplication::translate(a0, source, a2, a3, a4));
            Py_DECREF(a1);
        }
        else
        {
            sipIsErr = 1;
        }
#line 1445 "sipQtCoreQCoreApplication.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_translate);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_flush(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_flush(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::flush();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_flush);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_setAttribute(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setAttribute(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Qt::ApplicationAttribute a0;
        bool a1 = 1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"E|b",sipType_Qt_ApplicationAttribute,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::setAttribute(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_setAttribute);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_testAttribute(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_testAttribute(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Qt::ApplicationAttribute a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"E",sipType_Qt_ApplicationAttribute,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QCoreApplication::testAttribute(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_testAttribute);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_quit(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_quit(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::quit();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_quit);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_event(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_event(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQCoreApplication *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QCoreApplication,&sipCpp,sipType_QEvent,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_event(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_event);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_setApplicationVersion(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_setApplicationVersion(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1",sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            QCoreApplication::setApplicationVersion(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_setApplicationVersion);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_applicationVersion(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_applicationVersion(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QCoreApplication::applicationVersion());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_applicationVersion);

    return NULL;
}


extern "C" {static PyObject *meth_QCoreApplication_applicationPid(PyObject *, PyObject *);}
static PyObject *meth_QCoreApplication_applicationPid(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QCoreApplication::applicationPid();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QCoreApplication,sipName_applicationPid);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QCoreApplication(void *, const sipTypeDef *);}
static void *cast_QCoreApplication(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QCoreApplication)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QCoreApplication *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QCoreApplication(void *, int);}
static void release_QCoreApplication(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQCoreApplication *>(sipCppV);
    else
        delete reinterpret_cast<QCoreApplication *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QCoreApplication(sipSimpleWrapper *);}
static void dealloc_QCoreApplication(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQCoreApplication *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QCoreApplication(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QCoreApplication(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QCoreApplication(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    sipQCoreApplication *sipCpp = 0;

    if (!sipCpp)
    {
        int sipIsErr = 0;
        PyObject * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"T",&PyList_Type,&a0))
        {
#line 83 "sip/QtCore/qcoreapplication.sip"
        // The Python interface is a list of argument strings that is modified.
        
        int argc;
        char **argv;
        
        // Convert the list.
        if ((argv = qpycore_ArgvToC(a0, argc)) == NULL)
            sipIsErr = 1;
        else
        {
            // Create it now the arguments are right.
            static int nargc;
            nargc = argc;
        
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQCoreApplication(nargc, argv);
            Py_END_ALLOW_THREADS
        
            // Now modify the original list.
            qpycore_UpdatePyArgv(a0, argc, argv);
        }
#line 1749 "sipQtCoreQCoreApplication.cpp"

            if (sipIsErr)
                return 0;

            sipCallHook("__pyQtQAppHook__");
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QCoreApplication[] = {{111, 255, 1}};


static PyMethodDef methods_QCoreApplication[] = {
    {SIP_MLNAME_CAST(sipName_addLibraryPath), meth_QCoreApplication_addLibraryPath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_applicationDirPath), meth_QCoreApplication_applicationDirPath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_applicationFilePath), meth_QCoreApplication_applicationFilePath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_applicationName), meth_QCoreApplication_applicationName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_applicationPid), meth_QCoreApplication_applicationPid, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_applicationVersion), meth_QCoreApplication_applicationVersion, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_argc), meth_QCoreApplication_argc, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_arguments), meth_QCoreApplication_arguments, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_argv), meth_QCoreApplication_argv, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QCoreApplication_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_closingDown), meth_QCoreApplication_closingDown, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QCoreApplication_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QCoreApplication_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QCoreApplication_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_event), meth_QCoreApplication_event, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_exec_), meth_QCoreApplication_exec_, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_exit), meth_QCoreApplication_exit, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_flush), meth_QCoreApplication_flush, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasPendingEvents), meth_QCoreApplication_hasPendingEvents, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_installTranslator), meth_QCoreApplication_installTranslator, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_instance), meth_QCoreApplication_instance, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_libraryPaths), meth_QCoreApplication_libraryPaths, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_notify), meth_QCoreApplication_notify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_organizationDomain), meth_QCoreApplication_organizationDomain, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_organizationName), meth_QCoreApplication_organizationName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_postEvent), meth_QCoreApplication_postEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_processEvents), meth_QCoreApplication_processEvents, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_quit), meth_QCoreApplication_quit, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QCoreApplication_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeLibraryPath), meth_QCoreApplication_removeLibraryPath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removePostedEvents), meth_QCoreApplication_removePostedEvents, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeTranslator), meth_QCoreApplication_removeTranslator, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sendEvent), meth_QCoreApplication_sendEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sendPostedEvents), meth_QCoreApplication_sendPostedEvents, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setApplicationName), meth_QCoreApplication_setApplicationName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setApplicationVersion), meth_QCoreApplication_setApplicationVersion, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAttribute), meth_QCoreApplication_setAttribute, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setLibraryPaths), meth_QCoreApplication_setLibraryPaths, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setOrganizationDomain), meth_QCoreApplication_setOrganizationDomain, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setOrganizationName), meth_QCoreApplication_setOrganizationName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_startingUp), meth_QCoreApplication_startingUp, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_testAttribute), meth_QCoreApplication_testAttribute, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QCoreApplication_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_translate), meth_QCoreApplication_translate, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QCoreApplication[] = {
    {sipName_CodecForTr, QCoreApplication::CodecForTr, 27},
    {sipName_DefaultCodec, QCoreApplication::DefaultCodec, 27},
    {sipName_UnicodeUTF8, QCoreApplication::UnicodeUTF8, 27},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QCoreApplication[] = {
    {"aboutToQuit()", 0},
    {0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QCoreApplication = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QCoreApplication,
        {0}
    },
    {
        sipNameNr_QCoreApplication,
        {0, 0, 1},
        44, methods_QCoreApplication,
        3, enummembers_QCoreApplication,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QCoreApplication,
    0,
    init_QCoreApplication,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QCoreApplication,
    0,
    0,
    0,
    release_QCoreApplication,
    cast_QCoreApplication,
    0,
    0,
    0
},
    &QCoreApplication::staticMetaObject,
    0,
    pyqt4_signals_QCoreApplication
};

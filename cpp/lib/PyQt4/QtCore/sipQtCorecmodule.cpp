/*
 * Module code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:19 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 39 "sipQtCorecmodule.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 42 "sipQtCorecmodule.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 45 "sipQtCorecmodule.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 48 "sipQtCorecmodule.cpp"
#line 41 "sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 76 "sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 53 "sipQtCorecmodule.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 56 "sipQtCorecmodule.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 59 "sipQtCorecmodule.cpp"
#line 41 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 62 "sipQtCorecmodule.cpp"
#line 41 "sip/QtCore/qabstractfileengine.sip"
#include <qabstractfileengine.h>
#line 65 "sipQtCorecmodule.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 68 "sipQtCorecmodule.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 71 "sipQtCorecmodule.cpp"
#line 131 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 74 "sipQtCorecmodule.cpp"
#line 41 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 77 "sipQtCorecmodule.cpp"
#line 41 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 80 "sipQtCorecmodule.cpp"
#line 653 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 83 "sipQtCorecmodule.cpp"
#line 346 "sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 86 "sipQtCorecmodule.cpp"
#line 41 "sip/QtCore/qabstractfileengine.sip"
#include <qabstractfileengine.h>
#line 89 "sipQtCorecmodule.cpp"
#line 41 "sip/QtCore/qdir.sip"
#include <qdir.h>
#line 92 "sipQtCorecmodule.cpp"
#line 37 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 95 "sipQtCorecmodule.cpp"
#line 37 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 98 "sipQtCorecmodule.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 101 "sipQtCorecmodule.cpp"
#line 41 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 104 "sipQtCorecmodule.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 107 "sipQtCorecmodule.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 110 "sipQtCorecmodule.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 113 "sipQtCorecmodule.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 116 "sipQtCorecmodule.cpp"
#line 149 "sip/QtCore/qmap.sip"
#include <qmap.h>
#line 119 "sipQtCorecmodule.cpp"
#line 37 "sip/QtCore/qfileinfo.sip"
#include <qfileinfo.h>
#line 122 "sipQtCorecmodule.cpp"
#line 323 "sip/QtCore/qlist.sip"
#include <qlist.h>
#include <qpair.h>
#line 126 "sipQtCorecmodule.cpp"
#line 37 "sip/QtCore/qsocketnotifier.sip"
#include <qsocketnotifier.h>
#line 129 "sipQtCorecmodule.cpp"
#line 41 "sip/QtCore/qeventloop.sip"
#include <qeventloop.h>
#line 132 "sipQtCorecmodule.cpp"
#line 41 "sip/QtCore/qbitarray.sip"
#include <qbitarray.h>
#line 135 "sipQtCorecmodule.cpp"
#line 41 "sip/QtCore/qtextstream.sip"
#include <qtextstream.h>
#line 138 "sipQtCorecmodule.cpp"
#line 78 "sip/QtCore/qchar.sip"
#include <qchar.h>
#line 141 "sipQtCorecmodule.cpp"
#line 41 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 144 "sipQtCorecmodule.cpp"
#line 75 "sip/QtCore/qglobal.sip"
#include <qglobal.h>
#line 147 "sipQtCorecmodule.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 150 "sipQtCorecmodule.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 153 "sipQtCorecmodule.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 156 "sipQtCorecmodule.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 159 "sipQtCorecmodule.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 162 "sipQtCorecmodule.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 165 "sipQtCorecmodule.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 168 "sipQtCorecmodule.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 171 "sipQtCorecmodule.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 174 "sipQtCorecmodule.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 177 "sipQtCorecmodule.cpp"
#line 86 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 180 "sipQtCorecmodule.cpp"
#line 37 "sip/QtCore/qbasictimer.sip"
#include <qbasictimer.h>
#line 183 "sipQtCorecmodule.cpp"
#line 37 "sip/QtCore/qbytearraymatcher.sip"
#include <qbytearraymatcher.h>
#line 186 "sipQtCorecmodule.cpp"
#line 128 "sip/QtCore/qchar.sip"
#include <qchar.h>
#line 189 "sipQtCorecmodule.cpp"
#line 41 "sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 192 "sipQtCorecmodule.cpp"
#line 200 "sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 195 "sipQtCorecmodule.cpp"
#line 41 "sip/QtCore/qdir.sip"
#include <qdir.h>
#line 198 "sipQtCorecmodule.cpp"
#line 45 "sip/QtCore/qdiriterator.sip"
#include <qdiriterator.h>
#line 201 "sipQtCorecmodule.cpp"
#line 41 "sip/QtCore/qfile.sip"
#include <qfile.h>
#line 204 "sipQtCorecmodule.cpp"
#line 41 "sip/QtCore/qlibrary.sip"
#include <qlibrary.h>
#line 207 "sipQtCorecmodule.cpp"
#line 41 "sip/QtCore/qline.sip"
#include <qline.h>
#line 210 "sipQtCorecmodule.cpp"
#line 109 "sip/QtCore/qline.sip"
#include <qline.h>
#line 213 "sipQtCorecmodule.cpp"
#line 41 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 216 "sipQtCorecmodule.cpp"
#line 37 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 219 "sipQtCorecmodule.cpp"
#line 158 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 222 "sipQtCorecmodule.cpp"
#line 180 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 225 "sipQtCorecmodule.cpp"
#line 222 "sip/QtCore/qmetaobject.sip"
#include <qmetaobject.h>
#line 228 "sipQtCorecmodule.cpp"
#line 37 "sip/QtCore/qmetatype.sip"
#include <qmetatype.h>
#line 231 "sipQtCorecmodule.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 234 "sipQtCorecmodule.cpp"
#line 41 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 237 "sipQtCorecmodule.cpp"
#line 94 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 240 "sipQtCorecmodule.cpp"
#line 41 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 243 "sipQtCorecmodule.cpp"
#line 160 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 246 "sipQtCorecmodule.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 249 "sipQtCorecmodule.cpp"
#line 100 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 252 "sipQtCorecmodule.cpp"
#line 89 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 255 "sipQtCorecmodule.cpp"
#line 89 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 258 "sipQtCorecmodule.cpp"
#line 665 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 261 "sipQtCorecmodule.cpp"
#line 62 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 264 "sipQtCorecmodule.cpp"
#line 37 "sip/QtCore/qstringmatcher.sip"
#include <qstringmatcher.h>
#line 267 "sipQtCorecmodule.cpp"
#line 39 "sip/QtCore/qtextboundaryfinder.sip"
#include <qtextboundaryfinder.h>
#line 270 "sipQtCorecmodule.cpp"
#line 39 "sip/QtCore/qtextboundaryfinder.sip"
#include <qtextboundaryfinder.h>
#line 273 "sipQtCorecmodule.cpp"
#line 41 "sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 276 "sipQtCorecmodule.cpp"
#line 41 "sip/QtCore/qtextstream.sip"
#include <qtextstream.h>
#line 279 "sipQtCorecmodule.cpp"
#line 41 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 282 "sipQtCorecmodule.cpp"
#line 41 "sip/QtCore/quuid.sip"
#include <quuid.h>
#line 285 "sipQtCorecmodule.cpp"
#line 39 "sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 288 "sipQtCorecmodule.cpp"
#line 65 "sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 291 "sipQtCorecmodule.cpp"
#line 255 "sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 294 "sipQtCorecmodule.cpp"
#line 279 "sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 297 "sipQtCorecmodule.cpp"
#line 303 "sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 300 "sipQtCorecmodule.cpp"
#line 329 "sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 303 "sipQtCorecmodule.cpp"

#define sipQtCreateUniversalSignal          0
#define sipQtFindUniversalSignal            0
#define sipQtEmitSignal                     0
#define sipQtConnectPySignal                0
#define sipQtDisconnectPySignal             0

/* Define the strings used by this module. */
const char sipStrings_QtCore[] = {
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'Q', 'X', 'm', 'l', 'S', 't', 'r', 'e', 'a', 'm', 'N', 'a', 'm', 'e', 's', 'p', 'a', 'c', 'e', 'D', 'e', 'c', 'l', 'a', 'r', 'a', 't', 'i', 'o', 'n', '>', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'Q', 'X', 'm', 'l', 'S', 't', 'r', 'e', 'a', 'm', 'N', 'o', 't', 'a', 't', 'i', 'o', 'n', 'D', 'e', 'c', 'l', 'a', 'r', 'a', 't', 'i', 'o', 'n', '>', 0,
    'Q', 'S', 'y', 's', 't', 'e', 'm', 'S', 'e', 'm', 'a', 'p', 'h', 'o', 'r', 'e', ':', ':', 'S', 'y', 's', 't', 'e', 'm', 'S', 'e', 'm', 'a', 'p', 'h', 'o', 'r', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    'S', 'o', 'u', 't', 'h', 'G', 'e', 'o', 'r', 'g', 'i', 'a', 'A', 'n', 'd', 'T', 'h', 'e', 'S', 'o', 'u', 't', 'h', 'S', 'a', 'n', 'd', 'w', 'i', 'c', 'h', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'P', 'a', 'i', 'r', '<', 'Q', 'B', 'y', 't', 'e', 'A', 'r', 'r', 'a', 'y', ',', 'Q', 'B', 'y', 't', 'e', 'A', 'r', 'r', 'a', 'y', '>', ' ', '>', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'Q', 'X', 'm', 'l', 'S', 't', 'r', 'e', 'a', 'm', 'E', 'n', 't', 'i', 't', 'y', 'D', 'e', 'c', 'l', 'a', 'r', 'a', 't', 'i', 'o', 'n', '>', 0,
    'Q', 'T', 'e', 'x', 't', 'B', 'o', 'u', 'n', 'd', 'a', 'r', 'y', 'F', 'i', 'n', 'd', 'e', 'r', ':', ':', 'B', 'o', 'u', 'n', 'd', 'a', 'r', 'y', 'R', 'e', 'a', 's', 'o', 'n', 's', 0,
    'Q', 'T', 'e', 'x', 't', 'B', 'o', 'u', 'n', 'd', 'a', 'r', 'y', 'F', 'i', 'n', 'd', 'e', 'r', ':', ':', 'B', 'o', 'u', 'n', 'd', 'a', 'r', 'y', 'R', 'e', 'a', 's', 'o', 'n', 0,
    'Q', 'T', 'e', 'x', 't', 'B', 'o', 'u', 'n', 'd', 'a', 'r', 'y', 'F', 'i', 'n', 'd', 'e', 'r', ':', ':', 'B', 'o', 'u', 'n', 'd', 'a', 'r', 'y', 'T', 'y', 'p', 'e', 0,
    'A', 'A', '_', 'D', 'o', 'n', 't', 'C', 'r', 'e', 'a', 't', 'e', 'N', 'a', 't', 'i', 'v', 'e', 'W', 'i', 'd', 'g', 'e', 't', 'S', 'i', 'b', 'l', 'i', 'n', 'g', 's', 0,
    'W', 'A', '_', 'X', '1', '1', 'N', 'e', 't', 'W', 'm', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', 'N', 'o', 't', 'i', 'f', 'i', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'W', 'A', '_', 'X', '1', '1', 'N', 'e', 't', 'W', 'm', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', 'D', 'r', 'o', 'p', 'D', 'o', 'w', 'n', 'M', 'e', 'n', 'u', 0,
    'Q', 'S', 'h', 'a', 'r', 'e', 'd', 'M', 'e', 'm', 'o', 'r', 'y', ':', ':', 'S', 'h', 'a', 'r', 'e', 'd', 'M', 'e', 'm', 'o', 'r', 'y', 'E', 'r', 'r', 'o', 'r', 0,
    'U', 'n', 'i', 't', 'e', 'd', 'S', 't', 'a', 't', 'e', 's', 'M', 'i', 'n', 'o', 'r', 'O', 'u', 't', 'l', 'y', 'i', 'n', 'g', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'L', 'a', 'y', 'o', 'u', 't', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'A', 'A', '_', 'M', 'S', 'W', 'i', 'n', 'd', 'o', 'w', 's', 'U', 's', 'e', 'D', 'i', 'r', 'e', 'c', 't', '3', 'D', 'B', 'y', 'D', 'e', 'f', 'a', 'u', 'l', 't', 0,
    'Q', 'T', 'e', 'x', 't', 'S', 't', 'r', 'e', 'a', 'm', ':', ':', 'R', 'e', 'a', 'l', 'N', 'u', 'm', 'b', 'e', 'r', 'N', 'o', 't', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'P', 'a', 'i', 'r', '<', 'Q', 'S', 't', 'r', 'i', 'n', 'g', ',', 'Q', 'S', 't', 'r', 'i', 'n', 'g', '>', ' ', '>', 0,
    'Q', 'X', 'm', 'l', 'S', 't', 'r', 'e', 'a', 'm', 'N', 'a', 'm', 'e', 's', 'p', 'a', 'c', 'e', 'D', 'e', 'c', 'l', 'a', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'E', 'v', 'e', 'n', 't', 'L', 'o', 'o', 'p', ':', ':', 'P', 'r', 'o', 'c', 'e', 's', 's', 'E', 'v', 'e', 'n', 't', 's', 'F', 'l', 'a', 'g', 's', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'F', 'i', 'l', 'e', 'E', 'n', 'g', 'i', 'n', 'e', ':', ':', 'F', 'i', 'l', 'e', 'O', 'w', 'n', 'e', 'r', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'F', 'i', 'l', 'e', 'E', 'n', 'g', 'i', 'n', 'e', ':', ':', 'F', 'i', 'l', 'e', 'F', 'l', 'a', 'g', 's', 0,
    'W', 'A', '_', 'X', '1', '1', 'N', 'e', 't', 'W', 'm', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', 'P', 'o', 'p', 'u', 'p', 'M', 'e', 'n', 'u', 0,
    'a', 'd', 'd', 'E', 'x', 't', 'r', 'a', 'N', 'a', 'm', 'e', 's', 'p', 'a', 'c', 'e', 'D', 'e', 'c', 'l', 'a', 'r', 'a', 't', 'i', 'o', 'n', 's', 0,
    'Q', 'X', 'm', 'l', 'S', 't', 'r', 'e', 'a', 'm', 'N', 'o', 't', 'a', 't', 'i', 'o', 'n', 'D', 'e', 'c', 'l', 'a', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'R', 'e', 'a', 'd', 'W', 'r', 'i', 't', 'e', 'L', 'o', 'c', 'k', ':', ':', 'R', 'e', 'c', 'u', 'r', 's', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    'Q', 'L', 'i', 'b', 'r', 'a', 'r', 'y', 'I', 'n', 'f', 'o', ':', ':', 'L', 'i', 'b', 'r', 'a', 'r', 'y', 'L', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'E', 'v', 'e', 'n', 't', 'L', 'o', 'o', 'p', ':', ':', 'P', 'r', 'o', 'c', 'e', 's', 's', 'E', 'v', 'e', 'n', 't', 's', 'F', 'l', 'a', 'g', 0,
    'Q', 'C', 'r', 'y', 'p', 't', 'o', 'g', 'r', 'a', 'p', 'h', 'i', 'c', 'H', 'a', 's', 'h', ':', ':', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'M', 'o', 'u', 's', 'e', 'D', 'o', 'u', 'b', 'l', 'e', 'C', 'l', 'i', 'c', 'k', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'F', 'i', 'l', 'e', 'E', 'n', 'g', 'i', 'n', 'e', ':', ':', 'F', 'i', 'l', 'e', 'T', 'i', 'm', 'e', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'F', 'i', 'l', 'e', 'E', 'n', 'g', 'i', 'n', 'e', ':', ':', 'F', 'i', 'l', 'e', 'N', 'a', 'm', 'e', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'F', 'i', 'l', 'e', 'E', 'n', 'g', 'i', 'n', 'e', ':', ':', 'F', 'i', 'l', 'e', 'F', 'l', 'a', 'g', 0,
    'a', 'd', 'd', 'E', 'x', 't', 'r', 'a', 'N', 'a', 'm', 'e', 's', 'p', 'a', 'c', 'e', 'D', 'e', 'c', 'l', 'a', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'S', 'y', 's', 't', 'e', 'm', 'S', 'e', 'm', 'a', 'p', 'h', 'o', 'r', 'e', ':', ':', 'A', 'c', 'c', 'e', 's', 's', 'M', 'o', 'd', 'e', 0,
    'Q', 'P', 'r', 'o', 'c', 'e', 's', 's', ':', ':', 'P', 'r', 'o', 'c', 'e', 's', 's', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'M', 'o', 'd', 'e', 0,
    'C', 'o', 'm', 'b', 'i', 'n', 'i', 'n', 'g', '_', 'A', 'b', 'o', 'v', 'e', 'R', 'i', 'g', 'h', 't', 'A', 't', 't', 'a', 'c', 'h', 'e', 'd', 0,
    'C', 'o', 'm', 'b', 'i', 'n', 'i', 'n', 'g', '_', 'B', 'e', 'l', 'o', 'w', 'R', 'i', 'g', 'h', 't', 'A', 't', 't', 'a', 'c', 'h', 'e', 'd', 0,
    'W', 'A', '_', 'X', '1', '1', 'N', 'e', 't', 'W', 'm', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', 'T', 'o', 'o', 'l', 'T', 'i', 'p', 0,
    'W', 'A', '_', 'X', '1', '1', 'N', 'e', 't', 'W', 'm', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', 'U', 't', 'i', 'l', 'i', 't', 'y', 0,
    'W', 'A', '_', 'X', '1', '1', 'N', 'e', 't', 'W', 'm', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', 'T', 'o', 'o', 'l', 'B', 'a', 'r', 0,
    'W', 'A', '_', 'X', '1', '1', 'N', 'e', 't', 'W', 'm', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', 'D', 'e', 's', 'k', 't', 'o', 'p', 0,
    'W', 'A', '_', 'D', 'o', 'n', 't', 'C', 'r', 'e', 'a', 't', 'e', 'N', 'a', 't', 'i', 'v', 'e', 'A', 'n', 'c', 'e', 's', 't', 'o', 'r', 's', 0,
    'W', 'A', '_', 'T', 'r', 'a', 'n', 's', 'p', 'a', 'r', 'e', 'n', 't', 'F', 'o', 'r', 'M', 'o', 'u', 's', 'e', 'E', 'v', 'e', 'n', 't', 's', 0,
    'W', 'A', '_', 'N', 'o', 'C', 'h', 'i', 'l', 'd', 'E', 'v', 'e', 'n', 't', 's', 'F', 'r', 'o', 'm', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 0,
    'M', 'S', 'W', 'i', 'n', 'd', 'o', 'w', 's', 'F', 'i', 'x', 'e', 'd', 'S', 'i', 'z', 'e', 'D', 'i', 'a', 'l', 'o', 'g', 'H', 'i', 'n', 't', 0,
    'P', 'y', 'Q', 't', '4', '.', 'Q', 't', 'C', 'o', 'r', 'e', '.', 'p', 'y', 'q', 't', 'W', 'r', 'a', 'p', 'p', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    'P', 'r', 'e', 'm', 'a', 't', 'u', 'r', 'e', 'E', 'n', 'd', 'O', 'f', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 'E', 'r', 'r', 'o', 'r', 0,
    'p', 'r', 'o', 'c', 'e', 's', 's', 'i', 'n', 'g', 'I', 'n', 's', 't', 'r', 'u', 'c', 't', 'i', 'o', 'n', 'T', 'a', 'r', 'g', 'e', 't', 0,
    'Q', 'X', 'm', 'l', 'S', 't', 'r', 'e', 'a', 'm', 'R', 'e', 'a', 'd', 'e', 'r', ':', ':', 'T', 'o', 'k', 'e', 'n', 'T', 'y', 'p', 'e', 0,
    'Q', 'X', 'm', 'l', 'S', 't', 'r', 'e', 'a', 'm', 'E', 'n', 't', 'i', 't', 'y', 'D', 'e', 'c', 'l', 'a', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 'T', 'e', 'x', 't', 'S', 't', 'r', 'e', 'a', 'm', ':', ':', 'F', 'i', 'e', 'l', 'd', 'A', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 0,
    'Q', 'T', 'e', 'x', 't', 'C', 'o', 'd', 'e', 'c', ':', ':', 'C', 'o', 'n', 'v', 'e', 'r', 's', 'i', 'o', 'n', 'F', 'l', 'a', 'g', 's', 0,
    'B', 'r', 'i', 't', 'i', 's', 'h', 'I', 'n', 'd', 'i', 'a', 'n', 'O', 'c', 'e', 'a', 'n', 'T', 'e', 'r', 'r', 'i', 't', 'o', 'r', 'y', 0,
    'Q', 'D', 'i', 'r', 'I', 't', 'e', 'r', 'a', 't', 'o', 'r', ':', ':', 'I', 't', 'e', 'r', 'a', 't', 'o', 'r', 'F', 'l', 'a', 'g', 's', 0,
    'Q', 'D', 'y', 'n', 'a', 'm', 'i', 'c', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'C', 'h', 'a', 'n', 'g', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'W', 'i', 'n', 'd', 'o', 'w', 'I', 'c', 'o', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'C', 'o', 'm', 'b', 'i', 'n', 'i', 'n', 'g', '_', 'A', 'b', 'o', 'v', 'e', 'L', 'e', 'f', 't', 'A', 't', 't', 'a', 'c', 'h', 'e', 'd', 0,
    'C', 'o', 'm', 'b', 'i', 'n', 'i', 'n', 'g', '_', 'B', 'e', 'l', 'o', 'w', 'L', 'e', 'f', 't', 'A', 't', 't', 'a', 'c', 'h', 'e', 'd', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'F', 'i', 'l', 'e', 'E', 'n', 'g', 'i', 'n', 'e', 'I', 't', 'e', 'r', 'a', 't', 'o', 'r', 0,
    'W', 'A', '_', 'X', '1', '1', 'N', 'e', 't', 'W', 'm', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', 'D', 'i', 'a', 'l', 'o', 'g', 0,
    'W', 'A', '_', 'X', '1', '1', 'N', 'e', 't', 'W', 'm', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', 'S', 'p', 'l', 'a', 's', 'h', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'C', 'o', 'n', 't', 'e', 'x', 't', 'H', 'e', 'l', 'p', 'B', 'u', 't', 't', 'o', 'n', 'H', 'i', 'n', 't', 0,
    'w', 'r', 'i', 't', 'e', 'P', 'r', 'o', 'c', 'e', 's', 's', 'i', 'n', 'g', 'I', 'n', 's', 't', 'r', 'u', 'c', 't', 'i', 'o', 'n', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'A', 'l', 'l', 'E', 'n', 'c', 'o', 'd', 'e', 'd', 'Q', 'u', 'e', 'r', 'y', 'I', 't', 'e', 'm', 's', 0,
    'Q', 'T', 'e', 'x', 't', 'C', 'o', 'd', 'e', 'c', ':', ':', 'C', 'o', 'n', 'v', 'e', 'r', 't', 'e', 'r', 'S', 't', 'a', 't', 'e', 0,
    'Q', 'T', 'e', 'x', 't', 'C', 'o', 'd', 'e', 'c', ':', ':', 'C', 'o', 'n', 'v', 'e', 'r', 's', 'i', 'o', 'n', 'F', 'l', 'a', 'g', 0,
    'Q', 'S', 't', 'r', 'i', 'n', 'g', ':', ':', 'N', 'o', 'r', 'm', 'a', 'l', 'i', 'z', 'a', 't', 'i', 'o', 'n', 'F', 'o', 'r', 'm', 0,
    'S', 'e', 'c', 't', 'i', 'o', 'n', 'C', 'a', 's', 'e', 'I', 'n', 's', 'e', 'n', 's', 'i', 't', 'i', 'v', 'e', 'S', 'e', 'p', 's', 0,
    'Q', 'L', 'o', 'c', 'a', 'l', 'e', ':', ':', 'M', 'e', 'a', 's', 'u', 'r', 'e', 'm', 'e', 'n', 't', 'S', 'y', 's', 't', 'e', 'm', 0,
    'S', 'v', 'a', 'l', 'b', 'a', 'r', 'd', 'A', 'n', 'd', 'J', 'a', 'n', 'M', 'a', 'y', 'e', 'n', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'P', 'a', 'i', 'r', '<', 'q', 'r', 'e', 'a', 'l', ',', 'q', 'r', 'e', 'a', 'l', '>', ' ', '>', 0,
    'Q', 'D', 'i', 'r', 'I', 't', 'e', 'r', 'a', 't', 'o', 'r', ':', ':', 'I', 't', 'e', 'r', 'a', 't', 'o', 'r', 'F', 'l', 'a', 'g', 0,
    'Q', 'C', 'o', 'r', 'e', 'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', ':', ':', 'E', 'n', 'c', 'o', 'd', 'i', 'n', 'g', 0,
    'O', 'b', 'j', 'e', 'c', 't', 'R', 'e', 'p', 'l', 'a', 'c', 'e', 'm', 'e', 'n', 't', 'C', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'F', 'i', 'l', 'e', 'E', 'n', 'g', 'i', 'n', 'e', 'H', 'a', 'n', 'd', 'l', 'e', 'r', 0,
    'I', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 's', 'I', 't', 'e', 'm', 'B', 'o', 'u', 'n', 'd', 'i', 'n', 'g', 'R', 'e', 'c', 't', 0,
    'A', 'A', '_', 'I', 'm', 'm', 'e', 'd', 'i', 'a', 't', 'e', 'W', 'i', 'd', 'g', 'e', 't', 'C', 'r', 'e', 'a', 't', 'i', 'o', 'n', 0,
    'W', 'i', 'd', 'g', 'e', 't', 'W', 'i', 't', 'h', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 'S', 'h', 'o', 'r', 't', 'c', 'u', 't', 0,
    'K', 'e', 'e', 'p', 'A', 's', 'p', 'e', 'c', 't', 'R', 'a', 't', 'i', 'o', 'B', 'y', 'E', 'x', 'p', 'a', 'n', 'd', 'i', 'n', 'g', 0,
    'W', 'A', '_', 'X', '1', '1', 'N', 'e', 't', 'W', 'm', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', 'C', 'o', 'm', 'b', 'o', 0,
    'W', 'A', '_', 'M', 'a', 'c', 'A', 'l', 'w', 'a', 'y', 's', 'S', 'h', 'o', 'w', 'T', 'o', 'o', 'l', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'W', 'A', '_', 'W', 'S', 't', 'a', 't', 'e', '_', 'E', 'x', 'p', 'l', 'i', 'c', 'i', 't', 'S', 'h', 'o', 'w', 'H', 'i', 'd', 'e', 0,
    'M', 'a', 'c', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'o', 'o', 'l', 'B', 'a', 'r', 'B', 'u', 't', 't', 'o', 'n', 'H', 'i', 'n', 't', 0,
    'X', '1', '1', 'B', 'y', 'p', 'a', 's', 's', 'W', 'i', 'n', 'd', 'o', 'w', 'M', 'a', 'n', 'a', 'g', 'e', 'r', 'H', 'i', 'n', 't', 0,
    'p', 'r', 'o', 'c', 'e', 's', 's', 'i', 'n', 'g', 'I', 'n', 's', 't', 'r', 'u', 'c', 't', 'i', 'o', 'n', 'D', 'a', 't', 'a', 0,
    'a', 'l', 'l', 'E', 'n', 'c', 'o', 'd', 'e', 'd', 'Q', 'u', 'e', 'r', 'y', 'I', 't', 'e', 'm', 'V', 'a', 'l', 'u', 'e', 's', 0,
    'S', 'e', 'c', 't', 'i', 'o', 'n', 'I', 'n', 'c', 'l', 'u', 'd', 'e', 'T', 'r', 'a', 'i', 'l', 'i', 'n', 'g', 'S', 'e', 'p', 0,
    'Q', 'S', 'h', 'a', 'r', 'e', 'd', 'M', 'e', 'm', 'o', 'r', 'y', ':', ':', 'A', 'c', 'c', 'e', 's', 's', 'M', 'o', 'd', 'e', 0,
    'S', 't', 'V', 'i', 'n', 'c', 'e', 'n', 't', 'A', 'n', 'd', 'T', 'h', 'e', 'G', 'r', 'e', 'n', 'a', 'd', 'i', 'n', 'e', 's', 0,
    'D', 'e', 'm', 'o', 'c', 'r', 'a', 't', 'i', 'c', 'R', 'e', 'p', 'u', 'b', 'l', 'i', 'c', 'O', 'f', 'K', 'o', 'r', 'e', 'a', 0,
    'F', 'r', 'e', 'n', 'c', 'h', 'S', 'o', 'u', 't', 'h', 'e', 'r', 'n', 'T', 'e', 'r', 'r', 'i', 't', 'o', 'r', 'i', 'e', 's', 0,
    'D', 'e', 'm', 'o', 'c', 'r', 'a', 't', 'i', 'c', 'R', 'e', 'p', 'u', 'b', 'l', 'i', 'c', 'O', 'f', 'C', 'o', 'n', 'g', 'o', 0,
    'E', 'x', 'p', 'o', 'r', 't', 'E', 'x', 't', 'e', 'r', 'n', 'a', 'l', 'S', 'y', 'm', 'b', 'o', 'l', 's', 'H', 'i', 'n', 't', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'M', 'o', 'u', 's', 'e', 'R', 'e', 'l', 'e', 'a', 's', 'e', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'P', 'e', 'r', 's', 'i', 's', 't', 'e', 'n', 't', 'I', 'n', 'd', 'e', 'x', 'L', 'i', 's', 't', 0,
    'L', 'i', 'n', 'k', 's', 'A', 'c', 'c', 'e', 's', 's', 'i', 'b', 'l', 'e', 'B', 'y', 'K', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 0,
    'A', 'c', 'c', 'e', 's', 's', 'i', 'b', 'l', 'e', 'D', 'e', 's', 'c', 'r', 'i', 'p', 't', 'i', 'o', 'n', 'R', 'o', 'l', 'e', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'S', 'e', 'm', 'i', 'v', 'o', 'i', 'c', 'e', 'd', '_', 'S', 'o', 'u', 'n', 'd', 0,
    'W', 'A', '_', 'X', '1', '1', 'N', 'e', 't', 'W', 'm', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', 'M', 'e', 'n', 'u', 0,
    'W', 'A', '_', 'X', '1', '1', 'N', 'e', 't', 'W', 'm', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', 'D', 'o', 'c', 'k', 0,
    'W', 'A', '_', 'I', 'n', 'p', 'u', 't', 'M', 'e', 't', 'h', 'o', 'd', 'T', 'r', 'a', 'n', 's', 'p', 'a', 'r', 'e', 'n', 't', 0,
    'W', 'A', '_', 'N', 'o', 'C', 'h', 'i', 'l', 'd', 'E', 'v', 'e', 'n', 't', 's', 'F', 'o', 'r', 'P', 'a', 'r', 'e', 'n', 't', 0,
    'W', 'A', '_', 'P', 'a', 'i', 'n', 't', 'O', 'u', 't', 's', 'i', 'd', 'e', 'P', 'a', 'i', 'n', 't', 'E', 'v', 'e', 'n', 't', 0,
    'B', 'y', 'p', 'a', 's', 's', 'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'P', 'r', 'o', 'x', 'y', 'W', 'i', 'd', 'g', 'e', 't', 0,
    'T', 'e', 'x', 't', 'I', 'n', 'c', 'l', 'u', 'd', 'e', 'T', 'r', 'a', 'i', 'l', 'i', 'n', 'g', 'S', 'p', 'a', 'c', 'e', 's', 0,
    'Q', 'X', 'm', 'l', 'S', 't', 'r', 'e', 'a', 'm', 'E', 'n', 't', 'i', 't', 'y', 'R', 'e', 's', 'o', 'l', 'v', 'e', 'r', 0,
    's', 'e', 't', 'G', 'e', 'n', 'e', 'r', 'a', 't', 'e', 'B', 'y', 't', 'e', 'O', 'r', 'd', 'e', 'r', 'M', 'a', 'r', 'k', 0,
    'Q', 'T', 'e', 'x', 't', 'S', 't', 'r', 'e', 'a', 'm', ':', ':', 'N', 'u', 'm', 'b', 'e', 'r', 'F', 'l', 'a', 'g', 's', 0,
    'S', 'e', 'c', 't', 'i', 'o', 'n', 'I', 'n', 'c', 'l', 'u', 'd', 'e', 'L', 'e', 'a', 'd', 'i', 'n', 'g', 'S', 'e', 'p', 0,
    's', 'e', 't', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'O', 'u', 't', 'p', 'u', 't', 'P', 'r', 'o', 'c', 'e', 's', 's', 0,
    'Q', 'P', 'r', 'o', 'c', 'e', 's', 's', ':', ':', 'P', 'r', 'o', 'c', 'e', 's', 's', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 0,
    'Q', 'S', 'y', 's', 't', 'e', 'm', 'L', 'o', 'c', 'a', 'l', 'e', ':', ':', 'Q', 'u', 'e', 'r', 'y', 'T', 'y', 'p', 'e', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'C', 'o', 'n', 't', 'e', 'x', 't', 'M', 'e', 'n', 'u', 0,
    'A', 'c', 'c', 'e', 's', 's', 'i', 'b', 'i', 'l', 'i', 't', 'y', 'D', 'e', 's', 'c', 'r', 'i', 'p', 't', 'i', 'o', 'n', 0,
    'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'P', 'a', 'l', 'e', 't', 't', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'P', 'u', 'n', 'c', 't', 'u', 'a', 't', 'i', 'o', 'n', '_', 'I', 'n', 'i', 't', 'i', 'a', 'l', 'Q', 'u', 'o', 't', 'e', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 's', 'A', 'b', 'o', 'u', 't', 'T', 'o', 'B', 'e', 'I', 'n', 's', 'e', 'r', 't', 'e', 'd', 0,
    'u', 'n', 'r', 'e', 'g', 'i', 's', 't', 'e', 'r', 'S', 'o', 'c', 'k', 'e', 't', 'N', 'o', 't', 'i', 'f', 'i', 'e', 'r', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'E', 'v', 'e', 'n', 't', 'D', 'i', 's', 'p', 'a', 't', 'c', 'h', 'e', 'r', 0,
    'Q', 't', ':', ':', 'T', 'e', 'x', 't', 'I', 'n', 't', 'e', 'r', 'a', 'c', 't', 'i', 'o', 'n', 'F', 'l', 'a', 'g', 's', 0,
    'T', 'e', 'x', 't', 'S', 'e', 'l', 'e', 'c', 't', 'a', 'b', 'l', 'e', 'B', 'y', 'K', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 0,
    'C', 'o', 'n', 't', 'a', 'i', 'n', 's', 'I', 't', 'e', 'm', 'B', 'o', 'u', 'n', 'd', 'i', 'n', 'g', 'R', 'e', 'c', 't', 0,
    'Q', 't', ':', ':', 'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'T', 'o', 'o', 'l', 'B', 'u', 't', 't', 'o', 'n', 'T', 'e', 'x', 't', 'B', 'e', 's', 'i', 'd', 'e', 'I', 'c', 'o', 'n', 0,
    'B', 'l', 'o', 'c', 'k', 'i', 'n', 'g', 'Q', 'u', 'e', 'u', 'e', 'd', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'Q', 't', ':', ':', 'I', 'm', 'a', 'g', 'e', 'C', 'o', 'n', 'v', 'e', 'r', 's', 'i', 'o', 'n', 'F', 'l', 'a', 'g', 's', 0,
    'W', 'A', '_', 'T', 'r', 'a', 'n', 's', 'l', 'u', 'c', 'e', 'n', 't', 'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 0,
    'W', 'A', '_', 'X', '1', '1', 'N', 'e', 't', 'W', 'm', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', 'D', 'N', 'D', 0,
    'W', 'A', '_', 'S', 'h', 'o', 'w', 'W', 'i', 't', 'h', 'o', 'u', 't', 'A', 'c', 't', 'i', 'v', 'a', 't', 'i', 'n', 'g', 0,
    'W', 'A', '_', 'N', 'o', 'X', '1', '1', 'E', 'v', 'e', 'n', 't', 'C', 'o', 'm', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'M', 'a', 'x', 'i', 'm', 'i', 'z', 'e', 'B', 'u', 't', 't', 'o', 'n', 'H', 'i', 'n', 't', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'M', 'i', 'n', 'i', 'm', 'i', 'z', 'e', 'B', 'u', 't', 't', 'o', 'n', 'H', 'i', 'n', 't', 0,
    'Q', 'H', 'a', 's', 'h', '<', 'Q', 'S', 't', 'r', 'i', 'n', 'g', ',', 'Q', 'V', 'a', 'r', 'i', 'a', 'n', 't', '>', 0,
    's', 'e', 't', 'A', 'u', 't', 'o', 'F', 'o', 'r', 'm', 'a', 't', 't', 'i', 'n', 'g', 'I', 'n', 'd', 'e', 'n', 't', 0,
    'Q', 'X', 'm', 'l', 'S', 't', 'r', 'e', 'a', 'm', 'R', 'e', 'a', 'd', 'e', 'r', ':', ':', 'E', 'r', 'r', 'o', 'r', 0,
    'i', 's', 'P', 'r', 'o', 'c', 'e', 's', 's', 'i', 'n', 'g', 'I', 'n', 's', 't', 'r', 'u', 'c', 't', 'i', 'o', 'n', 0,
    'r', 'e', 's', 'o', 'l', 'v', 'e', 'U', 'n', 'd', 'e', 'c', 'l', 'a', 'r', 'e', 'd', 'E', 'n', 't', 'i', 't', 'y', 0,
    'Q', 'U', 'r', 'l', ':', ':', 'F', 'o', 'r', 'm', 'a', 't', 't', 'i', 'n', 'g', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'q', 'S', 'e', 't', 'R', 'e', 'a', 'l', 'N', 'u', 'm', 'b', 'e', 'r', 'P', 'r', 'e', 'c', 'i', 's', 'i', 'o', 'n', 0,
    'Q', 'T', 'e', 'x', 't', 'S', 't', 'r', 'e', 'a', 'm', ':', ':', 'N', 'u', 'm', 'b', 'e', 'r', 'F', 'l', 'a', 'g', 0,
    'r', 'e', 'a', 'd', 'y', 'R', 'e', 'a', 'd', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'O', 'u', 't', 'p', 'u', 't', 0,
    'Q', 'M', 'e', 't', 'a', 'M', 'e', 't', 'h', 'o', 'd', ':', ':', 'M', 'e', 't', 'h', 'o', 'd', 'T', 'y', 'p', 'e', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'L', 'o', 'c', 'a', 'l', 'e', ':', ':', 'C', 'o', 'u', 'n', 't', 'r', 'y', '>', 0,
    'H', 'e', 'a', 'r', 'd', 'A', 'n', 'd', 'M', 'c', 'D', 'o', 'n', 'a', 'l', 'd', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'Q', 'I', 'O', 'D', 'e', 'v', 'i', 'c', 'e', ':', ':', 'O', 'p', 'e', 'n', 'M', 'o', 'd', 'e', 'F', 'l', 'a', 'g', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'H', 'o', 'v', 'e', 'r', 'L', 'e', 'a', 'v', 'e', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'H', 'o', 'v', 'e', 'r', 'E', 'n', 't', 'e', 'r', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'M', 'o', 'u', 's', 'e', 'P', 'r', 'e', 's', 's', 0,
    'C', 'o', 'm', 'b', 'i', 'n', 'i', 'n', 'g', '_', 'I', 'o', 't', 'a', 'S', 'u', 'b', 's', 'c', 'r', 'i', 'p', 't', 0,
    'C', 'o', 'm', 'b', 'i', 'n', 'i', 'n', 'g', '_', 'A', 'b', 'o', 'v', 'e', 'A', 't', 't', 'a', 'c', 'h', 'e', 'd', 0,
    'C', 'o', 'm', 'b', 'i', 'n', 'i', 'n', 'g', '_', 'R', 'i', 'g', 'h', 't', 'A', 't', 't', 'a', 'c', 'h', 'e', 'd', 0,
    'C', 'o', 'm', 'b', 'i', 'n', 'i', 'n', 'g', '_', 'B', 'e', 'l', 'o', 'w', 'A', 't', 't', 'a', 'c', 'h', 'e', 'd', 0,
    'Q', 'C', 'h', 'a', 'r', ':', ':', 'S', 'p', 'e', 'c', 'i', 'a', 'l', 'C', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r', 0,
    's', 'e', 't', 'S', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'D', 'r', 'a', 'g', 'A', 'c', 't', 'i', 'o', 'n', 's', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 's', 'A', 'b', 'o', 'u', 't', 'T', 'o', 'B', 'e', 'R', 'e', 'm', 'o', 'v', 'e', 'd', 0,
    'Q', 't', ':', ':', 'T', 'e', 'x', 't', 'I', 'n', 't', 'e', 'r', 'a', 'c', 't', 'i', 'o', 'n', 'F', 'l', 'a', 'g', 0,
    'A', 'A', '_', 'M', 'a', 'c', 'P', 'l', 'u', 'g', 'i', 'n', 'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'A', 'A', '_', 'D', 'o', 'n', 't', 'S', 'h', 'o', 'w', 'I', 'c', 'o', 'n', 's', 'I', 'n', 'M', 'e', 'n', 'u', 's', 0,
    'T', 'o', 'o', 'l', 'B', 'u', 't', 't', 'o', 'n', 'T', 'e', 'x', 't', 'U', 'n', 'd', 'e', 'r', 'I', 'c', 'o', 'n', 0,
    'A', 'c', 't', 'i', 'v', 'e', 'W', 'i', 'n', 'd', 'o', 'w', 'F', 'o', 'c', 'u', 's', 'R', 'e', 'a', 's', 'o', 'n', 0,
    'Q', 't', ':', ':', 'I', 'm', 'a', 'g', 'e', 'C', 'o', 'n', 'v', 'e', 'r', 's', 'i', 'o', 'n', 'F', 'l', 'a', 'g', 0,
    'W', 'A', '_', 'M', 'S', 'W', 'i', 'n', 'd', 'o', 'w', 's', 'U', 's', 'e', 'D', 'i', 'r', 'e', 'c', 't', '3', 'D', 0,
    'W', 'A', '_', 'L', 'a', 'y', 'o', 'u', 't', 'U', 's', 'e', 's', 'W', 'i', 'd', 'g', 'e', 't', 'R', 'e', 'c', 't', 0,
    'W', 'A', '_', 'W', 'S', 't', 'a', 't', 'e', '_', 'O', 'w', 'n', 'S', 'i', 'z', 'e', 'P', 'o', 'l', 'i', 'c', 'y', 0,
    'W', 'A', '_', 'W', 'S', 't', 'a', 't', 'e', '_', 'C', 'o', 'n', 'f', 'i', 'g', 'P', 'e', 'n', 'd', 'i', 'n', 'g', 0,
    'W', 'A', '_', 'F', 'o', 'r', 'c', 'e', 'U', 'p', 'd', 'a', 't', 'e', 's', 'D', 'i', 's', 'a', 'b', 'l', 'e', 'd', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'S', 't', 'a', 'y', 's', 'O', 'n', 'B', 'o', 't', 't', 'o', 'm', 'H', 'i', 'n', 't', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'M', 'i', 'n', 'M', 'a', 'x', 'B', 'u', 't', 't', 'o', 'n', 's', 'H', 'i', 'n', 't', 0,
    'T', 'e', 'x', 't', 'J', 'u', 's', 't', 'i', 'f', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'F', 'o', 'r', 'c', 'e', 'd', 0,
    'q', 'U', 'n', 'r', 'e', 'g', 'i', 's', 't', 'e', 'r', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 'D', 'a', 't', 'a', 0,
    'Q', 'M', 'a', 'p', '<', 'Q', 'S', 't', 'r', 'i', 'n', 'g', ',', 'Q', 'V', 'a', 'r', 'i', 'a', 'n', 't', '>', 0,
    'U', 'n', 'e', 'x', 'p', 'e', 'c', 't', 'e', 'd', 'E', 'l', 'e', 'm', 'e', 'n', 't', 'E', 'r', 'r', 'o', 'r', 0,
    's', 'e', 't', 'N', 'a', 'm', 'e', 's', 'p', 'a', 'c', 'e', 'P', 'r', 'o', 'c', 'e', 's', 's', 'i', 'n', 'g', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'E', 'n', 'c', 'o', 'd', 'e', 'd', 'Q', 'u', 'e', 'r', 'y', 'I', 't', 'e', 'm', 0,
    'Q', 'U', 'r', 'l', ':', ':', 'F', 'o', 'r', 'm', 'a', 't', 't', 'i', 'n', 'g', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'Q', 'T', 'e', 'x', 't', 'S', 't', 'r', 'e', 'a', 'm', 'M', 'a', 'n', 'i', 'p', 'u', 'l', 'a', 't', 'o', 'r', 0,
    's', 'e', 't', 'R', 'e', 'a', 'l', 'N', 'u', 'm', 'b', 'e', 'r', 'P', 'r', 'e', 'c', 'i', 's', 'i', 'o', 'n', 0,
    'Q', 'S', 't', 'r', 'i', 'n', 'g', ':', ':', 'S', 'p', 'l', 'i', 't', 'B', 'e', 'h', 'a', 'v', 'i', 'o', 'r', 0,
    'u', 'n', 'r', 'e', 'g', 'i', 's', 't', 'e', 'r', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 'D', 'a', 't', 'a', 0,
    'Q', 'R', 'e', 'g', 'E', 'x', 'p', ':', ':', 'P', 'a', 't', 't', 'e', 'r', 'n', 'S', 'y', 'n', 't', 'a', 'x', 0,
    'r', 'e', 'a', 'd', 'y', 'R', 'e', 'a', 'd', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'E', 'r', 'r', 'o', 'r', 0,
    'Q', 'P', 'r', 'o', 'c', 'e', 's', 's', ':', ':', 'P', 'r', 'o', 'c', 'e', 's', 's', 'S', 't', 'a', 't', 'e', 0,
    'Q', 'P', 'r', 'o', 'c', 'e', 's', 's', ':', ':', 'P', 'r', 'o', 'c', 'e', 's', 's', 'E', 'r', 'r', 'o', 'r', 0,
    'Q', 'G', 'e', 'n', 'e', 'r', 'i', 'c', 'R', 'e', 't', 'u', 'r', 'n', 'A', 'r', 'g', 'u', 'm', 'e', 'n', 't', 0,
    'Q', 'L', 'o', 'c', 'a', 'l', 'e', ':', ':', 'N', 'u', 'm', 'b', 'e', 'r', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'W', 'a', 'l', 'l', 'i', 's', 'A', 'n', 'd', 'F', 'u', 't', 'u', 'n', 'a', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'N', 'o', 'r', 't', 'h', 'e', 'r', 'n', 'M', 'a', 'r', 'i', 'a', 'n', 'a', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'P', 'e', 'o', 'p', 'l', 'e', 's', 'R', 'e', 'p', 'u', 'b', 'l', 'i', 'c', 'O', 'f', 'C', 'o', 'n', 'g', 'o', 0,
    'C', 'e', 'n', 't', 'r', 'a', 'l', 'A', 'f', 'r', 'i', 'c', 'a', 'n', 'R', 'e', 'p', 'u', 'b', 'l', 'i', 'c', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'P', 'a', 'i', 'r', '<', 'i', 'n', 't', ',', 'i', 'n', 't', '>', ' ', '>', 0,
    'E', 'x', 'c', 'l', 'u', 'd', 'e', 'S', 'o', 'c', 'k', 'e', 't', 'N', 'o', 't', 'i', 'f', 'i', 'e', 'r', 's', 0,
    'E', 'x', 'c', 'l', 'u', 'd', 'e', 'U', 's', 'e', 'r', 'I', 'n', 'p', 'u', 't', 'E', 'v', 'e', 'n', 't', 's', 0,
    'Q', 'D', 'a', 't', 'a', 'S', 't', 'r', 'e', 'a', 'm', ':', ':', 'B', 'y', 't', 'e', 'O', 'r', 'd', 'e', 'r', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'D', 'r', 'a', 'g', 'L', 'e', 'a', 'v', 'e', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'D', 'r', 'a', 'g', 'E', 'n', 't', 'e', 'r', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'H', 'o', 'v', 'e', 'r', 'M', 'o', 'v', 'e', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'M', 'o', 'u', 's', 'e', 'M', 'o', 'v', 'e', 0,
    'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'D', 'e', 'a', 'c', 't', 'i', 'v', 'a', 't', 'e', 'd', 0,
    'C', 'o', 'm', 'b', 'i', 'n', 'i', 'n', 'g', '_', 'L', 'e', 'f', 't', 'A', 't', 't', 'a', 'c', 'h', 'e', 'd', 0,
    'P', 'u', 'n', 'c', 't', 'u', 'a', 't', 'i', 'o', 'n', '_', 'F', 'i', 'n', 'a', 'l', 'Q', 'u', 'o', 't', 'e', 0,
    'l', 'a', 'y', 'o', 'u', 't', 'A', 'b', 'o', 'u', 't', 'T', 'o', 'B', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'Q', 't', ':', ':', 'W', 'i', 'n', 'd', 'o', 'w', 'F', 'r', 'a', 'm', 'e', 'S', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'T', 'e', 'x', 't', 'B', 'r', 'o', 'w', 's', 'e', 'r', 'I', 'n', 't', 'e', 'r', 'a', 'c', 't', 'i', 'o', 'n', 0,
    'L', 'i', 'n', 'k', 's', 'A', 'c', 'c', 'e', 's', 's', 'i', 'b', 'l', 'e', 'B', 'y', 'M', 'o', 'u', 's', 'e', 0,
    'Q', 't', ':', ':', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'a', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    'D', 'e', 'f', 'a', 'u', 'l', 't', 'L', 'o', 'c', 'a', 'l', 'e', 'S', 'h', 'o', 'r', 't', 'D', 'a', 't', 'e', 0,
    'C', 'o', 'n', 'i', 'c', 'a', 'l', 'G', 'r', 'a', 'd', 'i', 'e', 'n', 't', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'W', 'A', '_', 'K', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 'F', 'o', 'c', 'u', 's', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'W', 'A', '_', 'W', 'S', 't', 'a', 't', 'e', '_', 'I', 'n', 'P', 'a', 'i', 'n', 't', 'E', 'v', 'e', 'n', 't', 0,
    'W', 'A', '_', 'W', 'S', 't', 'a', 't', 'e', '_', 'C', 'o', 'm', 'p', 'r', 'e', 's', 's', 'K', 'e', 'y', 's', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'C', 'a', 'n', 'c', 'e', 'l', 'B', 'u', 't', 't', 'o', 'n', 'H', 'i', 'n', 't', 0,
    'w', 'r', 'i', 't', 'e', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'N', 'a', 'm', 'e', 's', 'p', 'a', 'c', 'e', 0,
    'n', 'a', 'm', 'e', 's', 'p', 'a', 'c', 'e', 'D', 'e', 'c', 'l', 'a', 'r', 'a', 't', 'i', 'o', 'n', 's', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'u', 'n', 's', 'i', 'g', 'n', 'e', 'd', ' ', 'i', 'n', 't', '>', 0,
    'e', 'n', 'c', 'o', 'd', 'e', 'd', 'Q', 'u', 'e', 'r', 'y', 'I', 't', 'e', 'm', 'V', 'a', 'l', 'u', 'e', 0,
    'Q', 'T', 'i', 'm', 'e', 'L', 'i', 'n', 'e', ':', ':', 'C', 'u', 'r', 'v', 'e', 'S', 'h', 'a', 'p', 'e', 0,
    's', 'e', 't', 'T', 'e', 'r', 'm', 'i', 'n', 'a', 't', 'i', 'o', 'n', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    's', 'e', 't', 'R', 'e', 'a', 'l', 'N', 'u', 'm', 'b', 'e', 'r', 'N', 'o', 't', 'a', 't', 'i', 'o', 'n', 0,
    'g', 'e', 'n', 'e', 'r', 'a', 't', 'e', 'B', 'y', 't', 'e', 'O', 'r', 'd', 'e', 'r', 'M', 'a', 'r', 'k', 0,
    'Q', 'S', 't', 'r', 'i', 'n', 'g', ':', ':', 'S', 'e', 'c', 't', 'i', 'o', 'n', 'F', 'l', 'a', 'g', 's', 0,
    'Q', 'S', 'o', 'c', 'k', 'e', 't', 'N', 'o', 't', 'i', 'f', 'i', 'e', 'r', ':', ':', 'T', 'y', 'p', 'e', 0,
    's', 'e', 't', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'O', 'u', 't', 'p', 'u', 't', 'F', 'i', 'l', 'e', 0,
    's', 'e', 't', 'P', 'r', 'o', 'c', 'e', 's', 's', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'M', 'o', 'd', 'e', 0,
    'r', 'e', 'a', 'd', 'A', 'l', 'l', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'O', 'u', 't', 'p', 'u', 't', 0,
    'Q', 'O', 'b', 'j', 'e', 'c', 't', 'C', 'l', 'e', 'a', 'n', 'u', 'p', 'H', 'a', 'n', 'd', 'l', 'e', 'r', 0,
    'Q', 'M', 'u', 't', 'e', 'x', ':', ':', 'R', 'e', 'c', 'u', 'r', 's', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    'D', 'a', 't', 'e', 'T', 'i', 'm', 'e', 'T', 'o', 'S', 't', 'r', 'i', 'n', 'g', 'S', 'h', 'o', 'r', 't', 0,
    'Q', 'L', 'o', 'c', 'a', 'l', 'e', ':', ':', 'N', 'u', 'm', 'b', 'e', 'r', 'O', 'p', 't', 'i', 'o', 'n', 0,
    'T', 'u', 'r', 'k', 's', 'A', 'n', 'd', 'C', 'a', 'i', 'c', 'o', 's', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'U', 'n', 'b', 'o', 'u', 'n', 'd', 'e', 'd', 'I', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'Q', 'L', 'i', 'n', 'e', 'F', ':', ':', 'I', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 'T', 'y', 'p', 'e', 0,
    's', 'e', 't', 'F', 'i', 'l', 'e', 'N', 'a', 'm', 'e', 'A', 'n', 'd', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'L', 'o', 'a', 'd', 'A', 'r', 'c', 'h', 'i', 'v', 'e', 'M', 'e', 'm', 'b', 'e', 'r', 'H', 'i', 'n', 't', 0,
    'R', 'e', 's', 'o', 'l', 'v', 'e', 'A', 'l', 'l', 'S', 'y', 'm', 'b', 'o', 'l', 's', 'H', 'i', 'n', 't', 0,
    'Q', 'F', 'i', 'l', 'e', ':', ':', 'M', 'e', 'm', 'o', 'r', 'y', 'M', 'a', 'p', 'F', 'l', 'a', 'g', 's', 0,
    'n', 'a', 'm', 'e', 'F', 'i', 'l', 't', 'e', 'r', 's', 'F', 'r', 'o', 'm', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'a', 'd', 'd', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 'S', 'e', 'a', 'r', 'c', 'h', 'P', 'a', 't', 'h', 0,
    'D', 'y', 'n', 'a', 'm', 'i', 'c', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'D', 'r', 'a', 'g', 'M', 'o', 'v', 'e', 0,
    'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'D', 'e', 'a', 'c', 't', 'i', 'v', 'a', 't', 'e', 0,
    'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'F', 'o', 'n', 't', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    's', 'e', 't', 'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    's', 'e', 't', 'O', 'r', 'g', 'a', 'n', 'i', 'z', 'a', 't', 'i', 'o', 'n', 'D', 'o', 'm', 'a', 'i', 'n', 0,
    'Q', 'C', 'h', 'a', 'r', ':', ':', 'U', 'n', 'i', 'c', 'o', 'd', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'C', 'o', 'm', 'b', 'i', 'n', 'i', 'n', 'g', '_', 'D', 'o', 'u', 'b', 'l', 'e', 'A', 'b', 'o', 'v', 'e', 0,
    'C', 'o', 'm', 'b', 'i', 'n', 'i', 'n', 'g', '_', 'D', 'o', 'u', 'b', 'l', 'e', 'B', 'e', 'l', 'o', 'w', 0,
    'Q', 'C', 'h', 'a', 'r', ':', ':', 'C', 'o', 'm', 'b', 'i', 'n', 'i', 'n', 'g', 'C', 'l', 'a', 's', 's', 0,
    'P', 'u', 'n', 'c', 't', 'u', 'a', 't', 'i', 'o', 'n', '_', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'o', 'r', 0,
    'M', 'a', 'r', 'k', '_', 'S', 'p', 'a', 'c', 'i', 'n', 'g', 'C', 'o', 'm', 'b', 'i', 'n', 'i', 'n', 'g', 0,
    'c', 'h', 'a', 'n', 'g', 'e', 'P', 'e', 'r', 's', 'i', 's', 't', 'e', 'n', 't', 'I', 'n', 'd', 'e', 'x', 0,
    'r', 'o', 'w', 's', 'A', 'b', 'o', 'u', 't', 'T', 'o', 'B', 'e', 'I', 'n', 's', 'e', 'r', 't', 'e', 'd', 0,
    'Q', 'P', 'e', 'r', 's', 'i', 's', 't', 'e', 'n', 't', 'M', 'o', 'd', 'e', 'l', 'I', 'n', 'd', 'e', 'x', 0,
    'T', 'e', 'x', 't', 'E', 'd', 'i', 't', 'o', 'r', 'I', 'n', 't', 'e', 'r', 'a', 'c', 't', 'i', 'o', 'n', 0,
    'T', 'e', 'x', 't', 'S', 'e', 'l', 'e', 'c', 't', 'a', 'b', 'l', 'e', 'B', 'y', 'M', 'o', 'u', 's', 'e', 0,
    'Q', 't', ':', ':', 'I', 't', 'e', 'm', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'e', 0,
    'Q', 't', ':', ':', 'C', 'o', 'n', 't', 'e', 'x', 't', 'M', 'e', 'n', 'u', 'P', 'o', 'l', 'i', 'c', 'y', 0,
    'D', 'e', 'f', 'a', 'u', 'l', 't', 'L', 'o', 'c', 'a', 'l', 'e', 'L', 'o', 'n', 'g', 'D', 'a', 't', 'e', 0,
    'S', 'y', 's', 't', 'e', 'm', 'L', 'o', 'c', 'a', 'l', 'e', 'S', 'h', 'o', 'r', 't', 'D', 'a', 't', 'e', 0,
    'R', 'a', 'd', 'i', 'a', 'l', 'G', 'r', 'a', 'd', 'i', 'e', 'n', 't', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'L', 'i', 'n', 'e', 'a', 'r', 'G', 'r', 'a', 'd', 'i', 'e', 'n', 't', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'V', 'o', 'i', 'c', 'e', 'd', '_', 'S', 'o', 'u', 'n', 'd', 0,
    'K', 'e', 'y', '_', 'H', 'i', 'r', 'a', 'g', 'a', 'n', 'a', '_', 'K', 'a', 't', 'a', 'k', 'a', 'n', 'a', 0,
    'K', 'e', 'y', '_', 'P', 'r', 'e', 'v', 'i', 'o', 'u', 's', 'C', 'a', 'n', 'd', 'i', 'd', 'a', 't', 'e', 0,
    'K', 'e', 'y', '_', 'M', 'u', 'l', 't', 'i', 'p', 'l', 'e', 'C', 'a', 'n', 'd', 'i', 'd', 'a', 't', 'e', 0,
    'W', 'A', '_', 'M', 'a', 'c', 'F', 'r', 'a', 'm', 'e', 'w', 'o', 'r', 'k', 'S', 'c', 'a', 'l', 'e', 'd', 0,
    'W', 'A', '_', 'A', 'l', 'w', 'a', 'y', 's', 'S', 'h', 'o', 'w', 'T', 'o', 'o', 'l', 'T', 'i', 'p', 's', 0,
    'W', 'A', '_', 'N', 'o', 'M', 'o', 'u', 's', 'e', 'P', 'r', 'o', 'p', 'a', 'g', 'a', 't', 'i', 'o', 'n', 0,
    'W', 'A', '_', 'S', 'e', 't', 'L', 'a', 'y', 'o', 'u', 't', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'W', 'A', '_', 'L', 'a', 'y', 'o', 'u', 't', 'O', 'n', 'E', 'n', 't', 'i', 'r', 'e', 'R', 'e', 'c', 't', 0,
    'W', 'A', '_', 'P', 'e', 'n', 'd', 'i', 'n', 'g', 'R', 'e', 's', 'i', 'z', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'W', 'A', '_', 'I', 'n', 'p', 'u', 't', 'M', 'e', 't', 'h', 'o', 'd', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'W', 'A', '_', 'N', 'o', 'S', 'y', 's', 't', 'e', 'm', 'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'C', 'l', 'o', 's', 'e', 'B', 'u', 't', 't', 'o', 'n', 'H', 'i', 'n', 't', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'S', 'h', 'a', 'd', 'e', 'B', 'u', 't', 't', 'o', 'n', 'H', 'i', 'n', 't', 0,
    'Q', 't', ':', ':', 'K', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'r', 's', 0,
    'q', 'R', 'e', 'g', 'i', 's', 't', 'e', 'r', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 'D', 'a', 't', 'a', 0,
    'w', 'r', 'i', 't', 'e', 'E', 'n', 't', 'i', 't', 'y', 'R', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 'e', 0,
    'a', 'u', 't', 'o', 'F', 'o', 'r', 'm', 'a', 't', 't', 'i', 'n', 'g', 'I', 'n', 'd', 'e', 'n', 't', 0,
    'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'D', 'e', 'c', 'l', 'a', 'r', 'a', 't', 'i', 'o', 'n', 's', 0,
    'i', 's', 'S', 't', 'a', 'n', 'd', 'a', 'l', 'o', 'n', 'e', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 0,
    'Q', 'X', 'm', 'l', 'S', 't', 'r', 'e', 'a', 'm', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 's', 0,
    's', 'e', 't', 'E', 'n', 'c', 'o', 'd', 'e', 'd', 'Q', 'u', 'e', 'r', 'y', 'I', 't', 'e', 'm', 's', 0,
    'Q', 'T', 'i', 'm', 'e', 'L', 'i', 'n', 'e', ':', ':', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'T', 'i', 'm', 'e', 'C', 'r', 'i', 't', 'i', 'c', 'a', 'l', 'P', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    's', 'e', 't', 'A', 'u', 't', 'o', 'D', 'e', 't', 'e', 'c', 't', 'U', 'n', 'i', 'c', 'o', 'd', 'e', 0,
    'A', 'l', 'i', 'g', 'n', 'A', 'c', 'c', 'o', 'u', 'n', 't', 'i', 'n', 'g', 'S', 't', 'y', 'l', 'e', 0,
    'C', 'o', 'n', 'v', 'e', 'r', 't', 'I', 'n', 'v', 'a', 'l', 'i', 'd', 'T', 'o', 'N', 'u', 'l', 'l', 0,
    'N', 'o', 'r', 'm', 'a', 'l', 'i', 'z', 'a', 't', 'i', 'o', 'n', 'F', 'o', 'r', 'm', '_', 'K', 'C', 0,
    'N', 'o', 'r', 'm', 'a', 'l', 'i', 'z', 'a', 't', 'i', 'o', 'n', 'F', 'o', 'r', 'm', '_', 'K', 'D', 0,
    'Q', 'S', 't', 'r', 'i', 'n', 'g', ':', ':', 'S', 'e', 'c', 't', 'i', 'o', 'n', 'F', 'l', 'a', 'g', 0,
    's', 'e', 't', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'E', 'r', 'r', 'o', 'r', 'F', 'i', 'l', 'e', 0,
    's', 'e', 't', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'I', 'n', 'p', 'u', 't', 'F', 'i', 'l', 'e', 0,
    'r', 'e', 'a', 'd', 'A', 'l', 'l', 'S', 't', 'a', 'n', 'd', 'a', 'r', 'd', 'E', 'r', 'r', 'o', 'r', 0,
    'Q', 'P', 'r', 'o', 'c', 'e', 's', 's', ':', ':', 'E', 'x', 'i', 't', 'S', 't', 'a', 't', 'u', 's', 0,
    'd', 'y', 'n', 'a', 'm', 'i', 'c', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'N', 'a', 'm', 'e', 's', 0,
    'D', 'a', 't', 'e', 'T', 'i', 'm', 'e', 'T', 'o', 'S', 't', 'r', 'i', 'n', 'g', 'L', 'o', 'n', 'g', 0,
    'c', 'o', 'u', 'n', 't', 'r', 'i', 'e', 's', 'F', 'o', 'r', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 0,
    'R', 'e', 'j', 'e', 'c', 't', 'G', 'r', 'o', 'u', 'p', 'S', 'e', 'p', 'a', 'r', 'a', 't', 'o', 'r', 0,
    'B', 'r', 'i', 't', 'i', 's', 'h', 'V', 'i', 'r', 'g', 'i', 'n', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'P', 'a', 'l', 'e', 's', 't', 'i', 'n', 'i', 'a', 'n', 'T', 'e', 'r', 'r', 'i', 't', 'o', 'r', 'y', 0,
    'L', 'i', 'b', 'y', 'a', 'n', 'A', 'r', 'a', 'b', 'J', 'a', 'm', 'a', 'h', 'i', 'r', 'i', 'y', 'a', 0,
    'B', 'o', 's', 'n', 'i', 'a', 'A', 'n', 'd', 'H', 'e', 'r', 'z', 'e', 'g', 'o', 'w', 'i', 'n', 'a', 0,
    'f', 'r', 'o', 'm', 'N', 'a', 't', 'i', 'v', 'e', 'S', 'e', 'p', 'a', 'r', 'a', 't', 'o', 'r', 's', 0,
    'Q', 'D', 'a', 't', 'e', ':', ':', 'M', 'o', 'n', 't', 'h', 'N', 'a', 'm', 'e', 'T', 'y', 'p', 'e', 0,
    'Q', 'D', 'a', 't', 'a', 'S', 't', 'r', 'e', 'a', 'm', ':', ':', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'T', 'a', 'b', 'l', 'e', 't', 'L', 'e', 'a', 'v', 'e', 'P', 'r', 'o', 'x', 'i', 'm', 'i', 't', 'y', 0,
    'T', 'a', 'b', 'l', 'e', 't', 'E', 'n', 't', 'e', 'r', 'P', 'r', 'o', 'x', 'i', 'm', 'i', 't', 'y', 0,
    'K', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 'L', 'a', 'y', 'o', 'u', 't', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'A', 'c', 't', 'i', 'v', 'a', 't', 'e', 'd', 0,
    'A', 'c', 'c', 'e', 's', 's', 'i', 'b', 'i', 'l', 'i', 't', 'y', 'P', 'r', 'e', 'p', 'a', 'r', 'e', 0,
    'p', 'y', 'q', 't', 'R', 'e', 's', 't', 'o', 'r', 'e', 'I', 'n', 'p', 'u', 't', 'H', 'o', 'o', 'k', 0,
    'C', 'o', 'm', 'b', 'i', 'n', 'i', 'n', 'g', '_', 'A', 'b', 'o', 'v', 'e', 'R', 'i', 'g', 'h', 't', 0,
    'C', 'o', 'm', 'b', 'i', 'n', 'i', 'n', 'g', '_', 'B', 'e', 'l', 'o', 'w', 'R', 'i', 'g', 'h', 't', 0,
    'Q', 'C', 'h', 'a', 'r', ':', ':', 'D', 'e', 'c', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'D', 'r', 'a', 'g', 'A', 'c', 't', 'i', 'o', 'n', 's', 0,
    'r', 'o', 'w', 's', 'A', 'b', 'o', 'u', 't', 'T', 'o', 'B', 'e', 'R', 'e', 'm', 'o', 'v', 'e', 'd', 0,
    's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'D', 'r', 'o', 'p', 'A', 'c', 't', 'i', 'o', 'n', 's', 0,
    'Q', 't', ':', ':', 'I', 'n', 'p', 'u', 't', 'M', 'e', 't', 'h', 'o', 'd', 'Q', 'u', 'e', 'r', 'y', 0,
    'S', 'm', 'o', 'o', 't', 'h', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'a', 't', 'i', 'o', 'n', 0,
    'A', 'u', 't', 'o', 'C', 'o', 'm', 'p', 'a', 't', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'S', 'y', 's', 't', 'e', 'm', 'L', 'o', 'c', 'a', 'l', 'e', 'L', 'o', 'n', 'g', 'D', 'a', 't', 'e', 0,
    'B', 'o', 't', 't', 'o', 'm', 'D', 'o', 'c', 'k', 'W', 'i', 'd', 'g', 'e', 't', 'A', 'r', 'e', 'a', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'D', 'o', 'u', 'b', 'l', 'e', 'a', 'c', 'u', 't', 'e', 0,
    'K', 'e', 'y', '_', 'H', 'a', 'n', 'g', 'u', 'l', '_', 'P', 'o', 's', 't', 'H', 'a', 'n', 'j', 'a', 0,
    'T', 'h', 'r', 'e', 's', 'h', 'o', 'l', 'd', 'A', 'l', 'p', 'h', 'a', 'D', 'i', 't', 'h', 'e', 'r', 0,
    'W', 'A', '_', 'M', 'a', 'c', 'O', 'p', 'a', 'q', 'u', 'e', 'S', 'i', 'z', 'e', 'G', 'r', 'i', 'p', 0,
    'W', 'A', '_', 'W', 'i', 'n', 'd', 'o', 'w', 'P', 'r', 'o', 'p', 'a', 'g', 'a', 't', 'i', 'o', 'n', 0,
    'W', 'A', '_', 'W', 'S', 't', 'a', 't', 'e', '_', 'R', 'e', 'p', 'a', 'r', 'e', 'n', 't', 'e', 'd', 0,
    'W', 'A', '_', 'M', 'a', 'c', 'N', 'o', 'C', 'l', 'i', 'c', 'k', 'T', 'h', 'r', 'o', 'u', 'g', 'h', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'S', 't', 'a', 'y', 's', 'O', 'n', 'T', 'o', 'p', 'H', 'i', 'n', 't', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'S', 'y', 's', 't', 'e', 'm', 'M', 'e', 'n', 'u', 'H', 'i', 'n', 't', 0,
    'A', 'l', 'i', 'g', 'n', 'H', 'o', 'r', 'i', 'z', 'o', 'n', 't', 'a', 'l', '_', 'M', 'a', 's', 'k', 0,
    'K', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'r', 'M', 'a', 's', 'k', 0,
    'Q', 't', ':', ':', 'K', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'r', 0,
    'n', 'a', 'm', 'e', 's', 'p', 'a', 'c', 'e', 'P', 'r', 'o', 'c', 'e', 's', 's', 'i', 'n', 'g', 0,
    'Q', 'X', 'm', 'l', 'S', 't', 'r', 'e', 'a', 'm', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'h', 'a', 's', 'E', 'n', 'c', 'o', 'd', 'e', 'd', 'Q', 'u', 'e', 'r', 'y', 'I', 't', 'e', 'm', 0,
    'a', 'd', 'd', 'E', 'n', 'c', 'o', 'd', 'e', 'd', 'Q', 'u', 'e', 'r', 'y', 'I', 't', 'e', 'm', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'A', 'l', 'l', 'Q', 'u', 'e', 'r', 'y', 'I', 't', 'e', 'm', 's', 0,
    'q', 'u', 'e', 'r', 'y', 'V', 'a', 'l', 'u', 'e', 'D', 'e', 'l', 'i', 'm', 'i', 't', 'e', 'r', 0,
    'r', 'e', 'a', 'l', 'N', 'u', 'm', 'b', 'e', 'r', 'P', 'r', 'e', 'c', 'i', 's', 'i', 'o', 'n', 0,
    'Q', 'T', 'e', 'x', 't', 'S', 't', 'r', 'e', 'a', 'm', ':', ':', 'S', 't', 'a', 't', 'u', 's', 0,
    's', 'e', 't', 'C', 'o', 'd', 'e', 'c', 'F', 'o', 'r', 'C', 'S', 't', 'r', 'i', 'n', 'g', 's', 0,
    'Q', 'T', 'e', 'x', 't', 'B', 'o', 'u', 'n', 'd', 'a', 'r', 'y', 'F', 'i', 'n', 'd', 'e', 'r', 0,
    'N', 'o', 'r', 'm', 'a', 'l', 'i', 'z', 'a', 't', 'i', 'o', 'n', 'F', 'o', 'r', 'm', '_', 'C', 0,
    'N', 'o', 'r', 'm', 'a', 'l', 'i', 'z', 'a', 't', 'i', 'o', 'n', 'F', 'o', 'r', 'm', '_', 'D', 0,
    's', 'e', 't', 'F', 'a', 'l', 'l', 'b', 'a', 'c', 'k', 's', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    's', 'e', 't', 'W', 'o', 'r', 'k', 'i', 'n', 'g', 'D', 'i', 'r', 'e', 'c', 't', 'o', 'r', 'y', 0,
    'n', 'o', 'r', 'm', 'a', 'l', 'i', 'z', 'e', 'd', 'S', 'i', 'g', 'n', 'a', 't', 'u', 'r', 'e', 0,
    'Q', 'M', 'e', 't', 'a', 'M', 'e', 't', 'h', 'o', 'd', ':', ':', 'A', 'c', 'c', 'e', 's', 's', 0,
    'D', 'a', 't', 'e', 'T', 'i', 'm', 'e', 'F', 'o', 'r', 'm', 'a', 't', 'S', 'h', 'o', 'r', 't', 0,
    's', 't', 'a', 'n', 'd', 'a', 'l', 'o', 'n', 'e', 'M', 'o', 'n', 't', 'h', 'N', 'a', 'm', 'e', 0,
    'Q', 'L', 'o', 'c', 'a', 'l', 'e', ':', ':', 'F', 'o', 'r', 'm', 'a', 't', 'T', 'y', 'p', 'e', 0,
    'S', 'e', 'r', 'b', 'i', 'a', 'A', 'n', 'd', 'M', 'o', 'n', 't', 'e', 'n', 'e', 'g', 'r', 'o', 0,
    'S', 't', 'P', 'i', 'e', 'r', 'r', 'e', 'A', 'n', 'd', 'M', 'i', 'q', 'u', 'e', 'l', 'o', 'n', 0,
    'N', 'e', 't', 'h', 'e', 'r', 'l', 'a', 'n', 'd', 's', 'A', 'n', 't', 'i', 'l', 'l', 'e', 's', 0,
    'B', 'o', 'u', 'n', 'd', 'e', 'd', 'I', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'Q', 'L', 'i', 'b', 'r', 'a', 'r', 'y', ':', ':', 'L', 'o', 'a', 'd', 'H', 'i', 'n', 't', 's', 0,
    'r', 'e', 'a', 'd', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'F', 'i', 'n', 'i', 's', 'h', 'e', 'd', 0,
    'w', 'a', 'i', 't', 'F', 'o', 'r', 'B', 'y', 't', 'e', 's', 'W', 'r', 'i', 't', 't', 'e', 'n', 0,
    'Q', 'I', 'O', 'D', 'e', 'v', 'i', 'c', 'e', ':', ':', 'O', 'p', 'e', 'n', 'M', 'o', 'd', 'e', 0,
    'Q', 'D', 'a', 't', 'a', 'S', 't', 'r', 'e', 'a', 'm', ':', ':', 'S', 't', 'a', 't', 'u', 's', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'R', 'e', 's', 'i', 'z', 'e', 0,
    'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'A', 'c', 't', 'i', 'v', 'a', 't', 'e', 0,
    'M', 'o', 'u', 's', 'e', 'T', 'r', 'a', 'c', 'k', 'i', 'n', 'g', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'P', 'a', 'r', 'e', 'n', 't', 'A', 'b', 'o', 'u', 't', 'T', 'o', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'M', 'o', 'u', 's', 'e', 'B', 'u', 't', 't', 'o', 'n', 'D', 'b', 'l', 'C', 'l', 'i', 'c', 'k', 0,
    'p', 'y', 'q', 't', 'R', 'e', 'm', 'o', 'v', 'e', 'I', 'n', 'p', 'u', 't', 'H', 'o', 'o', 'k', 0,
    'a', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'F', 'i', 'l', 'e', 'P', 'a', 't', 'h', 0,
    's', 'e', 't', 'O', 'r', 'g', 'a', 'n', 'i', 'z', 'a', 't', 'i', 'o', 'n', 'N', 'a', 'm', 'e', 0,
    'C', 'o', 'm', 'b', 'i', 'n', 'i', 'n', 'g', '_', 'A', 'b', 'o', 'v', 'e', 'L', 'e', 'f', 't', 0,
    'C', 'o', 'm', 'b', 'i', 'n', 'i', 'n', 'g', '_', 'B', 'e', 'l', 'o', 'w', 'L', 'e', 'f', 't', 0,
    'S', 'e', 'p', 'a', 'r', 'a', 't', 'o', 'r', '_', 'P', 'a', 'r', 'a', 'g', 'r', 'a', 'p', 'h', 0,
    'N', 'u', 'm', 'b', 'e', 'r', '_', 'D', 'e', 'c', 'i', 'm', 'a', 'l', 'D', 'i', 'g', 'i', 't', 0,
    'f', 'r', 'o', 'm', 'P', 'e', 'r', 'c', 'e', 'n', 't', 'E', 'n', 'c', 'o', 'd', 'i', 'n', 'g', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'T', 'a', 'b', 'l', 'e', 'M', 'o', 'd', 'e', 'l', 0,
    'p', 'e', 'r', 's', 'i', 's', 't', 'e', 'n', 't', 'I', 'n', 'd', 'e', 'x', 'L', 'i', 's', 't', 0,
    'm', 'o', 'd', 'e', 'l', 'A', 'b', 'o', 'u', 't', 'T', 'o', 'B', 'e', 'R', 'e', 's', 'e', 't', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'F', 'i', 'l', 'e', 'E', 'n', 'g', 'i', 'n', 'e', 0,
    'N', 'o', 'r', 'm', 'a', 'l', 'E', 'v', 'e', 'n', 't', 'P', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    'I', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 's', 'I', 't', 'e', 'm', 'S', 'h', 'a', 'p', 'e', 0,
    'I', 't', 'e', 'm', 'I', 's', 'U', 's', 'e', 'r', 'C', 'h', 'e', 'c', 'k', 'a', 'b', 'l', 'e', 0,
    'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 'C', 'o', 'l', 'o', 'r', 'R', 'o', 'l', 'e', 0,
    'Q', 't', ':', ':', 'L', 'a', 'y', 'o', 'u', 't', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'Q', 't', ':', ':', 'T', 'o', 'o', 'l', 'B', 'u', 't', 't', 'o', 'n', 'S', 't', 'y', 'l', 'e', 0,
    'S', 'h', 'o', 'r', 't', 'c', 'u', 't', 'F', 'o', 'c', 'u', 's', 'R', 'e', 'a', 's', 'o', 'n', 0,
    'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'S', 'h', 'o', 'r', 't', 'c', 'u', 't', 0,
    'Q', 't', ':', ':', 'S', 'h', 'o', 'r', 't', 'c', 'u', 't', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    'Q', 't', ':', ':', 'C', 'a', 's', 'e', 'S', 'e', 'n', 's', 'i', 't', 'i', 'v', 'i', 't', 'y', 0,
    'Q', 't', ':', ':', 'S', 'c', 'r', 'o', 'l', 'l', 'B', 'a', 'r', 'P', 'o', 'l', 'i', 'c', 'y', 0,
    'Q', 't', ':', ':', 'D', 'o', 'c', 'k', 'W', 'i', 'd', 'g', 'e', 't', 'A', 'r', 'e', 'a', 's', 0,
    'D', 'o', 'c', 'k', 'W', 'i', 'd', 'g', 'e', 't', 'A', 'r', 'e', 'a', '_', 'M', 'a', 's', 'k', 0,
    'R', 'i', 'g', 'h', 't', 'D', 'o', 'c', 'k', 'W', 'i', 'd', 'g', 'e', 't', 'A', 'r', 'e', 'a', 0,
    'Q', 't', ':', ':', 'A', 'n', 'c', 'h', 'o', 'r', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'Q', 't', ':', ':', 'A', 's', 'p', 'e', 'c', 't', 'R', 'a', 't', 'i', 'o', 'M', 'o', 'd', 'e', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'C', 'i', 'r', 'c', 'u', 'm', 'f', 'l', 'e', 'x', 0,
    'K', 'e', 'y', '_', 'H', 'a', 'n', 'g', 'u', 'l', '_', 'P', 'r', 'e', 'H', 'a', 'n', 'j', 'a', 0,
    'K', 'e', 'y', '_', 'Z', 'e', 'n', 'k', 'a', 'k', 'u', '_', 'H', 'a', 'n', 'k', 'a', 'k', 'u', 0,
    'K', 'e', 'y', '_', 'S', 'i', 'n', 'g', 'l', 'e', 'C', 'a', 'n', 'd', 'i', 'd', 'a', 't', 'e', 0,
    'W', 'A', '_', 'S', 't', 'y', 'l', 'e', 'd', 'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 0,
    'W', 'A', '_', 'M', 'a', 'c', 'S', 'h', 'o', 'w', 'F', 'o', 'c', 'u', 's', 'R', 'e', 'c', 't', 0,
    'W', 'A', '_', 'X', '1', '1', 'O', 'p', 'e', 'n', 'G', 'L', 'O', 'v', 'e', 'r', 'l', 'a', 'y', 0,
    'W', 'A', '_', 'T', 'i', 'n', 't', 'e', 'd', 'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 0,
    'W', 'A', '_', 'P', 'e', 'n', 'd', 'i', 'n', 'g', 'M', 'o', 'v', 'e', 'E', 'v', 'e', 'n', 't', 0,
    'W', 'A', '_', 'O', 'p', 'a', 'q', 'u', 'e', 'P', 'a', 'i', 'n', 't', 'E', 'v', 'e', 'n', 't', 0,
    'Q', 't', ':', ':', 'W', 'i', 'd', 'g', 'e', 't', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'C', 'u', 's', 't', 'o', 'm', 'i', 'z', 'e', 'W', 'i', 'n', 'd', 'o', 'w', 'H', 'i', 'n', 't', 0,
    'F', 'r', 'a', 'm', 'e', 'l', 'e', 's', 's', 'W', 'i', 'n', 'd', 'o', 'w', 'H', 'i', 'n', 't', 0,
    'G', 'r', 'o', 'u', 'p', 'S', 'w', 'i', 't', 'c', 'h', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'r', 0,
    'Q', 'M', 'a', 'p', '<', 'i', 'n', 't', ',', 'Q', 'V', 'a', 'r', 'i', 'a', 'n', 't', '>', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'M', 'o', 'd', 'e', 'l', 'I', 'n', 'd', 'e', 'x', '>', 0,
    'w', 'r', 'i', 't', 'e', 'S', 't', 'a', 'r', 't', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 0,
    'N', 'o', 't', 'W', 'e', 'l', 'l', 'F', 'o', 'r', 'm', 'e', 'd', 'E', 'r', 'r', 'o', 'r', 0,
    'e', 'n', 't', 'i', 't', 'y', 'D', 'e', 'c', 'l', 'a', 'r', 'a', 't', 'i', 'o', 'n', 's', 0,
    's', 'e', 't', 'E', 'n', 'c', 'o', 'd', 'e', 'd', 'F', 'r', 'a', 'g', 'm', 'e', 'n', 't', 0,
    's', 'e', 't', 'E', 'n', 'c', 'o', 'd', 'e', 'd', 'P', 'a', 's', 's', 'w', 'o', 'r', 'd', 0,
    's', 'e', 't', 'E', 'n', 'c', 'o', 'd', 'e', 'd', 'U', 's', 'e', 'r', 'N', 'a', 'm', 'e', 0,
    'a', 'l', 'l', 'Q', 'u', 'e', 'r', 'y', 'I', 't', 'e', 'm', 'V', 'a', 'l', 'u', 'e', 's', 0,
    'q', 'u', 'e', 'r', 'y', 'P', 'a', 'i', 'r', 'D', 'e', 'l', 'i', 'm', 'i', 't', 'e', 'r', 0,
    's', 'e', 't', 'Q', 'u', 'e', 'r', 'y', 'D', 'e', 'l', 'i', 'm', 'i', 't', 'e', 'r', 's', 0,
    'S', 't', 'r', 'i', 'p', 'T', 'r', 'a', 'i', 'l', 'i', 'n', 'g', 'S', 'l', 'a', 's', 'h', 0,
    'y', 'i', 'e', 'l', 'd', 'C', 'u', 'r', 'r', 'e', 'n', 't', 'T', 'h', 'r', 'e', 'a', 'd', 0,
    'r', 'e', 'a', 'l', 'N', 'u', 'm', 'b', 'e', 'r', 'N', 'o', 't', 'a', 't', 'i', 'o', 'n', 0,
    'S', 'c', 'i', 'e', 'n', 't', 'i', 'f', 'i', 'c', 'N', 'o', 't', 'a', 't', 'i', 'o', 'n', 0,
    't', 'o', 'P', 'r', 'e', 'v', 'i', 'o', 'u', 's', 'B', 'o', 'u', 'n', 'd', 'a', 'r', 'y', 0,
    'l', 'o', 'c', 'a', 'l', 'e', 'A', 'w', 'a', 'r', 'e', 'C', 'o', 'm', 'p', 'a', 'r', 'e', 0,
    'u', 'n', 'r', 'e', 'g', 'i', 's', 't', 'e', 'r', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 0,
    's', 'e', 't', 'C', 'a', 's', 'e', 'S', 'e', 'n', 's', 'i', 't', 'i', 'v', 'i', 't', 'y', 0,
    'Q', 'R', 'e', 'g', 'E', 'x', 'p', ':', ':', 'C', 'a', 'r', 'e', 't', 'M', 'o', 'd', 'e', 0,
    'p', 'r', 'o', 'c', 'e', 's', 's', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'M', 'o', 'd', 'e', 0,
    's', 'e', 't', 'R', 'e', 'a', 'd', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'M', 'o', 'd', 'e', 0,
    'i', 'n', 'd', 'e', 'x', 'O', 'f', 'C', 'o', 'n', 's', 't', 'r', 'u', 'c', 't', 'o', 'r', 0,
    'c', 'o', 'n', 'n', 'e', 'c', 't', 'S', 'l', 'o', 't', 's', 'B', 'y', 'N', 'a', 'm', 'e', 0,
    'i', 'n', 's', 't', 'a', 'l', 'l', 'E', 'v', 'e', 'n', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'D', 'a', 't', 'e', 'T', 'i', 'm', 'e', 'F', 'o', 'r', 'm', 'a', 't', 'L', 'o', 'n', 'g', 0,
    'O', 'm', 'i', 't', 'G', 'r', 'o', 'u', 'p', 'S', 'e', 'p', 'a', 'r', 'a', 't', 'o', 'r', 0,
    'U', 'n', 'i', 't', 'e', 'd', 'A', 'r', 'a', 'b', 'E', 'm', 'i', 'r', 'a', 't', 'e', 's', 0,
    'S', 'y', 'r', 'i', 'a', 'n', 'A', 'r', 'a', 'b', 'R', 'e', 'p', 'u', 'b', 'l', 'i', 'c', 0,
    'S', 'a', 'o', 'T', 'o', 'm', 'e', 'A', 'n', 'd', 'P', 'r', 'i', 'n', 'c', 'i', 'p', 'e', 0,
    'S', 'a', 'i', 'n', 't', 'K', 'i', 't', 't', 's', 'A', 'n', 'd', 'N', 'e', 'v', 'i', 's', 0,
    'M', 'e', 't', 'r', 'o', 'p', 'o', 'l', 'i', 't', 'a', 'n', 'F', 'r', 'a', 'n', 'c', 'e', 0,
    'Q', 'L', 'i', 'b', 'r', 'a', 'r', 'y', ':', ':', 'L', 'o', 'a', 'd', 'H', 'i', 'n', 't', 0,
    's', 'e', 't', 'T', 'e', 'x', 't', 'M', 'o', 'd', 'e', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'Q', 'F', 'i', 'l', 'e', 'S', 'y', 's', 't', 'e', 'm', 'W', 'a', 't', 'c', 'h', 'e', 'r', 0,
    'Q', 'F', 'i', 'l', 'e', ':', ':', 'P', 'e', 'r', 'm', 'i', 's', 's', 'i', 'o', 'n', 's', 0,
    't', 'o', 'N', 'a', 't', 'i', 'v', 'e', 'S', 'e', 'p', 'a', 'r', 'a', 't', 'o', 'r', 's', 0,
    'Q', 'C', 'r', 'y', 'p', 't', 'o', 'g', 'r', 'a', 'p', 'h', 'i', 'c', 'H', 'a', 's', 'h', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'W', 'h', 'e', 'e', 'l', 0,
    'L', 'e', 'a', 'v', 'e', 'W', 'h', 'a', 't', 's', 'T', 'h', 'i', 's', 'M', 'o', 'd', 'e', 0,
    'E', 'n', 't', 'e', 'r', 'W', 'h', 'a', 't', 's', 'T', 'h', 'i', 's', 'M', 'o', 'd', 'e', 0,
    'M', 'o', 'u', 's', 'e', 'B', 'u', 't', 't', 'o', 'n', 'R', 'e', 'l', 'e', 'a', 's', 'e', 0,
    'q', 'R', 'e', 'm', 'o', 'v', 'e', 'P', 'o', 's', 't', 'R', 'o', 'u', 't', 'i', 'n', 'e', 0,
    'a', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'a', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'D', 'i', 'r', 'P', 'a', 't', 'h', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'P', 'o', 's', 't', 'e', 'd', 'E', 'v', 'e', 'n', 't', 's', 0,
    's', 'e', 't', 'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'N', 'a', 'm', 'e', 0,
    'o', 'r', 'g', 'a', 'n', 'i', 'z', 'a', 't', 'i', 'o', 'n', 'D', 'o', 'm', 'a', 'i', 'n', 0,
    'U', 'n', 'i', 'c', 'o', 'd', 'e', '_', 'U', 'n', 'a', 's', 's', 'i', 'g', 'n', 'e', 'd', 0,
    'P', 'a', 'r', 'a', 'g', 'r', 'a', 'p', 'h', 'S', 'e', 'p', 'a', 'r', 'a', 't', 'o', 'r', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'L', 'i', 's', 't', 'M', 'o', 'd', 'e', 'l', 0,
    'b', 'e', 'g', 'i', 'n', 'R', 'e', 'm', 'o', 'v', 'e', 'C', 'o', 'l', 'u', 'm', 'n', 's', 0,
    'b', 'e', 'g', 'i', 'n', 'I', 'n', 's', 'e', 'r', 't', 'C', 'o', 'l', 'u', 'm', 'n', 's', 0,
    'Q', 'A', 'b', 's', 't', 'r', 'a', 'c', 't', 'I', 't', 'e', 'm', 'M', 'o', 'd', 'e', 'l', 0,
    'B', 'o', 't', 't', 'o', 'm', 'R', 'i', 'g', 'h', 't', 'S', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'Q', 't', ':', ':', 'W', 'i', 'n', 'd', 'o', 'w', 'M', 'o', 'd', 'a', 'l', 'i', 't', 'y', 0,
    'M', 'a', 't', 'c', 'h', 'C', 'a', 's', 'e', 'S', 'e', 'n', 's', 'i', 't', 'i', 'v', 'e', 0,
    'A', 'c', 'c', 'e', 's', 's', 'i', 'b', 'l', 'e', 'T', 'e', 'x', 't', 'R', 'o', 'l', 'e', 0,
    'T', 'o', 'o', 'l', 'B', 'u', 't', 't', 'o', 'n', 'T', 'e', 'x', 't', 'O', 'n', 'l', 'y', 0,
    'T', 'o', 'o', 'l', 'B', 'u', 't', 't', 'o', 'n', 'I', 'c', 'o', 'n', 'O', 'n', 'l', 'y', 0,
    'I', 'm', 'C', 'u', 'r', 'r', 'e', 'n', 't', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'A', 'c', 't', 'i', 'o', 'n', 's', 'C', 'o', 'n', 't', 'e', 'x', 't', 'M', 'e', 'n', 'u', 0,
    'D', 'e', 'f', 'a', 'u', 'l', 't', 'C', 'o', 'n', 't', 'e', 'x', 't', 'M', 'e', 'n', 'u', 0,
    'P', 'r', 'e', 'v', 'e', 'n', 't', 'C', 'o', 'n', 't', 'e', 'x', 't', 'M', 'e', 'n', 'u', 0,
    'M', 'e', 'n', 'u', 'B', 'a', 'r', 'F', 'o', 'c', 'u', 's', 'R', 'e', 'a', 's', 'o', 'n', 0,
    'B', 'a', 'c', 'k', 't', 'a', 'b', 'F', 'o', 'c', 'u', 's', 'R', 'e', 'a', 's', 'o', 'n', 0,
    'F', 'a', 's', 't', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 'a', 't', 'i', 'o', 'n', 0,
    'Q', 't', ':', ':', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'i', 'o', 'n', 'T', 'y', 'p', 'e', 0,
    'S', 'c', 'r', 'o', 'l', 'l', 'B', 'a', 'r', 'A', 'l', 'w', 'a', 'y', 's', 'O', 'f', 'f', 0,
    'A', 'l', 'l', 'D', 'o', 'c', 'k', 'W', 'i', 'd', 'g', 'e', 't', 'A', 'r', 'e', 'a', 's', 0,
    'L', 'e', 'f', 't', 'D', 'o', 'c', 'k', 'W', 'i', 'd', 'g', 'e', 't', 'A', 'r', 'e', 'a', 0,
    'Q', 't', ':', ':', 'D', 'o', 'c', 'k', 'W', 'i', 'd', 'g', 'e', 't', 'A', 'r', 'e', 'a', 0,
    'P', 'o', 'i', 'n', 't', 'i', 'n', 'g', 'H', 'a', 'n', 'd', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'A', 'b', 'o', 'v', 'e', 'r', 'i', 'n', 'g', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'D', 'i', 'a', 'e', 'r', 'e', 's', 'i', 's', 0,
    'K', 'e', 'y', '_', 'H', 'a', 'n', 'g', 'u', 'l', '_', 'S', 'p', 'e', 'c', 'i', 'a', 'l', 0,
    'K', 'e', 'y', '_', 'g', 'u', 'i', 'l', 'l', 'e', 'm', 'o', 't', 'r', 'i', 'g', 'h', 't', 0,
    'K', 'e', 'y', '_', 'p', 'e', 'r', 'i', 'o', 'd', 'c', 'e', 'n', 't', 'e', 'r', 'e', 'd', 0,
    'D', 'i', 'f', 'f', 'u', 's', 'e', 'A', 'l', 'p', 'h', 'a', 'D', 'i', 't', 'h', 'e', 'r', 0,
    'O', 'r', 'd', 'e', 'r', 'e', 'd', 'A', 'l', 'p', 'h', 'a', 'D', 'i', 't', 'h', 'e', 'r', 0,
    'W', 'A', '_', 'M', 'a', 'c', 'V', 'a', 'r', 'i', 'a', 'b', 'l', 'e', 'S', 'i', 'z', 'e', 0,
    'W', 'A', '_', 'M', 'a', 'c', 'B', 'r', 'u', 's', 'h', 'e', 'd', 'M', 'e', 't', 'a', 'l', 0,
    'W', 'A', '_', 'W', 'S', 't', 'a', 't', 'e', '_', 'P', 'o', 'l', 'i', 's', 'h', 'e', 'd', 0,
    'W', 'A', '_', 'G', 'r', 'a', 'b', 'b', 'e', 'd', 'S', 'h', 'o', 'r', 't', 'c', 'u', 't', 0,
    'W', 'A', '_', 'C', 'u', 's', 't', 'o', 'm', 'W', 'h', 'a', 't', 's', 'T', 'h', 'i', 's', 0,
    'W', 'A', '_', 'U', 'p', 'd', 'a', 't', 'e', 's', 'D', 'i', 's', 'a', 'b', 'l', 'e', 'd', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'O', 'k', 'B', 'u', 't', 't', 'o', 'n', 'H', 'i', 'n', 't', 0,
    'A', 'l', 'i', 'g', 'n', 'V', 'e', 'r', 't', 'i', 'c', 'a', 'l', '_', 'M', 'a', 's', 'k', 0,
    'q', 'I', 'n', 's', 't', 'a', 'l', 'l', 'M', 's', 'g', 'H', 'a', 'n', 'd', 'l', 'e', 'r', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'B', 'y', 't', 'e', 'A', 'r', 'r', 'a', 'y', '>', 0,
    'w', 'r', 'i', 't', 'e', 'C', 'u', 'r', 'r', 'e', 'n', 't', 'T', 'o', 'k', 'e', 'n', 0,
    'w', 'r', 'i', 't', 'e', 'S', 't', 'a', 'r', 't', 'E', 'l', 'e', 'm', 'e', 'n', 't', 0,
    'w', 'r', 'i', 't', 'e', 'E', 'm', 'p', 't', 'y', 'E', 'l', 'e', 'm', 'e', 'n', 't', 0,
    's', 'e', 't', 'A', 'u', 't', 'o', 'F', 'o', 'r', 'm', 'a', 't', 't', 'i', 'n', 'g', 0,
    's', 'e', 't', 'E', 'n', 't', 'i', 't', 'y', 'R', 'e', 's', 'o', 'l', 'v', 'e', 'r', 0,
    'i', 's', 'E', 'n', 't', 'i', 't', 'y', 'R', 'e', 'f', 'e', 'r', 'e', 'n', 'c', 'e', 0,
    'e', 'n', 'c', 'o', 'd', 'e', 'd', 'Q', 'u', 'e', 'r', 'y', 'I', 't', 'e', 'm', 's', 0,
    'Q', 'U', 'r', 'l', ':', ':', 'P', 'a', 'r', 's', 'i', 'n', 'g', 'M', 'o', 'd', 'e', 0,
    's', 'e', 't', 'U', 'p', 'd', 'a', 't', 'e', 'I', 'n', 't', 'e', 'r', 'v', 'a', 'l', 0,
    'a', 'c', 't', 'i', 'v', 'e', 'T', 'h', 'r', 'e', 'a', 'd', 'C', 'o', 'u', 'n', 't', 0,
    's', 'e', 't', 'M', 'a', 'x', 'T', 'h', 'r', 'e', 'a', 'd', 'C', 'o', 'u', 'n', 't', 0,
    'Q', 'T', 'h', 'r', 'e', 'a', 'd', ':', ':', 'P', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    's', 'e', 't', 'F', 'i', 'e', 'l', 'd', 'A', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 0,
    'a', 'u', 't', 'o', 'D', 'e', 't', 'e', 'c', 't', 'U', 'n', 'i', 'c', 'o', 'd', 'e', 0,
    'D', 'e', 'f', 'a', 'u', 'l', 't', 'C', 'o', 'n', 'v', 'e', 'r', 's', 'i', 'o', 'n', 0,
    's', 'e', 't', 'C', 'o', 'd', 'e', 'c', 'F', 'o', 'r', 'L', 'o', 'c', 'a', 'l', 'e', 0,
    'Q', 'S', 'e', 't', 't', 'i', 'n', 'g', 's', ':', ':', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'Q', 'S', 'e', 't', 't', 'i', 'n', 'g', 's', ':', ':', 'S', 't', 'a', 't', 'u', 's', 0,
    's', 'e', 't', 'u', 'p', 'C', 'h', 'i', 'l', 'd', 'P', 'r', 'o', 'c', 'e', 's', 's', 0,
    's', 'y', 's', 't', 'e', 'm', 'E', 'n', 'v', 'i', 'r', 'o', 'n', 'm', 'e', 'n', 't', 0,
    'c', 'l', 'o', 's', 'e', 'W', 'r', 'i', 't', 'e', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 0,
    'F', 'o', 'r', 'w', 'a', 'r', 'd', 'e', 'd', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 's', 0,
    'i', 'n', 'd', 'e', 'x', 'O', 'f', 'E', 'n', 'u', 'm', 'e', 'r', 'a', 't', 'o', 'r', 0,
    'Q', 'T', '_', 'T', 'R', 'A', 'N', 'S', 'L', 'A', 'T', 'E', '_', 'N', 'O', 'O', 'P', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'E', 'v', 'e', 'n', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'n', 'o', 't', 'i', 'f', 'y', 'S', 'i', 'g', 'n', 'a', 'l', 'I', 'n', 'd', 'e', 'x', 0,
    'D', 'a', 't', 'e', 'T', 'o', 'S', 't', 'r', 'i', 'n', 'g', 'S', 'h', 'o', 'r', 't', 0,
    's', 't', 'a', 'n', 'd', 'a', 'l', 'o', 'n', 'e', 'D', 'a', 'y', 'N', 'a', 'm', 'e', 0,
    'm', 'e', 'a', 's', 'u', 'r', 'e', 'm', 'e', 'n', 't', 'S', 'y', 's', 't', 'e', 'm', 0,
    'T', 'r', 'i', 'n', 'i', 'd', 'a', 'd', 'A', 'n', 'd', 'T', 'o', 'b', 'a', 'g', 'o', 0,
    'R', 'u', 's', 's', 'i', 'a', 'n', 'F', 'e', 'd', 'e', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'D', 'o', 'm', 'i', 'n', 'i', 'c', 'a', 'n', 'R', 'e', 'p', 'u', 'b', 'l', 'i', 'c', 0,
    'A', 'n', 't', 'i', 'g', 'u', 'a', 'A', 'n', 'd', 'B', 'a', 'r', 'b', 'u', 'd', 'a', 0,
    'Q', 'L', 'o', 'c', 'a', 'l', 'e', ':', ':', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 0,
    'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 'P', 'a', 't', 'h', 0,
    'i', 's', 'T', 'e', 'x', 't', 'M', 'o', 'd', 'e', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'c', 'a', 'n', 'o', 'n', 'i', 'c', 'a', 'l', 'F', 'i', 'l', 'e', 'P', 'a', 't', 'h', 0,
    'Q', 'F', 'i', 'l', 'e', ':', ':', 'P', 'e', 'r', 'm', 'i', 's', 's', 'i', 'o', 'n', 0,
    'W', 'a', 'i', 't', 'F', 'o', 'r', 'M', 'o', 'r', 'e', 'E', 'v', 'e', 'n', 't', 's', 0,
    'c', 'o', 'n', 'v', 'e', 'r', 't', 'S', 'e', 'p', 'a', 'r', 'a', 't', 'o', 'r', 's', 0,
    'j', 'u', 'l', 'i', 'a', 'n', 'T', 'o', 'G', 'r', 'e', 'g', 'o', 'r', 'i', 'a', 'n', 0,
    'g', 'r', 'e', 'g', 'o', 'r', 'i', 'a', 'n', 'T', 'o', 'J', 'u', 'l', 'i', 'a', 'n', 0,
    'r', 'e', 'g', 'i', 's', 't', 'e', 'r', 'E', 'v', 'e', 'n', 't', 'T', 'y', 'p', 'e', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'M', 'o', 'v', 'e', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'D', 'r', 'o', 'p', 0,
    'G', 'r', 'a', 'p', 'h', 'i', 'c', 's', 'S', 'c', 'e', 'n', 'e', 'H', 'e', 'l', 'p', 0,
    'A', 'c', 'c', 'e', 'p', 't', 'D', 'r', 'o', 'p', 's', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'A', 'c', 'c', 'e', 's', 's', 'i', 'b', 'i', 'l', 'i', 't', 'y', 'H', 'e', 'l', 'p', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'S', 't', 'a', 't', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'D', 'e', 'a', 'c', 't', 'i', 'v', 'a', 't', 'e', 'C', 'o', 'n', 't', 'r', 'o', 'l', 0,
    'S', 'h', 'o', 'w', 'W', 'i', 'n', 'd', 'o', 'w', 'R', 'e', 'q', 'u', 'e', 's', 't', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'T', 'i', 't', 'l', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'i', 'n', 's', 't', 'a', 'l', 'l', 'T', 'r', 'a', 'n', 's', 'l', 'a', 't', 'o', 'r', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'L', 'i', 'b', 'r', 'a', 'r', 'y', 'P', 'a', 't', 'h', 0,
    'P', 'u', 'n', 'c', 't', 'u', 'a', 't', 'i', 'o', 'n', '_', 'O', 't', 'h', 'e', 'r', 0,
    'P', 'u', 'n', 'c', 't', 'u', 'a', 't', 'i', 'o', 'n', '_', 'C', 'l', 'o', 's', 'e', 0,
    'O', 't', 'h', 'e', 'r', '_', 'N', 'o', 't', 'A', 's', 's', 'i', 'g', 'n', 'e', 'd', 0,
    'Q', 'B', 'y', 't', 'e', 'A', 'r', 'r', 'a', 'y', 'M', 'a', 't', 'c', 'h', 'e', 'r', 0,
    't', 'o', 'P', 'e', 'r', 'c', 'e', 'n', 't', 'E', 'n', 'c', 'o', 'd', 'i', 'n', 'g', 0,
    'h', 'e', 'a', 'd', 'e', 'r', 'D', 'a', 't', 'a', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'C', 'a', 'n', 'o', 'n', 'i', 'c', 'a', 'l', 'P', 'a', 't', 'h', 'N', 'a', 'm', 'e', 0,
    'B', 'o', 't', 't', 'o', 'm', 'L', 'e', 'f', 't', 'S', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'H', 'i', 'g', 'h', 'E', 'v', 'e', 'n', 't', 'P', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    'Q', 't', ':', ':', 'E', 'v', 'e', 'n', 't', 'P', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    'N', 'o', 'T', 'e', 'x', 't', 'I', 'n', 't', 'e', 'r', 'a', 'c', 't', 'i', 'o', 'n', 0,
    'C', 'o', 'n', 't', 'a', 'i', 'n', 's', 'I', 't', 'e', 'm', 'S', 'h', 'a', 'p', 'e', 0,
    'I', 't', 'e', 'm', 'I', 's', 'D', 'r', 'o', 'p', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'I', 't', 'e', 'm', 'I', 's', 'D', 'r', 'a', 'g', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'T', 'e', 'x', 't', 'A', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 'R', 'o', 'l', 'e', 0,
    'I', 'm', 'S', 'u', 'r', 'r', 'o', 'u', 'n', 'd', 'i', 'n', 'g', 'T', 'e', 'x', 't', 0,
    'C', 'u', 's', 't', 'o', 'm', 'C', 'o', 'n', 't', 'e', 'x', 't', 'M', 'e', 'n', 'u', 0,
    'Q', 't', ':', ':', 'C', 'l', 'i', 'p', 'O', 'p', 'e', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'B', 'o', 't', 't', 'o', 'm', 'R', 'i', 'g', 'h', 't', 'C', 'o', 'r', 'n', 'e', 'r', 0,
    'S', 'c', 'r', 'o', 'l', 'l', 'B', 'a', 'r', 'A', 'l', 'w', 'a', 'y', 's', 'O', 'n', 0,
    'S', 'c', 'r', 'o', 'l', 'l', 'B', 'a', 'r', 'A', 's', 'N', 'e', 'e', 'd', 'e', 'd', 0,
    'B', 'o', 't', 't', 'o', 'm', 'T', 'o', 'o', 'l', 'B', 'a', 'r', 'A', 'r', 'e', 'a', 0,
    'T', 'o', 'p', 'D', 'o', 'c', 'k', 'W', 'i', 'd', 'g', 'e', 't', 'A', 'r', 'e', 'a', 0,
    'I', 'g', 'n', 'o', 'r', 'e', 'A', 's', 'p', 'e', 'c', 't', 'R', 'a', 't', 'i', 'o', 0,
    'U', 'I', '_', 'A', 'n', 'i', 'm', 'a', 't', 'e', 'T', 'o', 'o', 'l', 'B', 'o', 'x', 0,
    'U', 'I', '_', 'A', 'n', 'i', 'm', 'a', 't', 'e', 'T', 'o', 'o', 'l', 't', 'i', 'p', 0,
    'K', 'e', 'y', '_', 'M', 'e', 'd', 'i', 'a', 'P', 'r', 'e', 'v', 'i', 'o', 'u', 's', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'B', 'e', 'l', 'o', 'w', 'd', 'o', 't', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'A', 'b', 'o', 'v', 'e', 'd', 'o', 't', 0,
    'K', 'e', 'y', '_', 'H', 'a', 'n', 'g', 'u', 'l', '_', 'J', 'e', 'o', 'n', 'j', 'a', 0,
    'K', 'e', 'y', '_', 'H', 'a', 'n', 'g', 'u', 'l', '_', 'R', 'o', 'm', 'a', 'j', 'a', 0,
    'K', 'e', 'y', '_', 't', 'h', 'r', 'e', 'e', 'q', 'u', 'a', 'r', 't', 'e', 'r', 's', 0,
    'K', 'e', 'y', '_', 't', 'h', 'r', 'e', 'e', 's', 'u', 'p', 'e', 'r', 'i', 'o', 'r', 0,
    'K', 'e', 'y', '_', 'g', 'u', 'i', 'l', 'l', 'e', 'm', 'o', 't', 'l', 'e', 'f', 't', 0,
    'W', 'A', '_', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 'C', 'o', 'u', 'n', 't', 0,
    'W', 'A', '_', 'W', 'S', 't', 'a', 't', 'e', '_', 'C', 'r', 'e', 'a', 't', 'e', 'd', 0,
    'W', 'A', '_', 'P', 'a', 'i', 'n', 't', 'U', 'n', 'c', 'l', 'i', 'p', 'p', 'e', 'd', 0,
    'W', 'A', '_', 'O', 'u', 't', 's', 'i', 'd', 'e', 'W', 'S', 'R', 'a', 'n', 'g', 'e', 0,
    'W', 'A', '_', 'W', 'i', 'n', 'd', 'o', 'w', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'd', 0,
    'W', 'A', '_', 'K', 'e', 'y', 'C', 'o', 'm', 'p', 'r', 'e', 's', 's', 'i', 'o', 'n', 0,
    'W', 'A', '_', 'W', 'S', 't', 'a', 't', 'e', '_', 'V', 'i', 's', 'i', 'b', 'l', 'e', 0,
    'W', 'A', '_', 'S', 't', 'a', 't', 'i', 'c', 'C', 'o', 'n', 't', 'e', 'n', 't', 's', 0,
    'Q', 't', ':', ':', 'T', 'e', 'x', 't', 'E', 'l', 'i', 'd', 'e', 'M', 'o', 'd', 'e', 0,
    'Q', 't', ':', ':', 'A', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 'F', 'l', 'a', 'g', 0,
    's', 'i', 'p', '.', 's', 'i', 'm', 'p', 'l', 'e', 'w', 'r', 'a', 'p', 'p', 'e', 'r', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'F', 'i', 'l', 'e', 'I', 'n', 'f', 'o', '>', 0,
    'w', 'r', 'i', 't', 'e', 'E', 'n', 'd', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 0,
    'w', 'r', 'i', 't', 'e', 'T', 'e', 'x', 't', 'E', 'l', 'e', 'm', 'e', 'n', 't', 0,
    'Q', 'X', 'm', 'l', 'S', 't', 'r', 'e', 'a', 'm', 'W', 'r', 'i', 't', 'e', 'r', 0,
    'd', 'o', 'c', 'u', 'm', 'e', 'n', 't', 'E', 'n', 'c', 'o', 'd', 'i', 'n', 'g', 0,
    'Q', 'X', 'm', 'l', 'S', 't', 'r', 'e', 'a', 'm', 'R', 'e', 'a', 'd', 'e', 'r', 0,
    'Q', 'T', 'i', 'm', 'e', 'L', 'i', 'n', 'e', ':', ':', 'S', 't', 'a', 't', 'e', 0,
    's', 'e', 't', 'E', 'x', 'p', 'i', 'r', 'y', 'T', 'i', 'm', 'e', 'o', 'u', 't', 0,
    'i', 'd', 'e', 'a', 'l', 'T', 'h', 'r', 'e', 'a', 'd', 'C', 'o', 'u', 'n', 't', 0,
    'c', 'o', 'd', 'e', 'c', 'F', 'o', 'r', 'C', 'S', 't', 'r', 'i', 'n', 'g', 's', 0,
    'c', 'o', 'n', 'v', 'e', 'r', 't', 'T', 'o', 'U', 'n', 'i', 'c', 'o', 'd', 'e', 0,
    'Q', 'S', 'y', 's', 't', 'e', 'm', 'S', 'e', 'm', 'a', 'p', 'h', 'o', 'r', 'e', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'D', 'u', 'p', 'l', 'i', 'c', 'a', 't', 'e', 's', 0,
    'r', 'e', 'p', 'l', 'a', 'c', 'e', 'I', 'n', 'S', 't', 'r', 'i', 'n', 'g', 's', 0,
    'S', 'e', 'c', 't', 'i', 'o', 'n', 'S', 'k', 'i', 'p', 'E', 'm', 'p', 't', 'y', 0,
    'P', 'e', 'r', 'm', 'i', 's', 's', 'i', 'o', 'n', 'D', 'e', 'n', 'i', 'e', 'd', 0,
    's', 'e', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'F', 'o', 'r', 'm', 'a', 't', 0,
    's', 'e', 't', 'S', 'y', 's', 't', 'e', 'm', 'I', 'n', 'i', 'P', 'a', 't', 'h', 0,
    'f', 'a', 'l', 'l', 'b', 'a', 'c', 'k', 's', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'Q', 'S', 'e', 't', 't', 'i', 'n', 'g', 's', ':', ':', 'S', 'c', 'o', 'p', 'e', 0,
    's', 'e', 't', 'P', 'a', 't', 't', 'e', 'r', 'n', 'S', 'y', 'n', 't', 'a', 'x', 0,
    'w', 'o', 'r', 'k', 'i', 'n', 'g', 'D', 'i', 'r', 'e', 'c', 't', 'o', 'r', 'y', 0,
    'c', 'l', 'o', 's', 'e', 'R', 'e', 'a', 'd', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 0,
    'S', 'e', 'p', 'a', 'r', 'a', 't', 'e', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 's', 0,
    'Q', 'G', 'e', 'n', 'e', 'r', 'i', 'c', 'A', 'r', 'g', 'u', 'm', 'e', 'n', 't', 0,
    'c', 'o', 'n', 's', 't', 'r', 'u', 'c', 't', 'o', 'r', 'C', 'o', 'u', 'n', 't', 0,
    'c', 'h', 'e', 'c', 'k', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'A', 'r', 'g', 's', 0,
    'i', 'n', 'd', 'e', 'x', 'O', 'f', 'C', 'l', 'a', 's', 's', 'I', 'n', 'f', 'o', 0,
    'e', 'n', 'u', 'm', 'e', 'r', 'a', 't', 'o', 'r', 'O', 'f', 'f', 's', 'e', 't', 0,
    's', 't', 'a', 't', 'i', 'c', 'M', 'e', 't', 'a', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'D', 'a', 't', 'e', 'T', 'o', 'S', 't', 'r', 'i', 'n', 'g', 'L', 'o', 'n', 'g', 0,
    's', 'e', 't', 'N', 'u', 'm', 'b', 'e', 'r', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'T', 'o', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'V', 'a', 't', 'i', 'c', 'a', 'n', 'C', 'i', 't', 'y', 'S', 't', 'a', 't', 'e', 0,
    'E', 'q', 'u', 'a', 't', 'o', 'r', 'i', 'a', 'l', 'G', 'u', 'i', 'n', 'e', 'a', 0,
    'B', 'r', 'u', 'n', 'e', 'i', 'D', 'a', 'r', 'u', 's', 's', 'a', 'l', 'a', 'm', 0,
    'Q', 'L', 'o', 'c', 'a', 'l', 'e', ':', ':', 'C', 'o', 'u', 'n', 't', 'r', 'y', 0,
    'N', 'o', 'r', 'w', 'e', 'g', 'i', 'a', 'n', 'N', 'y', 'n', 'o', 'r', 's', 'k', 0,
    'T', 'r', 'a', 'n', 's', 'l', 'a', 't', 'i', 'o', 'n', 's', 'P', 'a', 't', 'h', 0,
    'l', 'i', 'c', 'e', 'n', 's', 'e', 'd', 'P', 'r', 'o', 'd', 'u', 'c', 't', 's', 0,
    'w', 'a', 'i', 't', 'F', 'o', 'r', 'R', 'e', 'a', 'd', 'y', 'R', 'e', 'a', 'd', 0,
    'd', 'i', 'r', 'e', 'c', 't', 'o', 'r', 'y', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'c', 'o', 'm', 'p', 'l', 'e', 't', 'e', 'B', 'a', 's', 'e', 'N', 'a', 'm', 'e', 0,
    'P', 'e', 'r', 'm', 'i', 's', 's', 'i', 'o', 'n', 's', 'E', 'r', 'r', 'o', 'r', 0,
    'U', 'n', 's', 'p', 'e', 'c', 'i', 'f', 'i', 'e', 'd', 'E', 'r', 'r', 'o', 'r', 0,
    'Q', 'F', 'i', 'l', 'e', ':', ':', 'F', 'i', 'l', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    'D', 'e', 'f', 'e', 'r', 'r', 'e', 'd', 'D', 'e', 'l', 'e', 't', 'i', 'o', 'n', 0,
    'X', '1', '1', 'E', 'x', 'c', 'l', 'u', 'd', 'e', 'T', 'i', 'm', 'e', 'r', 's', 0,
    'r', 'e', 'l', 'a', 't', 'i', 'v', 'e', 'F', 'i', 'l', 'e', 'P', 'a', 't', 'h', 0,
    'a', 'b', 's', 'o', 'l', 'u', 't', 'e', 'F', 'i', 'l', 'e', 'P', 'a', 't', 'h', 0,
    'S', 't', 'a', 'n', 'd', 'a', 'l', 'o', 'n', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'W', 'h', 'a', 't', 's', 'T', 'h', 'i', 's', 'C', 'l', 'i', 'c', 'k', 'e', 'd', 0,
    'S', 'h', 'o', 'r', 't', 'c', 'u', 't', 'O', 'v', 'e', 'r', 'r', 'i', 'd', 'e', 0,
    'A', 'c', 't', 'i', 'v', 'a', 't', 'i', 'o', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'E', 'm', 'b', 'e', 'd', 'd', 'i', 'n', 'g', 'C', 'o', 'n', 't', 'r', 'o', 'l', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'D', 'e', 'a', 'c', 't', 'i', 'v', 'a', 't', 'e', 0,
    'M', 'o', 'u', 's', 'e', 'B', 'u', 't', 't', 'o', 'n', 'P', 'r', 'e', 's', 's', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'T', 'r', 'a', 'n', 's', 'l', 'a', 't', 'o', 'r', 0,
    's', 'e', 'n', 'd', 'P', 'o', 's', 't', 'e', 'd', 'E', 'v', 'e', 'n', 't', 's', 0,
    'o', 'r', 'g', 'a', 'n', 'i', 'z', 'a', 't', 'i', 'o', 'n', 'N', 'a', 'm', 'e', 0,
    'Q', 'C', 'o', 'r', 'e', 'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'i', 's', 'L', 'e', 't', 't', 'e', 'r', 'O', 'r', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'd', 'e', 'c', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 'T', 'a', 'g', 0,
    'Q', 'C', 'h', 'a', 'r', ':', ':', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'P', 'u', 'n', 'c', 't', 'u', 'a', 't', 'i', 'o', 'n', '_', 'D', 'a', 's', 'k', 0,
    'P', 'u', 'n', 'c', 't', 'u', 'a', 't', 'i', 'o', 'n', '_', 'O', 'p', 'e', 'n', 0,
    'P', 'u', 'n', 'c', 't', 'u', 'a', 't', 'i', 'o', 'n', '_', 'D', 'a', 's', 'h', 0,
    'L', 'e', 't', 't', 'e', 'r', '_', 'T', 'i', 't', 'l', 'e', 'c', 'a', 's', 'e', 0,
    'L', 'e', 't', 't', 'e', 'r', '_', 'L', 'o', 'w', 'e', 'r', 'c', 'a', 's', 'e', 0,
    'L', 'e', 't', 't', 'e', 'r', '_', 'U', 'p', 'p', 'e', 'r', 'c', 'a', 's', 'e', 0,
    'O', 't', 'h', 'e', 'r', '_', 'P', 'r', 'i', 'v', 'a', 't', 'e', 'U', 's', 'e', 0,
    'B', 'y', 't', 'e', 'O', 'r', 'd', 'e', 'r', 'S', 'w', 'a', 'p', 'p', 'e', 'd', 0,
    'd', 'i', 's', 'c', 'o', 'n', 'n', 'e', 'c', 't', 'N', 'o', 't', 'i', 'f', 'y', 0,
    'e', 'n', 'd', 'R', 'e', 'm', 'o', 'v', 'e', 'C', 'o', 'l', 'u', 'm', 'n', 's', 0,
    'e', 'n', 'd', 'I', 'n', 's', 'e', 'r', 't', 'C', 'o', 'l', 'u', 'm', 'n', 's', 0,
    'M', 'o', 'd', 'i', 'f', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'T', 'i', 'm', 'e', 0,
    'A', 'b', 's', 'o', 'l', 'u', 't', 'e', 'P', 'a', 't', 'h', 'N', 'a', 'm', 'e', 0,
    'r', 'e', 'g', 'i', 's', 't', 'e', 'r', 'e', 'd', 'T', 'i', 'm', 'e', 'r', 's', 0,
    'u', 'n', 'r', 'e', 'g', 'i', 's', 't', 'e', 'r', 'T', 'i', 'm', 'e', 'r', 's', 0,
    'h', 'a', 's', 'P', 'e', 'n', 'd', 'i', 'n', 'g', 'E', 'v', 'e', 'n', 't', 's', 0,
    'L', 'o', 'w', 'E', 'v', 'e', 'n', 't', 'P', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    'A', 'A', '_', 'N', 'a', 't', 'i', 'v', 'e', 'W', 'i', 'n', 'd', 'o', 'w', 's', 0,
    'A', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'M', 'o', 'd', 'a', 'l', 0,
    'M', 'a', 't', 'c', 'h', 'F', 'i', 'x', 'e', 'd', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'I', 't', 'e', 'm', 'I', 's', 'S', 'e', 'l', 'e', 'c', 't', 'a', 'b', 'l', 'e', 0,
    'Q', 't', ':', ':', 'I', 't', 'e', 'm', 'D', 'a', 't', 'a', 'R', 'o', 'l', 'e', 0,
    'P', 'a', 'r', 't', 'i', 'a', 'l', 'l', 'y', 'C', 'h', 'e', 'c', 'k', 'e', 'd', 0,
    'T', 'a', 'r', 'g', 'e', 't', 'M', 'o', 'v', 'e', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'I', 'm', 'C', 'u', 'r', 's', 'o', 'r', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'O', 't', 'h', 'e', 'r', 'F', 'o', 'c', 'u', 's', 'R', 'e', 'a', 's', 'o', 'n', 0,
    'P', 'o', 'p', 'u', 'p', 'F', 'o', 'c', 'u', 's', 'R', 'e', 'a', 's', 'o', 'n', 0,
    'M', 'o', 'u', 's', 'e', 'F', 'o', 'c', 'u', 's', 'R', 'e', 'a', 's', 'o', 'n', 0,
    'D', 'i', 'r', 'e', 'c', 't', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'B', 'o', 't', 't', 'o', 'm', 'L', 'e', 'f', 't', 'C', 'o', 'r', 'n', 'e', 'r', 0,
    'S', 'y', 's', 't', 'e', 'm', 'L', 'o', 'c', 'a', 'l', 'e', 'D', 'a', 't', 'e', 0,
    'Q', 't', ':', ':', 'T', 'o', 'o', 'l', 'B', 'a', 'r', 'A', 'r', 'e', 'a', 's', 0,
    'T', 'o', 'o', 'l', 'B', 'a', 'r', 'A', 'r', 'e', 'a', '_', 'M', 'a', 's', 'k', 0,
    'R', 'i', 'g', 'h', 't', 'T', 'o', 'o', 'l', 'B', 'a', 'r', 'A', 'r', 'e', 'a', 0,
    'N', 'o', 'D', 'o', 'c', 'k', 'W', 'i', 'd', 'g', 'e', 't', 'A', 'r', 'e', 'a', 0,
    'C', 'l', 'o', 's', 'e', 'd', 'H', 'a', 'n', 'd', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'D', 'i', 'a', 'g', 'C', 'r', 'o', 's', 's', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'Q', 't', ':', ':', 'P', 'e', 'n', 'J', 'o', 'i', 'n', 'S', 't', 'y', 'l', 'e', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'C', 'e', 'd', 'i', 'l', 'l', 'a', 0,
    'K', 'e', 'y', '_', 'H', 'a', 'n', 'g', 'u', 'l', '_', 'B', 'a', 'n', 'j', 'a', 0,
    'K', 'e', 'y', '_', 'H', 'a', 'n', 'g', 'u', 'l', '_', 'H', 'a', 'n', 'j', 'a', 0,
    'K', 'e', 'y', '_', 'H', 'a', 'n', 'g', 'u', 'l', '_', 'S', 't', 'a', 'r', 't', 0,
    'K', 'e', 'y', '_', 'q', 'u', 'e', 's', 't', 'i', 'o', 'n', 'd', 'o', 'w', 'n', 0,
    'K', 'e', 'y', '_', 'n', 'o', 'b', 'r', 'e', 'a', 'k', 's', 'p', 'a', 'c', 'e', 0,
    'K', 'e', 'y', '_', 'B', 'r', 'a', 'c', 'k', 'e', 't', 'R', 'i', 'g', 'h', 't', 0,
    'A', 'l', 'p', 'h', 'a', 'D', 'i', 't', 'h', 'e', 'r', '_', 'M', 'a', 's', 'k', 0,
    'W', 'A', '_', 'M', 'a', 'c', 'N', 'o', 'r', 'm', 'a', 'l', 'S', 'i', 'z', 'e', 0,
    'W', 'A', '_', 'D', 'e', 'l', 'e', 't', 'e', 'O', 'n', 'C', 'l', 'o', 's', 'e', 0,
    'W', 'A', '_', 'N', 'o', 'M', 'o', 'u', 's', 'e', 'R', 'e', 'p', 'l', 'a', 'y', 0,
    'W', 'A', '_', 'S', 'e', 't', 'W', 'i', 'n', 'd', 'o', 'w', 'I', 'c', 'o', 'n', 0,
    'W', 'A', '_', 'M', 'a', 'c', 'M', 'e', 't', 'a', 'l', 'S', 't', 'y', 'l', 'e', 0,
    'W', 'A', '_', 'P', 'e', 'n', 'd', 'i', 'n', 'g', 'U', 'p', 'd', 'a', 't', 'e', 0,
    'W', 'A', '_', 'F', 'o', 'r', 'c', 'e', 'D', 'i', 's', 'a', 'b', 'l', 'e', 'd', 0,
    'W', 'A', '_', 'W', 'S', 't', 'a', 't', 'e', '_', 'H', 'i', 'd', 'd', 'e', 'n', 0,
    'W', 'A', '_', 'P', 'a', 'i', 'n', 't', 'O', 'n', 'S', 'c', 'r', 'e', 'e', 'n', 0,
    'W', 'A', '_', 'M', 'o', 'u', 's', 'e', 'T', 'r', 'a', 'c', 'k', 'i', 'n', 'g', 0,
    'Q', 't', ':', ':', 'W', 'i', 'n', 'd', 'o', 'w', 'S', 't', 'a', 't', 'e', 's', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'F', 'u', 'l', 'l', 'S', 'c', 'r', 'e', 'e', 'n', 0,
    'T', 'e', 'x', 't', 'H', 'i', 'd', 'e', 'M', 'n', 'e', 'm', 'o', 'n', 'i', 'c', 0,
    'T', 'e', 'x', 't', 'W', 'r', 'a', 'p', 'A', 'n', 'y', 'w', 'h', 'e', 'r', 'e', 0,
    'T', 'e', 'x', 't', 'S', 'h', 'o', 'w', 'M', 'n', 'e', 'm', 'o', 'n', 'i', 'c', 0,
    'Q', 't', ':', ':', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 's', 0,
    'Q', 't', ':', ':', 'M', 'o', 'u', 's', 'e', 'B', 'u', 't', 't', 'o', 'n', 's', 0,
    'Q', 'S', 'y', 's', 'I', 'n', 'f', 'o', ':', ':', 'E', 'n', 'd', 'i', 'a', 'n', 0,
    'P', 'Y', 'Q', 'T', '_', 'V', 'E', 'R', 'S', 'I', 'O', 'N', '_', 'S', 'T', 'R', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'V', 'a', 'r', 'i', 'a', 'n', 't', '>', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'O', 'b', 'j', 'e', 'c', 't', '*', '>', 0,
    'w', 'r', 'i', 't', 'e', 'E', 'n', 'd', 'E', 'l', 'e', 'm', 'e', 'n', 't', 0,
    'w', 'r', 'i', 't', 'e', 'C', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r', 's', 0,
    'w', 'r', 'i', 't', 'e', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 's', 0,
    'r', 'e', 'a', 'd', 'E', 'l', 'e', 'm', 'e', 'n', 't', 'T', 'e', 'x', 't', 0,
    'c', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r', 'O', 'f', 'f', 's', 'e', 't', 0,
    'd', 'o', 'c', 'u', 'm', 'e', 'n', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'i', 's', 'S', 't', 'a', 'r', 't', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 0,
    'e', 'n', 'c', 'o', 'd', 'e', 'd', 'F', 'r', 'a', 'g', 'm', 'e', 'n', 't', 0,
    'e', 'n', 'c', 'o', 'd', 'e', 'd', 'P', 'a', 's', 's', 'w', 'o', 'r', 'd', 0,
    'e', 'n', 'c', 'o', 'd', 'e', 'd', 'U', 's', 'e', 'r', 'N', 'a', 'm', 'e', 0,
    's', 'e', 't', 'I', 'd', 'n', 'W', 'h', 'i', 't', 'e', 'l', 'i', 's', 't', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'Q', 'u', 'e', 'r', 'y', 'I', 't', 'e', 'm', 0,
    's', 'e', 't', 'E', 'n', 'c', 'o', 'd', 'e', 'd', 'Q', 'u', 'e', 'r', 'y', 0,
    'R', 'e', 'm', 'o', 'v', 'e', 'A', 'u', 't', 'h', 'o', 'r', 'i', 't', 'y', 0,
    't', 'o', 'g', 'g', 'l', 'e', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'I', 'n', 'h', 'e', 'r', 'i', 't', 'P', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    'H', 'i', 'g', 'h', 'e', 's', 't', 'P', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'T', 'h', 'r', 'e', 'a', 'd', 'I', 'd', 0,
    'l', 'o', 'w', 'e', 'r', 'c', 'a', 's', 'e', 'd', 'i', 'g', 'i', 't', 's', 0,
    'u', 'p', 'p', 'e', 'r', 'c', 'a', 's', 'e', 'd', 'i', 'g', 'i', 't', 's', 0,
    'U', 'p', 'p', 'e', 'r', 'c', 'a', 's', 'e', 'D', 'i', 'g', 'i', 't', 's', 0,
    'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'C', 'o', 'd', 'e', 'c', 's', 0,
    'b', 'o', 'u', 'n', 'd', 'a', 'r', 'y', 'R', 'e', 'a', 's', 'o', 'n', 's', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'L', 'o', 'c', 'a', 'l', 'F', 'i', 'l', 'e', 0,
    's', 'e', 't', 'F', 'i', 'l', 'e', 'T', 'e', 'm', 'p', 'l', 'a', 't', 'e', 0,
    'Q', 'S', 'o', 'c', 'k', 'e', 't', 'N', 'o', 't', 'i', 'f', 'i', 'e', 'r', 0,
    'b', 'e', 'g', 'i', 'n', 'W', 'r', 'i', 't', 'e', 'A', 'r', 'r', 'a', 'y', 0,
    'c', 'a', 's', 'e', 'S', 'e', 'n', 's', 'i', 't', 'i', 'v', 'i', 't', 'y', 0,
    'm', 'o', 'v', 'e', 'B', 'o', 't', 't', 'o', 'm', 'R', 'i', 'g', 'h', 't', 0,
    't', 'r', 'y', 'L', 'o', 'c', 'k', 'F', 'o', 'r', 'W', 'r', 'i', 't', 'e', 0,
    's', 'e', 't', 'P', 'r', 'o', 'c', 'e', 's', 's', 'S', 't', 'a', 't', 'e', 0,
    'w', 'a', 'i', 't', 'F', 'o', 'r', 'F', 'i', 'n', 'i', 's', 'h', 'e', 'd', 0,
    'r', 'e', 'a', 'd', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 'M', 'o', 'd', 'e', 0,
    'm', 'a', 'n', 'h', 'a', 't', 't', 'a', 'n', 'L', 'e', 'n', 'g', 't', 'h', 0,
    's', 't', 'a', 't', 'i', 'c', 'I', 'n', 's', 't', 'a', 'n', 'c', 'e', 's', 0,
    'i', 'n', 'd', 'e', 'x', 'O', 'f', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'e', 'n', 'u', 'm', 'e', 'r', 'a', 't', 'o', 'r', 'C', 'o', 'u', 'n', 't', 0,
    'c', 'l', 'a', 's', 's', 'I', 'n', 'f', 'o', 'O', 'f', 'f', 's', 'e', 't', 0,
    'Q', 'T', '_', 'T', 'R', '_', 'N', 'O', 'O', 'P', '_', 'U', 'T', 'F', '8', 0,
    'Q', 'M', 'e', 't', 'a', 'T', 'y', 'p', 'e', ':', ':', 'T', 'y', 'p', 'e', 0,
    'h', 'a', 's', 'N', 'o', 't', 'i', 'f', 'y', 'S', 'i', 'g', 'n', 'a', 'l', 0,
    'D', 'a', 't', 'e', 'F', 'o', 'r', 'm', 'a', 't', 'S', 'h', 'o', 'r', 't', 0,
    'c', 'o', 'u', 'n', 't', 'r', 'y', 'T', 'o', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'U', 'S', 'V', 'i', 'r', 'g', 'i', 'n', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'M', 'a', 'r', 's', 'h', 'a', 'l', 'l', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'F', 'r', 'e', 'n', 'c', 'h', 'P', 'o', 'l', 'y', 'n', 'e', 's', 'i', 'a', 0,
    'F', 'a', 'l', 'k', 'l', 'a', 'n', 'd', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'C', 'h', 'r', 'i', 's', 't', 'm', 'a', 's', 'I', 's', 'l', 'a', 'n', 'd', 0,
    'N', 'o', 'r', 'w', 'e', 'g', 'i', 'a', 'n', 'B', 'o', 'k', 'm', 'a', 'l', 0,
    'N', 'o', 'I', 't', 'e', 'r', 'a', 't', 'o', 'r', 'F', 'l', 'a', 'g', 's', 0,
    'Q', 'D', 'i', 'r', ':', ':', 'S', 'o', 'r', 't', 'F', 'l', 'a', 'g', 's', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'D', 'a', 't', 'e', 'T', 'i', 'm', 'e', 0,
    'R', 'e', 'a', 'd', 'C', 'o', 'r', 'r', 'u', 'p', 't', 'D', 'a', 't', 'a', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'U', 'n', 'b', 'l', 'o', 'c', 'k', 'e', 'd', 0,
    'A', 'c', 't', 'i', 'v', 'a', 't', 'e', 'C', 'o', 'n', 't', 'r', 'o', 'l', 0,
    'q', 'A', 'd', 'd', 'P', 'o', 's', 't', 'R', 'o', 'u', 't', 'i', 'n', 'e', 0,
    's', 'e', 't', 'L', 'i', 'b', 'r', 'a', 'r', 'y', 'P', 'a', 't', 'h', 's', 0,
    'a', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'N', 'a', 'm', 'e', 0,
    's', 'u', 'r', 'r', 'o', 'g', 'a', 't', 'e', 'T', 'o', 'U', 'c', 's', '4', 0,
    'i', 's', 'H', 'i', 'g', 'h', 'S', 'u', 'r', 'r', 'o', 'g', 'a', 't', 'e', 0,
    'C', 'o', 'm', 'b', 'i', 'n', 'i', 'n', 'g', '_', 'A', 'b', 'o', 'v', 'e', 0,
    'C', 'o', 'm', 'b', 'i', 'n', 'i', 'n', 'g', '_', 'R', 'i', 'g', 'h', 't', 0,
    'C', 'o', 'm', 'b', 'i', 'n', 'i', 'n', 'g', '_', 'B', 'e', 'l', 'o', 'w', 0,
    'N', 'o', 'D', 'e', 'c', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'S', 'y', 'm', 'b', 'o', 'l', '_', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'r', 0,
    'S', 'y', 'm', 'b', 'o', 'l', '_', 'C', 'u', 'r', 'r', 'e', 'n', 'c', 'y', 0,
    'L', 'e', 't', 't', 'e', 'r', '_', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'r', 0,
    'O', 't', 'h', 'e', 'r', '_', 'S', 'u', 'r', 'r', 'o', 'g', 'a', 't', 'e', 0,
    'S', 'e', 'p', 'a', 'r', 'a', 't', 'o', 'r', '_', 'S', 'p', 'a', 'c', 'e', 0,
    'M', 'a', 'r', 'k', '_', 'N', 'o', 'n', 'S', 'p', 'a', 'c', 'i', 'n', 'g', 0,
    'Q', 'C', 'h', 'a', 'r', ':', ':', 'C', 'a', 't', 'e', 'g', 'o', 'r', 'y', 0,
    'b', 'e', 'g', 'i', 'n', 'R', 'e', 'm', 'o', 'v', 'e', 'R', 'o', 'w', 's', 0,
    'b', 'e', 'g', 'i', 'n', 'I', 'n', 's', 'e', 'r', 't', 'R', 'o', 'w', 's', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 's', 'I', 'n', 's', 'e', 'r', 't', 'e', 'd', 0,
    'i', 'n', 't', 'e', 'r', 'n', 'a', 'l', 'P', 'o', 'i', 'n', 't', 'e', 'r', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'F', 'i', 'l', 'e', 'P', 'a', 't', 'h', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'F', 'i', 'l', 'e', 'I', 'n', 'f', 'o', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'F', 'i', 'l', 'e', 'N', 'a', 'm', 'e', 0,
    'u', 'n', 'r', 'e', 'g', 'i', 's', 't', 'e', 'r', 'T', 'i', 'm', 'e', 'r', 0,
    'T', 'o', 'p', 'R', 'i', 'g', 'h', 't', 'S', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'M', 'a', 't', 'c', 'h', 'S', 't', 'a', 'r', 't', 's', 'W', 'i', 't', 'h', 0,
    'Q', 't', ':', ':', 'D', 'r', 'o', 'p', 'A', 'c', 't', 'i', 'o', 'n', 's', 0,
    'Q', 't', ':', ':', 'F', 'o', 'c', 'u', 's', 'R', 'e', 'a', 's', 'o', 'n', 0,
    'C', 'a', 's', 'e', 'I', 'n', 's', 'e', 'n', 's', 'i', 't', 'i', 'v', 'e', 0,
    'A', 'l', 'l', 'T', 'o', 'o', 'l', 'B', 'a', 'r', 'A', 'r', 'e', 'a', 's', 0,
    'L', 'e', 'f', 't', 'T', 'o', 'o', 'l', 'B', 'a', 'r', 'A', 'r', 'e', 'a', 0,
    'Q', 't', ':', ':', 'T', 'o', 'o', 'l', 'B', 'a', 'r', 'A', 'r', 'e', 'a', 0,
    'K', 'e', 'e', 'p', 'A', 's', 'p', 'e', 'c', 't', 'R', 'a', 't', 'i', 'o', 0,
    'W', 'h', 'a', 't', 's', 'T', 'h', 'i', 's', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'F', 'o', 'r', 'b', 'i', 'd', 'd', 'e', 'n', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'S', 'i', 'z', 'e', 'F', 'D', 'i', 'a', 'g', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'S', 'i', 'z', 'e', 'B', 'D', 'i', 'a', 'g', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'Q', 't', ':', ':', 'C', 'u', 'r', 's', 'o', 'r', 'S', 'h', 'a', 'p', 'e', 0,
    'U', 'I', '_', 'A', 'n', 'i', 'm', 'a', 't', 'e', 'C', 'o', 'm', 'b', 'o', 0,
    'Q', 't', ':', ':', 'P', 'e', 'n', 'C', 'a', 'p', 'S', 't', 'y', 'l', 'e', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', 'M', 'e', 'd', 'i', 'a', 0,
    'K', 'e', 'y', '_', 'M', 'e', 'd', 'i', 'a', 'R', 'e', 'c', 'o', 'r', 'd', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'O', 'g', 'o', 'n', 'e', 'k', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'M', 'a', 'c', 'r', 'o', 'n', 0,
    'K', 'e', 'y', '_', 'H', 'a', 'n', 'g', 'u', 'l', '_', 'J', 'a', 'm', 'o', 0,
    'K', 'e', 'y', '_', 'E', 'i', 's', 'u', '_', 't', 'o', 'g', 'g', 'l', 'e', 0,
    'K', 'e', 'y', '_', 'M', 'o', 'd', 'e', '_', 's', 'w', 'i', 't', 'c', 'h', 0,
    'K', 'e', 'y', '_', 'U', 'c', 'i', 'r', 'c', 'u', 'm', 'f', 'l', 'e', 'x', 0,
    'K', 'e', 'y', '_', 'O', 'c', 'i', 'r', 'c', 'u', 'm', 'f', 'l', 'e', 'x', 0,
    'K', 'e', 'y', '_', 'I', 'c', 'i', 'r', 'c', 'u', 'm', 'f', 'l', 'e', 'x', 0,
    'K', 'e', 'y', '_', 'E', 'c', 'i', 'r', 'c', 'u', 'm', 'f', 'l', 'e', 'x', 0,
    'K', 'e', 'y', '_', 'A', 'c', 'i', 'r', 'c', 'u', 'm', 'f', 'l', 'e', 'x', 0,
    'K', 'e', 'y', '_', 'o', 'n', 'e', 's', 'u', 'p', 'e', 'r', 'i', 'o', 'r', 0,
    'K', 'e', 'y', '_', 't', 'w', 'o', 's', 'u', 'p', 'e', 'r', 'i', 'o', 'r', 0,
    'K', 'e', 'y', '_', 'o', 'r', 'd', 'f', 'e', 'm', 'i', 'n', 'i', 'n', 'e', 0,
    'K', 'e', 'y', '_', 'A', 's', 'c', 'i', 'i', 'C', 'i', 'r', 'c', 'u', 'm', 0,
    'K', 'e', 'y', '_', 'B', 'r', 'a', 'c', 'k', 'e', 't', 'L', 'e', 'f', 't', 0,
    'K', 'e', 'y', '_', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', '_', 'R', 0,
    'K', 'e', 'y', '_', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', '_', 'L', 0,
    'T', 'r', 'a', 'n', 's', 'p', 'a', 'r', 'e', 'n', 't', 'M', 'o', 'd', 'e', 0,
    'D', 'i', 't', 'h', 'e', 'r', 'M', 'o', 'd', 'e', '_', 'M', 'a', 's', 'k', 0,
    'T', 'h', 'r', 'e', 's', 'h', 'o', 'l', 'd', 'D', 'i', 't', 'h', 'e', 'r', 0,
    'W', 'A', '_', 'N', 'a', 't', 'i', 'v', 'e', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'W', 'A', '_', 'M', 'a', 'c', 'S', 'm', 'a', 'l', 'l', 'S', 'i', 'z', 'e', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'M', 'a', 'x', 'i', 'm', 'i', 'z', 'e', 'd', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'M', 'i', 'n', 'i', 'm', 'i', 'z', 'e', 'd', 0,
    'Q', 't', ':', ':', 'W', 'i', 'n', 'd', 'o', 'w', 'S', 't', 'a', 't', 'e', 0,
    'Q', 't', ':', ':', 'W', 'i', 'n', 'd', 'o', 'w', 'F', 'l', 'a', 'g', 's', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'T', 'i', 't', 'l', 'e', 'H', 'i', 'n', 't', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', '_', 'M', 'a', 's', 'k', 0,
    'D', 'e', 's', 'c', 'e', 'n', 'd', 'i', 'n', 'g', 'O', 'r', 'd', 'e', 'r', 0,
    'Q', 't', ':', ':', 'F', 'o', 'c', 'u', 's', 'P', 'o', 'l', 'i', 'c', 'y', 0,
    'Q', 't', ':', ':', 'O', 'r', 'i', 'e', 'n', 't', 'a', 't', 'i', 'o', 'n', 0,
    'M', 'o', 'u', 's', 'e', 'B', 'u', 't', 't', 'o', 'n', 'M', 'a', 's', 'k', 0,
    'Q', 't', ':', ':', 'M', 'o', 'u', 's', 'e', 'B', 'u', 't', 't', 'o', 'n', 0,
    'C', 'o', 'n', 't', 'r', 'o', 'l', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'r', 0,
    'Q', 't', ':', ':', 'G', 'l', 'o', 'b', 'a', 'l', 'C', 'o', 'l', 'o', 'r', 0,
    'Q', 'S', 'y', 's', 'I', 'n', 'f', 'o', ':', ':', 'S', 'i', 'z', 'e', 's', 0,
    'w', 'r', 'i', 't', 'e', 'N', 'a', 'm', 'e', 's', 'p', 'a', 'c', 'e', 0,
    'w', 'r', 'i', 't', 'e', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'a', 'u', 't', 'o', 'F', 'o', 'r', 'm', 'a', 't', 't', 'i', 'n', 'g', 0,
    'e', 'n', 't', 'i', 't', 'y', 'R', 'e', 's', 'o', 'l', 'v', 'e', 'r', 0,
    'i', 's', 'S', 't', 'a', 'r', 't', 'E', 'l', 'e', 'm', 'e', 'n', 't', 0,
    'Q', 'W', 'a', 'i', 't', 'C', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n', 0,
    'Q', 'V', 'e', 'c', 't', 'o', 'r', '<', 'q', 'r', 'e', 'a', 'l', '>', 0,
    'Q', 'V', 'a', 'r', 'i', 'a', 'n', 't', ':', ':', 'T', 'y', 'p', 'e', 0,
    'Q', 'U', 'u', 'i', 'd', ':', ':', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'Q', 'U', 'u', 'i', 'd', ':', ':', 'V', 'a', 'r', 'i', 'a', 'n', 't', 0,
    's', 'e', 't', 'E', 'n', 'c', 'o', 'd', 'e', 'd', 'P', 'a', 't', 'h', 0,
    's', 'e', 't', 'E', 'n', 'c', 'o', 'd', 'e', 'd', 'H', 'o', 's', 't', 0,
    'q', 'u', 'e', 'r', 'y', 'I', 't', 'e', 'm', 'V', 'a', 'l', 'u', 'e', 0,
    'R', 'e', 'm', 'o', 'v', 'e', 'F', 'r', 'a', 'g', 'm', 'e', 'n', 't', 0,
    'R', 'e', 'm', 'o', 'v', 'e', 'U', 's', 'e', 'r', 'I', 'n', 'f', 'o', 0,
    'R', 'e', 'm', 'o', 'v', 'e', 'P', 'a', 's', 's', 'w', 'o', 'r', 'd', 0,
    's', 'e', 't', 'C', 'u', 'r', 'r', 'e', 'n', 't', 'T', 'i', 'm', 'e', 0,
    'u', 'p', 'd', 'a', 't', 'e', 'I', 'n', 't', 'e', 'r', 'v', 'a', 'l', 0,
    'E', 'a', 's', 'e', 'I', 'n', 'O', 'u', 't', 'C', 'u', 'r', 'v', 'e', 0,
    'm', 'a', 'x', 'T', 'h', 'r', 'e', 'a', 'd', 'C', 'o', 'u', 'n', 't', 0,
    'g', 'l', 'o', 'b', 'a', 'l', 'I', 'n', 's', 't', 'a', 'n', 'c', 'e', 0,
    'N', 'o', 'r', 'm', 'a', 'l', 'P', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    'L', 'o', 'w', 'e', 's', 't', 'P', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    'q', 'S', 'e', 't', 'F', 'i', 'e', 'l', 'd', 'W', 'i', 'd', 't', 'h', 0,
    's', 'e', 't', 'I', 'n', 't', 'e', 'g', 'e', 'r', 'B', 'a', 's', 'e', 0,
    's', 'e', 't', 'N', 'u', 'm', 'b', 'e', 'r', 'F', 'l', 'a', 'g', 's', 0,
    'f', 'i', 'e', 'l', 'd', 'A', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 0,
    's', 'k', 'i', 'p', 'W', 'h', 'i', 't', 'e', 'S', 'p', 'a', 'c', 'e', 0,
    'c', 'o', 'd', 'e', 'c', 'F', 'o', 'r', 'L', 'o', 'c', 'a', 'l', 'e', 0,
    't', 'o', 'N', 'e', 'x', 't', 'B', 'o', 'u', 'n', 'd', 'a', 'r', 'y', 0,
    'Q', 'T', 'e', 'm', 'p', 'o', 'r', 'a', 'r', 'y', 'F', 'i', 'l', 'e', 0,
    'Q', 'S', 't', 'r', 'i', 'n', 'g', 'M', 'a', 't', 'c', 'h', 'e', 'r', 0,
    'S', 'k', 'i', 'p', 'E', 'm', 'p', 't', 'y', 'P', 'a', 'r', 't', 's', 0,
    'K', 'e', 'e', 'p', 'E', 'm', 'p', 't', 'y', 'P', 'a', 'r', 't', 's', 0,
    'S', 'e', 'c', 't', 'i', 'o', 'n', 'D', 'e', 'f', 'a', 'u', 'l', 't', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'M', 'a', 'p', 'p', 'i', 'n', 'g', 's', 0,
    'O', 'u', 't', 'O', 'f', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 's', 0,
    's', 'e', 't', 'U', 's', 'e', 'r', 'I', 'n', 'i', 'P', 'a', 't', 'h', 0,
    'b', 'e', 'g', 'i', 'n', 'R', 'e', 'a', 'd', 'A', 'r', 'r', 'a', 'y', 0,
    'C', 'a', 'r', 'e', 't', 'W', 'o', 'n', 't', 'M', 'a', 't', 'c', 'h', 0,
    'm', 'o', 'v', 'e', 'B', 'o', 't', 't', 'o', 'm', 'L', 'e', 'f', 't', 0,
    's', 'e', 't', 'B', 'o', 't', 't', 'o', 'm', 'R', 'i', 'g', 'h', 't', 0,
    't', 'r', 'y', 'L', 'o', 'c', 'k', 'F', 'o', 'r', 'R', 'e', 'a', 'd', 0,
    'Q', 'R', 'e', 'a', 'd', 'W', 'r', 'i', 't', 'e', 'L', 'o', 'c', 'k', 0,
    'w', 'a', 'i', 't', 'F', 'o', 'r', 'S', 't', 'a', 'r', 't', 'e', 'd', 0,
    's', 'e', 't', 'E', 'n', 'v', 'i', 'r', 'o', 'n', 'm', 'e', 'n', 't', 0,
    's', 'e', 't', 'R', 'e', 'a', 'd', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 0,
    'M', 'e', 'r', 'g', 'e', 'd', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 's', 0,
    'Q', 'P', 'a', 'i', 'r', '<', 'i', 'n', 't', ',', 'i', 'n', 't', '>', 0,
    'n', 'o', 'r', 'm', 'a', 'l', 'i', 'z', 'e', 'd', 'T', 'y', 'p', 'e', 0,
    'c', 'l', 'a', 's', 's', 'I', 'n', 'f', 'o', 'C', 'o', 'u', 'n', 't', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'O', 'f', 'f', 's', 'e', 't', 0,
    'd', 'u', 'm', 'p', 'O', 'b', 'j', 'e', 'c', 't', 'T', 'r', 'e', 'e', 0,
    'd', 'u', 'm', 'p', 'O', 'b', 'j', 'e', 'c', 't', 'I', 'n', 'f', 'o', 0,
    's', 'i', 'g', 'n', 'a', 'l', 's', 'B', 'l', 'o', 'c', 'k', 'e', 'd', 0,
    'Q', 'M', 'e', 't', 'a', 'C', 'l', 'a', 's', 's', 'I', 'n', 'f', 'o', 0,
    'p', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 'N', 'a', 'm', 'e', 's', 0,
    'p', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 'T', 'y', 'p', 'e', 's', 0,
    'f', 'a', 'l', 'l', 'b', 'a', 'c', 'k', 'L', 'o', 'c', 'a', 'l', 'e', 0,
    'M', 'o', 'n', 't', 'h', 'N', 'a', 'm', 'e', 'S', 'h', 'o', 'r', 't', 0,
    'D', 'a', 't', 'e', 'F', 'o', 'r', 'm', 'a', 't', 'L', 'o', 'n', 'g', 0,
    'I', 'm', 'p', 'e', 'r', 'i', 'a', 'l', 'S', 'y', 's', 't', 'e', 'm', 0,
    'g', 'r', 'o', 'u', 'p', 'S', 'e', 'p', 'a', 'r', 'a', 't', 'o', 'r', 0,
    'd', 'a', 't', 'e', 'T', 'i', 'm', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'S', 'o', 'l', 'o', 'm', 'o', 'n', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'P', 'a', 'p', 'u', 'a', 'N', 'e', 'w', 'G', 'u', 'i', 'n', 'e', 'a', 0,
    'N', 'o', 'I', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'E', 'r', 'r', 'o', 'r', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'b', 'y', 't', 'e', 's', 'A', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 0,
    's', 'e', 't', 'C', 'u', 'r', 'r', 'e', 'n', 't', 'P', 'a', 't', 'h', 0,
    'c', 'o', 'm', 'p', 'l', 'e', 't', 'e', 'S', 'u', 'f', 'f', 'i', 'x', 0,
    'S', 'u', 'b', 'd', 'i', 'r', 'e', 'c', 't', 'o', 'r', 'i', 'e', 's', 0,
    'F', 'o', 'l', 'l', 'o', 'w', 'S', 'y', 'm', 'l', 'i', 'n', 'k', 's', 0,
    's', 'e', 't', 'S', 'e', 'a', 'r', 'c', 'h', 'P', 'a', 't', 'h', 's', 0,
    'i', 's', 'A', 'b', 's', 'o', 'l', 'u', 't', 'e', 'P', 'a', 't', 'h', 0,
    's', 'e', 't', 'N', 'a', 'm', 'e', 'F', 'i', 'l', 't', 'e', 'r', 's', 0,
    'Q', 'D', 'i', 'r', ':', ':', 'S', 'o', 'r', 't', 'F', 'l', 'a', 'g', 0,
    'N', 'o', 'D', 'o', 't', 'A', 'n', 'd', 'D', 'o', 't', 'D', 'o', 't', 0,
    'P', 'e', 'r', 'm', 'i', 's', 's', 'i', 'o', 'n', 'M', 'a', 's', 'k', 0,
    's', 'h', 'o', 'r', 't', 'M', 'o', 'n', 't', 'h', 'N', 'a', 'm', 'e', 0,
    'U', 'n', 'g', 'r', 'a', 'b', 'K', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 0,
    'Z', 'e', 'r', 'o', 'T', 'i', 'm', 'e', 'r', 'E', 'v', 'e', 'n', 't', 0,
    'M', 'e', 'n', 'u', 'b', 'a', 'r', 'U', 'p', 'd', 'a', 't', 'e', 'd', 0,
    'Q', 'u', 'e', 'r', 'y', 'W', 'h', 'a', 't', 's', 'T', 'h', 'i', 's', 0,
    'M', 'o', 'd', 'i', 'f', 'i', 'e', 'd', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'I', 'c', 'o', 'n', 'T', 'e', 'x', 't', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'D', 'e', 'f', 'e', 'r', 'r', 'e', 'd', 'D', 'e', 'l', 'e', 't', 'e', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'A', 'c', 't', 'i', 'v', 'a', 't', 'e', 0,
    'a', 'p', 'p', 'l', 'i', 'c', 'a', 't', 'i', 'o', 'n', 'P', 'i', 'd', 0,
    'a', 'd', 'd', 'L', 'i', 'b', 'r', 'a', 'r', 'y', 'P', 'a', 't', 'h', 0,
    'i', 's', 'L', 'o', 'w', 'S', 'u', 'r', 'r', 'o', 'g', 'a', 't', 'e', 0,
    'u', 'n', 'i', 'c', 'o', 'd', 'e', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'c', 'o', 'm', 'b', 'i', 'n', 'i', 'n', 'g', 'C', 'l', 'a', 's', 's', 0,
    'C', 'o', 'm', 'b', 'i', 'n', 'i', 'n', 'g', '_', 'L', 'e', 'f', 't', 0,
    'Q', 'C', 'h', 'a', 'r', ':', ':', 'J', 'o', 'i', 'n', 'i', 'n', 'g', 0,
    'S', 'e', 'p', 'a', 'r', 'a', 't', 'o', 'r', '_', 'L', 'i', 'n', 'e', 0,
    'M', 'a', 'r', 'k', '_', 'E', 'n', 'c', 'l', 'o', 's', 'i', 'n', 'g', 0,
    'r', 'i', 'g', 'h', 't', 'J', 'u', 's', 't', 'i', 'f', 'i', 'e', 'd', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 's', 'R', 'e', 'm', 'o', 'v', 'e', 'd', 0,
    's', 'e', 't', 'P', 'e', 'r', 'm', 'i', 's', 's', 'i', 'o', 'n', 's', 0,
    'i', 's', 'R', 'e', 'l', 'a', 't', 'i', 'v', 'e', 'P', 'a', 't', 'h', 0,
    'W', 'r', 'i', 't', 'e', 'O', 't', 'h', 'e', 'r', 'P', 'e', 'r', 'm', 0,
    'W', 'r', 'i', 't', 'e', 'G', 'r', 'o', 'u', 'p', 'P', 'e', 'r', 'm', 0,
    'W', 'r', 'i', 't', 'e', 'O', 'w', 'n', 'e', 'r', 'P', 'e', 'r', 'm', 0,
    'T', 'o', 'p', 'L', 'e', 'f', 't', 'S', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'M', 'i', 'n', 'i', 'm', 'u', 'm', 'D', 'e', 's', 'c', 'e', 'n', 't', 0,
    'Q', 't', ':', ':', 'M', 'a', 't', 'c', 'h', 'F', 'l', 'a', 'g', 's', 0,
    'M', 'a', 't', 'c', 'h', 'R', 'e', 'c', 'u', 'r', 's', 'i', 'v', 'e', 0,
    'I', 't', 'e', 'm', 'I', 's', 'T', 'r', 'i', 's', 't', 'a', 't', 'e', 0,
    'I', 't', 'e', 'm', 'I', 's', 'E', 'd', 'i', 't', 'a', 'b', 'l', 'e', 0,
    'C', 'h', 'e', 'c', 'k', 'S', 't', 'a', 't', 'e', 'R', 'o', 'l', 'e', 0,
    'F', 'o', 'r', 'e', 'g', 'r', 'o', 'u', 'n', 'd', 'R', 'o', 'l', 'e', 0,
    'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 'R', 'o', 'l', 'e', 0,
    'D', 'e', 'c', 'o', 'r', 'a', 't', 'i', 'o', 'n', 'R', 'o', 'l', 'e', 0,
    'Q', 't', ':', ':', 'C', 'h', 'e', 'c', 'k', 'S', 't', 'a', 't', 'e', 0,
    'Q', 't', ':', ':', 'D', 'r', 'o', 'p', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'T', 'a', 'b', 'F', 'o', 'c', 'u', 's', 'R', 'e', 'a', 's', 'o', 'n', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'S', 'h', 'o', 'r', 't', 'c', 'u', 't', 0,
    'W', 'i', 'd', 'g', 'e', 't', 'S', 'h', 'o', 'r', 't', 'c', 'u', 't', 0,
    'A', 'u', 't', 'o', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'T', 'o', 'p', 'R', 'i', 'g', 'h', 't', 'C', 'o', 'r', 'n', 'e', 'r', 0,
    'Q', 't', ':', ':', 'D', 'a', 't', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'T', 'o', 'p', 'T', 'o', 'o', 'l', 'B', 'a', 'r', 'A', 'r', 'e', 'a', 0,
    'Q', 't', ':', ':', 'T', 'e', 'x', 't', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'O', 'p', 'e', 'n', 'H', 'a', 'n', 'd', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'U', 'I', '_', 'F', 'a', 'd', 'e', 'T', 'o', 'o', 'l', 't', 'i', 'p', 0,
    'U', 'I', '_', 'A', 'n', 'i', 'm', 'a', 't', 'e', 'M', 'e', 'n', 'u', 0,
    'T', 'e', 'x', 't', 'u', 'r', 'e', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'Q', 't', ':', ':', 'B', 'r', 'u', 's', 'h', 'S', 't', 'y', 'l', 'e', 0,
    'C', 'u', 's', 't', 'o', 'm', 'D', 'a', 's', 'h', 'L', 'i', 'n', 'e', 0,
    'D', 'a', 's', 'h', 'D', 'o', 't', 'D', 'o', 't', 'L', 'i', 'n', 'e', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', 'M', 'a', 'i', 'l', 0,
    'K', 'e', 'y', '_', 'T', 'r', 'e', 'b', 'l', 'e', 'D', 'o', 'w', 'n', 0,
    'K', 'e', 'y', '_', 'V', 'o', 'l', 'u', 'm', 'e', 'M', 'u', 't', 'e', 0,
    'K', 'e', 'y', '_', 'V', 'o', 'l', 'u', 'm', 'e', 'D', 'o', 'w', 'n', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'C', 'a', 'r', 'o', 'n', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'B', 'r', 'e', 'v', 'e', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'T', 'i', 'l', 'd', 'e', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'A', 'c', 'u', 't', 'e', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'G', 'r', 'a', 'v', 'e', 0,
    'K', 'e', 'y', '_', 'H', 'a', 'n', 'g', 'u', 'l', '_', 'E', 'n', 'd', 0,
    'K', 'e', 'y', '_', 'E', 'i', 's', 'u', '_', 'S', 'h', 'i', 'f', 't', 0,
    'K', 'e', 'y', '_', 'K', 'a', 'n', 'a', '_', 'S', 'h', 'i', 'f', 't', 0,
    'K', 'e', 'y', '_', 'y', 'd', 'i', 'a', 'e', 'r', 'e', 's', 'i', 's', 0,
    'K', 'e', 'y', '_', 'U', 'd', 'i', 'a', 'e', 'r', 'e', 's', 'i', 's', 0,
    'K', 'e', 'y', '_', 'O', 'd', 'i', 'a', 'e', 'r', 'e', 's', 'i', 's', 0,
    'K', 'e', 'y', '_', 'I', 'd', 'i', 'a', 'e', 'r', 'e', 's', 'i', 's', 0,
    'K', 'e', 'y', '_', 'E', 'd', 'i', 'a', 'e', 'r', 'e', 's', 'i', 's', 0,
    'K', 'e', 'y', '_', 'A', 'd', 'i', 'a', 'e', 'r', 'e', 's', 'i', 's', 0,
    'K', 'e', 'y', '_', 'o', 'n', 'e', 'q', 'u', 'a', 'r', 't', 'e', 'r', 0,
    'K', 'e', 'y', '_', 'r', 'e', 'g', 'i', 's', 't', 'e', 'r', 'e', 'd', 0,
    'K', 'e', 'y', '_', 'e', 'x', 'c', 'l', 'a', 'm', 'd', 'o', 'w', 'n', 0,
    'K', 'e', 'y', '_', 'A', 's', 'c', 'i', 'i', 'T', 'i', 'l', 'd', 'e', 0,
    'K', 'e', 'y', '_', 'B', 'r', 'a', 'c', 'e', 'R', 'i', 'g', 'h', 't', 0,
    'K', 'e', 'y', '_', 'U', 'n', 'd', 'e', 'r', 's', 'c', 'o', 'r', 'e', 0,
    'K', 'e', 'y', '_', 'P', 'a', 'r', 'e', 'n', 'R', 'i', 'g', 'h', 't', 0,
    'K', 'e', 'y', '_', 'A', 'p', 'o', 's', 't', 'r', 'o', 'p', 'h', 'e', 0,
    'K', 'e', 'y', '_', 'N', 'u', 'm', 'b', 'e', 'r', 'S', 'i', 'g', 'n', 0,
    'K', 'e', 'y', '_', 'S', 'c', 'r', 'o', 'l', 'l', 'L', 'o', 'c', 'k', 0,
    'C', 'o', 'l', 'o', 'r', 'M', 'o', 'd', 'e', '_', 'M', 'a', 's', 'k', 0,
    'W', 'A', '_', 'M', 'a', 'c', 'M', 'i', 'n', 'i', 'S', 'i', 'z', 'e', 0,
    'W', 'A', '_', 'A', 'c', 'c', 'e', 'p', 't', 'D', 'r', 'o', 'p', 's', 0,
    'W', 'A', '_', 'Q', 'u', 'i', 't', 'O', 'n', 'C', 'l', 'o', 's', 'e', 0,
    'W', 'A', '_', 'G', 'r', 'o', 'u', 'p', 'L', 'e', 'a', 'd', 'e', 'r', 0,
    'W', 'A', '_', 'M', 'o', 'u', 's', 'e', 'N', 'o', 'M', 'a', 's', 'k', 0,
    'W', 'A', '_', 'R', 'i', 'g', 'h', 't', 'T', 'o', 'L', 'e', 'f', 't', 0,
    'W', 'A', '_', 'I', 'n', 'v', 'a', 'l', 'i', 'd', 'S', 'i', 'z', 'e', 0,
    'M', 'S', 'W', 'i', 'n', 'd', 'o', 'w', 's', 'O', 'w', 'n', 'D', 'C', 0,
    'Q', 't', ':', ':', 'W', 'i', 'n', 'd', 'o', 'w', 'T', 'y', 'p', 'e', 0,
    'T', 'e', 'x', 't', 'E', 'x', 'p', 'a', 'n', 'd', 'T', 'a', 'b', 's', 0,
    'T', 'e', 'x', 't', 'S', 'i', 'n', 'g', 'l', 'e', 'L', 'i', 'n', 'e', 0,
    'A', 's', 'c', 'e', 'n', 'd', 'i', 'n', 'g', 'O', 'r', 'd', 'e', 'r', 0,
    'K', 'e', 'y', 'p', 'a', 'd', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'r', 0,
    'i', 's', 'E', 'n', 'd', 'D', 'o', 'c', 'u', 'm', 'e', 'n', 't', 0,
    'q', 'u', 'a', 'l', 'i', 'f', 'i', 'e', 'd', 'N', 'a', 'm', 'e', 0,
    'E', 'm', 'b', 'e', 'd', 'd', 'e', 'd', 'P', 'O', 'S', 'I', 'X', 0,
    'f', 'r', 'o', 'm', 'L', 'o', 'c', 'a', 'l', 'F', 'i', 'l', 'e', 0,
    's', 'e', 't', 'Q', 'u', 'e', 'r', 'y', 'I', 't', 'e', 'm', 's', 0,
    's', 'e', 't', 'E', 'n', 'c', 'o', 'd', 'e', 'd', 'U', 'r', 'l', 0,
    's', 'e', 't', 'S', 'i', 'n', 'g', 'l', 'e', 'S', 'h', 'o', 't', 0,
    's', 'e', 't', 'C', 'u', 'r', 'v', 'e', 'S', 'h', 'a', 'p', 'e', 0,
    's', 'e', 't', 'F', 'r', 'a', 'm', 'e', 'R', 'a', 'n', 'g', 'e', 0,
    's', 'e', 't', 'S', 't', 'a', 'r', 't', 'F', 'r', 'a', 'm', 'e', 0,
    'r', 'e', 'l', 'e', 'a', 's', 'e', 'T', 'h', 'r', 'e', 'a', 'd', 0,
    'r', 'e', 's', 'e', 'r', 'v', 'e', 'T', 'h', 'r', 'e', 'a', 'd', 0,
    'e', 'x', 'p', 'i', 'r', 'y', 'T', 'i', 'm', 'e', 'o', 'u', 't', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'T', 'h', 'r', 'e', 'a', 'd', 0,
    'l', 'o', 'w', 'e', 'r', 'c', 'a', 's', 'e', 'b', 'a', 's', 'e', 0,
    'u', 'p', 'p', 'e', 'r', 'c', 'a', 's', 'e', 'b', 'a', 's', 'e', 0,
    's', 'e', 't', 'F', 'i', 'e', 'l', 'd', 'W', 'i', 'd', 't', 'h', 0,
    'U', 'p', 'p', 'e', 'r', 'c', 'a', 's', 'e', 'B', 'a', 's', 'e', 0,
    'F', 'i', 'x', 'e', 'd', 'N', 'o', 't', 'a', 't', 'i', 'o', 'n', 0,
    'S', 'm', 'a', 'r', 't', 'N', 'o', 't', 'a', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'C', 'o', 'd', 'e', 'c', 'F', 'o', 'r', 'T', 'r', 0,
    'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'M', 'i', 'b', 's', 0,
    'N', 'o', 't', 'A', 't', 'B', 'o', 'u', 'n', 'd', 'a', 'r', 'y', 0,
    's', 'e', 't', 'A', 'u', 't', 'o', 'R', 'e', 'm', 'o', 'v', 'e', 0,
    'Q', 'L', 'a', 't', 'i', 'n', '1', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'i', 's', 'R', 'i', 'g', 'h', 't', 'T', 'o', 'L', 'e', 'f', 't', 0,
    'f', 'r', 'o', 'm', 'L', 'o', 'c', 'a', 'l', '8', 'B', 'i', 't', 0,
    'Q', 'S', 'i', 'g', 'n', 'a', 'l', 'M', 'a', 'p', 'p', 'e', 'r', 0,
    'A', 'l', 'r', 'e', 'a', 'd', 'y', 'E', 'x', 'i', 's', 't', 's', 0,
    'Q', 'S', 'h', 'a', 'r', 'e', 'd', 'M', 'e', 'm', 'o', 'r', 'y', 0,
    'd', 'e', 'f', 'a', 'u', 'l', 't', 'F', 'o', 'r', 'm', 'a', 't', 0,
    's', 'e', 't', 'A', 'r', 'r', 'a', 'y', 'I', 'n', 'd', 'e', 'x', 0,
    'I', 'n', 'v', 'a', 'l', 'i', 'd', 'F', 'o', 'r', 'm', 'a', 't', 0,
    's', 'e', 't', 'A', 'u', 't', 'o', 'D', 'e', 'l', 'e', 't', 'e', 0,
    'c', 'a', 'p', 't', 'u', 'r', 'e', 'd', 'T', 'e', 'x', 't', 's', 0,
    'm', 'a', 't', 'c', 'h', 'e', 'd', 'L', 'e', 'n', 'g', 't', 'h', 0,
    'p', 'a', 't', 't', 'e', 'r', 'n', 'S', 'y', 'n', 't', 'a', 'x', 0,
    'C', 'a', 'r', 'e', 't', 'A', 't', 'O', 'f', 'f', 's', 'e', 't', 0,
    't', 'o', 'A', 'l', 'i', 'g', 'n', 'e', 'd', 'R', 'e', 'c', 't', 0,
    's', 'e', 't', 'B', 'o', 't', 't', 'o', 'm', 'L', 'e', 'f', 't', 0,
    'r', 'e', 'a', 'd', 'W', 'r', 'i', 't', 'e', 'L', 'o', 'c', 'k', 0,
    's', 't', 'a', 'r', 't', 'D', 'e', 't', 'a', 'c', 'h', 'e', 'd', 0,
    'F', 'a', 'i', 'l', 'e', 'd', 'T', 'o', 'S', 't', 'a', 'r', 't', 0,
    'Q', 'P', 'l', 'u', 'g', 'i', 'n', 'L', 'o', 'a', 'd', 'e', 'r', 0,
    'i', 'n', 'd', 'e', 'x', 'O', 'f', 'S', 'i', 'g', 'n', 'a', 'l', 0,
    'i', 'n', 'd', 'e', 'x', 'O', 'f', 'M', 'e', 't', 'h', 'o', 'd', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'C', 'o', 'u', 'n', 't', 0,
    'p', 'y', 'q', 't', 'S', 'i', 'g', 'n', 'a', 't', 'u', 'r', 'e', 0,
    's', 'e', 't', 'O', 'b', 'j', 'e', 'c', 't', 'N', 'a', 'm', 'e', 0,
    'p', 'y', 'q', 't', 'C', 'o', 'n', 'f', 'i', 'g', 'u', 'r', 'e', 0,
    'Q', 'M', 'e', 't', 'a', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'M', 'o', 'n', 't', 'h', 'N', 'a', 'm', 'e', 'L', 'o', 'n', 'g', 0,
    'Q', 'S', 'y', 's', 't', 'e', 'm', 'L', 'o', 'c', 'a', 'l', 'e', 0,
    'n', 'u', 'm', 'b', 'e', 'r', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'W', 'e', 's', 't', 'e', 'r', 'n', 'S', 'a', 'h', 'a', 'r', 'a', 0,
    'U', 'n', 'i', 't', 'e', 'd', 'K', 'i', 'n', 'g', 'd', 'o', 'm', 0,
    'N', 'o', 'r', 'f', 'o', 'l', 'k', 'I', 's', 'l', 'a', 'n', 'd', 0,
    'L', 'i', 'e', 'c', 'h', 't', 'e', 'n', 's', 't', 'e', 'i', 'n', 0,
    'C', 'z', 'e', 'c', 'h', 'R', 'e', 'p', 'u', 'b', 'l', 'i', 'c', 0,
    'C', 'a', 'y', 'm', 'a', 'n', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'A', 'm', 'e', 'r', 'i', 'c', 'a', 'n', 'S', 'a', 'm', 'o', 'a', 0,
    'T', 'o', 'n', 'g', 'a', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 0,
    'S', 'e', 'r', 'b', 'o', 'C', 'r', 'o', 'a', 't', 'i', 'a', 'n', 0,
    'R', 'h', 'a', 'e', 't', 'o', 'R', 'o', 'm', 'a', 'n', 'c', 'e', 0,
    'N', 'a', 'u', 'r', 'u', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 0,
    'L', 'i', 'b', 'r', 'a', 'r', 'i', 'e', 's', 'P', 'a', 't', 'h', 0,
    'Q', 'F', 'S', 'F', 'i', 'l', 'e', 'E', 'n', 'g', 'i', 'n', 'e', 0,
    's', 'y', 'm', 'L', 'i', 'n', 'k', 'T', 'a', 'r', 'g', 'e', 't', 0,
    'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 'E', 'r', 'r', 'o', 'r', 0,
    'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    'a', 'd', 'd', 'S', 'e', 'a', 'r', 'c', 'h', 'P', 'a', 't', 'h', 0,
    'e', 'n', 't', 'r', 'y', 'I', 'n', 'f', 'o', 'L', 'i', 's', 't', 0,
    'c', 'a', 'n', 'o', 'n', 'i', 'c', 'a', 'l', 'P', 'a', 't', 'h', 0,
    'Q', 'D', 'i', 'r', ':', ':', 'F', 'i', 'l', 't', 'e', 'r', 's', 0,
    'f', 'r', 'o', 'm', 'J', 'u', 'l', 'i', 'a', 'n', 'D', 'a', 'y', 0,
    'l', 'o', 'n', 'g', 'M', 'o', 'n', 't', 'h', 'N', 'a', 'm', 'e', 0,
    'T', 'o', 'o', 'l', 'T', 'i', 'p', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'T', 'o', 'o', 'l', 'B', 'a', 'r', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'A', 'c', 't', 'i', 'o', 'n', 'R', 'e', 'm', 'o', 'v', 'e', 'd', 0,
    'A', 'c', 't', 'i', 'o', 'n', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'B', 'l', 'o', 'c', 'k', 'e', 'd', 0,
    'E', 'n', 'a', 'b', 'l', 'e', 'd', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'T', 'a', 'b', 'l', 'e', 't', 'R', 'e', 'l', 'e', 'a', 's', 'e', 0,
    'U', 'p', 'd', 'a', 't', 'e', 'R', 'e', 'q', 'u', 'e', 's', 't', 0,
    'L', 'a', 'y', 'o', 'u', 't', 'R', 'e', 'q', 'u', 'e', 's', 't', 0,
    'P', 'o', 'l', 'i', 's', 'h', 'R', 'e', 'q', 'u', 'e', 's', 't', 0,
    'C', 'h', 'i', 'l', 'd', 'P', 'o', 'l', 'i', 's', 'h', 'e', 'd', 0,
    't', 'e', 's', 't', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'h', 'i', 'g', 'h', 'S', 'u', 'r', 'r', 'o', 'g', 'a', 't', 'e', 0,
    'd', 'e', 'c', 'o', 'm', 'p', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'U', 'n', 'i', 'c', 'o', 'd', 'e', '_', '2', '_', '1', '_', '2', 0,
    'O', 't', 'h', 'e', 'r', '_', 'C', 'o', 'n', 't', 'r', 'o', 'l', 0,
    'N', 'u', 'm', 'b', 'e', 'r', '_', 'L', 'e', 't', 't', 'e', 'r', 0,
    'L', 'i', 'n', 'e', 'S', 'e', 'p', 'a', 'r', 'a', 't', 'o', 'r', 0,
    'l', 'e', 'f', 't', 'J', 'u', 's', 't', 'i', 'f', 'i', 'e', 'd', 0,
    'e', 'n', 'd', 'R', 'e', 'm', 'o', 'v', 'e', 'R', 'o', 'w', 's', 0,
    'e', 'n', 'd', 'I', 'n', 's', 'e', 'r', 't', 'R', 'o', 'w', 's', 0,
    'l', 'a', 'y', 'o', 'u', 't', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'C', 'o', 'l', 'u', 'm', 'n', 's', 0,
    'i', 'n', 's', 'e', 'r', 't', 'C', 'o', 'l', 'u', 'm', 'n', 's', 0,
    's', 'e', 't', 'H', 'e', 'a', 'd', 'e', 'r', 'D', 'a', 't', 'a', 0,
    'c', 'a', 's', 'e', 'S', 'e', 'n', 's', 'i', 't', 'i', 'v', 'e', 0,
    'C', 'a', 'n', 'o', 'n', 'i', 'c', 'a', 'l', 'N', 'a', 'm', 'e', 0,
    'L', 'o', 'c', 'a', 'l', 'D', 'i', 's', 'k', 'F', 'l', 'a', 'g', 0,
    'D', 'i', 'r', 'e', 'c', 't', 'o', 'r', 'y', 'T', 'y', 'p', 'e', 0,
    'R', 'e', 'a', 'd', 'O', 't', 'h', 'e', 'r', 'P', 'e', 'r', 'm', 0,
    'R', 'e', 'a', 'd', 'G', 'r', 'o', 'u', 'p', 'P', 'e', 'r', 'm', 0,
    'W', 'r', 'i', 't', 'e', 'U', 's', 'e', 'r', 'P', 'e', 'r', 'm', 0,
    'R', 'e', 'a', 'd', 'O', 'w', 'n', 'e', 'r', 'P', 'e', 'r', 'm', 0,
    'p', 'r', 'o', 'c', 'e', 's', 's', 'E', 'v', 'e', 'n', 't', 's', 0,
    'B', 'o', 't', 't', 'o', 'm', 'S', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'P', 'r', 'e', 'f', 'e', 'r', 'r', 'e', 'd', 'S', 'i', 'z', 'e', 0,
    'M', 'a', 't', 'c', 'h', 'W', 'i', 'l', 'd', 'c', 'a', 'r', 'd', 0,
    'M', 'a', 't', 'c', 'h', 'E', 'n', 'd', 's', 'W', 'i', 't', 'h', 0,
    'M', 'a', 't', 'c', 'h', 'C', 'o', 'n', 't', 'a', 'i', 'n', 's', 0,
    'Q', 't', ':', ':', 'M', 'a', 't', 'c', 'h', 'F', 'l', 'a', 'g', 0,
    'Q', 't', ':', ':', 'I', 't', 'e', 'm', 'F', 'l', 'a', 'g', 's', 0,
    'I', 't', 'e', 'm', 'I', 's', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'T', 'e', 'x', 't', 'C', 'o', 'l', 'o', 'r', 'R', 'o', 'l', 'e', 0,
    'W', 'h', 'a', 't', 's', 'T', 'h', 'i', 's', 'R', 'o', 'l', 'e', 0,
    'S', 't', 'a', 't', 'u', 's', 'T', 'i', 'p', 'R', 'o', 'l', 'e', 0,
    'N', 'o', 'C', 'o', 'n', 't', 'e', 'x', 't', 'M', 'e', 'n', 'u', 0,
    'N', 'o', 'F', 'o', 'c', 'u', 's', 'R', 'e', 'a', 's', 'o', 'n', 0,
    'I', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 'C', 'l', 'i', 'p', 0,
    'T', 'o', 'p', 'L', 'e', 'f', 't', 'C', 'o', 'r', 'n', 'e', 'r', 0,
    'Q', 't', ':', ':', 'D', 'a', 'y', 'O', 'f', 'W', 'e', 'e', 'k', 0,
    'O', 'f', 'f', 's', 'e', 't', 'F', 'r', 'o', 'm', 'U', 'T', 'C', 0,
    'N', 'o', 'T', 'o', 'o', 'l', 'B', 'a', 'r', 'A', 'r', 'e', 'a', 0,
    'S', 'i', 'z', 'e', 'A', 'l', 'l', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'S', 'i', 'z', 'e', 'H', 'o', 'r', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'S', 'i', 'z', 'e', 'V', 'e', 'r', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'U', 'p', 'A', 'r', 'r', 'o', 'w', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'D', 'e', 'n', 's', 'e', '7', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'D', 'e', 'n', 's', 'e', '6', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'D', 'e', 'n', 's', 'e', '5', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'D', 'e', 'n', 's', 'e', '4', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'D', 'e', 'n', 's', 'e', '3', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'D', 'e', 'n', 's', 'e', '2', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'D', 'e', 'n', 's', 'e', '1', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'M', 'P', 'e', 'n', 'J', 'o', 'i', 'n', 'S', 't', 'y', 'l', 'e', 0,
    'Q', 't', ':', ':', 'A', 'r', 'r', 'o', 'w', 'T', 'y', 'p', 'e', 0,
    'K', 'e', 'y', '_', 'M', 'e', 'd', 'i', 'a', 'L', 'a', 's', 't', 0,
    'K', 'e', 'y', '_', 'F', 'a', 'v', 'o', 'r', 'i', 't', 'e', 's', 0,
    'K', 'e', 'y', '_', 'M', 'e', 'd', 'i', 'a', 'N', 'e', 'x', 't', 0,
    'K', 'e', 'y', '_', 'M', 'e', 'd', 'i', 'a', 'S', 't', 'o', 'p', 0,
    'K', 'e', 'y', '_', 'M', 'e', 'd', 'i', 'a', 'P', 'l', 'a', 'y', 0,
    'K', 'e', 'y', '_', 'B', 'a', 's', 's', 'B', 'o', 'o', 's', 't', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'H', 'o', 'r', 'n', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'H', 'o', 'o', 'k', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'a', 'd', '_', 'I', 'o', 't', 'a', 0,
    'K', 'e', 'y', '_', 'K', 'a', 'n', 'a', '_', 'L', 'o', 'c', 'k', 0,
    'K', 'e', 'y', '_', 'C', 'o', 'd', 'e', 'i', 'n', 'p', 'u', 't', 0,
    'K', 'e', 'y', '_', 'M', 'u', 'l', 't', 'i', '_', 'k', 'e', 'y', 0,
    'K', 'e', 'y', '_', 'm', 'a', 's', 'c', 'u', 'l', 'i', 'n', 'e', 0,
    'K', 'e', 'y', '_', 'p', 'a', 'r', 'a', 'g', 'r', 'a', 'p', 'h', 0,
    'K', 'e', 'y', '_', 'p', 'l', 'u', 's', 'm', 'i', 'n', 'u', 's', 0,
    'K', 'e', 'y', '_', 'c', 'o', 'p', 'y', 'r', 'i', 'g', 'h', 't', 0,
    'K', 'e', 'y', '_', 'd', 'i', 'a', 'e', 'r', 'e', 's', 'i', 's', 0,
    'K', 'e', 'y', '_', 'b', 'r', 'o', 'k', 'e', 'n', 'b', 'a', 'r', 0,
    'K', 'e', 'y', '_', 'B', 'r', 'a', 'c', 'e', 'L', 'e', 'f', 't', 0,
    'K', 'e', 'y', '_', 'Q', 'u', 'o', 't', 'e', 'L', 'e', 'f', 't', 0,
    'K', 'e', 'y', '_', 'B', 'a', 'c', 'k', 's', 'l', 'a', 's', 'h', 0,
    'K', 'e', 'y', '_', 'S', 'e', 'm', 'i', 'c', 'o', 'l', 'o', 'n', 0,
    'K', 'e', 'y', '_', 'P', 'a', 'r', 'e', 'n', 'L', 'e', 'f', 't', 0,
    'K', 'e', 'y', '_', 'A', 'm', 'p', 'e', 'r', 's', 'a', 'n', 'd', 0,
    'K', 'e', 'y', '_', 'B', 'a', 'c', 'k', 's', 'p', 'a', 'c', 'e', 0,
    'O', 'r', 'd', 'e', 'r', 'e', 'd', 'D', 'i', 't', 'h', 'e', 'r', 0,
    'D', 'i', 'f', 'f', 'u', 's', 'e', 'D', 'i', 't', 'h', 'e', 'r', 0,
    'W', 'A', '_', 'S', 't', 'y', 'l', 'e', 'S', 'h', 'e', 'e', 't', 0,
    'W', 'A', '_', 'S', 'e', 't', 'P', 'a', 'l', 'e', 't', 't', 'e', 0,
    'W', 'A', '_', 'U', 'n', 'd', 'e', 'r', 'M', 'o', 'u', 's', 'e', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'N', 'o', 'S', 't', 'a', 't', 'e', 0,
    'T', 'e', 'x', 't', 'D', 'o', 'n', 't', 'P', 'r', 'i', 'n', 't', 0,
    'Q', 't', ':', ':', 'A', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 0,
    'A', 'l', 'i', 'g', 'n', 'A', 'b', 's', 'o', 'l', 'u', 't', 'e', 0,
    'A', 'l', 'i', 'g', 'n', 'T', 'r', 'a', 'i', 'l', 'i', 'n', 'g', 0,
    'Q', 't', ':', ':', 'S', 'o', 'r', 't', 'O', 'r', 'd', 'e', 'r', 0,
    'U', 'N', 'I', 'C', 'O', 'D', 'E', '_', 'A', 'C', 'C', 'E', 'L', 0,
    'M', 'O', 'D', 'I', 'F', 'I', 'E', 'R', '_', 'M', 'A', 'S', 'K', 0,
    'S', 'h', 'i', 'f', 't', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'r', 0,
    'q', 'F', 'u', 'z', 'z', 'y', 'C', 'o', 'm', 'p', 'a', 'r', 'e', 0,
    'Q', 't', 'C', 'r', 'i', 't', 'i', 'c', 'a', 'l', 'M', 's', 'g', 0,
    'q', 'E', 'r', 'r', 'n', 'o', 'W', 'a', 'r', 'n', 'i', 'n', 'g', 0,
    'w', 'r', 'i', 't', 'e', 'C', 'o', 'm', 'm', 'e', 'n', 't', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'i', 's', 'W', 'h', 'i', 't', 'e', 's', 'p', 'a', 'c', 'e', 0,
    'i', 's', 'C', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r', 's', 0,
    'i', 's', 'E', 'n', 'd', 'E', 'l', 'e', 'm', 'e', 'n', 't', 0,
    'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 'N', 'a', 'm', 'e', 0,
    'h', 'a', 's', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'n', 'a', 'm', 'e', 's', 'p', 'a', 'c', 'e', 'U', 'r', 'i', 0,
    't', 'o', 'S', 't', 'r', 'i', 'n', 'g', 'L', 'i', 's', 't', 0,
    'i', 'd', 'n', 'W', 'h', 'i', 't', 'e', 'l', 'i', 's', 't', 0,
    'f', 'r', 'o', 'm', 'P', 'u', 'n', 'y', 'c', 'o', 'd', 'e', 0,
    'h', 'a', 's', 'Q', 'u', 'e', 'r', 'y', 'I', 't', 'e', 'm', 0,
    'a', 'd', 'd', 'Q', 'u', 'e', 'r', 'y', 'I', 't', 'e', 'm', 0,
    'e', 'n', 'c', 'o', 'd', 'e', 'd', 'Q', 'u', 'e', 'r', 'y', 0,
    's', 'e', 't', 'A', 'u', 't', 'h', 'o', 'r', 'i', 't', 'y', 0,
    'T', 'o', 'l', 'e', 'r', 'a', 'n', 't', 'M', 'o', 'd', 'e', 0,
    'R', 'e', 'm', 'o', 'v', 'e', 'S', 'c', 'h', 'e', 'm', 'e', 0,
    'l', 'o', 'a', 'd', 'F', 'r', 'o', 'm', 'D', 'a', 't', 'a', 0,
    'i', 's', 'S', 'i', 'n', 'g', 'l', 'e', 'S', 'h', 'o', 't', 0,
    'v', 'a', 'l', 'u', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'f', 'r', 'a', 'm', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'v', 'a', 'l', 'u', 'e', 'F', 'o', 'r', 'T', 'i', 'm', 'e', 0,
    'f', 'r', 'a', 'm', 'e', 'F', 'o', 'r', 'T', 'i', 'm', 'e', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'V', 'a', 'l', 'u', 'e', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'F', 'r', 'a', 'm', 'e', 0,
    's', 'e', 't', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'L', 'o', 'o', 'p', 'C', 'o', 'u', 'n', 't', 0,
    'E', 'a', 's', 'e', 'O', 'u', 't', 'C', 'u', 'r', 'v', 'e', 0,
    's', 'e', 't', 'S', 't', 'a', 'c', 'k', 'S', 'i', 'z', 'e', 0,
    'H', 'i', 'g', 'h', 'P', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    'I', 'd', 'l', 'e', 'P', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    'n', 'o', 'f', 'o', 'r', 'c', 'e', 'p', 'o', 'i', 'n', 't', 0,
    'Q', 'T', 'e', 'x', 't', 'D', 'e', 'c', 'o', 'd', 'e', 'r', 0,
    'Q', 'T', 'e', 'x', 't', 'E', 'n', 'c', 'o', 'd', 'e', 'r', 0,
    'I', 'g', 'n', 'o', 'r', 'e', 'H', 'e', 'a', 'd', 'e', 'r', 0,
    'c', 'o', 'd', 'e', 'c', 'F', 'o', 'r', 'H', 't', 'm', 'l', 0,
    'c', 'o', 'd', 'e', 'c', 'F', 'o', 'r', 'N', 'a', 'm', 'e', 0,
    'i', 's', 'A', 't', 'B', 'o', 'u', 'n', 'd', 'a', 'r', 'y', 0,
    'f', 'i', 'l', 'e', 'T', 'e', 'm', 'p', 'l', 'a', 't', 'e', 0,
    'i', 's', 'S', 'i', 'm', 'p', 'l', 'e', 'T', 'e', 'x', 't', 0,
    'N', 'a', 't', 'i', 'v', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'i', 's', 'C', 'o', 'm', 'p', 'r', 'e', 's', 's', 'e', 'd', 0,
    'm', 'o', 'v', 'e', 'T', 'o', 'p', 'R', 'i', 'g', 'h', 't', 0,
    'Q', 'W', 'r', 'i', 't', 'e', 'L', 'o', 'c', 'k', 'e', 'r', 0,
    'l', 'o', 'c', 'k', 'F', 'o', 'r', 'W', 'r', 'i', 't', 'e', 0,
    's', 't', 'a', 't', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'U', 'n', 'k', 'n', 'o', 'w', 'n', 'E', 'r', 'r', 'o', 'r', 0,
    'Q', '_', 'R', 'E', 'T', 'U', 'R', 'N', '_', 'A', 'R', 'G', 0,
    'i', 'n', 'v', 'o', 'k', 'e', 'M', 'e', 't', 'h', 'o', 'd', 0,
    'm', 'e', 't', 'h', 'o', 'd', 'O', 'f', 'f', 's', 'e', 't', 0,
    'u', 's', 'e', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'm', 'o', 'v', 'e', 'T', 'o', 'T', 'h', 'r', 'e', 'a', 'd', 0,
    'b', 'l', 'o', 'c', 'k', 'S', 'i', 'g', 'n', 'a', 'l', 's', 0,
    'i', 's', 'W', 'i', 'd', 'g', 'e', 't', 'T', 'y', 'p', 'e', 0,
    'f', 'i', 'n', 'd', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 0,
    'Q', 'M', 'u', 't', 'e', 'x', 'L', 'o', 'c', 'k', 'e', 'r', 0,
    'N', 'o', 'n', 'R', 'e', 'c', 'u', 'r', 's', 'i', 'v', 'e', 0,
    'r', 'e', 't', 'r', 'i', 'e', 'v', 'e', 'D', 'a', 't', 'a', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    's', 'e', 't', 'C', 'o', 'l', 'o', 'r', 'D', 'a', 't', 'a', 0,
    's', 'e', 't', 'I', 'm', 'a', 'g', 'e', 'D', 'a', 't', 'a', 0,
    'i', 's', 'R', 'e', 'g', 'i', 's', 't', 'e', 'r', 'e', 'd', 0,
    'Q', 'K', 'e', 'y', 'S', 'e', 'q', 'u', 'e', 'n', 'c', 'e', 0,
    'F', 'i', 'r', 's', 't', 'G', 'u', 'i', 'T', 'y', 'p', 'e', 0,
    'L', 'a', 's', 't', 'C', 'o', 'r', 'e', 'T', 'y', 'p', 'e', 0,
    'Q', 'V', 'a', 'r', 'i', 'a', 'n', 't', 'H', 'a', 's', 'h', 0,
    'Q', 'V', 'a', 'r', 'i', 'a', 'n', 't', 'L', 'i', 's', 't', 0,
    'n', 'o', 't', 'i', 'f', 'y', 'S', 'i', 'g', 'n', 'a', 'l', 0,
    'i', 's', 'R', 'e', 's', 'e', 't', 't', 'a', 'b', 'l', 'e', 0,
    'h', 'a', 's', 'S', 't', 'd', 'C', 'p', 'p', 'S', 'e', 't', 0,
    'i', 's', 'S', 'c', 'r', 'i', 'p', 't', 'a', 'b', 'l', 'e', 0,
    'i', 's', 'D', 'e', 's', 'i', 'g', 'n', 'a', 'b', 'l', 'e', 0,
    'P', 'o', 's', 'i', 't', 'i', 'v', 'e', 'S', 'i', 'g', 'n', 0,
    'D', 'a', 'y', 'N', 'a', 'm', 'e', 'S', 'h', 'o', 'r', 't', 0,
    'N', 'e', 'g', 'a', 't', 'i', 'v', 'e', 'S', 'i', 'g', 'n', 0,
    'D', 'e', 'c', 'i', 'm', 'a', 'l', 'P', 'o', 'i', 'n', 't', 0,
    'p', 'o', 's', 'i', 't', 'i', 'v', 'e', 'S', 'i', 'g', 'n', 0,
    'M', 'e', 't', 'r', 'i', 'c', 'S', 'y', 's', 't', 'e', 'm', 0,
    'n', 'e', 'g', 'a', 't', 'i', 'v', 'e', 'S', 'i', 'g', 'n', 0,
    'd', 'e', 'c', 'i', 'm', 'a', 'l', 'P', 'o', 'i', 'n', 't', 0,
    'N', 'a', 'r', 'r', 'o', 'w', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'U', 'n', 'i', 't', 'e', 'd', 'S', 't', 'a', 't', 'e', 's', 0,
    'T', 'u', 'r', 'k', 'm', 'e', 'n', 'i', 's', 't', 'a', 'n', 0,
    'T', 'o', 'n', 'g', 'a', 'C', 'o', 'u', 'n', 't', 'r', 'y', 0,
    'N', 'e', 'w', 'C', 'a', 'l', 'e', 'd', 'o', 'n', 'i', 'a', 0,
    'N', 'a', 'u', 'r', 'u', 'C', 'o', 'u', 'n', 't', 'r', 'y', 0,
    'G', 'u', 'i', 'n', 'e', 'a', 'B', 'i', 's', 's', 'a', 'u', 0,
    'F', 'r', 'e', 'n', 'c', 'h', 'G', 'u', 'i', 'a', 'n', 'a', 0,
    'F', 'a', 'r', 'o', 'e', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'C', 'o', 'c', 'o', 's', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'B', 'o', 'u', 'v', 'e', 't', 'I', 's', 'l', 'a', 'n', 'd', 0,
    'L', 'a', 's', 't', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 0,
    'F', 'i', 'j', 'i', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 0,
    'B', 'y', 'e', 'l', 'o', 'r', 'u', 's', 's', 'i', 'a', 'n', 0,
    'Q', 'L', 'i', 's', 't', '<', 'q', 'r', 'e', 'a', 'l', '>', 0,
    'n', 'o', 'r', 'm', 'a', 'l', 'V', 'e', 'c', 't', 'o', 'r', 0,
    'E', 'x', 'a', 'm', 'p', 'l', 'e', 's', 'P', 'a', 't', 'h', 0,
    'S', 'e', 't', 't', 'i', 'n', 'g', 's', 'P', 'a', 't', 'h', 0,
    'B', 'i', 'n', 'a', 'r', 'i', 'e', 's', 'P', 'a', 't', 'h', 0,
    'Q', 'L', 'i', 'b', 'r', 'a', 'r', 'y', 'I', 'n', 'f', 'o', 0,
    's', 'e', 't', 'L', 'o', 'a', 'd', 'H', 'i', 'n', 't', 's', 0,
    'a', 'b', 'o', 'u', 't', 'T', 'o', 'C', 'l', 'o', 's', 'e', 0,
    'b', 'y', 't', 'e', 's', 'W', 'r', 'i', 't', 't', 'e', 'n', 0,
    'b', 'y', 't', 'e', 's', 'T', 'o', 'W', 'r', 'i', 't', 'e', 0,
    'l', 'a', 's', 't', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'd', 0,
    'i', 's', 'E', 'x', 'e', 'c', 'u', 't', 'a', 'b', 'l', 'e', 0,
    'r', 'e', 'a', 'd', 'L', 'i', 'n', 'e', 'D', 'a', 't', 'a', 0,
    'T', 'i', 'm', 'e', 'O', 'u', 't', 'E', 'r', 'r', 'o', 'r', 0,
    'Q', 'D', 'i', 'r', 'I', 't', 'e', 'r', 'a', 't', 'o', 'r', 0,
    'm', 'a', 'k', 'e', 'A', 'b', 's', 'o', 'l', 'u', 't', 'e', 0,
    'a', 'b', 's', 'o', 'l', 'u', 't', 'e', 'P', 'a', 't', 'h', 0,
    'Q', 'D', 'i', 'r', ':', ':', 'F', 'i', 'l', 't', 'e', 'r', 0,
    't', 'o', 'P', 'y', 'D', 'a', 't', 'e', 'T', 'i', 'm', 'e', 0,
    's', 'h', 'o', 'r', 't', 'D', 'a', 'y', 'N', 'a', 'm', 'e', 0,
    'w', 'r', 'i', 't', 'e', 'R', 'a', 'w', 'D', 'a', 't', 'a', 0,
    's', 'e', 't', 'B', 'y', 't', 'e', 'O', 'r', 'd', 'e', 'r', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'N', 'a', 'm', 'e', 0,
    'G', 'r', 'a', 'b', 'K', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 0,
    'C', 'u', 'r', 's', 'o', 'r', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'Z', 'O', 'r', 'd', 'e', 'r', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'L', 'o', 'c', 'a', 'l', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'C', 'h', 'i', 'l', 'd', 'R', 'e', 'm', 'o', 'v', 'e', 'd', 0,
    'D', 'r', 'a', 'g', 'R', 'e', 's', 'p', 'o', 'n', 's', 'e', 0,
    'H', 'i', 'd', 'e', 'T', 'o', 'P', 'a', 'r', 'e', 'n', 't', 0,
    'S', 'h', 'o', 'w', 'T', 'o', 'P', 'a', 'r', 'e', 'n', 't', 0,
    'T', 'h', 'r', 'e', 'a', 'd', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'P', 'a', 'r', 'e', 'n', 't', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'Q', 'E', 'v', 'e', 'n', 't', ':', ':', 'T', 'y', 'p', 'e', 0,
    's', 'e', 't', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'D', 'e', 'f', 'a', 'u', 'l', 't', 'C', 'o', 'd', 'e', 'c', 0,
    'l', 'i', 'b', 'r', 'a', 'r', 'y', 'P', 'a', 't', 'h', 's', 0,
    'l', 'o', 'w', 'S', 'u', 'r', 'r', 'o', 'g', 'a', 't', 'e', 0,
    't', 'o', 'C', 'a', 's', 'e', 'F', 'o', 'l', 'd', 'e', 'd', 0,
    'm', 'i', 'r', 'r', 'o', 'r', 'e', 'd', 'C', 'h', 'a', 'r', 0,
    'O', 't', 'h', 'e', 'r', 'J', 'o', 'i', 'n', 'i', 'n', 'g', 0,
    'S', 'y', 'm', 'b', 'o', 'l', '_', 'O', 't', 'h', 'e', 'r', 0,
    'L', 'e', 't', 't', 'e', 'r', '_', 'O', 't', 'h', 'e', 'r', 0,
    'O', 't', 'h', 'e', 'r', '_', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'N', 'u', 'm', 'b', 'e', 'r', '_', 'O', 't', 'h', 'e', 'r', 0,
    '_', '_', 'c', 'o', 'n', 't', 'a', 'i', 'n', 's', '_', '_', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'i', 'n', 's', 'e', 'r', 't', 'C', 'o', 'l', 'u', 'm', 'n', 0,
    'r', 'o', 'w', 's', 'I', 'n', 's', 'e', 'r', 't', 'e', 'd', 0,
    'c', 'a', 'n', 'F', 'e', 't', 'c', 'h', 'M', 'o', 'r', 'e', 0,
    'd', 'r', 'o', 'p', 'M', 'i', 'm', 'e', 'D', 'a', 't', 'a', 0,
    'i', 's', 'S', 'e', 'q', 'u', 'e', 'n', 't', 'i', 'a', 'l', 0,
    'C', 'r', 'e', 'a', 't', 'i', 'o', 'n', 'T', 'i', 'm', 'e', 0,
    'A', 'b', 's', 'o', 'l', 'u', 't', 'e', 'N', 'a', 'm', 'e', 0,
    'E', 'x', 'e', 'O', 't', 'h', 'e', 'r', 'P', 'e', 'r', 'm', 0,
    'E', 'x', 'e', 'G', 'r', 'o', 'u', 'p', 'P', 'e', 'r', 'm', 0,
    'R', 'e', 'a', 'd', 'U', 's', 'e', 'r', 'P', 'e', 'r', 'm', 0,
    'E', 'x', 'e', 'O', 'w', 'n', 'e', 'r', 'P', 'e', 'r', 'm', 0,
    'a', 'b', 'o', 'u', 't', 'T', 'o', 'B', 'l', 'o', 'c', 'k', 0,
    'T', 'i', 't', 'l', 'e', 'B', 'a', 'r', 'A', 'r', 'e', 'a', 0,
    'Q', 't', ':', ':', 'S', 'i', 'z', 'e', 'H', 'i', 'n', 't', 0,
    'R', 'e', 'l', 'a', 't', 'i', 'v', 'e', 'S', 'i', 'z', 'e', 0,
    'A', 'b', 's', 'o', 'l', 'u', 't', 'e', 'S', 'i', 'z', 'e', 0,
    'Q', 't', ':', ':', 'S', 'i', 'z', 'e', 'M', 'o', 'd', 'e', 0,
    'M', 'a', 's', 'k', 'O', 'u', 't', 'C', 'o', 'l', 'o', 'r', 0,
    'Q', 't', ':', ':', 'M', 'a', 's', 'k', 'M', 'o', 'd', 'e', 0,
    'T', 'e', 'x', 't', 'E', 'd', 'i', 't', 'a', 'b', 'l', 'e', 0,
    'M', 'a', 't', 'c', 'h', 'E', 'x', 'a', 'c', 't', 'l', 'y', 0,
    'Q', 't', ':', ':', 'I', 't', 'e', 'm', 'F', 'l', 'a', 'g', 0,
    'S', 'i', 'z', 'e', 'H', 'i', 'n', 't', 'R', 'o', 'l', 'e', 0,
    'I', 'g', 'n', 'o', 'r', 'e', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'I', 'm', 'M', 'i', 'c', 'r', 'o', 'F', 'o', 'c', 'u', 's', 0,
    'Q', 't', ':', ':', 'F', 'i', 'l', 'l', 'R', 'u', 'l', 'e', 0,
    'Q', 't', ':', ':', 'T', 'i', 'm', 'e', 'S', 'p', 'e', 'c', 0,
    'C', 'u', 's', 't', 'o', 'm', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'B', 'i', 't', 'm', 'a', 'p', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'S', 'p', 'l', 'i', 't', 'H', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'S', 'p', 'l', 'i', 't', 'V', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'Q', 't', ':', ':', 'U', 'I', 'E', 'f', 'f', 'e', 'c', 't', 0,
    'F', 'D', 'i', 'a', 'g', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'B', 'D', 'i', 'a', 'g', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'S', 'o', 'l', 'i', 'd', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'S', 'v', 'g', 'M', 'i', 't', 'e', 'r', 'J', 'o', 'i', 'n', 0,
    'M', 'P', 'e', 'n', 'C', 'a', 'p', 'S', 't', 'y', 'l', 'e', 0,
    'Q', 't', ':', ':', 'P', 'e', 'n', 'S', 't', 'y', 'l', 'e', 0,
    'K', 'e', 'y', '_', 'C', 'o', 'n', 't', 'e', 'x', 't', '4', 0,
    'K', 'e', 'y', '_', 'C', 'o', 'n', 't', 'e', 'x', 't', '3', 0,
    'K', 'e', 'y', '_', 'C', 'o', 'n', 't', 'e', 'x', 't', '2', 0,
    'K', 'e', 'y', '_', 'C', 'o', 'n', 't', 'e', 'x', 't', '1', 0,
    'K', 'e', 'y', '_', 'H', 'o', 'm', 'e', 'P', 'a', 'g', 'e', 0,
    'K', 'e', 'y', '_', 'T', 'r', 'e', 'b', 'l', 'e', 'U', 'p', 0,
    'K', 'e', 'y', '_', 'B', 'a', 's', 's', 'D', 'o', 'w', 'n', 0,
    'K', 'e', 'y', '_', 'V', 'o', 'l', 'u', 'm', 'e', 'U', 'p', 0,
    'K', 'e', 'y', '_', 'K', 'a', 't', 'a', 'k', 'a', 'n', 'a', 0,
    'K', 'e', 'y', '_', 'H', 'i', 'r', 'a', 'g', 'a', 'n', 'a', 0,
    'K', 'e', 'y', '_', 'M', 'u', 'h', 'e', 'n', 'k', 'a', 'n', 0,
    'K', 'e', 'y', '_', 'd', 'i', 'v', 'i', 's', 'i', 'o', 'n', 0,
    'K', 'e', 'y', '_', 'O', 'o', 'b', 'l', 'i', 'q', 'u', 'e', 0,
    'K', 'e', 'y', '_', 'm', 'u', 'l', 't', 'i', 'p', 'l', 'y', 0,
    'K', 'e', 'y', '_', 'C', 'c', 'e', 'd', 'i', 'l', 'l', 'a', 0,
    'K', 'e', 'y', '_', 'c', 'u', 'r', 'r', 'e', 'n', 'c', 'y', 0,
    'K', 'e', 'y', '_', 's', 't', 'e', 'r', 'l', 'i', 'n', 'g', 0,
    'K', 'e', 'y', '_', 'Q', 'u', 'e', 's', 't', 'i', 'o', 'n', 0,
    'K', 'e', 'y', '_', 'A', 's', 't', 'e', 'r', 'i', 's', 'k', 0,
    'K', 'e', 'y', '_', 'Q', 'u', 'o', 't', 'e', 'D', 'b', 'l', 0,
    'K', 'e', 'y', '_', 'C', 'a', 'p', 's', 'L', 'o', 'c', 'k', 0,
    'K', 'e', 'y', '_', 'P', 'a', 'g', 'e', 'D', 'o', 'w', 'n', 0,
    'P', 'r', 'e', 'f', 'e', 'r', 'D', 'i', 't', 'h', 'e', 'r', 0,
    'W', 'A', '_', 'S', 'e', 't', 'L', 'o', 'c', 'a', 'l', 'e', 0,
    'W', 'A', '_', 'S', 'e', 't', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'A', 'c', 't', 'i', 'v', 'e', 0,
    'S', 'p', 'l', 'a', 's', 'h', 'S', 'c', 'r', 'e', 'e', 'n', 0,
    'T', 'e', 'x', 't', 'W', 'o', 'r', 'd', 'W', 'r', 'a', 'p', 0,
    'T', 'e', 'x', 't', 'D', 'o', 'n', 't', 'C', 'l', 'i', 'p', 0,
    'Q', 't', ':', ':', 'T', 'e', 'x', 't', 'F', 'l', 'a', 'g', 0,
    'A', 'l', 'i', 'g', 'n', 'V', 'C', 'e', 'n', 't', 'e', 'r', 0,
    'A', 'l', 'i', 'g', 'n', 'J', 'u', 's', 't', 'i', 'f', 'y', 0,
    'A', 'l', 'i', 'g', 'n', 'H', 'C', 'e', 'n', 't', 'e', 'r', 0,
    'A', 'l', 'i', 'g', 'n', 'L', 'e', 'a', 'd', 'i', 'n', 'g', 0,
    'Q', 't', ':', ':', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'r', 0,
    'M', 'e', 't', 'a', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'r', 0,
    'Q', 't', 'W', 'a', 'r', 'n', 'i', 'n', 'g', 'M', 's', 'g', 0,
    'q', 'S', 'h', 'a', 'r', 'e', 'd', 'B', 'u', 'i', 'l', 'd', 0,
    'L', 'i', 't', 't', 'l', 'e', 'E', 'n', 'd', 'i', 'a', 'n', 0,
    'P', 'Y', 'Q', 'T', '_', 'V', 'E', 'R', 'S', 'I', 'O', 'N', 0,
    'P', 'y', 'Q', 't', '4', '.', 'Q', 't', 'C', 'o', 'r', 'e', 0,
    'Q', 'L', 'i', 's', 't', '<', 'Q', 'U', 'r', 'l', '>', 0,
    'C', 'u', 's', 't', 'o', 'm', 'E', 'r', 'r', 'o', 'r', 0,
    'd', 't', 'd', 'S', 'y', 's', 't', 'e', 'm', 'I', 'd', 0,
    'd', 't', 'd', 'P', 'u', 'b', 'l', 'i', 'c', 'I', 'd', 0,
    't', 'o', 'k', 'e', 'n', 'S', 't', 'r', 'i', 'n', 'g', 0,
    't', 'o', 'B', 'y', 't', 'e', 'A', 'r', 'r', 'a', 'y', 0,
    'e', 'n', 'c', 'o', 'd', 'e', 'd', 'P', 'a', 't', 'h', 0,
    'e', 'n', 'c', 'o', 'd', 'e', 'd', 'H', 'o', 's', 't', 0,
    'h', 'a', 's', 'F', 'r', 'a', 'g', 'm', 'e', 'n', 't', 0,
    'f', 'r', 'o', 'm', 'E', 'n', 'c', 'o', 'd', 'e', 'd', 0,
    't', 'o', 'L', 'o', 'c', 'a', 'l', 'F', 'i', 'l', 'e', 0,
    's', 'e', 't', 'F', 'r', 'a', 'g', 'm', 'e', 'n', 't', 0,
    's', 'e', 't', 'P', 'a', 's', 's', 'w', 'o', 'r', 'd', 0,
    's', 'e', 't', 'U', 's', 'e', 'r', 'N', 'a', 'm', 'e', 0,
    's', 'e', 't', 'U', 's', 'e', 'r', 'I', 'n', 'f', 'o', 0,
    'R', 'e', 'm', 'o', 'v', 'e', 'Q', 'u', 'e', 'r', 'y', 0,
    'Q', 'T', 'r', 'a', 'n', 's', 'l', 'a', 't', 'o', 'r', 0,
    's', 'e', 't', 'I', 'n', 't', 'e', 'r', 'v', 'a', 'l', 0,
    's', 'e', 't', 'E', 'n', 'd', 'F', 'r', 'a', 'm', 'e', 0,
    's', 'e', 't', 'D', 'u', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'C', 'o', 's', 'i', 'n', 'e', 'C', 'u', 'r', 'v', 'e', 0,
    'L', 'i', 'n', 'e', 'a', 'r', 'C', 'u', 'r', 'v', 'e', 0,
    'E', 'a', 's', 'e', 'I', 'n', 'C', 'u', 'r', 'v', 'e', 0,
    'w', 'a', 'i', 't', 'F', 'o', 'r', 'D', 'o', 'n', 'e', 0,
    'Q', 'T', 'h', 'r', 'e', 'a', 'd', 'P', 'o', 'o', 'l', 0,
    's', 'e', 't', 'P', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    'L', 'o', 'w', 'P', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    'q', 'S', 'e', 't', 'P', 'a', 'd', 'C', 'h', 'a', 'r', 0,
    'n', 'o', 'f', 'o', 'r', 'c', 'e', 's', 'i', 'g', 'n', 0,
    'i', 'n', 't', 'e', 'g', 'e', 'r', 'B', 'a', 's', 'e', 0,
    'n', 'u', 'm', 'b', 'e', 'r', 'F', 'l', 'a', 'g', 's', 0,
    'f', 'r', 'o', 'm', 'U', 'n', 'i', 'c', 'o', 'd', 'e', 0,
    'm', 'a', 'k', 'e', 'E', 'n', 'c', 'o', 'd', 'e', 'r', 0,
    'm', 'a', 'k', 'e', 'D', 'e', 'c', 'o', 'd', 'e', 'r', 0,
    'c', 'o', 'd', 'e', 'c', 'F', 'o', 'r', 'M', 'i', 'b', 0,
    's', 'e', 't', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    '_', '_', 'd', 'e', 'l', 'i', 't', 'e', 'm', '_', '_', 0,
    '_', '_', 's', 'e', 't', 'i', 't', 'e', 'm', '_', '_', 0,
    '_', '_', 'u', 'n', 'i', 'c', 'o', 'd', 'e', '_', '_', 0,
    't', 'o', 'L', 'o', 'c', 'a', 'l', '8', 'B', 'i', 't', 0,
    's', 'e', 't', 'I', 'n', 'i', 'C', 'o', 'd', 'e', 'c', 0,
    'c', 'h', 'i', 'l', 'd', 'G', 'r', 'o', 'u', 'p', 's', 0,
    'S', 'y', 's', 't', 'e', 'm', 'S', 'c', 'o', 'p', 'e', 0,
    'F', 'o', 'r', 'm', 'a', 't', 'E', 'r', 'r', 'o', 'r', 0,
    'A', 'c', 'c', 'e', 's', 's', 'E', 'r', 'r', 'o', 'r', 0,
    'n', 'u', 'm', 'C', 'a', 'p', 't', 'u', 'r', 'e', 's', 0,
    'l', 'a', 's', 't', 'I', 'n', 'd', 'e', 'x', 'I', 'n', 0,
    'C', 'a', 'r', 'e', 't', 'A', 't', 'Z', 'e', 'r', 'o', 0,
    'i', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 'e', 'd', 0,
    'm', 'o', 'v', 'e', 'T', 'o', 'p', 'L', 'e', 'f', 't', 0,
    'b', 'o', 't', 't', 'o', 'm', 'R', 'i', 'g', 'h', 't', 0,
    's', 'e', 't', 'T', 'o', 'p', 'R', 'i', 'g', 'h', 't', 0,
    'Q', 'R', 'e', 'a', 'd', 'L', 'o', 'c', 'k', 'e', 'r', 0,
    'l', 'o', 'c', 'k', 'F', 'o', 'r', 'R', 'e', 'a', 'd', 0,
    'e', 'n', 'v', 'i', 'r', 'o', 'n', 'm', 'e', 'n', 't', 0,
    'r', 'e', 'a', 'd', 'C', 'h', 'a', 'n', 'n', 'e', 'l', 0,
    'n', 'e', 'w', 'I', 'n', 's', 't', 'a', 'n', 'c', 'e', 0,
    'c', 'o', 'n', 's', 't', 'r', 'u', 'c', 't', 'o', 'r', 0,
    'i', 'n', 'd', 'e', 'x', 'O', 'f', 'S', 'l', 'o', 't', 0,
    'm', 'e', 't', 'h', 'o', 'd', 'C', 'o', 'u', 'n', 't', 0,
    'Q', 'M', 'e', 't', 'a', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'c', 'u', 's', 't', 'o', 'm', 'E', 'v', 'e', 'n', 't', 0,
    'd', 'e', 'l', 'e', 't', 'e', 'L', 'a', 't', 'e', 'r', 0,
    's', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'e', 'v', 'e', 'n', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'Q', 'W', 'i', 'd', 'g', 'e', 't', 'S', 't', 'a', 'r', 0,
    'Q', 'O', 'b', 'j', 'e', 'c', 't', 'S', 't', 'a', 'r', 0,
    'Q', 'T', 'e', 'x', 't', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'Q', 'T', 'e', 'x', 't', 'L', 'e', 'n', 'g', 't', 'h', 0,
    'Q', 'S', 'i', 'z', 'e', 'P', 'o', 'l', 'i', 'c', 'y', 0,
    'Q', 'S', 't', 'r', 'i', 'n', 'g', 'L', 'i', 's', 't', 0,
    'Q', 'V', 'a', 'r', 'i', 'a', 'n', 't', 'M', 'a', 'p', 0,
    'v', 'a', 'l', 'u', 'e', 'T', 'o', 'K', 'e', 'y', 's', 0,
    'k', 'e', 'y', 's', 'T', 'o', 'V', 'a', 'l', 'u', 'e', 0,
    'Q', 'M', 'e', 't', 'a', 'M', 'e', 't', 'h', 'o', 'd', 0,
    'D', 'a', 'y', 'N', 'a', 'm', 'e', 'L', 'o', 'n', 'g', 0,
    'e', 'x', 'p', 'o', 'n', 'e', 'n', 't', 'i', 'a', 'l', 0,
    'S', 'h', 'o', 'r', 't', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'L', 'a', 's', 't', 'C', 'o', 'u', 'n', 't', 'r', 'y', 0,
    'S', 'w', 'i', 't', 'z', 'e', 'r', 'l', 'a', 'n', 'd', 0,
    'S', 'o', 'u', 't', 'h', 'A', 'f', 'r', 'i', 'c', 'a', 0,
    'S', 'i', 'e', 'r', 'r', 'a', 'L', 'e', 'o', 'n', 'e', 0,
    'S', 'a', 'u', 'd', 'i', 'A', 'r', 'a', 'b', 'i', 'a', 0,
    'P', 'h', 'i', 'l', 'i', 'p', 'p', 'i', 'n', 'e', 's', 0,
    'N', 'e', 't', 'h', 'e', 'r', 'l', 'a', 'n', 'd', 's', 0,
    'F', 'i', 'j', 'i', 'C', 'o', 'u', 'n', 't', 'r', 'y', 0,
    'C', 'o', 'o', 'k', 'I', 's', 'l', 'a', 'n', 'd', 's', 0,
    'B', 'u', 'r', 'k', 'i', 'n', 'a', 'F', 'a', 's', 'o', 0,
    'A', 'f', 'g', 'h', 'a', 'n', 'i', 's', 't', 'a', 'n', 0,
    'K', 'i', 'n', 'y', 'a', 'r', 'w', 'a', 'n', 'd', 'a', 0,
    'I', 'n', 't', 'e', 'r', 'l', 'i', 'n', 'g', 'u', 'e', 0,
    'I', 'n', 't', 'e', 'r', 'l', 'i', 'n', 'g', 'u', 'a', 0,
    'G', 'r', 'e', 'e', 'n', 'l', 'a', 'n', 'd', 'i', 'c', 0,
    'A', 'z', 'e', 'r', 'b', 'a', 'i', 'j', 'a', 'n', 'i', 0,
    'P', 'l', 'u', 'g', 'i', 'n', 's', 'P', 'a', 't', 'h', 0,
    'H', 'e', 'a', 'd', 'e', 'r', 's', 'P', 'a', 't', 'h', 0,
    's', 'e', 't', 'O', 'p', 'e', 'n', 'M', 'o', 'd', 'e', 0,
    'f', 'i', 'l', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'P', 'a', 't', 'h', 's', 0,
    'a', 'b', 's', 'o', 'l', 'u', 't', 'e', 'D', 'i', 'r', 0,
    'p', 'e', 'r', 'm', 'i', 's', 's', 'i', 'o', 'n', 's', 0,
    'R', 'e', 's', 'i', 'z', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    'R', 'e', 'n', 'a', 'm', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    'R', 'e', 'm', 'o', 'v', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    's', 'e', 'a', 'r', 'c', 'h', 'P', 'a', 't', 'h', 's', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'P', 'a', 't', 'h', 0,
    'L', 'o', 'c', 'a', 'l', 'e', 'A', 'w', 'a', 'r', 'e', 0,
    't', 'o', 'L', 'o', 'c', 'a', 'l', 'T', 'i', 'm', 'e', 0,
    's', 'e', 't', 'T', 'i', 'm', 'e', 'S', 'p', 'e', 'c', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'T', 'i', 'm', 'e', 0,
    't', 'o', 'J', 'u', 'l', 'i', 'a', 'n', 'D', 'a', 'y', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 'D', 'a', 't', 'e', 0,
    'l', 'o', 'n', 'g', 'D', 'a', 'y', 'N', 'a', 'm', 'e', 0,
    'd', 'a', 'y', 's', 'I', 'n', 'M', 'o', 'n', 't', 'h', 0,
    'r', 'e', 'a', 'd', 'R', 'a', 'w', 'D', 'a', 't', 'a', 0,
    'w', 'r', 'i', 't', 'e', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'w', 'r', 'i', 't', 'e', 'D', 'o', 'u', 'b', 'l', 'e', 0,
    'w', 'r', 'i', 't', 'e', 'U', 'I', 'n', 't', '6', '4', 0,
    'w', 'r', 'i', 't', 'e', 'U', 'I', 'n', 't', '3', '2', 0,
    'w', 'r', 'i', 't', 'e', 'U', 'I', 'n', 't', '1', '6', 0,
    's', 'k', 'i', 'p', 'R', 'a', 'w', 'D', 'a', 't', 'a', 0,
    'r', 'e', 's', 'e', 't', 'S', 't', 'a', 't', 'u', 's', 0,
    'u', 'n', 's', 'e', 't', 'D', 'e', 'v', 'i', 'c', 'e', 0,
    'R', 'e', 'a', 'd', 'P', 'a', 's', 't', 'E', 'n', 'd', 0,
    'Q', 'D', 'a', 't', 'a', 'S', 't', 'r', 'e', 'a', 'm', 0,
    'Q', 'C', 'h', 'i', 'l', 'd', 'E', 'v', 'e', 'n', 't', 0,
    'Q', 'T', 'i', 'm', 'e', 'r', 'E', 'v', 'e', 'n', 't', 0,
    's', 'e', 't', 'A', 'c', 'c', 'e', 'p', 't', 'e', 'd', 0,
    's', 'p', 'o', 'n', 't', 'a', 'n', 'e', 'o', 'u', 's', 0,
    'U', 'n', 'g', 'r', 'a', 'b', 'M', 'o', 'u', 's', 'e', 0,
    'A', 'c', 't', 'i', 'o', 'n', 'A', 'd', 'd', 'e', 'd', 0,
    'S', 't', 'y', 'l', 'e', 'C', 'h', 'a', 'n', 'g', 'e', 0,
    'H', 'e', 'l', 'p', 'R', 'e', 'q', 'u', 'e', 's', 't', 0,
    'T', 'a', 'b', 'l', 'e', 't', 'P', 'r', 'e', 's', 's', 0,
    'I', 'n', 'p', 'u', 't', 'M', 'e', 't', 'h', 'o', 'd', 0,
    'U', 'p', 'd', 'a', 't', 'e', 'L', 'a', 't', 'e', 'r', 0,
    'W', 'i', 'n', 'E', 'v', 'e', 'n', 't', 'A', 'c', 't', 0,
    'a', 'b', 'o', 'u', 't', 'T', 'o', 'Q', 'u', 'i', 't', 0,
    'U', 'n', 'i', 'c', 'o', 'd', 'e', 'U', 'T', 'F', '8', 0,
    'i', 's', 'T', 'i', 't', 'l', 'e', 'C', 'a', 's', 'e', 0,
    't', 'o', 'T', 'i', 't', 'l', 'e', 'C', 'a', 's', 'e', 0,
    'h', 'a', 's', 'M', 'i', 'r', 'r', 'o', 'r', 'e', 'd', 0,
    'U', 'n', 'i', 'c', 'o', 'd', 'e', '_', '5', '_', '0', 0,
    'U', 'n', 'i', 'c', 'o', 'd', 'e', '_', '4', '_', '1', 0,
    'U', 'n', 'i', 'c', 'o', 'd', 'e', '_', '4', '_', '0', 0,
    'U', 'n', 'i', 'c', 'o', 'd', 'e', '_', '3', '_', '2', 0,
    'U', 'n', 'i', 'c', 'o', 'd', 'e', '_', '3', '_', '1', 0,
    'U', 'n', 'i', 'c', 'o', 'd', 'e', '_', '3', '_', '0', 0,
    'U', 'n', 'i', 'c', 'o', 'd', 'e', '_', '2', '_', '0', 0,
    'U', 'n', 'i', 'c', 'o', 'd', 'e', '_', '1', '_', '1', 0,
    'S', 'y', 'm', 'b', 'o', 'l', '_', 'M', 'a', 't', 'h', 0,
    'Q', 'L', 'a', 't', 'i', 'n', '1', 'C', 'h', 'a', 'r', 0,
    'q', 'U', 'n', 'c', 'o', 'm', 'p', 'r', 'e', 's', 's', 0,
    'f', 'r', 'o', 'm', 'R', 'a', 'w', 'D', 'a', 't', 'a', 0,
    't', 'o', 'U', 'L', 'o', 'n', 'g', 'L', 'o', 'n', 'g', 0,
    'l', 'a', 's', 't', 'I', 'n', 'd', 'e', 'x', 'O', 'f', 0,
    'c', 'a', 'n', 'R', 'e', 'a', 'd', 'L', 'i', 'n', 'e', 0,
    '_', '_', 'g', 'e', 't', 'i', 't', 'e', 'm', '_', '_', 0,
    'Q', 'B', 'a', 's', 'i', 'c', 'T', 'i', 'm', 'e', 'r', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'I', 'n', 'd', 'e', 'x', 0,
    'r', 'o', 'w', 's', 'R', 'e', 'm', 'o', 'v', 'e', 'd', 0,
    'd', 'a', 't', 'a', 'C', 'h', 'a', 'n', 'g', 'e', 'd', 0,
    's', 'e', 't', 'I', 't', 'e', 'm', 'D', 'a', 't', 'a', 0,
    'h', 'a', 's', 'C', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 'C', 'o', 'u', 'n', 't', 0,
    'Q', 'M', 'o', 'd', 'e', 'l', 'I', 'n', 'd', 'e', 'x', 0,
    'n', 'a', 'm', 'e', 'F', 'i', 'l', 't', 'e', 'r', 's', 0,
    'e', 'r', 'r', 'o', 'r', 'S', 't', 'r', 'i', 'n', 'g', 0,
    's', 'e', 't', 'F', 'i', 'l', 'e', 'N', 'a', 'm', 'e', 0,
    'D', 'e', 'f', 'a', 'u', 'l', 't', 'N', 'a', 'm', 'e', 0,
    'F', 'i', 'l', 'e', 'I', 'n', 'f', 'o', 'A', 'l', 'l', 0,
    'E', 'x', 'e', 'U', 's', 'e', 'r', 'P', 'e', 'r', 'm', 0,
    'c', 'l', 'o', 's', 'i', 'n', 'g', 'D', 'o', 'w', 'n', 0,
    'M', 'a', 'x', 'i', 'm', 'u', 'm', 'S', 'i', 'z', 'e', 0,
    'M', 'i', 'n', 'i', 'm', 'u', 'm', 'S', 'i', 'z', 'e', 0,
    'M', 'a', 's', 'k', 'I', 'n', 'C', 'o', 'l', 'o', 'r', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 'M', 'o', 'd', 'a', 'l', 0,
    'M', 'a', 't', 'c', 'h', 'R', 'e', 'g', 'E', 'x', 'p', 0,
    'N', 'o', 'I', 't', 'e', 'm', 'F', 'l', 'a', 'g', 's', 0,
    'T', 'o', 'o', 'l', 'T', 'i', 'p', 'R', 'o', 'l', 'e', 0,
    'D', 'i', 's', 'p', 'l', 'a', 'y', 'R', 'o', 'l', 'e', 0,
    'L', 'e', 'f', 't', 'T', 'o', 'R', 'i', 'g', 'h', 't', 0,
    'R', 'e', 'p', 'l', 'a', 'c', 'e', 'C', 'l', 'i', 'p', 0,
    'W', 'i', 'n', 'd', 'i', 'n', 'g', 'F', 'i', 'l', 'l', 0,
    'O', 'd', 'd', 'E', 'v', 'e', 'n', 'F', 'i', 'l', 'l', 0,
    'B', 'l', 'a', 'n', 'k', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'I', 'B', 'e', 'a', 'm', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'C', 'r', 'o', 's', 's', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'U', 'I', '_', 'F', 'a', 'd', 'e', 'M', 'e', 'n', 'u', 0,
    'D', 'a', 's', 'h', 'D', 'o', 't', 'L', 'i', 'n', 'e', 0,
    'K', 'e', 'y', '_', 'P', 'r', 'i', 'n', 't', 'e', 'r', 0,
    'K', 'e', 'y', '_', 'E', 'x', 'e', 'c', 'u', 't', 'e', 0,
    'K', 'e', 'y', '_', 'u', 'n', 'k', 'n', 'o', 'w', 'n', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', 'F', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', 'E', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', 'D', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', 'C', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', 'B', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', 'A', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', '9', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', '8', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', '7', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', '6', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', '5', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', '4', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', '3', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', '2', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', '1', 0,
    'K', 'e', 'y', '_', 'L', 'a', 'u', 'n', 'c', 'h', '0', 0,
    'K', 'e', 'y', '_', 'O', 'p', 'e', 'n', 'U', 'r', 'l', 0,
    'K', 'e', 'y', '_', 'S', 't', 'a', 'n', 'd', 'b', 'y', 0,
    'K', 'e', 'y', '_', 'R', 'e', 'f', 'r', 'e', 's', 'h', 0,
    'K', 'e', 'y', '_', 'F', 'o', 'r', 'w', 'a', 'r', 'd', 0,
    'K', 'e', 'y', '_', 'T', 'o', 'u', 'r', 'o', 'k', 'u', 0,
    'K', 'e', 'y', '_', 'H', 'a', 'n', 'k', 'a', 'k', 'u', 0,
    'K', 'e', 'y', '_', 'Z', 'e', 'n', 'k', 'a', 'k', 'u', 0,
    'K', 'e', 'y', '_', 'o', 'n', 'e', 'h', 'a', 'l', 'f', 0,
    'K', 'e', 'y', '_', 'c', 'e', 'd', 'i', 'l', 'l', 'a', 0,
    'K', 'e', 'y', '_', 'n', 'o', 't', 's', 'i', 'g', 'n', 0,
    'K', 'e', 'y', '_', 's', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'K', 'e', 'y', '_', 'G', 'r', 'e', 'a', 't', 'e', 'r', 0,
    'K', 'e', 'y', '_', 'P', 'e', 'r', 'c', 'e', 'n', 't', 0,
    'K', 'e', 'y', '_', 'H', 'y', 'p', 'e', 'r', '_', 'R', 0,
    'K', 'e', 'y', '_', 'H', 'y', 'p', 'e', 'r', '_', 'L', 0,
    'K', 'e', 'y', '_', 'S', 'u', 'p', 'e', 'r', '_', 'R', 0,
    'K', 'e', 'y', '_', 'S', 'u', 'p', 'e', 'r', '_', 'L', 0,
    'K', 'e', 'y', '_', 'N', 'u', 'm', 'L', 'o', 'c', 'k', 0,
    'K', 'e', 'y', '_', 'C', 'o', 'n', 't', 'r', 'o', 'l', 0,
    'K', 'e', 'y', '_', 'B', 'a', 'c', 'k', 't', 'a', 'b', 0,
    'A', 'v', 'o', 'i', 'd', 'D', 'i', 't', 'h', 'e', 'r', 0,
    'W', 'A', '_', 'S', 'e', 't', 'S', 't', 'y', 'l', 'e', 0,
    'W', 'A', '_', 'D', 'i', 's', 'a', 'b', 'l', 'e', 'd', 0,
    'E', 'l', 'i', 'd', 'e', 'M', 'i', 'd', 'd', 'l', 'e', 0,
    'A', 'l', 'i', 'g', 'n', 'C', 'e', 'n', 't', 'e', 'r', 0,
    'A', 'l', 'i', 'g', 'n', 'B', 'o', 't', 't', 'o', 'm', 0,
    'S', 't', 'r', 'o', 'n', 'g', 'F', 'o', 'c', 'u', 's', 0,
    'R', 'i', 'g', 'h', 't', 'B', 'u', 't', 't', 'o', 'n', 0,
    'A', 'l', 't', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'r', 0,
    't', 'r', 'a', 'n', 's', 'p', 'a', 'r', 'e', 'n', 't', 0,
    'd', 'a', 'r', 'k', 'M', 'a', 'g', 'e', 'n', 't', 'a', 0,
    'Q', 't', 'S', 'y', 's', 't', 'e', 'm', 'M', 's', 'g', 0,
    'Q', 'T', 'e', 'x', 't', 'S', 't', 'r', 'e', 'a', 'm', 0,
    'w', 'r', 'i', 't', 'e', 'C', 'D', 'A', 'T', 'A', 0,
    'r', 'a', 'i', 's', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    'a', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 's', 0,
    'l', 'i', 'n', 'e', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    't', 'o', 'P', 'y', 'O', 'b', 'j', 'e', 'c', 't', 0,
    't', 'o', 'B', 'i', 't', 'A', 'r', 'r', 'a', 'y', 0,
    'c', 'a', 'n', 'C', 'o', 'n', 'v', 'e', 'r', 't', 0,
    'n', 'a', 'm', 'e', 'T', 'o', 'T', 'y', 'p', 'e', 0,
    't', 'y', 'p', 'e', 'T', 'o', 'N', 'a', 'm', 'e', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'U', 'u', 'i', 'd', 0,
    'V', 'e', 'r', 'U', 'n', 'k', 'n', 'o', 'w', 'n', 0,
    'V', 'a', 'r', 'U', 'n', 'k', 'n', 'o', 'w', 'n', 0,
    't', 'o', 'P', 'u', 'n', 'y', 'c', 'o', 'd', 'e', 0,
    'i', 's', 'P', 'a', 'r', 'e', 'n', 't', 'O', 'f', 0,
    'q', 'u', 'e', 'r', 'y', 'I', 't', 'e', 'm', 's', 0,
    'S', 't', 'r', 'i', 'c', 't', 'M', 'o', 'd', 'e', 0,
    'R', 'e', 'm', 'o', 'v', 'e', 'P', 'a', 't', 'h', 0,
    'R', 'e', 'm', 'o', 'v', 'e', 'P', 'o', 'r', 't', 0,
    's', 'i', 'n', 'g', 'l', 'e', 'S', 'h', 'o', 't', 0,
    'c', 'u', 'r', 'v', 'e', 'S', 'h', 'a', 'p', 'e', 0,
    's', 't', 'a', 'r', 't', 'F', 'r', 'a', 'm', 'e', 0,
    't', 'e', 'r', 'm', 'i', 'n', 'a', 't', 'e', 'd', 0,
    'i', 's', 'F', 'i', 'n', 'i', 's', 'h', 'e', 'd', 0,
    's', 'c', 'i', 'e', 'n', 't', 'i', 'f', 'i', 'c', 0,
    'n', 'o', 's', 'h', 'o', 'w', 'b', 'a', 's', 'e', 0,
    'f', 'i', 'e', 'l', 'd', 'W', 'i', 'd', 't', 'h', 0,
    's', 'e', 't', 'P', 'a', 'd', 'C', 'h', 'a', 'r', 0,
    'F', 'o', 'r', 'c', 'e', 'P', 'o', 'i', 'n', 't', 0,
    'c', 'o', 'd', 'e', 'c', 'F', 'o', 'r', 'T', 'r', 0,
    'Q', 'T', 'e', 'x', 't', 'C', 'o', 'd', 'e', 'c', 0,
    'a', 'u', 't', 'o', 'R', 'e', 'm', 'o', 'v', 'e', 0,
    'Q', 'S', 't', 'r', 'i', 'n', 'g', 'R', 'e', 'f', 0,
    's', 'e', 't', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'e', 'x', 'p', 'a', 'n', 'd', 'e', 'd', 'T', 'o', 0,
    's', 'e', 't', 'M', 'a', 'p', 'p', 'i', 'n', 'g', 0,
    'i', 's', 'A', 't', 't', 'a', 'c', 'h', 'e', 'd', 0,
    'b', 'e', 'g', 'i', 'n', 'G', 'r', 'o', 'u', 'p', 0,
    't', 'r', 'y', 'A', 'c', 'q', 'u', 'i', 'r', 'e', 0,
    'Q', 'S', 'e', 'm', 'a', 'p', 'h', 'o', 'r', 'e', 0,
    'a', 'u', 't', 'o', 'D', 'e', 'l', 'e', 't', 'e', 0,
    'e', 'x', 'a', 'c', 't', 'M', 'a', 't', 'c', 'h', 0,
    's', 'e', 't', 'M', 'i', 'n', 'i', 'm', 'a', 'l', 0,
    'm', 'o', 'v', 'e', 'B', 'o', 't', 't', 'o', 'm', 0,
    'b', 'o', 't', 't', 'o', 'm', 'L', 'e', 'f', 't', 0,
    's', 'e', 't', 'T', 'o', 'p', 'L', 'e', 'f', 't', 0,
    'i', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 's', 0,
    'm', 'o', 'v', 'e', 'C', 'e', 'n', 't', 'e', 'r', 0,
    'n', 'o', 'r', 'm', 'a', 'l', 'i', 'z', 'e', 'd', 0,
    'e', 'x', 'i', 't', 'S', 't', 'a', 't', 'u', 's', 0,
    'N', 'o', 't', 'R', 'u', 'n', 'n', 'i', 'n', 'g', 0,
    'N', 'o', 'r', 'm', 'a', 'l', 'E', 'x', 'i', 't', 0,
    's', 'u', 'p', 'e', 'r', 'C', 'l', 'a', 's', 's', 0,
    'Q', 'T', '_', 'T', 'R', '_', 'N', 'O', 'O', 'P', 0,
    'c', 'h', 'i', 'l', 'd', 'E', 'v', 'e', 'n', 't', 0,
    't', 'i', 'm', 'e', 'r', 'E', 'v', 'e', 'n', 't', 0,
    'd', 'i', 's', 'c', 'o', 'n', 'n', 'e', 'c', 't', 0,
    's', 't', 'a', 'r', 't', 'T', 'i', 'm', 'e', 'r', 0,
    'o', 'b', 'j', 'e', 'c', 't', 'N', 'a', 'm', 'e', 0,
    'm', 'e', 't', 'a', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'Q', 'T', 'r', 'a', 'n', 's', 'f', 'o', 'r', 'm', 0,
    'e', 'n', 'u', 'm', 'e', 'r', 'a', 't', 'o', 'r', 0,
    'i', 's', 'E', 'n', 'u', 'm', 'T', 'y', 'p', 'e', 0,
    'i', 's', 'F', 'l', 'a', 'g', 'T', 'y', 'p', 'e', 0,
    'i', 's', 'E', 'd', 'i', 't', 'a', 'b', 'l', 'e', 0,
    'v', 'a', 'l', 'u', 'e', 'T', 'o', 'K', 'e', 'y', 0,
    'k', 'e', 'y', 'T', 'o', 'V', 'a', 'l', 'u', 'e', 0,
    'm', 'e', 't', 'h', 'o', 'd', 'T', 'y', 'p', 'e', 0,
    'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 'I', 'd', 0,
    't', 'o', 'D', 'a', 't', 'e', 'T', 'i', 'm', 'e', 0,
    't', 'i', 'm', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'd', 'a', 't', 'e', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'L', 'o', 'n', 'g', 'F', 'o', 'r', 'm', 'a', 't', 0,
    's', 'e', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', 0,
    'Y', 'u', 'g', 'o', 's', 'l', 'a', 'v', 'i', 'a', 0,
    'U', 'z', 'b', 'e', 'k', 'i', 's', 't', 'a', 'n', 0,
    'T', 'a', 'j', 'i', 'k', 'i', 's', 't', 'a', 'n', 0,
    'S', 'e', 'y', 'c', 'h', 'e', 'l', 'l', 'e', 's', 0,
    'P', 'u', 'e', 'r', 't', 'o', 'R', 'i', 'c', 'o', 0,
    'N', 'e', 'w', 'Z', 'e', 'a', 'l', 'a', 'n', 'd', 0,
    'M', 'o', 'z', 'a', 'm', 'b', 'i', 'q', 'u', 'e', 0,
    'M', 'o', 'n', 't', 's', 'e', 'r', 'r', 'a', 't', 0,
    'M', 'i', 'c', 'r', 'o', 'n', 'e', 's', 'i', 'a', 0,
    'M', 'a', 'u', 'r', 'i', 't', 'a', 'n', 'i', 'a', 0,
    'M', 'a', 'r', 't', 'i', 'n', 'i', 'q', 'u', 'e', 0,
    'M', 'a', 'd', 'a', 'g', 'a', 's', 'c', 'a', 'r', 0,
    'L', 'u', 'x', 'e', 'm', 'b', 'o', 'u', 'r', 'g', 0,
    'K', 'y', 'r', 'g', 'y', 'z', 's', 't', 'a', 'n', 0,
    'K', 'a', 'z', 'a', 'k', 'h', 's', 't', 'a', 'n', 0,
    'G', 'u', 'a', 'd', 'e', 'l', 'o', 'u', 'p', 'e', 0,
    'E', 'l', 'S', 'a', 'l', 'v', 'a', 'd', 'o', 'r', 0,
    'I', 'v', 'o', 'r', 'y', 'C', 'o', 'a', 's', 't', 0,
    'B', 'a', 'n', 'g', 'l', 'a', 'd', 'e', 's', 'h', 0,
    'A', 'z', 'e', 'r', 'b', 'a', 'i', 'j', 'a', 'n', 0,
    'A', 'n', 't', 'a', 'r', 'c', 't', 'i', 'c', 'a', 0,
    'A', 'n', 'y', 'C', 'o', 'u', 'n', 't', 'r', 'y', 0,
    'V', 'i', 'e', 't', 'n', 'a', 'm', 'e', 's', 'e', 0,
    'S', 'i', 'n', 'g', 'h', 'a', 'l', 'e', 's', 'e', 0,
    'P', 'o', 'r', 't', 'u', 'g', 'u', 'e', 's', 'e', 0,
    'M', 'a', 'c', 'e', 'd', 'o', 'n', 'i', 'a', 'n', 0,
    'L', 'i', 't', 'h', 'u', 'a', 'n', 'i', 'a', 'n', 0,
    'I', 'n', 'd', 'o', 'n', 'e', 's', 'i', 'a', 'n', 0,
    'Q', 'L', 'i', 's', 't', '<', 'i', 'n', 't', '>', 0,
    'u', 'n', 'i', 't', 'V', 'e', 'c', 't', 'o', 'r', 0,
    't', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', 'd', 0,
    'P', 'r', 'e', 'f', 'i', 'x', 'P', 'a', 't', 'h', 0,
    'U', 'n', 'b', 'u', 'f', 'f', 'e', 'r', 'e', 'd', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'P', 'a', 't', 'h', 0,
    'b', 'u', 'n', 'd', 'l', 'e', 'N', 'a', 'm', 'e', 0,
    's', 'e', 't', 'C', 'a', 'c', 'h', 'i', 'n', 'g', 0,
    'p', 'e', 'r', 'm', 'i', 's', 's', 'i', 'o', 'n', 0,
    'i', 's', 'W', 'r', 'i', 't', 'a', 'b', 'l', 'e', 0,
    'f', 'i', 'l', 'e', 'E', 'n', 'g', 'i', 'n', 'e', 0,
    'd', 'e', 'c', 'o', 'd', 'e', 'N', 'a', 'm', 'e', 0,
    'e', 'n', 'c', 'o', 'd', 'e', 'N', 'a', 'm', 'e', 0,
    'u', 'n', 's', 'e', 't', 'E', 'r', 'r', 'o', 'r', 0,
    'W', 'r', 'i', 't', 'e', 'O', 't', 'h', 'e', 'r', 0,
    'W', 'r', 'i', 't', 'e', 'G', 'r', 'o', 'u', 'p', 0,
    'W', 'r', 'i', 't', 'e', 'O', 'w', 'n', 'e', 'r', 0,
    'A', 'b', 'o', 'r', 't', 'E', 'r', 'r', 'o', 'r', 0,
    'F', 'a', 't', 'a', 'l', 'E', 'r', 'r', 'o', 'r', 0,
    'W', 'r', 'i', 't', 'e', 'E', 'r', 'r', 'o', 'r', 0,
    'Q', 'E', 'v', 'e', 'n', 't', 'L', 'o', 'o', 'p', 0,
    's', 'e', 't', 'C', 'u', 'r', 'r', 'e', 'n', 't', 0,
    'i', 's', 'A', 'b', 's', 'o', 'l', 'u', 't', 'e', 0,
    'i', 's', 'R', 'e', 'l', 'a', 't', 'i', 'v', 'e', 0,
    'i', 's', 'R', 'e', 'a', 'd', 'a', 'b', 'l', 'e', 0,
    's', 'e', 't', 'S', 'o', 'r', 't', 'i', 'n', 'g', 0,
    'I', 'g', 'n', 'o', 'r', 'e', 'C', 'a', 's', 'e', 0,
    'S', 'o', 'r', 't', 'B', 'y', 'M', 'a', 's', 'k', 0,
    'A', 'c', 'c', 'e', 's', 's', 'M', 'a', 's', 'k', 0,
    'A', 'l', 'l', 'E', 'n', 't', 'r', 'i', 'e', 's', 0,
    'N', 'o', 'S', 'y', 'm', 'L', 'i', 'n', 'k', 's', 0,
    'f', 'r', 'o', 'm', 'T', 'i', 'm', 'e', '_', 't', 0,
    't', 'o', 'T', 'i', 'm', 'e', 'S', 'p', 'e', 'c', 0,
    'i', 's', 'L', 'e', 'a', 'p', 'Y', 'e', 'a', 'r', 0,
    'f', 'r', 'o', 'm', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'w', 'e', 'e', 'k', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'd', 'a', 'y', 's', 'I', 'n', 'Y', 'e', 'a', 'r', 0,
    'w', 'r', 'i', 't', 'e', 'B', 'y', 't', 'e', 's', 0,
    'w', 'r', 'i', 't', 'e', 'F', 'l', 'o', 'a', 't', 0,
    'w', 'r', 'i', 't', 'e', 'I', 'n', 't', '6', '4', 0,
    'w', 'r', 'i', 't', 'e', 'I', 'n', 't', '3', '2', 0,
    'w', 'r', 'i', 't', 'e', 'I', 'n', 't', '1', '6', 0,
    'w', 'r', 'i', 't', 'e', 'U', 'I', 'n', 't', '8', 0,
    'r', 'e', 'a', 'd', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'r', 'e', 'a', 'd', 'D', 'o', 'u', 'b', 'l', 'e', 0,
    'r', 'e', 'a', 'd', 'U', 'I', 'n', 't', '6', '4', 0,
    'r', 'e', 'a', 'd', 'U', 'I', 'n', 't', '3', '2', 0,
    'r', 'e', 'a', 'd', 'U', 'I', 'n', 't', '1', '6', 0,
    's', 'e', 't', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'i', 's', 'A', 'c', 'c', 'e', 'p', 't', 'e', 'd', 0,
    'T', 'a', 'b', 'l', 'e', 't', 'M', 'o', 'v', 'e', 0,
    'C', 'h', 'i', 'l', 'd', 'A', 'd', 'd', 'e', 'd', 0,
    'K', 'e', 'y', 'R', 'e', 'l', 'e', 'a', 's', 'e', 0,
    'f', 'r', 'o', 'm', 'L', 'a', 't', 'i', 'n', '1', 0,
    'd', 'i', 'g', 'i', 't', 'V', 'a', 'l', 'u', 'e', 0,
    'N', 'o', 'C', 'a', 't', 'e', 'g', 'o', 'r', 'y', 0,
    's', 'e', 't', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'p', 'u', 's', 'h', '_', 'f', 'r', 'o', 'n', 't', 0,
    'f', 'r', 'o', 'm', 'B', 'a', 's', 'e', '6', '4', 0,
    't', 'o', 'L', 'o', 'n', 'g', 'L', 'o', 'n', 'g', 0,
    's', 'i', 'm', 'p', 'l', 'i', 'f', 'i', 'e', 'd', 0,
    's', 't', 'a', 'r', 't', 's', 'W', 'i', 't', 'h', 0,
    'Q', 'B', 'y', 't', 'e', 'A', 'r', 'r', 'a', 'y', 0,
    '_', '_', 'r', 's', 'h', 'i', 'f', 't', '_', '_', 0,
    '_', '_', 'l', 's', 'h', 'i', 'f', 't', '_', '_', 0,
    'i', 's', 'D', 'e', 't', 'a', 'c', 'h', 'e', 'd', 0,
    'd', 'e', 'c', 'o', 'd', 'e', 'D', 'a', 't', 'a', 0,
    'e', 'n', 'c', 'o', 'd', 'e', 'D', 'a', 't', 'a', 0,
    'm', 'o', 'd', 'e', 'l', 'R', 'e', 's', 'e', 't', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'R', 'o', 'w', 's', 0,
    'i', 'n', 's', 'e', 'r', 't', 'R', 'o', 'w', 's', 0,
    'h', 'e', 'a', 'd', 'e', 'r', 'D', 'a', 't', 'a', 0,
    'i', 'n', 't', 'e', 'r', 'n', 'a', 'l', 'I', 'd', 0,
    'A', 'c', 'c', 'e', 's', 's', 'T', 'i', 'm', 'e', 0,
    'O', 'w', 'n', 'e', 'r', 'G', 'r', 'o', 'u', 'p', 0,
    'B', 'u', 'n', 'd', 'l', 'e', 'N', 'a', 'm', 'e', 0,
    'B', 'u', 'n', 'd', 'l', 'e', 'T', 'y', 'p', 'e', 0,
    'E', 'x', 'i', 's', 't', 's', 'F', 'l', 'a', 'g', 0,
    'H', 'i', 'd', 'd', 'e', 'n', 'F', 'l', 'a', 'g', 0,
    's', 't', 'a', 'r', 't', 'i', 'n', 'g', 'U', 'p', 0,
    'T', 'o', 'p', 'S', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'A', 'c', 't', 'i', 'o', 'n', 'M', 'a', 's', 'k', 0,
    'L', 'i', 'n', 'k', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'C', 'o', 'p', 'y', 'A', 'c', 't', 'i', 'o', 'n', 0,
    'Q', 't', ':', ':', 'C', 'o', 'r', 'n', 'e', 'r', 0,
    'A', 'n', 'c', 'h', 'o', 'r', 'H', 'r', 'e', 'f', 0,
    'A', 'n', 'c', 'h', 'o', 'r', 'N', 'a', 'm', 'e', 0,
    'L', 'a', 's', 't', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'B', 'u', 's', 'y', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'W', 'a', 'i', 't', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'U', 'I', '_', 'G', 'e', 'n', 'e', 'r', 'a', 'l', 0,
    'V', 'e', 'r', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'H', 'o', 'r', 'P', 'a', 't', 't', 'e', 'r', 'n', 0,
    'R', 'i', 'g', 'h', 't', 'A', 'r', 'r', 'o', 'w', 0,
    'K', 'e', 'y', '_', 'C', 'a', 'n', 'c', 'e', 'l', 0,
    'K', 'e', 'y', '_', 'H', 'a', 'n', 'g', 'u', 'p', 0,
    'K', 'e', 'y', '_', 'S', 'e', 'l', 'e', 'c', 't', 0,
    'K', 'e', 'y', '_', 'S', 'e', 'a', 'r', 'c', 'h', 0,
    'K', 'e', 'y', '_', 'B', 'a', 's', 's', 'U', 'p', 0,
    'K', 'e', 'y', '_', 'H', 'a', 'n', 'g', 'u', 'l', 0,
    'K', 'e', 'y', '_', 'M', 'a', 's', 's', 'y', 'o', 0,
    'K', 'e', 'y', '_', 'R', 'o', 'm', 'a', 'j', 'i', 0,
    'K', 'e', 'y', '_', 'H', 'e', 'n', 'k', 'a', 'n', 0,
    'K', 'e', 'y', '_', 's', 's', 'h', 'a', 'r', 'p', 0,
    'K', 'e', 'y', '_', 'Y', 'a', 'c', 'u', 't', 'e', 0,
    'K', 'e', 'y', '_', 'U', 'a', 'c', 'u', 't', 'e', 0,
    'K', 'e', 'y', '_', 'U', 'g', 'r', 'a', 'v', 'e', 0,
    'K', 'e', 'y', '_', 'O', 't', 'i', 'l', 'd', 'e', 0,
    'K', 'e', 'y', '_', 'O', 'a', 'c', 'u', 't', 'e', 0,
    'K', 'e', 'y', '_', 'O', 'g', 'r', 'a', 'v', 'e', 0,
    'K', 'e', 'y', '_', 'N', 't', 'i', 'l', 'd', 'e', 0,
    'K', 'e', 'y', '_', 'I', 'a', 'c', 'u', 't', 'e', 0,
    'K', 'e', 'y', '_', 'I', 'g', 'r', 'a', 'v', 'e', 0,
    'K', 'e', 'y', '_', 'E', 'a', 'c', 'u', 't', 'e', 0,
    'K', 'e', 'y', '_', 'E', 'g', 'r', 'a', 'v', 'e', 0,
    'K', 'e', 'y', '_', 'A', 't', 'i', 'l', 'd', 'e', 0,
    'K', 'e', 'y', '_', 'A', 'a', 'c', 'u', 't', 'e', 0,
    'K', 'e', 'y', '_', 'A', 'g', 'r', 'a', 'v', 'e', 0,
    'K', 'e', 'y', '_', 'd', 'e', 'g', 'r', 'e', 'e', 0,
    'K', 'e', 'y', '_', 'm', 'a', 'c', 'r', 'o', 'n', 0,
    'K', 'e', 'y', '_', 'h', 'y', 'p', 'h', 'e', 'n', 0,
    'K', 'e', 'y', '_', 'P', 'e', 'r', 'i', 'o', 'd', 0,
    'K', 'e', 'y', '_', 'D', 'o', 'l', 'l', 'a', 'r', 0,
    'K', 'e', 'y', '_', 'E', 'x', 'c', 'l', 'a', 'm', 0,
    'K', 'e', 'y', '_', 'P', 'a', 'g', 'e', 'U', 'p', 0,
    'K', 'e', 'y', '_', 'S', 'y', 's', 'R', 'e', 'q', 0,
    'K', 'e', 'y', '_', 'D', 'e', 'l', 'e', 't', 'e', 0,
    'K', 'e', 'y', '_', 'I', 'n', 's', 'e', 'r', 't', 0,
    'K', 'e', 'y', '_', 'R', 'e', 't', 'u', 'r', 'n', 0,
    'K', 'e', 'y', '_', 'E', 's', 'c', 'a', 'p', 'e', 0,
    'O', 'p', 'a', 'q', 'u', 'e', 'M', 'o', 'd', 'e', 0,
    'Q', 't', ':', ':', 'B', 'G', 'M', 'o', 'd', 'e', 0,
    'A', 'u', 't', 'o', 'D', 'i', 't', 'h', 'e', 'r', 0,
    'W', 'A', '_', 'R', 'e', 's', 'i', 'z', 'e', 'd', 0,
    'W', 'A', '_', 'S', 'e', 't', 'F', 'o', 'n', 't', 0,
    'W', 'A', '_', 'L', 'a', 'i', 'd', 'O', 'u', 't', 0,
    'E', 'l', 'i', 'd', 'e', 'R', 'i', 'g', 'h', 't', 0,
    'A', 'l', 'i', 'g', 'n', 'R', 'i', 'g', 'h', 't', 0,
    'W', 'h', 'e', 'e', 'l', 'F', 'o', 'c', 'u', 's', 0,
    'C', 'l', 'i', 'c', 'k', 'F', 'o', 'c', 'u', 's', 0,
    'H', 'o', 'r', 'i', 'z', 'o', 'n', 't', 'a', 'l', 0,
    'L', 'e', 'f', 't', 'B', 'u', 't', 't', 'o', 'n', 0,
    'N', 'o', 'M', 'o', 'd', 'i', 'f', 'i', 'e', 'r', 0,
    'd', 'a', 'r', 'k', 'Y', 'e', 'l', 'l', 'o', 'w', 0,
    '_', '_', 'i', 'n', 'v', 'e', 'r', 't', '_', '_', 0,
    'Q', 't', 'F', 'a', 't', 'a', 'l', 'M', 's', 'g', 0,
    'Q', 't', 'D', 'e', 'b', 'u', 'g', 'M', 's', 'g', 0,
    'i', 's', 'C', 'o', 'm', 'm', 'e', 'n', 't', 0,
    't', 'o', 'k', 'e', 'n', 'T', 'y', 'p', 'e', 0,
    'i', 's', 'D', 'e', 'f', 'a', 'u', 'l', 't', 0,
    'M', 'i', 'c', 'r', 'o', 's', 'o', 'f', 't', 0,
    't', 'o', 'E', 'n', 'c', 'o', 'd', 'e', 'd', 0,
    'a', 'u', 't', 'h', 'o', 'r', 'i', 't', 'y', 0,
    's', 'e', 't', 'S', 'c', 'h', 'e', 'm', 'e', 0,
    's', 'e', 't', 'P', 'a', 'u', 's', 'e', 'd', 0,
    'l', 'o', 'o', 'p', 'C', 'o', 'u', 'n', 't', 0,
    'S', 'i', 'n', 'e', 'C', 'u', 'r', 'v', 'e', 0,
    'Q', 'T', 'i', 'm', 'e', 'L', 'i', 'n', 'e', 0,
    's', 't', 'a', 'c', 'k', 'S', 'i', 'z', 'e', 0,
    's', 'e', 't', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'F', 'o', 'r', 'c', 'e', 'S', 'i', 'g', 'n', 0,
    't', 'o', 'U', 'n', 'i', 'c', 'o', 'd', 'e', 0,
    'c', 'a', 'n', 'E', 'n', 'c', 'o', 'd', 'e', 0,
    'S', 't', 'a', 'r', 't', 'W', 'o', 'r', 'd', 0,
    't', 'a', 'k', 'e', 'F', 'i', 'r', 's', 't', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'A', 'l', 'l', 0,
    'i', 's', 'E', 'n', 'a', 'b', 'l', 'e', 'd', 0,
    'E', 'x', 'c', 'e', 'p', 't', 'i', 'o', 'n', 0,
    'b', 'o', 'u', 'n', 'd', 'e', 'd', 'T', 'o', 0,
    't', 'r', 'a', 'n', 's', 'p', 'o', 's', 'e', 0,
    'c', 'o', 'n', 's', 't', 'D', 'a', 't', 'a', 0,
    'L', 'o', 'c', 'k', 'E', 'r', 'r', 'o', 'r', 0,
    'c', 'h', 'i', 'l', 'd', 'K', 'e', 'y', 's', 0,
    'U', 's', 'e', 'r', 'S', 'c', 'o', 'p', 'e', 0,
    'I', 'n', 'i', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'Q', 'S', 'e', 't', 't', 'i', 'n', 'g', 's', 0,
    'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 0,
    'Q', 'R', 'u', 'n', 'n', 'a', 'b', 'l', 'e', 0,
    's', 'e', 't', 'L', 'o', 'c', 'a', 'l', 'e', 0,
    'Q', 'R', 'e', 's', 'o', 'u', 'r', 'c', 'e', 0,
    'i', 's', 'M', 'i', 'n', 'i', 'm', 'a', 'l', 0,
    's', 'e', 't', 'H', 'e', 'i', 'g', 'h', 't', 0,
    's', 'e', 't', 'C', 'o', 'o', 'r', 'd', 's', 0,
    'g', 'e', 't', 'C', 'o', 'o', 'r', 'd', 's', 0,
    'm', 'o', 'v', 'e', 'R', 'i', 'g', 'h', 't', 0,
    's', 'e', 't', 'B', 'o', 't', 't', 'o', 'm', 0,
    't', 'e', 'r', 'm', 'i', 'n', 'a', 't', 'e', 0,
    'C', 'r', 'a', 's', 'h', 'E', 'x', 'i', 't', 0,
    'c', 'l', 'a', 's', 's', 'I', 'n', 'f', 'o', 0,
    'c', 'l', 'a', 's', 's', 'N', 'a', 'm', 'e', 0,
    'r', 'e', 'c', 'e', 'i', 'v', 'e', 'r', 's', 0,
    'd', 'e', 's', 't', 'r', 'o', 'y', 'e', 'd', 0,
    's', 'e', 't', 'P', 'a', 'r', 'e', 'n', 't', 0,
    'k', 'i', 'l', 'l', 'T', 'i', 'm', 'e', 'r', 0,
    'f', 'i', 'n', 'd', 'C', 'h', 'i', 'l', 'd', 0,
    'q', 'I', 's', 'F', 'i', 'n', 'i', 't', 'e', 0,
    '_', '_', 'e', 'n', 't', 'e', 'r', '_', '_', 0,
    'h', 'a', 's', 'F', 'o', 'r', 'm', 'a', 't', 0,
    'c', 'o', 'l', 'o', 'r', 'D', 'a', 't', 'a', 0,
    'i', 'm', 'a', 'g', 'e', 'D', 'a', 't', 'a', 0,
    'Q', 'M', 'i', 'm', 'e', 'D', 'a', 't', 'a', 0,
    'Q', 'M', 'e', 't', 'a', 'T', 'y', 'p', 'e', 0,
    'Q', 'M', 'e', 't', 'a', 'E', 'n', 'u', 'm', 0,
    'P', 'r', 'o', 't', 'e', 'c', 't', 'e', 'd', 0,
    's', 'i', 'g', 'n', 'a', 't', 'u', 'r', 'e', 0,
    'Z', 'e', 'r', 'o', 'D', 'i', 'g', 'i', 't', 0,
    'C', 'o', 'u', 'n', 't', 'r', 'y', 'I', 'd', 0,
    'm', 'o', 'n', 't', 'h', 'N', 'a', 'm', 'e', 0,
    'z', 'e', 'r', 'o', 'D', 'i', 'g', 'i', 't', 0,
    'V', 'e', 'n', 'e', 'z', 'u', 'e', 'l', 'a', 0,
    'S', 'w', 'a', 'z', 'i', 'l', 'a', 'n', 'd', 0,
    'S', 'i', 'n', 'g', 'a', 'p', 'o', 'r', 'e', 0,
    'S', 'a', 'n', 'M', 'a', 'r', 'i', 'n', 'o', 0,
    'N', 'i', 'c', 'a', 'r', 'a', 'g', 'u', 'a', 0,
    'M', 'a', 'u', 'r', 'i', 't', 'i', 'u', 's', 0,
    'M', 'a', 'c', 'e', 'd', 'o', 'n', 'i', 'a', 0,
    'L', 'i', 't', 'h', 'u', 'a', 'n', 'i', 'a', 0,
    'I', 'n', 'd', 'o', 'n', 'e', 's', 'i', 'a', 0,
    'G', 'u', 'a', 't', 'e', 'm', 'a', 'l', 'a', 0,
    'G', 'r', 'e', 'e', 'n', 'l', 'a', 'n', 'd', 0,
    'G', 'i', 'b', 'r', 'a', 'l', 't', 'a', 'r', 0,
    'E', 'a', 's', 't', 'T', 'i', 'm', 'o', 'r', 0,
    'C', 'o', 's', 't', 'a', 'R', 'i', 'c', 'a', 0,
    'C', 'a', 'p', 'e', 'V', 'e', 'r', 'd', 'e', 0,
    'A', 'u', 's', 't', 'r', 'a', 'l', 'i', 'a', 0,
    'A', 'r', 'g', 'e', 'n', 't', 'i', 'n', 'a', 0,
    'U', 'k', 'r', 'a', 'i', 'n', 'i', 'a', 'n', 0,
    'S', 'u', 'n', 'd', 'a', 'n', 'e', 's', 'e', 0,
    'S', 'l', 'o', 'v', 'e', 'n', 'i', 'a', 'n', 0,
    'N', 'o', 'r', 'w', 'e', 'g', 'i', 'a', 'n', 0,
    'M', 'o', 'n', 'g', 'o', 'l', 'i', 'a', 'n', 0,
    'M', 'o', 'l', 'd', 'a', 'v', 'i', 'a', 'n', 0,
    'M', 'a', 'l', 'a', 'y', 'a', 'l', 'a', 'm', 0,
    'I', 'n', 'u', 'k', 't', 'i', 't', 'u', 't', 0,
    'I', 'c', 'e', 'l', 'a', 'n', 'd', 'i', 'c', 0,
    'H', 'u', 'n', 'g', 'a', 'r', 'i', 'a', 'n', 0,
    'E', 's', 'p', 'e', 'r', 'a', 'n', 't', 'o', 0,
    'C', 'a', 'm', 'b', 'o', 'd', 'i', 'a', 'n', 0,
    'B', 'u', 'l', 'g', 'a', 'r', 'i', 'a', 'n', 0,
    'A', 'f', 'r', 'i', 'k', 'a', 'a', 'n', 's', 0,
    'A', 'b', 'k', 'h', 'a', 'z', 'i', 'a', 'n', 0,
    'f', 'r', 'o', 'm', 'P', 'o', 'l', 'a', 'r', 0,
    's', 'e', 't', 'L', 'e', 'n', 'g', 't', 'h', 0,
    'i', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 0,
    's', 'e', 't', 'P', 'o', 'i', 'n', 't', 's', 0,
    'D', 'e', 'm', 'o', 's', 'P', 'a', 't', 'h', 0,
    'i', 's', 'L', 'i', 'b', 'r', 'a', 'r', 'y', 0,
    'l', 'o', 'a', 'd', 'H', 'i', 'n', 't', 's', 0,
    'r', 'e', 'a', 'd', 'y', 'R', 'e', 'a', 'd', 0,
    'u', 'n', 'g', 'e', 't', 'C', 'h', 'a', 'r', 0,
    'R', 'e', 'a', 'd', 'W', 'r', 'i', 't', 'e', 0,
    'W', 'r', 'i', 't', 'e', 'O', 'n', 'l', 'y', 0,
    'i', 's', 'S', 'y', 'm', 'L', 'i', 'n', 'k', 0,
    'Q', 'F', 'i', 'l', 'e', 'I', 'n', 'f', 'o', 0,
    'R', 'e', 'a', 'd', 'O', 't', 'h', 'e', 'r', 0,
    'R', 'e', 'a', 'd', 'G', 'r', 'o', 'u', 'p', 0,
    'W', 'r', 'i', 't', 'e', 'U', 's', 'e', 'r', 0,
    'R', 'e', 'a', 'd', 'O', 'w', 'n', 'e', 'r', 0,
    'N', 'o', 'O', 'p', 't', 'i', 'o', 'n', 's', 0,
    'C', 'o', 'p', 'y', 'E', 'r', 'r', 'o', 'r', 0,
    'O', 'p', 'e', 'n', 'E', 'r', 'r', 'o', 'r', 0,
    'R', 'e', 'a', 'd', 'E', 'r', 'r', 'o', 'r', 0,
    'i', 's', 'R', 'u', 'n', 'n', 'i', 'n', 'g', 0,
    'A', 'l', 'l', 'E', 'v', 'e', 'n', 't', 's', 0,
    'c', 'l', 'e', 'a', 'n', 'P', 'a', 't', 'h', 0,
    's', 'e', 'p', 'a', 'r', 'a', 't', 'o', 'r', 0,
    's', 'e', 't', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'D', 'i', 'r', 's', 'F', 'i', 'r', 's', 't', 0,
    's', 'e', 't', 'T', 'i', 'm', 'e', '_', 't', 0,
    'a', 'd', 'd', 'M', 'o', 'n', 't', 'h', 's', 0,
    'd', 'a', 'y', 'O', 'f', 'Y', 'e', 'a', 'r', 0,
    'd', 'a', 'y', 'O', 'f', 'W', 'e', 'e', 'k', 0,
    'r', 'e', 'a', 'd', 'B', 'y', 't', 'e', 's', 0,
    'w', 'r', 'i', 't', 'e', 'B', 'o', 'o', 'l', 0,
    'w', 'r', 'i', 't', 'e', 'I', 'n', 't', '8', 0,
    'r', 'e', 'a', 'd', 'F', 'l', 'o', 'a', 't', 0,
    'r', 'e', 'a', 'd', 'I', 'n', 't', '6', '4', 0,
    'r', 'e', 'a', 'd', 'I', 'n', 't', '3', '2', 0,
    'r', 'e', 'a', 'd', 'I', 'n', 't', '1', '6', 0,
    'r', 'e', 'a', 'd', 'U', 'I', 'n', 't', '8', 0,
    'b', 'y', 't', 'e', 'O', 'r', 'd', 'e', 'r', 0,
    'G', 'r', 'a', 'b', 'M', 'o', 'u', 's', 'e', 0,
    'S', 't', 'a', 't', 'u', 's', 'T', 'i', 'p', 0,
    'O', 'k', 'R', 'e', 'q', 'u', 'e', 's', 't', 0,
    'C', 'l', 'i', 'p', 'b', 'o', 'a', 'r', 'd', 0,
    't', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', 0,
    'p', 'o', 's', 't', 'E', 'v', 'e', 'n', 't', 0,
    's', 'e', 'n', 'd', 'E', 'v', 'e', 'n', 't', 0,
    'a', 'r', 'g', 'u', 'm', 'e', 'n', 't', 's', 0,
    'f', 'r', 'o', 'm', 'A', 's', 'c', 'i', 'i', 0,
    'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'C', 'a', 'n', 'o', 'n', 'i', 'c', 'a', 'l', 0,
    'q', 'C', 'o', 'm', 'p', 'r', 'e', 's', 's', 0,
    'p', 'u', 's', 'h', '_', 'b', 'a', 'c', 'k', 0,
    'q', 'C', 'h', 'e', 'c', 'k', 's', 'u', 'm', 0,
    'w', 'r', 'i', 't', 'e', 'D', 'a', 't', 'a', 0,
    's', 'e', 't', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    'Q', 'I', 'O', 'D', 'e', 'v', 'i', 'c', 'e', 0,
    't', 'o', 'g', 'g', 'l', 'e', 'B', 'i', 't', 0,
    'Q', 'B', 'i', 't', 'A', 'r', 'r', 'a', 'y', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'R', 'o', 'w', 0,
    'i', 'n', 's', 'e', 'r', 't', 'R', 'o', 'w', 0,
    'f', 'e', 't', 'c', 'h', 'M', 'o', 'r', 'e', 0,
    'm', 'i', 'm', 'e', 'T', 'y', 'p', 'e', 's', 0,
    'f', 'i', 'l', 'e', 'F', 'l', 'a', 'g', 's', 0,
    'e', 'n', 't', 'r', 'y', 'L', 'i', 's', 't', 0,
    'O', 'w', 'n', 'e', 'r', 'U', 's', 'e', 'r', 0,
    'F', 'l', 'a', 'g', 's', 'M', 'a', 's', 'k', 0,
    'T', 'y', 'p', 'e', 's', 'M', 'a', 's', 'k', 0,
    'P', 'e', 'r', 'm', 's', 'M', 'a', 's', 'k', 0,
    'i', 'n', 't', 'e', 'r', 'r', 'u', 'p', 't', 0,
    'N', 'o', 'S', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'M', 'a', 't', 'c', 'h', 'W', 'r', 'a', 'p', 0,
    'U', 'n', 'c', 'h', 'e', 'c', 'k', 'e', 'd', 0,
    'U', 'n', 'i', 't', 'e', 'C', 'l', 'i', 'p', 0,
    'W', 'e', 'd', 'n', 'e', 's', 'd', 'a', 'y', 0,
    'L', 'o', 'c', 'a', 'l', 'D', 'a', 't', 'e', 0,
    'P', 'l', 'a', 'i', 'n', 'T', 'e', 'x', 't', 0,
    'R', 'o', 'u', 'n', 'd', 'J', 'o', 'i', 'n', 0,
    'B', 'e', 'v', 'e', 'l', 'J', 'o', 'i', 'n', 0,
    'S', 'q', 'u', 'a', 'r', 'e', 'C', 'a', 'p', 0,
    'M', 'P', 'e', 'n', 'S', 't', 'y', 'l', 'e', 0,
    'S', 'o', 'l', 'i', 'd', 'L', 'i', 'n', 'e', 0,
    'L', 'e', 'f', 't', 'A', 'r', 'r', 'o', 'w', 0,
    'D', 'o', 'w', 'n', 'A', 'r', 'r', 'o', 'w', 0,
    'K', 'e', 'y', '_', 'S', 'l', 'e', 'e', 'p', 0,
    'K', 'e', 'y', '_', 'K', 'a', 'n', 'j', 'i', 0,
    'K', 'e', 'y', '_', 'A', 'l', 't', 'G', 'r', 0,
    'K', 'e', 'y', '_', 'T', 'H', 'O', 'R', 'N', 0,
    'K', 'e', 'y', '_', 'A', 'r', 'i', 'n', 'g', 0,
    'K', 'e', 'y', '_', 'a', 'c', 'u', 't', 'e', 0,
    'K', 'e', 'y', '_', 'E', 'q', 'u', 'a', 'l', 0,
    'K', 'e', 'y', '_', 'C', 'o', 'l', 'o', 'n', 0,
    'K', 'e', 'y', '_', 'S', 'l', 'a', 's', 'h', 0,
    'K', 'e', 'y', '_', 'M', 'i', 'n', 'u', 's', 0,
    'K', 'e', 'y', '_', 'C', 'o', 'm', 'm', 'a', 0,
    'K', 'e', 'y', '_', 'S', 'p', 'a', 'c', 'e', 0,
    'K', 'e', 'y', '_', 'S', 'h', 'i', 'f', 't', 0,
    'K', 'e', 'y', '_', 'R', 'i', 'g', 'h', 't', 0,
    'K', 'e', 'y', '_', 'C', 'l', 'e', 'a', 'r', 0,
    'K', 'e', 'y', '_', 'P', 'r', 'i', 'n', 't', 0,
    'K', 'e', 'y', '_', 'P', 'a', 'u', 's', 'e', 0,
    'K', 'e', 'y', '_', 'E', 'n', 't', 'e', 'r', 0,
    'C', 'o', 'l', 'o', 'r', 'O', 'n', 'l', 'y', 0,
    'A', 'u', 't', 'o', 'C', 'o', 'l', 'o', 'r', 0,
    'W', 'A', '_', 'M', 'a', 'p', 'p', 'e', 'd', 0,
    'S', 'u', 'b', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'E', 'l', 'i', 'd', 'e', 'N', 'o', 'n', 'e', 0,
    'E', 'l', 'i', 'd', 'e', 'L', 'e', 'f', 't', 0,
    'A', 'l', 'i', 'g', 'n', 'L', 'e', 'f', 't', 0,
    'M', 'i', 'd', 'B', 'u', 't', 't', 'o', 'n', 0,
    'd', 'a', 'r', 'k', 'G', 'r', 'e', 'e', 'n', 0,
    'l', 'i', 'g', 'h', 't', 'G', 'r', 'a', 'y', 0,
    'Q', 't', 'M', 's', 'g', 'T', 'y', 'p', 'e', 0,
    'q', 'C', 'r', 'i', 't', 'i', 'c', 'a', 'l', 0,
    'B', 'i', 'g', 'E', 'n', 'd', 'i', 'a', 'n', 0,
    'Q', 'D', 'a', 't', 'e', 'T', 'i', 'm', 'e', 0,
    'w', 'r', 'i', 't', 'e', 'D', 'T', 'D', 0,
    'h', 'a', 's', 'E', 'r', 'r', 'o', 'r', 0,
    'r', 'e', 'a', 'd', 'N', 'e', 'x', 't', 0,
    'p', 'u', 'b', 'l', 'i', 'c', 'I', 'd', 0,
    's', 'y', 's', 't', 'e', 'm', 'I', 'd', 0,
    't', 'o', 'R', 'e', 'g', 'E', 'x', 'p', 0,
    't', 'o', 'L', 'o', 'c', 'a', 'l', 'e', 0,
    't', 'o', 'P', 'o', 'i', 'n', 't', 'F', 0,
    'f', 'r', 'o', 'm', 'L', 'i', 's', 't', 0,
    'U', 's', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    'R', 'e', 's', 'e', 'r', 'v', 'e', 'd', 0,
    'h', 'a', 's', 'Q', 'u', 'e', 'r', 'y', 0,
    'r', 'e', 's', 'o', 'l', 'v', 'e', 'd', 0,
    'f', 'r', 'a', 'g', 'm', 'e', 'n', 't', 0,
    'p', 'a', 's', 's', 'w', 'o', 'r', 'd', 0,
    'u', 's', 'e', 'r', 'N', 'a', 'm', 'e', 0,
    'u', 's', 'e', 'r', 'I', 'n', 'f', 'o', 0,
    'i', 'n', 't', 'e', 'r', 'v', 'a', 'l', 0,
    'e', 'n', 'd', 'F', 'r', 'a', 'm', 'e', 0,
    'd', 'u', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'B', 'a', 'c', 'k', 'w', 'a', 'r', 'd', 0,
    't', 'r', 'y', 'S', 't', 'a', 'r', 't', 0,
    'p', 'r', 'i', 'o', 'r', 'i', 't', 'y', 0,
    's', 'e', 't', 'C', 'o', 'd', 'e', 'c', 0,
    'S', 'h', 'o', 'w', 'B', 'a', 's', 'e', 0,
    'S', 'e', 'n', 't', 'e', 'n', 'c', 'e', 0,
    'G', 'r', 'a', 'p', 'h', 'e', 'm', 'e', 0,
    't', 'a', 'k', 'e', 'L', 'a', 's', 't', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'A', 't', 0,
    'a', 'p', 'p', 'e', 'n', 'd', 'T', 'o', 0,
    'f', 'r', 'o', 'm', 'U', 't', 'f', '8', 0,
    'N', 'o', 't', 'F', 'o', 'u', 'n', 'd', 0,
    'K', 'e', 'y', 'E', 'r', 'r', 'o', 'r', 0,
    'i', 'n', 'i', 'C', 'o', 'd', 'e', 'c', 0,
    's', 'e', 't', 'V', 'a', 'l', 'u', 'e', 0,
    'e', 'n', 'd', 'A', 'r', 'r', 'a', 'y', 0,
    'e', 'n', 'd', 'G', 'r', 'o', 'u', 'p', 0,
    's', 'e', 't', 'W', 'i', 'd', 't', 'h', 0,
    'a', 'd', 'j', 'u', 's', 't', 'e', 'd', 0,
    'm', 'o', 'v', 'e', 'L', 'e', 'f', 't', 0,
    't', 'o', 'p', 'R', 'i', 'g', 'h', 't', 0,
    's', 'e', 't', 'R', 'i', 'g', 'h', 't', 0,
    'f', 'i', 'n', 'i', 's', 'h', 'e', 'd', 0,
    'e', 'x', 'i', 't', 'C', 'o', 'd', 'e', 0,
    'S', 't', 'a', 'r', 't', 'i', 'n', 'g', 0,
    'T', 'i', 'm', 'e', 'd', 'o', 'u', 't', 0,
    'Q', 'P', 'r', 'o', 'c', 'e', 's', 's', 0,
    '_', '_', 'i', 'd', 'i', 'v', '_', '_', 0,
    '_', '_', 'i', 's', 'u', 'b', '_', '_', 0,
    'p', 'y', 'q', 't', 'S', 'l', 'o', 't', 0,
    'i', 'n', 'h', 'e', 'r', 'i', 't', 's', 0,
    'p', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'c', 'h', 'i', 'l', 'd', 'r', 'e', 'n', 0,
    '_', '_', 'e', 'x', 'i', 't', '_', '_', 0,
    'h', 'a', 's', 'C', 'o', 'l', 'o', 'r', 0,
    'h', 'a', 's', 'I', 'm', 'a', 'g', 'e', 0,
    'V', 'o', 'i', 'd', 'S', 't', 'a', 'r', 0,
    'Q', 'P', 'o', 'l', 'y', 'g', 'o', 'n', 0,
    'Q', 'P', 'a', 'l', 'e', 't', 't', 'e', 0,
    'u', 's', 'e', 'r', 'T', 'y', 'p', 'e', 0,
    'i', 's', 'S', 't', 'o', 'r', 'e', 'd', 0,
    'k', 'e', 'y', 'C', 'o', 'u', 'n', 't', 0,
    't', 'y', 'p', 'e', 'N', 'a', 'm', 'e', 0,
    'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 0,
    'Z', 'i', 'm', 'b', 'a', 'b', 'w', 'e', 0,
    'T', 'h', 'a', 'i', 'l', 'a', 'n', 'd', 0,
    'T', 'a', 'n', 'z', 'a', 'n', 'i', 'a', 0,
    'S', 'u', 'r', 'i', 'n', 'a', 'm', 'e', 0,
    'S', 't', 'H', 'e', 'l', 'e', 'n', 'a', 0,
    'S', 'r', 'i', 'L', 'a', 'n', 'k', 'a', 0,
    'S', 'l', 'o', 'v', 'e', 'n', 'i', 'a', 0,
    'S', 'l', 'o', 'v', 'a', 'k', 'i', 'a', 0,
    'P', 'o', 'r', 't', 'u', 'g', 'a', 'l', 0,
    'P', 'i', 't', 'c', 'a', 'i', 'r', 'n', 0,
    'P', 'a', 'r', 'a', 'g', 'u', 'a', 'y', 0,
    'P', 'a', 'k', 'i', 's', 't', 'a', 'n', 0,
    'M', 'o', 'n', 'g', 'o', 'l', 'i', 'a', 0,
    'M', 'a', 'l', 'd', 'i', 'v', 'e', 's', 0,
    'M', 'a', 'l', 'a', 'y', 's', 'i', 'a', 0,
    'K', 'i', 'r', 'i', 'b', 'a', 't', 'i', 0,
    'H', 'o', 'n', 'g', 'K', 'o', 'n', 'g', 0,
    'H', 'o', 'n', 'd', 'u', 'r', 'a', 's', 0,
    'E', 't', 'h', 'i', 'o', 'p', 'i', 'a', 0,
    'D', 'o', 'm', 'i', 'n', 'i', 'c', 'a', 0,
    'D', 'j', 'i', 'b', 'o', 'u', 't', 'i', 0,
    'C', 'o', 'l', 'o', 'm', 'b', 'i', 'a', 0,
    'C', 'a', 'm', 'e', 'r', 'o', 'o', 'n', 0,
    'C', 'a', 'm', 'b', 'o', 'd', 'i', 'a', 0,
    'B', 'u', 'l', 'g', 'a', 'r', 'i', 'a', 0,
    'B', 'o', 't', 's', 'w', 'a', 'n', 'a', 0,
    'B', 'a', 'r', 'b', 'a', 'd', 'o', 's', 0,
    'A', 'n', 'g', 'u', 'i', 'l', 'l', 'a', 0,
    'H', 'a', 'w', 'a', 'i', 'i', 'a', 'n', 0,
    'F', 'r', 'i', 'u', 'l', 'i', 'a', 'n', 0,
    'T', 'i', 'g', 'r', 'i', 'n', 'y', 'a', 0,
    'S', 'e', 't', 's', 'w', 'a', 'n', 'a', 0,
    'S', 'a', 'n', 's', 'k', 'r', 'i', 't', 0,
    'R', 'o', 'm', 'a', 'n', 'i', 'a', 'n', 0,
    'M', 'a', 'l', 'a', 'g', 'a', 's', 'y', 0,
    'L', 'a', 'o', 't', 'h', 'i', 'a', 'n', 0,
    'K', 'a', 's', 'h', 'm', 'i', 'r', 'i', 0,
    'J', 'a', 'v', 'a', 'n', 'e', 's', 'e', 0,
    'J', 'a', 'p', 'a', 'n', 'e', 's', 'e', 0,
    'G', 'u', 'j', 'a', 'r', 'a', 't', 'i', 0,
    'G', 'e', 'o', 'r', 'g', 'i', 'a', 'n', 0,
    'G', 'a', 'l', 'i', 'c', 'i', 'a', 'n', 0,
    'E', 's', 't', 'o', 'n', 'i', 'a', 'n', 0,
    'C', 'o', 'r', 's', 'i', 'c', 'a', 'n', 0,
    'A', 's', 's', 'a', 'm', 'e', 's', 'e', 0,
    'A', 'r', 'm', 'e', 'n', 'i', 'a', 'n', 0,
    'A', 'l', 'b', 'a', 'n', 'i', 'a', 'n', 0,
    's', 'e', 't', 'A', 'n', 'g', 'l', 'e', 0,
    'l', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'D', 'a', 't', 'a', 'P', 'a', 't', 'h', 0,
    'b', 'u', 'i', 'l', 'd', 'K', 'e', 'y', 0,
    'l', 'i', 'c', 'e', 'n', 's', 'e', 'e', 0,
    'i', 's', 'L', 'o', 'a', 'd', 'e', 'd', 0,
    'Q', 'L', 'i', 'b', 'r', 'a', 'r', 'y', 0,
    'o', 'p', 'e', 'n', 'M', 'o', 'd', 'e', 0,
    'T', 'r', 'u', 'n', 'c', 'a', 't', 'e', 0,
    'R', 'e', 'a', 'd', 'O', 'n', 'l', 'y', 0,
    'a', 'd', 'd', 'P', 'a', 't', 'h', 's', 0,
    'i', 's', 'B', 'u', 'n', 'd', 'l', 'e', 0,
    'l', 'a', 's', 't', 'R', 'e', 'a', 'd', 0,
    'i', 's', 'H', 'i', 'd', 'd', 'e', 'n', 0,
    'b', 'a', 's', 'e', 'N', 'a', 'm', 'e', 0,
    'r', 'e', 'a', 'd', 'L', 'i', 'n', 'k', 0,
    'E', 'x', 'e', 'O', 't', 'h', 'e', 'r', 0,
    'E', 'x', 'e', 'G', 'r', 'o', 'u', 'p', 0,
    'R', 'e', 'a', 'd', 'U', 's', 'e', 'r', 0,
    'E', 'x', 'e', 'O', 'w', 'n', 'e', 'r', 0,
    'f', 'i', 'l', 'e', 'I', 'n', 'f', 'o', 0,
    't', 'e', 'm', 'p', 'P', 'a', 't', 'h', 0,
    'r', 'o', 'o', 't', 'P', 'a', 't', 'h', 0,
    'h', 'o', 'm', 'e', 'P', 'a', 't', 'h', 0,
    'f', 'i', 'l', 'e', 'P', 'a', 't', 'h', 0,
    'D', 'i', 'r', 's', 'L', 'a', 's', 't', 0,
    'R', 'e', 'v', 'e', 'r', 's', 'e', 'd', 0,
    'U', 'n', 's', 'o', 'r', 't', 'e', 'd', 0,
    'N', 'o', 'F', 'i', 'l', 't', 'e', 'r', 0,
    'T', 'y', 'p', 'e', 'M', 'a', 's', 'k', 0,
    't', 'o', 'T', 'i', 'm', 'e', '_', 't', 0,
    't', 'i', 'm', 'e', 'S', 'p', 'e', 'c', 0,
    'a', 'd', 'd', 'M', 'S', 'e', 'c', 's', 0,
    't', 'o', 'P', 'y', 'T', 'i', 'm', 'e', 0,
    'a', 'd', 'd', 'Y', 'e', 'a', 'r', 's', 0,
    't', 'o', 'S', 't', 'r', 'i', 'n', 'g', 0,
    't', 'o', 'P', 'y', 'D', 'a', 't', 'e', 0,
    'r', 'e', 'a', 'd', 'B', 'o', 'o', 'l', 0,
    'r', 'e', 'a', 'd', 'I', 'n', 't', '8', 0,
    'p', 'o', 'l', 'i', 's', 'h', 'e', 'd', 0,
    'F', 'i', 'l', 'e', 'O', 'p', 'e', 'n', 0,
    'I', 'c', 'o', 'n', 'D', 'r', 'a', 'g', 0,
    'M', 'e', 't', 'a', 'C', 'a', 'l', 'l', 0,
    'F', 'o', 'c', 'u', 's', 'O', 'u', 't', 0,
    'K', 'e', 'y', 'P', 'r', 'e', 's', 's', 0,
    'i', 's', 'S', 'y', 'm', 'b', 'o', 'l', 0,
    'i', 's', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'i', 's', 'L', 'e', 't', 't', 'e', 'r', 0,
    'c', 'a', 't', 'e', 'g', 'o', 'r', 'y', 0,
    'F', 'r', 'a', 'c', 't', 'i', 'o', 'n', 0,
    'I', 's', 'o', 'l', 'a', 't', 'e', 'd', 0,
    't', 'o', 'L', 'a', 't', 'i', 'n', '1', 0,
    'r', 'e', 'p', 'e', 'a', 't', 'e', 'd', 0,
    'c', 'o', 'n', 't', 'a', 'i', 'n', 's', 0,
    'c', 'a', 'p', 'a', 'c', 'i', 't', 'y', 0,
    '_', '_', 'i', 'm', 'u', 'l', '_', '_', 0,
    '_', '_', 'r', 'e', 'p', 'r', '_', '_', 0,
    't', 'o', 'B', 'a', 's', 'e', '6', '4', 0,
    't', 'o', 'D', 'o', 'u', 'b', 'l', 'e', 0,
    't', 'o', 'U', 'S', 'h', 'o', 'r', 't', 0,
    '_', '_', 'i', 'a', 'd', 'd', '_', '_', 0,
    'e', 'n', 'd', 's', 'W', 'i', 't', 'h', 0,
    'r', 'e', 'a', 'd', 'D', 'a', 't', 'a', 0,
    'c', 'l', 'e', 'a', 'r', 'B', 'i', 't', 0,
    't', 'r', 'u', 'n', 'c', 'a', 't', 'e', 0,
    'i', 's', 'A', 'c', 't', 'i', 'v', 'e', 0,
    'm', 'i', 'm', 'e', 'D', 'a', 't', 'a', 0,
    'i', 't', 'e', 'm', 'D', 'a', 't', 'a', 0,
    'r', 'o', 'w', 'C', 'o', 'u', 'n', 't', 0,
    'h', 'a', 's', 'I', 'n', 'd', 'e', 'x', 0,
    '_', '_', 'h', 'a', 's', 'h', '_', '_', 0,
    'r', 'e', 'a', 'd', 'L', 'i', 'n', 'e', 0,
    'f', 'i', 'l', 'e', 'T', 'i', 'm', 'e', 0,
    'f', 'i', 'l', 'e', 'N', 'a', 'm', 'e', 0,
    'L', 'i', 'n', 'k', 'N', 'a', 'm', 'e', 0,
    'R', 'o', 'o', 't', 'F', 'l', 'a', 'g', 0,
    'F', 'i', 'l', 'e', 'T', 'y', 'p', 'e', 0,
    'L', 'i', 'n', 'k', 'T', 'y', 'p', 'e', 0,
    'i', 'n', 's', 't', 'a', 'n', 'c', 'e', 0,
    'Q', 't', ':', ':', 'A', 'x', 'i', 's', 0,
    'N', 'o', 'n', 'M', 'o', 'd', 'a', 'l', 0,
    'U', 's', 'e', 'r', 'R', 'o', 'l', 'e', 0,
    'F', 'o', 'n', 't', 'R', 'o', 'l', 'e', 0,
    'E', 'd', 'i', 't', 'R', 'o', 'l', 'e', 0,
    'S', 'a', 't', 'u', 'r', 'd', 'a', 'y', 0,
    'T', 'h', 'u', 'r', 's', 'd', 'a', 'y', 0,
    'T', 'e', 'x', 't', 'D', 'a', 't', 'e', 0,
    'A', 'u', 't', 'o', 'T', 'e', 'x', 't', 0,
    'R', 'i', 'c', 'h', 'T', 'e', 'x', 't', 0,
    'R', 'o', 'u', 'n', 'd', 'C', 'a', 'p', 0,
    'K', 'e', 'y', '_', 'Z', 'o', 'o', 'm', 0,
    'K', 'e', 'y', '_', 'P', 'l', 'a', 'y', 0,
    'K', 'e', 'y', '_', 'F', 'l', 'i', 'p', 0,
    'K', 'e', 'y', '_', 'C', 'a', 'l', 'l', 0,
    'K', 'e', 'y', '_', 'S', 't', 'o', 'p', 0,
    'K', 'e', 'y', '_', 'B', 'a', 'c', 'k', 0,
    'K', 'e', 'y', '_', 'c', 'e', 'n', 't', 0,
    'K', 'e', 'y', '_', 'L', 'e', 's', 's', 0,
    'K', 'e', 'y', '_', 'P', 'l', 'u', 's', 0,
    'K', 'e', 'y', '_', 'H', 'e', 'l', 'p', 0,
    'K', 'e', 'y', '_', 'M', 'e', 'n', 'u', 0,
    'K', 'e', 'y', '_', 'M', 'e', 't', 'a', 0,
    'K', 'e', 'y', '_', 'D', 'o', 'w', 'n', 0,
    'K', 'e', 'y', '_', 'L', 'e', 'f', 't', 0,
    'K', 'e', 'y', '_', 'H', 'o', 'm', 'e', 0,
    'M', 'o', 'n', 'o', 'O', 'n', 'l', 'y', 0,
    'W', 'A', '_', 'H', 'o', 'v', 'e', 'r', 0,
    'W', 'A', '_', 'M', 'o', 'v', 'e', 'd', 0,
    'A', 'l', 'i', 'g', 'n', 'T', 'o', 'p', 0,
    'T', 'a', 'b', 'F', 'o', 'c', 'u', 's', 0,
    'V', 'e', 'r', 't', 'i', 'c', 'a', 'l', 0,
    'X', 'B', 'u', 't', 't', 'o', 'n', '2', 0,
    'X', 'B', 'u', 't', 't', 'o', 'n', '1', 0,
    'N', 'o', 'B', 'u', 't', 't', 'o', 'n', 0,
    'd', 'a', 'r', 'k', 'C', 'y', 'a', 'n', 0,
    'd', 'a', 'r', 'k', 'B', 'l', 'u', 'e', 0,
    'd', 'a', 'r', 'k', 'G', 'r', 'a', 'y', 0,
    '_', '_', 'b', 'o', 'o', 'l', '_', '_', 0,
    '_', '_', 'i', 'x', 'o', 'r', '_', '_', 0,
    '_', '_', 'i', 'a', 'n', 'd', '_', '_', 0,
    'q', 'W', 'a', 'r', 'n', 'i', 'n', 'g', 0,
    'q', 'V', 'e', 'r', 's', 'i', 'o', 'n', 0,
    'W', 'o', 'r', 'd', 'S', 'i', 'z', 'e', 0,
    'Q', 'S', 'y', 's', 'I', 'n', 'f', 'o', 0,
    'q', 'R', 'o', 'u', 'n', 'd', '6', '4', 0,
    'Q', 'V', 'a', 'r', 'i', 'a', 'n', 't', 0,
    'd', 't', 'd', 'N', 'a', 'm', 'e', 0,
    'i', 's', 'C', 'D', 'A', 'T', 'A', 0,
    'N', 'o', 'T', 'o', 'k', 'e', 'n', 0,
    'w', 'a', 'k', 'e', 'A', 'l', 'l', 0,
    'w', 'a', 'k', 'e', 'O', 'n', 'e', 0,
    't', 'o', 'R', 'e', 'c', 't', 'F', 0,
    't', 'o', 'L', 'i', 'n', 'e', 'F', 0,
    't', 'o', 'S', 'i', 'z', 'e', 'F', 0,
    'c', 'o', 'n', 'v', 'e', 'r', 't', 0,
    'f', 'r', 'o', 'm', 'M', 'a', 'p', 0,
    'I', 'n', 'v', 'a', 'l', 'i', 'd', 0,
    'v', 'a', 'r', 'i', 'a', 'n', 't', 0,
    'f', 'r', 'o', 'm', 'A', 'c', 'e', 0,
    's', 'e', 't', 'P', 'o', 'r', 't', 0,
    's', 'e', 't', 'H', 'o', 's', 't', 0,
    't', 'i', 'm', 'e', 'o', 'u', 't', 0,
    'Q', 'T', 'h', 'r', 'e', 'a', 'd', 0,
    'p', 'a', 'd', 'C', 'h', 'a', 'r', 0,
    'm', 'i', 'b', 'E', 'n', 'u', 'm', 0,
    'a', 'l', 'i', 'a', 's', 'e', 's', 0,
    't', 'o', 'S', 't', 'a', 'r', 't', 0,
    'E', 'n', 'd', 'W', 'o', 'r', 'd', 0,
    'c', 'o', 'm', 'p', 'a', 'r', 'e', 0,
    'm', 'a', 'p', 'p', 'i', 'n', 'g', 0,
    'a', 'l', 'l', 'K', 'e', 'y', 's', 0,
    'r', 'e', 'l', 'e', 'a', 's', 'e', 0,
    'a', 'c', 'q', 'u', 'i', 'r', 'e', 0,
    'R', 'e', 'g', 'E', 'x', 'p', '2', 0,
    's', 'e', 't', 'R', 'e', 'c', 't', 0,
    'm', 'o', 'v', 'e', 'T', 'o', 'p', 0,
    't', 'o', 'p', 'L', 'e', 'f', 't', 0,
    's', 'e', 't', 'L', 'e', 'f', 't', 0,
    's', 't', 'a', 'r', 't', 'e', 'd', 0,
    'e', 'x', 'e', 'c', 'u', 't', 'e', 0,
    'C', 'r', 'a', 's', 'h', 'e', 'd', 0,
    't', 'o', 'P', 'o', 'i', 'n', 't', 0,
    '_', '_', 'd', 'i', 'v', '_', '_', 0,
    '_', '_', 'n', 'e', 'g', '_', '_', 0,
    '_', '_', 's', 'u', 'b', '_', '_', 0,
    'Q', '_', 'F', 'L', 'A', 'G', 'S', 0,
    'Q', '_', 'E', 'N', 'U', 'M', 'S', 0,
    'Q', 'W', 'i', 'd', 'g', 'e', 't', 0,
    't', 'r', 'y', 'L', 'o', 'c', 'k', 0,
    'f', 'o', 'r', 'm', 'a', 't', 's', 0,
    'h', 'a', 's', 'H', 't', 'm', 'l', 0,
    's', 'e', 't', 'H', 't', 'm', 'l', 0,
    'h', 'a', 's', 'T', 'e', 'x', 't', 0,
    's', 'e', 't', 'T', 'e', 'x', 't', 0,
    'h', 'a', 's', 'U', 'r', 'l', 's', 0,
    's', 'e', 't', 'U', 'r', 'l', 's', 0,
    'Q', 'M', 'a', 't', 'r', 'i', 'x', 0,
    'Q', 'C', 'u', 'r', 's', 'o', 'r', 0,
    'Q', 'B', 'i', 't', 'm', 'a', 'p', 0,
    'Q', 'R', 'e', 'g', 'i', 'o', 'n', 0,
    'Q', 'P', 'i', 'x', 'm', 'a', 'p', 0,
    'Q', 'R', 'e', 'g', 'E', 'x', 'p', 0,
    'Q', 'P', 'o', 'i', 'n', 't', 'F', 0,
    'P', 'r', 'i', 'v', 'a', 't', 'e', 0,
    'd', 'a', 'y', 'N', 'a', 'm', 'e', 0,
    'p', 'e', 'r', 'c', 'e', 'n', 't', 0,
    'c', 'o', 'u', 'n', 't', 'r', 'y', 0,
    'V', 'i', 'e', 't', 'N', 'a', 'm', 0,
    'V', 'a', 'n', 'u', 'a', 't', 'u', 0,
    'U', 'r', 'u', 'g', 'u', 'a', 'y', 0,
    'U', 'k', 'r', 'a', 'i', 'n', 'e', 0,
    'T', 'u', 'n', 'i', 's', 'i', 'a', 0,
    'T', 'o', 'k', 'e', 'l', 'a', 'u', 0,
    'S', 'o', 'm', 'a', 'l', 'i', 'a', 0,
    'S', 'e', 'n', 'e', 'g', 'a', 'l', 0,
    'S', 't', 'L', 'u', 'c', 'i', 'a', 0,
    'R', 'o', 'm', 'a', 'n', 'i', 'a', 0,
    'R', 'e', 'u', 'n', 'i', 'o', 'n', 0,
    'N', 'i', 'g', 'e', 'r', 'i', 'a', 0,
    'N', 'a', 'm', 'i', 'b', 'i', 'a', 0,
    'M', 'y', 'a', 'n', 'm', 'a', 'r', 0,
    'M', 'o', 'r', 'o', 'c', 'c', 'o', 0,
    'M', 'o', 'l', 'd', 'o', 'v', 'a', 0,
    'M', 'a', 'y', 'o', 't', 't', 'e', 0,
    'L', 'i', 'b', 'e', 'r', 'i', 'a', 0,
    'L', 'e', 's', 'o', 't', 'h', 'o', 0,
    'L', 'e', 'b', 'a', 'n', 'o', 'n', 0,
    'J', 'a', 'm', 'a', 'i', 'c', 'a', 0,
    'I', 'r', 'e', 'l', 'a', 'n', 'd', 0,
    'I', 'c', 'e', 'l', 'a', 'n', 'd', 0,
    'H', 'u', 'n', 'g', 'a', 'r', 'y', 0,
    'G', 'r', 'e', 'n', 'a', 'd', 'a', 0,
    'G', 'e', 'r', 'm', 'a', 'n', 'y', 0,
    'G', 'e', 'o', 'r', 'g', 'i', 'a', 0,
    'F', 'i', 'n', 'l', 'a', 'n', 'd', 0,
    'E', 's', 't', 'o', 'n', 'i', 'a', 0,
    'E', 'r', 'i', 't', 'r', 'e', 'a', 0,
    'E', 'c', 'u', 'a', 'd', 'o', 'r', 0,
    'D', 'e', 'n', 'm', 'a', 'r', 'k', 0,
    'C', 'r', 'o', 'a', 't', 'i', 'a', 0,
    'C', 'o', 'm', 'o', 'r', 'o', 's', 0,
    'B', 'u', 'r', 'u', 'n', 'd', 'i', 0,
    'B', 'o', 'l', 'i', 'v', 'i', 'a', 0,
    'B', 'e', 'r', 'm', 'u', 'd', 'a', 0,
    'B', 'e', 'l', 'g', 'i', 'u', 'm', 0,
    'B', 'e', 'l', 'a', 'r', 'u', 's', 0,
    'B', 'a', 'h', 'r', 'a', 'i', 'n', 0,
    'B', 'a', 'h', 'a', 'm', 'a', 's', 0,
    'A', 'u', 's', 't', 'r', 'i', 'a', 0,
    'A', 'r', 'm', 'e', 'n', 'i', 'a', 0,
    'A', 'n', 'd', 'o', 'r', 'r', 'a', 0,
    'A', 'l', 'g', 'e', 'r', 'i', 'a', 0,
    'A', 'l', 'b', 'a', 'n', 'i', 'a', 0,
    'K', 'o', 'n', 'k', 'a', 'n', 'i', 0,
    'C', 'o', 'r', 'n', 'i', 's', 'h', 0,
    'B', 'o', 's', 'n', 'i', 'a', 'n', 0,
    'Y', 'i', 'd', 'd', 'i', 's', 'h', 0,
    'V', 'o', 'l', 'a', 'p', 'u', 'k', 0,
    'T', 'u', 'r', 'k', 'm', 'e', 'n', 0,
    'T', 'u', 'r', 'k', 'i', 's', 'h', 0,
    'T', 'i', 'b', 'e', 't', 'a', 'n', 0,
    'T', 'a', 'g', 'a', 'l', 'o', 'g', 0,
    'S', 'w', 'e', 'd', 'i', 's', 'h', 0,
    'S', 'w', 'a', 'h', 'i', 'l', 'i', 0,
    'S', 'p', 'a', 'n', 'i', 's', 'h', 0,
    'S', 'i', 's', 'w', 'a', 't', 'i', 0,
    'S', 'e', 's', 'o', 't', 'h', 'o', 0,
    'S', 'e', 'r', 'b', 'i', 'a', 'n', 0,
    'R', 'u', 's', 's', 'i', 'a', 'n', 0,
    'Q', 'u', 'e', 'c', 'h', 'u', 'a', 0,
    'P', 'u', 'n', 'j', 'a', 'b', 'i', 0,
    'P', 'e', 'r', 's', 'i', 'a', 'n', 0,
    'O', 'c', 'c', 'i', 't', 'a', 'n', 0,
    'M', 'a', 'r', 'a', 't', 'h', 'i', 0,
    'M', 'a', 'l', 't', 'e', 's', 'e', 0,
    'L', 'i', 'n', 'g', 'a', 'l', 'a', 0,
    'L', 'a', 't', 'v', 'i', 'a', 'n', 0,
    'K', 'u', 'r', 'u', 'n', 'd', 'i', 0,
    'K', 'u', 'r', 'd', 'i', 's', 'h', 0,
    'K', 'i', 'r', 'g', 'h', 'i', 'z', 0,
    'K', 'a', 'n', 'n', 'a', 'd', 'a', 0,
    'I', 't', 'a', 'l', 'i', 'a', 'n', 0,
    'I', 'n', 'u', 'p', 'i', 'a', 'k', 0,
    'G', 'u', 'a', 'r', 'a', 'n', 'i', 0,
    'F', 'r', 'i', 's', 'i', 'a', 'n', 0,
    'F', 'i', 'n', 'n', 'i', 's', 'h', 0,
    'F', 'a', 'r', 'o', 'e', 's', 'e', 0,
    'E', 'n', 'g', 'l', 'i', 's', 'h', 0,
    'C', 'h', 'i', 'n', 'e', 's', 'e', 0,
    'C', 'a', 't', 'a', 'l', 'a', 'n', 0,
    'B', 'u', 'r', 'm', 'e', 's', 'e', 0,
    'B', 'i', 's', 'l', 'a', 'm', 'a', 0,
    'B', 'h', 'u', 't', 'a', 'n', 'i', 0,
    'B', 'e', 'n', 'g', 'a', 'l', 'i', 0,
    'B', 'a', 's', 'h', 'k', 'i', 'r', 0,
    'A', 'm', 'h', 'a', 'r', 'i', 'c', 0,
    'Q', 'L', 'o', 'c', 'a', 'l', 'e', 0,
    'a', 'n', 'g', 'l', 'e', 'T', 'o', 0,
    'p', 'o', 'i', 'n', 't', 'A', 't', 0,
    's', 'e', 't', 'L', 'i', 'n', 'e', 0,
    'r', 'e', 's', 'o', 'l', 'v', 'e', 0,
    'p', 'u', 't', 'C', 'h', 'a', 'r', 0,
    'r', 'e', 'a', 'd', 'A', 'l', 'l', 0,
    'N', 'o', 't', 'O', 'p', 'e', 'n', 0,
    'a', 'd', 'd', 'P', 'a', 't', 'h', 0,
    'c', 'a', 'c', 'h', 'i', 'n', 'g', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'd', 0,
    'g', 'r', 'o', 'u', 'p', 'I', 'd', 0,
    's', 'e', 't', 'F', 'i', 'l', 'e', 0,
    'E', 'x', 'e', 'U', 's', 'e', 'r', 0,
    'N', 'o', 'E', 'r', 'r', 'o', 'r', 0,
    'c', 'u', 'r', 'r', 'e', 'n', 't', 0,
    'r', 'e', 'f', 'r', 'e', 's', 'h', 0,
    's', 'o', 'r', 't', 'i', 'n', 'g', 0,
    'd', 'i', 'r', 'N', 'a', 'm', 'e', 0,
    's', 'e', 't', 'P', 'a', 't', 'h', 0,
    'A', 'l', 'l', 'D', 'i', 'r', 's', 0,
    's', 'e', 't', 'T', 'i', 'm', 'e', 0,
    'e', 'l', 'a', 'p', 's', 'e', 'd', 0,
    'r', 'e', 's', 't', 'a', 'r', 't', 0,
    'm', 's', 'e', 'c', 's', 'T', 'o', 0,
    'a', 'd', 'd', 'S', 'e', 'c', 's', 0,
    'g', 'e', 't', 'D', 'a', 't', 'e', 0,
    's', 'e', 't', 'D', 'a', 't', 'e', 0,
    'a', 'd', 'd', 'D', 'a', 'y', 's', 0,
    'a', 'd', 'd', 'D', 'a', 't', 'a', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'd', 0,
    'M', 'a', 'x', 'U', 's', 'e', 'r', 0,
    'S', 'o', 'c', 'k', 'A', 'c', 't', 0,
    'D', 'e', 's', 't', 'r', 'o', 'y', 0,
    'F', 'o', 'c', 'u', 's', 'I', 'n', 0,
    's', 'e', 't', 'C', 'e', 'l', 'l', 0,
    'i', 's', 'D', 'i', 'g', 'i', 't', 0,
    'i', 's', 'S', 'p', 'a', 'c', 'e', 0,
    'i', 's', 'P', 'u', 'n', 'c', 't', 0,
    'i', 's', 'P', 'r', 'i', 'n', 't', 0,
    't', 'o', 'A', 's', 'c', 'i', 'i', 0,
    'i', 's', 'U', 'p', 'p', 'e', 'r', 0,
    'i', 's', 'L', 'o', 'w', 'e', 'r', 0,
    'j', 'o', 'i', 'n', 'i', 'n', 'g', 0,
    'I', 'n', 'i', 't', 'i', 'a', 'l', 0,
    'N', 'o', 'B', 'r', 'e', 'a', 'k', 0,
    'u', 'n', 'i', 'c', 'o', 'd', 'e', 0,
    'p', 'a', 't', 't', 'e', 'r', 'n', 0,
    'i', 'n', 'd', 'e', 'x', 'I', 'n', 0,
    '_', '_', 'a', 'd', 'd', '_', '_', 0,
    's', 'q', 'u', 'e', 'e', 'z', 'e', 0,
    'r', 'e', 's', 'e', 'r', 'v', 'e', 0,
    '_', '_', 'm', 'u', 'l', '_', '_', 0,
    '_', '_', 's', 't', 'r', '_', '_', 0,
    '_', '_', 'l', 'e', 'n', '_', '_', 0,
    'f', 'r', 'o', 'm', 'H', 'e', 'x', 0,
    't', 'o', 'F', 'l', 'o', 'a', 't', 0,
    't', 'o', 'U', 'L', 'o', 'n', 'g', 0,
    't', 'o', 'S', 'h', 'o', 'r', 't', 0,
    'r', 'e', 'p', 'l', 'a', 'c', 'e', 0,
    'p', 'r', 'e', 'p', 'e', 'n', 'd', 0,
    't', 'r', 'i', 'm', 'm', 'e', 'd', 0,
    't', 'o', 'U', 'p', 'p', 'e', 'r', 0,
    't', 'o', 'L', 'o', 'w', 'e', 'r', 0,
    'i', 'n', 'd', 'e', 'x', 'O', 'f', 0,
    'Q', 'B', 'u', 'f', 'f', 'e', 'r', 0,
    't', 'e', 's', 't', 'B', 'i', 't', 0,
    'i', 's', 'E', 'm', 'p', 't', 'y', 0,
    't', 'i', 'm', 'e', 'r', 'I', 'd', 0,
    's', 'e', 't', 'D', 'a', 't', 'a', 0,
    's', 'i', 'b', 'l', 'i', 'n', 'g', 0,
    'i', 's', 'V', 'a', 'l', 'i', 'd', 0,
    'f', 'i', 'l', 't', 'e', 'r', 's', 0,
    'h', 'a', 's', 'N', 'e', 'x', 't', 0,
    'o', 'w', 'n', 'e', 'r', 'I', 'd', 0,
    's', 'e', 't', 'S', 'i', 'z', 'e', 0,
    'Q', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'T', 'u', 'e', 's', 'd', 'a', 'y', 0,
    'I', 'S', 'O', 'D', 'a', 't', 'e', 0,
    'L', 'o', 'g', 'T', 'e', 'x', 't', 0,
    'N', 'o', 'B', 'r', 'u', 's', 'h', 0,
    'F', 'l', 'a', 't', 'C', 'a', 'p', 0,
    'U', 'p', 'A', 'r', 'r', 'o', 'w', 0,
    'N', 'o', 'A', 'r', 'r', 'o', 'w', 0,
    'K', 'e', 'y', '_', 'Y', 'e', 's', 0,
    'K', 'e', 'y', '_', 'E', 'T', 'H', 0,
    'K', 'e', 'y', '_', 'y', 'e', 'n', 0,
    'K', 'e', 'y', '_', 'B', 'a', 'r', 0,
    'K', 'e', 'y', '_', 'A', 'n', 'y', 0,
    'K', 'e', 'y', '_', 'F', '3', '5', 0,
    'K', 'e', 'y', '_', 'F', '3', '4', 0,
    'K', 'e', 'y', '_', 'F', '3', '3', 0,
    'K', 'e', 'y', '_', 'F', '3', '2', 0,
    'K', 'e', 'y', '_', 'F', '3', '1', 0,
    'K', 'e', 'y', '_', 'F', '3', '0', 0,
    'K', 'e', 'y', '_', 'F', '2', '9', 0,
    'K', 'e', 'y', '_', 'F', '2', '8', 0,
    'K', 'e', 'y', '_', 'F', '2', '7', 0,
    'K', 'e', 'y', '_', 'F', '2', '6', 0,
    'K', 'e', 'y', '_', 'F', '2', '5', 0,
    'K', 'e', 'y', '_', 'F', '2', '4', 0,
    'K', 'e', 'y', '_', 'F', '2', '3', 0,
    'K', 'e', 'y', '_', 'F', '2', '2', 0,
    'K', 'e', 'y', '_', 'F', '2', '1', 0,
    'K', 'e', 'y', '_', 'F', '2', '0', 0,
    'K', 'e', 'y', '_', 'F', '1', '9', 0,
    'K', 'e', 'y', '_', 'F', '1', '8', 0,
    'K', 'e', 'y', '_', 'F', '1', '7', 0,
    'K', 'e', 'y', '_', 'F', '1', '6', 0,
    'K', 'e', 'y', '_', 'F', '1', '5', 0,
    'K', 'e', 'y', '_', 'F', '1', '4', 0,
    'K', 'e', 'y', '_', 'F', '1', '3', 0,
    'K', 'e', 'y', '_', 'F', '1', '2', 0,
    'K', 'e', 'y', '_', 'F', '1', '1', 0,
    'K', 'e', 'y', '_', 'F', '1', '0', 0,
    'K', 'e', 'y', '_', 'A', 'l', 't', 0,
    'K', 'e', 'y', '_', 'E', 'n', 'd', 0,
    'K', 'e', 'y', '_', 'T', 'a', 'b', 0,
    'Q', 't', ':', ':', 'K', 'e', 'y', 0,
    'N', 'o', 'A', 'l', 'p', 'h', 'a', 0,
    'N', 'o', 'F', 'o', 'c', 'u', 's', 0,
    'd', 'a', 'r', 'k', 'R', 'e', 'd', 0,
    'm', 'a', 'g', 'e', 'n', 't', 'a', 0,
    'q', 'I', 's', 'N', 'u', 'l', 'l', 0,
    '_', '_', 'a', 'n', 'd', '_', '_', 0,
    '_', '_', 'x', 'o', 'r', '_', '_', 0,
    '_', '_', 'i', 'n', 't', '_', '_', 0,
    '_', '_', 'i', 'o', 'r', '_', '_', 0,
    'Q', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'p', 'r', 'e', 'f', 'i', 'x', 0,
    't', 'o', 'H', 'a', 's', 'h', 0,
    't', 'o', 'L', 'i', 's', 't', 0,
    't', 'o', 'C', 'h', 'a', 'r', 0,
    't', 'o', 'B', 'o', 'o', 'l', 0,
    'R', 'a', 'n', 'd', 'o', 'm', 0,
    's', 'c', 'h', 'e', 'm', 'e', 0,
    's', 'e', 't', 'U', 'r', 'l', 0,
    'Q', 'T', 'i', 'm', 'e', 'r', 0,
    'r', 'e', 's', 'u', 'm', 'e', 0,
    'u', 's', 'l', 'e', 'e', 'p', 0,
    'm', 's', 'l', 'e', 'e', 'p', 0,
    't', 'a', 'k', 'e', 'A', 't', 0,
    's', 't', 'r', 'i', 'n', 'g', 0,
    'l', 'a', 't', 'i', 'n', '1', 0,
    't', 'o', 'U', 't', 'f', '8', 0,
    's', 'o', 'c', 'k', 'e', 't', 0,
    't', 'o', 'S', 'i', 'z', 'e', 0,
    'm', 'a', 'p', 'p', 'e', 'd', 0,
    'a', 't', 't', 'a', 'c', 'h', 0,
    's', 'e', 't', 'K', 'e', 'y', 0,
    'f', 'o', 'r', 'm', 'a', 't', 0,
    'l', 'o', 'c', 'a', 'l', 'e', 0,
    'e', 's', 'c', 'a', 'p', 'e', 0,
    't', 'o', 'R', 'e', 'c', 't', 0,
    'u', 'n', 'i', 't', 'e', 'd', 0,
    'a', 'd', 'j', 'u', 's', 't', 0,
    'm', 'o', 'v', 'e', 'T', 'o', 0,
    'h', 'e', 'i', 'g', 'h', 't', 0,
    'c', 'e', 'n', 't', 'e', 'r', 0,
    's', 'e', 't', 'T', 'o', 'p', 0,
    'b', 'o', 't', 't', 'o', 'm', 0,
    'm', 'e', 't', 'h', 'o', 'd', 0,
    'S', 'I', 'G', 'N', 'A', 'L', 0,
    's', 'e', 'n', 'd', 'e', 'r', 0,
    't', 'h', 'r', 'e', 'a', 'd', 0,
    't', 'r', 'U', 't', 'f', '8', 0,
    'q', 'I', 's', 'N', 'a', 'N', 0,
    'q', 'I', 's', 'I', 'n', 'f', 0,
    'r', 'e', 'l', 'o', 'c', 'k', 0,
    'u', 'n', 'l', 'o', 'c', 'k', 0,
    'Q', 'M', 'u', 't', 'e', 'x', 0,
    'Q', 'I', 'm', 'a', 'g', 'e', 0,
    'Q', 'C', 'o', 'l', 'o', 'r', 0,
    'Q', 'B', 'r', 'u', 's', 'h', 0,
    'Q', 'P', 'o', 'i', 'n', 't', 0,
    'Q', 'S', 'i', 'z', 'e', 'F', 0,
    'Q', 'R', 'e', 'c', 't', 'F', 0,
    'i', 's', 'U', 's', 'e', 'r', 0,
    'i', 's', 'F', 'l', 'a', 'g', 0,
    'i', 'n', 'v', 'o', 'k', 'e', 0,
    'a', 'c', 'c', 'e', 's', 's', 0,
    'P', 'u', 'b', 'l', 'i', 'c', 0,
    'P', 'M', 'T', 'e', 'x', 't', 0,
    'A', 'M', 'T', 'e', 'x', 't', 0,
    'p', 'm', 'T', 'e', 'x', 't', 0,
    'a', 'm', 'T', 'e', 'x', 't', 0,
    't', 'o', 'T', 'i', 'm', 'e', 0,
    't', 'o', 'D', 'a', 't', 'e', 0,
    's', 'y', 's', 't', 'e', 'm', 0,
    'Z', 'a', 'm', 'b', 'i', 'a', 0,
    'U', 'g', 'a', 'n', 'd', 'a', 0,
    'T', 'u', 'v', 'a', 'l', 'u', 0,
    'T', 'u', 'r', 'k', 'e', 'y', 0,
    'T', 'a', 'i', 'w', 'a', 'n', 0,
    'S', 'w', 'e', 'd', 'e', 'n', 0,
    'R', 'w', 'a', 'n', 'd', 'a', 0,
    'P', 'o', 'l', 'a', 'n', 'd', 0,
    'P', 'a', 'n', 'a', 'm', 'a', 0,
    'N', 'o', 'r', 'w', 'a', 'y', 0,
    'M', 'o', 'n', 'a', 'c', 'o', 0,
    'M', 'e', 'x', 'i', 'c', 'o', 0,
    'M', 'a', 'l', 'a', 'w', 'i', 0,
    'L', 'a', 't', 'v', 'i', 'a', 0,
    'K', 'u', 'w', 'a', 'i', 't', 0,
    'J', 'o', 'r', 'd', 'a', 'n', 0,
    'I', 's', 'r', 'a', 'e', 'l', 0,
    'G', 'u', 'y', 'a', 'n', 'a', 0,
    'G', 'r', 'e', 'e', 'c', 'e', 0,
    'G', 'a', 'm', 'b', 'i', 'a', 0,
    'C', 'y', 'p', 'r', 'u', 's', 0,
    'C', 'a', 'n', 'a', 'd', 'a', 0,
    'B', 'r', 'a', 'z', 'i', 'l', 0,
    'B', 'h', 'u', 't', 'a', 'n', 0,
    'B', 'e', 'l', 'i', 'z', 'e', 0,
    'A', 'n', 'g', 'o', 'l', 'a', 0,
    'W', 'a', 'l', 'a', 'm', 'o', 0,
    'S', 'i', 'd', 'a', 'm', 'o', 0,
    'S', 'y', 'r', 'i', 'a', 'c', 0,
    'D', 'i', 'v', 'e', 'h', 'i', 0,
    'Z', 'h', 'u', 'a', 'n', 'g', 0,
    'Y', 'o', 'r', 'u', 'b', 'a', 0,
    'T', 's', 'o', 'n', 'g', 'a', 0,
    'T', 'e', 'l', 'u', 'g', 'u', 0,
    'S', 'o', 'm', 'a', 'l', 'i', 0,
    'S', 'l', 'o', 'v', 'a', 'k', 0,
    'S', 'i', 'n', 'd', 'h', 'i', 0,
    'S', 'a', 'n', 'g', 'h', 'o', 0,
    'S', 'a', 'm', 'o', 'a', 'n', 0,
    'P', 'a', 's', 'h', 't', 'o', 0,
    'N', 'e', 'p', 'a', 'l', 'i', 0,
    'K', 'o', 'r', 'e', 'a', 'n', 0,
    'K', 'a', 'z', 'a', 'k', 'h', 0,
    'H', 'e', 'b', 'r', 'e', 'w', 0,
    'G', 'e', 'r', 'm', 'a', 'n', 0,
    'G', 'a', 'e', 'l', 'i', 'c', 0,
    'F', 'r', 'e', 'n', 'c', 'h', 0,
    'D', 'a', 'n', 'i', 's', 'h', 0,
    'B', 'r', 'e', 't', 'o', 'n', 0,
    'B', 'i', 'h', 'a', 'r', 'i', 0,
    'B', 'a', 's', 'q', 'u', 'e', 0,
    'A', 'y', 'm', 'a', 'r', 'a', 0,
    'A', 'r', 'a', 'b', 'i', 'c', 0,
    't', 'o', 'L', 'i', 'n', 'e', 0,
    'Q', 'L', 'i', 'n', 'e', 'F', 0,
    'u', 'n', 'l', 'o', 'a', 'd', 0,
    'i', 's', 'O', 'p', 'e', 'n', 0,
    'A', 'p', 'p', 'e', 'n', 'd', 0,
    'i', 's', 'F', 'i', 'l', 'e', 0,
    's', 'u', 'f', 'f', 'i', 'x', 0,
    'd', 'r', 'i', 'v', 'e', 's', 0,
    'i', 's', 'R', 'o', 'o', 't', 0,
    'e', 'x', 'i', 's', 't', 's', 0,
    'r', 'm', 'p', 'a', 't', 'h', 0,
    'm', 'k', 'p', 'a', 't', 'h', 0,
    'f', 'i', 'l', 't', 'e', 'r', 0,
    'N', 'o', 'S', 'o', 'r', 't', 0,
    'D', 'r', 'i', 'v', 'e', 's', 0,
    's', 'e', 't', 'H', 'M', 'S', 0,
    's', 'e', 'c', 'o', 'n', 'd', 0,
    'm', 'i', 'n', 'u', 't', 'e', 0,
    'd', 'a', 'y', 's', 'T', 'o', 0,
    's', 'e', 't', 'Y', 'M', 'D', 0,
    's', 't', 'a', 't', 'u', 's', 0,
    'd', 'e', 'v', 'i', 'c', 'e', 0,
    'Q', 't', '_', '4', '_', '5', 0,
    'Q', 't', '_', '4', '_', '4', 0,
    'Q', 't', '_', '4', '_', '3', 0,
    'Q', 't', '_', '4', '_', '2', 0,
    'Q', 't', '_', '4', '_', '1', 0,
    'Q', 't', '_', '4', '_', '0', 0,
    'Q', 't', '_', '3', '_', '3', 0,
    'Q', 't', '_', '3', '_', '1', 0,
    'Q', 't', '_', '3', '_', '0', 0,
    'Q', 't', '_', '2', '_', '1', 0,
    'Q', 't', '_', '2', '_', '0', 0,
    'Q', 't', '_', '1', '_', '0', 0,
    'r', 'e', 's', 'u', 'l', 't', 0,
    'i', 'g', 'n', 'o', 'r', 'e', 0,
    'a', 'c', 'c', 'e', 'p', 't', 0,
    'P', 'o', 'l', 'i', 's', 'h', 0,
    'S', 'p', 'e', 'e', 'c', 'h', 0,
    'C', 'r', 'e', 'a', 't', 'e', 0,
    'Q', 'E', 'v', 'e', 'n', 't', 0,
    'n', 'o', 't', 'i', 'f', 'y', 0,
    's', 'e', 't', 'R', 'o', 'w', 0,
    'i', 's', 'M', 'a', 'r', 'k', 0,
    'C', 'o', 'm', 'p', 'a', 't', 0,
    'S', 'q', 'u', 'a', 'r', 'e', 0,
    'N', 'a', 'r', 'r', 'o', 'w', 0,
    'C', 'i', 'r', 'c', 'l', 'e', 0,
    'M', 'e', 'd', 'i', 'a', 'l', 0,
    'D', 'i', 'r', 'N', 'S', 'M', 0,
    'D', 'i', 'r', 'P', 'D', 'F', 0,
    'D', 'i', 'r', 'R', 'L', 'O', 0,
    'D', 'i', 'r', 'R', 'L', 'E', 0,
    'D', 'i', 'r', 'L', 'R', 'O', 0,
    'D', 'i', 'r', 'L', 'R', 'E', 0,
    'l', 'e', 'n', 'g', 't', 'h', 0,
    'n', 'u', 'm', 'b', 'e', 'r', 0,
    's', 'e', 't', 'N', 'u', 'm', 0,
    't', 'o', 'L', 'o', 'n', 'g', 0,
    't', 'o', 'U', 'I', 'n', 't', 0,
    '_', '_', 'g', 'e', '_', '_', 0,
    '_', '_', 'l', 'e', '_', '_', 0,
    '_', '_', 'g', 't', '_', '_', 0,
    'i', 'n', 's', 'e', 'r', 't', 0,
    'a', 'p', 'p', 'e', 'n', 'd', 0,
    'b', 'u', 'f', 'f', 'e', 'r', 0,
    's', 'e', 't', 'B', 'i', 't', 0,
    'd', 'e', 't', 'a', 'c', 'h', 0,
    'r', 'e', 's', 'i', 'z', 'e', 0,
    'i', 's', 'N', 'u', 'l', 'l', 0,
    'r', 'e', 'v', 'e', 'r', 't', 0,
    's', 'u', 'b', 'm', 'i', 't', 0,
    '_', '_', 'l', 't', '_', '_', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 0,
    'c', 'r', 'e', 'a', 't', 'e', 0,
    'h', 'a', 'n', 'd', 'l', 'e', 0,
    'r', 'e', 'n', 'a', 'm', 'e', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 0,
    'w', 'a', 'k', 'e', 'U', 'p', 0,
    'I', 'm', 'F', 'o', 'n', 't', 0,
    'N', 'o', 'C', 'l', 'i', 'p', 0,
    'S', 'u', 'n', 'd', 'a', 'y', 0,
    'F', 'r', 'i', 'd', 'a', 'y', 0,
    'M', 'o', 'n', 'd', 'a', 'y', 0,
    'K', 'e', 'y', '_', 'N', 'o', 0,
    'K', 'e', 'y', '_', 'A', 'E', 0,
    'K', 'e', 'y', '_', 'm', 'u', 0,
    'K', 'e', 'y', '_', 'A', 't', 0,
    'K', 'e', 'y', '_', 'F', '9', 0,
    'K', 'e', 'y', '_', 'F', '8', 0,
    'K', 'e', 'y', '_', 'F', '7', 0,
    'K', 'e', 'y', '_', 'F', '6', 0,
    'K', 'e', 'y', '_', 'F', '5', 0,
    'K', 'e', 'y', '_', 'F', '4', 0,
    'K', 'e', 'y', '_', 'F', '3', 0,
    'K', 'e', 'y', '_', 'F', '2', 0,
    'K', 'e', 'y', '_', 'F', '1', 0,
    'K', 'e', 'y', '_', 'U', 'p', 0,
    'D', 'r', 'a', 'w', 'e', 'r', 0,
    'y', 'e', 'l', 'l', 'o', 'w', 0,
    'c', 'o', 'l', 'o', 'r', '1', 0,
    'c', 'o', 'l', 'o', 'r', '0', 0,
    'q', 's', 'r', 'a', 'n', 'd', 0,
    '_', '_', 'n', 'e', '_', '_', 0,
    '_', '_', 'e', 'q', '_', '_', 0,
    '_', '_', 'o', 'r', '_', '_', 0,
    'Q', 'F', 'l', 'a', 'g', 's', 0,
    'q', 'F', 'a', 't', 'a', 'l', 0,
    'q', 'D', 'e', 'b', 'u', 'g', 0,
    'q', 'R', 'o', 'u', 'n', 'd', 0,
    'i', 's', 'D', 'T', 'D', 0,
    't', 'o', 'U', 'r', 'l', 0,
    't', 'o', 'M', 'a', 'p', 0,
    'Q', 'U', 'u', 'i', 'd', 0,
    't', 'o', 'A', 'c', 'e', 0,
    'f', 'i', 'x', 'e', 'd', 0,
    'c', 'o', 'd', 'e', 'c', 0,
    't', 'o', 'E', 'n', 'd', 0,
    'f', 'i', 'r', 's', 't', 0,
    's', 'c', 'a', 'l', 'e', 0,
    'u', 'n', 'i', 't', 'e', 0,
    'w', 'i', 'd', 't', 'h', 0,
    'Q', '_', 'A', 'R', 'G', 0,
    'q', 'Q', 'N', 'a', 'N', 0,
    'q', 'S', 'N', 'a', 'N', 0,
    'm', 'u', 't', 'e', 'x', 0,
    'U', 'C', 'h', 'a', 'r', 0,
    'Q', 'I', 'c', 'o', 'n', 0,
    'Q', 'F', 'o', 'n', 't', 0,
    'Q', 'S', 'i', 'z', 'e', 0,
    'Q', 'R', 'e', 'c', 't', 0,
    's', 'c', 'o', 'p', 'e', 0,
    'v', 'a', 'l', 'u', 'e', 0,
    'q', 'u', 'e', 'r', 'y', 0,
    'Y', 'e', 'm', 'e', 'n', 0,
    'S', 'u', 'd', 'a', 'n', 0,
    'S', 'p', 'a', 'i', 'n', 0,
    'Q', 'a', 't', 'a', 'r', 0,
    'P', 'a', 'l', 'a', 'u', 0,
    'N', 'i', 'g', 'e', 'r', 0,
    'N', 'e', 'p', 'a', 'l', 0,
    'M', 'a', 'l', 't', 'a', 0,
    'M', 'a', 'c', 'a', 'u', 0,
    'K', 'e', 'n', 'y', 'a', 0,
    'J', 'a', 'p', 'a', 'n', 0,
    'I', 't', 'a', 'l', 'y', 0,
    'I', 'n', 'd', 'i', 'a', 0,
    'H', 'a', 'i', 't', 'i', 0,
    'G', 'h', 'a', 'n', 'a', 0,
    'G', 'a', 'b', 'o', 'n', 0,
    'E', 'g', 'y', 'p', 't', 0,
    'C', 'h', 'i', 'n', 'a', 0,
    'C', 'h', 'i', 'l', 'e', 0,
    'B', 'e', 'n', 'i', 'n', 0,
    'A', 'r', 'u', 'b', 'a', 0,
    'C', 'h', 'e', 'w', 'a', 0,
    'V', 'e', 'n', 'd', 'a', 0,
    'T', 'i', 'g', 'r', 'e', 0,
    'A', 't', 's', 'a', 'm', 0,
    'K', 'a', 'm', 'b', 'a', 0,
    'X', 'h', 'o', 's', 'a', 0,
    'W', 'o', 'l', 'o', 'f', 0,
    'W', 'e', 'l', 's', 'h', 0,
    'U', 'z', 'b', 'e', 'k', 0,
    'U', 'i', 'g', 'u', 'r', 0,
    'T', 'a', 't', 'a', 'r', 0,
    'T', 'a', 'm', 'i', 'l', 0,
    'T', 'a', 'j', 'i', 'k', 0,
    'S', 'h', 'o', 'n', 'a', 0,
    'O', 'r', 'i', 'y', 'a', 0,
    'M', 'a', 'o', 'r', 'i', 0,
    'M', 'a', 'l', 'a', 'y', 0,
    'L', 'a', 't', 'i', 'n', 0,
    'I', 'r', 'i', 's', 'h', 0,
    'H', 'i', 'n', 'd', 'i', 0,
    'H', 'a', 'u', 's', 'a', 0,
    'G', 'r', 'e', 'e', 'k', 0,
    'D', 'u', 't', 'c', 'h', 0,
    'C', 'z', 'e', 'c', 'h', 0,
    'a', 'n', 'g', 'l', 'e', 0,
    's', 'e', 't', 'P', '2', 0,
    's', 'e', 't', 'P', '1', 0,
    'Q', 'L', 'i', 'n', 'e', 0,
    'f', 'i', 'l', 'e', 's', 0,
    'g', 'r', 'o', 'u', 'p', 0,
    'i', 's', 'D', 'i', 'r', 0,
    'Q', 'F', 'i', 'l', 'e', 0,
    'F', 'i', 'l', 'e', 's', 0,
    't', 'o', 'U', 'T', 'C', 0,
    'm', 'o', 'n', 't', 'h', 0,
    'a', 'd', 'd', 'e', 'd', 0,
    'P', 'a', 'i', 'n', 't', 0,
    'e', 'v', 'e', 'n', 't', 0,
    'e', 'x', 'e', 'c', '_', 0,
    'S', 'm', 'a', 'l', 'l', 0,
    'S', 'u', 'p', 'e', 'r', 0,
    'F', 'i', 'n', 'a', 'l', 0,
    'D', 'i', 'r', 'B', 'N', 0,
    'D', 'i', 'r', 'A', 'L', 0,
    'D', 'i', 'r', 'O', 'N', 0,
    'D', 'i', 'r', 'W', 'S', 0,
    'D', 'i', 'r', 'C', 'S', 0,
    'D', 'i', 'r', 'A', 'N', 0,
    'D', 'i', 'r', 'E', 'T', 0,
    'D', 'i', 'r', 'E', 'S', 0,
    'D', 'i', 'r', 'E', 'N', 0,
    'Q', 'C', 'h', 'a', 'r', 0,
    't', 'o', 'H', 'e', 'x', 0,
    't', 'o', 'I', 'n', 't', 0,
    's', 'p', 'l', 'i', 't', 0,
    'q', 'S', 'w', 'a', 'p', 0,
    'c', 'l', 'e', 'a', 'r', 0,
    'c', 'o', 'u', 'n', 't', 0,
    'r', 'e', 's', 'e', 't', 0,
    'm', 'a', 't', 'c', 'h', 0,
    'b', 'u', 'd', 'd', 'y', 0,
    'i', 'n', 'd', 'e', 'x', 0,
    'm', 'o', 'd', 'e', 'l', 0,
    'f', 'l', 'a', 'g', 's', 0,
    'c', 'h', 'i', 'l', 'd', 0,
    'u', 'n', 'm', 'a', 'p', 0,
    'e', 'r', 'r', 'o', 'r', 0,
    'w', 'r', 'i', 't', 'e', 0,
    'o', 'w', 'n', 'e', 'r', 0,
    'r', 'm', 'd', 'i', 'r', 0,
    'm', 'k', 'd', 'i', 'r', 0,
    'c', 'l', 'o', 's', 'e', 0,
    'a', 't', 'E', 'n', 'd', 0,
    'a', 'w', 'a', 'k', 'e', 0,
    'f', 'l', 'u', 's', 'h', 0,
    'Z', 'A', 'x', 'i', 's', 0,
    'Y', 'A', 'x', 'i', 's', 0,
    'X', 'A', 'x', 'i', 's', 0,
    'N', 'o', 'P', 'e', 'n', 0,
    'K', 'e', 'y', '_', 'Z', 0,
    'K', 'e', 'y', '_', 'Y', 0,
    'K', 'e', 'y', '_', 'X', 0,
    'K', 'e', 'y', '_', 'W', 0,
    'K', 'e', 'y', '_', 'V', 0,
    'K', 'e', 'y', '_', 'U', 0,
    'K', 'e', 'y', '_', 'T', 0,
    'K', 'e', 'y', '_', 'S', 0,
    'K', 'e', 'y', '_', 'R', 0,
    'K', 'e', 'y', '_', 'Q', 0,
    'K', 'e', 'y', '_', 'P', 0,
    'K', 'e', 'y', '_', 'O', 0,
    'K', 'e', 'y', '_', 'N', 0,
    'K', 'e', 'y', '_', 'M', 0,
    'K', 'e', 'y', '_', 'L', 0,
    'K', 'e', 'y', '_', 'K', 0,
    'K', 'e', 'y', '_', 'J', 0,
    'K', 'e', 'y', '_', 'I', 0,
    'K', 'e', 'y', '_', 'H', 0,
    'K', 'e', 'y', '_', 'G', 0,
    'K', 'e', 'y', '_', 'F', 0,
    'K', 'e', 'y', '_', 'E', 0,
    'K', 'e', 'y', '_', 'D', 0,
    'K', 'e', 'y', '_', 'C', 0,
    'K', 'e', 'y', '_', 'B', 0,
    'K', 'e', 'y', '_', 'A', 0,
    'K', 'e', 'y', '_', '9', 0,
    'K', 'e', 'y', '_', '8', 0,
    'K', 'e', 'y', '_', '7', 0,
    'K', 'e', 'y', '_', '6', 0,
    'K', 'e', 'y', '_', '5', 0,
    'K', 'e', 'y', '_', '4', 0,
    'K', 'e', 'y', '_', '3', 0,
    'K', 'e', 'y', '_', '2', 0,
    'K', 'e', 'y', '_', '1', 0,
    'K', 'e', 'y', '_', '0', 0,
    'P', 'o', 'p', 'u', 'p', 0,
    'S', 'H', 'I', 'F', 'T', 0,
    'g', 'r', 'e', 'e', 'n', 0,
    'w', 'h', 'i', 't', 'e', 0,
    'b', 'l', 'a', 'c', 'k', 0,
    'q', 'r', 'a', 'n', 'd', 0,
    'Q', 'T', 'i', 'm', 'e', 0,
    'Q', 'D', 'a', 't', 'e', 0,
    's', 'a', 'v', 'e', 0,
    'p', 'o', 'r', 't', 0,
    'h', 'o', 's', 't', 0,
    'e', 'n', 'd', 'l', 0,
    'h', 'e', 'x', '_', 0,
    'o', 'c', 't', '_', 0,
    'b', 'i', 'n', '_', 0,
    'l', 'a', 's', 't', 0,
    's', 'w', 'a', 'p', 0,
    'j', 'o', 'i', 'n', 0,
    's', 'y', 'n', 'c', 0,
    'k', 'i', 'l', 'l', 0,
    's', 'e', 't', 'Y', 0,
    's', 'e', 't', 'X', 0,
    'S', 'L', 'O', 'T', 0,
    'e', 'm', 'i', 't', 0,
    'q', 'I', 'n', 'f', 0,
    'h', 't', 'm', 'l', 0,
    'u', 'r', 'l', 's', 0,
    'Q', 'P', 'e', 'n', 0,
    'V', 'o', 'i', 'd', 0,
    'T', 'o', 'g', 'o', 0,
    'P', 'e', 'r', 'u', 0,
    'O', 'm', 'a', 'n', 0,
    'N', 'i', 'u', 'e', 0,
    'M', 'a', 'l', 'i', 0,
    'I', 'r', 'a', 'q', 0,
    'I', 'r', 'a', 'n', 0,
    'G', 'u', 'a', 'm', 0,
    'C', 'u', 'b', 'a', 0,
    'C', 'h', 'a', 'd', 0,
    'T', 'y', 'a', 'p', 0,
    'K', 'o', 'r', 'o', 0,
    'G', 'e', 'e', 'z', 0,
    'B', 'l', 'i', 'n', 0,
    'I', 'g', 'b', 'o', 0,
    'A', 'k', 'a', 'n', 0,
    'M', 'a', 'n', 'x', 0,
    'Z', 'u', 'l', 'u', 0,
    'U', 'r', 'd', 'u', 0,
    'T', 'h', 'a', 'i', 0,
    'A', 'f', 'a', 'r', 0,
    'A', 'f', 'a', 'n', 0,
    'p', 'e', 'e', 'k', 0,
    't', 'e', 'm', 'p', 0,
    'r', 'o', 'o', 't', 0,
    'h', 'o', 'm', 'e', 0,
    'c', 'd', 'U', 'p', 0,
    'Q', 'D', 'i', 'r', 0,
    't', 'i', 'm', 'e', 0,
    'm', 's', 'e', 'c', 0,
    'h', 'o', 'u', 'r', 0,
    'y', 'e', 'a', 'r', 0,
    'h', 'a', 's', 'h', 0,
    'S', 'h', 'a', '1', 0,
    't', 'y', 'p', 'e', 0,
    'S', 'h', 'o', 'w', 0,
    'q', 'u', 'i', 't', 0,
    'e', 'x', 'i', 't', 0,
    'a', 'r', 'g', 'v', 0,
    'a', 'r', 'g', 'c', 0,
    'c', 'e', 'l', 'l', 0,
    'D', 'u', 'a', 'l', 0,
    'W', 'i', 'd', 'e', 0,
    'D', 'i', 'r', 'S', 0,
    'D', 'i', 'r', 'B', 0,
    'D', 'i', 'r', 'R', 0,
    'D', 'i', 'r', 'L', 0,
    'N', 'b', 's', 'p', 0,
    'c', 'h', 'o', 'p', 0,
    'f', 'i', 'l', 'l', 0,
    's', 't', 'o', 'p', 0,
    's', 'p', 'a', 'n', 0,
    's', 'o', 'r', 't', 0,
    'd', 'a', 't', 'a', 0,
    'n', 'e', 'x', 't', 0,
    'l', 'i', 'n', 'k', 0,
    'c', 'o', 'p', 'y', 0,
    's', 'e', 'e', 'k', 0,
    'o', 'p', 'e', 'n', 0,
    'T', 'o', 'o', 'l', 0,
    'C', 'T', 'R', 'L', 0,
    'M', 'E', 'T', 'A', 0,
    'c', 'y', 'a', 'n', 0,
    'b', 'l', 'u', 'e', 0,
    'g', 'r', 'a', 'y', 0,
    'q', 'A', 'b', 's', 0,
    'Q', 'U', 'r', 'l', 0,
    'D', 'C', 'E', 0,
    'N', 'C', 'S', 0,
    'b', 'o', 'm', 0,
    'h', 'e', 'x', 0,
    'o', 'c', 't', 0,
    'b', 'i', 'n', 0,
    'a', 'r', 'g', 0,
    'r', 'u', 'n', 0,
    'c', 'a', 'p', 0,
    'p', 'i', 'd', 0,
    'a', 'd', 'd', 0,
    't', 'a', 'g', 0,
    'L', 'a', 'o', 0,
    'E', 'w', 'e', 0,
    'J', 'j', 'u', 0,
    'T', 'w', 'i', 0,
    'M', 'd', '5', 0,
    'M', 'd', '4', 0,
    'S', 'u', 'b', 0,
    'm', 'i', 'd', 0,
    'p', 'o', 's', 0,
    'A', 'L', 'T', 0,
    't', 'r', 0,
    'G', 'a', 0,
    'd', 'x', 0,
    'p', '1', 0,
    'y', '2', 0,
    'x', '2', 0,
    'y', '1', 0,
    'x', '1', 0,
    'c', 'd', 0,
    'O', 'k', 0,
    'Q', 't', 0,
};
#line 34 "sip/QtCore/qglobal.sip"
#include <qglobal.h>
#line 42 "sip/QtCore/qglobal.sip"
static int PYQT_VERSION = 0x040601;
static const char *PYQT_VERSION_STR = "4.6.1";
#line 252 "sip/QtCore/qglobal.sip"
// The user supplied Python handler.
static PyObject *qtcore_PyMsgHandler = 0;

// The C++ wrapper around the Python handler.
static void qtcore_MsgHandler(QtMsgType type, const char *msg)
{
    PyObject *res;

    SIP_BLOCK_THREADS

    res = sipCallMethod(0, qtcore_PyMsgHandler, "Fs", type, sipType_QtMsgType, msg);
    Py_XDECREF(res);

    if (res != NULL && res != Py_None)
    {
        PyErr_SetString(PyExc_TypeError, "invalid result type from PyQt message handler");
        res = NULL;
    }

    if (res == NULL)
        PyErr_Print();

    SIP_UNBLOCK_THREADS
}
#line 344 "sip/QtCore/qglobal.sip"
extern bool qRegisterResourceData(int, const unsigned char *, const unsigned char *, const unsigned char *);
extern bool qUnregisterResourceData(int, const unsigned char *, const unsigned char *, const unsigned char *);
#line 34 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 34 "sip/QtCore/qabstractfileengine.sip"
#include <qabstractfileengine.h>
#line 34 "sip/QtCore/qbitarray.sip"
#include <qbitarray.h>
#line 34 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 34 "sip/QtCore/qchar.sip"
#include <qchar.h>
#line 34 "sip/QtCore/qcoreapplication.sip"
#include <qcoreapplication.h>
#line 324 "sip/QtCore/qcoreapplication.sip"
// The list of Python post routines.
static PyObject *qtcore_PostRoutines = NULL;


// Call all of the registered Python post routines.
static void qtcore_CallPostRoutines()
{
    for (SIP_SSIZE_T i = 0; i < PyList_GET_SIZE(qtcore_PostRoutines); ++i)
    {
        PyObject *pr = PyList_GET_ITEM(qtcore_PostRoutines, i);

        if (pr != Py_None)
        {
            PyObject *res = PyObject_CallObject(pr, NULL);

            Py_XDECREF(res);
        }
    }
}
#line 357 "sip/QtCore/qcoreapplication.sip"
#include <QCoreApplication>
#include <QThread>

#if defined(Q_OS_WIN32)
#include <conio.h>
#include <QTimer>
#else
#include <QSocketNotifier>
#endif

// This is the input hook that will process events while the interpreter is
// waiting for interactive input.
extern "C" {static int qtcore_input_hook();}

static int qtcore_input_hook()
{
    QCoreApplication *app = QCoreApplication::instance();

    if (app && app->thread() == QThread::currentThread())
    {
#if defined(Q_OS_WIN32)
        QTimer timer;
        QObject::connect(&timer, SIGNAL(timeout()), app, SLOT(quit()));

        do
        {
            timer.start(100);
            QCoreApplication::exec();
            timer.stop();
        }
        while (!_kbhit());

        QObject::disconnect(&timer, SIGNAL(timeout()), app, SLOT(quit()));
#else
        QSocketNotifier notifier(0, QSocketNotifier::Read, 0);
        QObject::connect(&notifier, SIGNAL(activated(int)), app, SLOT(quit()));
        QCoreApplication::exec();
        QObject::disconnect(&notifier, SIGNAL(activated(int)), app, SLOT(quit()));
#endif
    }

    return 0;
}
#line 34 "sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 34 "sip/QtCore/qdir.sip"
#include <qdir.h>
#line 35 "sip/QtCore/qdiriterator.sip"
#include <qdiriterator.h>
#line 34 "sip/QtCore/qeventloop.sip"
#include <qeventloop.h>
#line 34 "sip/QtCore/qfile.sip"
#include <qfile.h>
#line 34 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 34 "sip/QtCore/qlibrary.sip"
#include <qlibrary.h>
#line 34 "sip/QtCore/qline.sip"
#include <qline.h>
#line 34 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 35 "sip/QtCore/qnumeric.sip"
#include <qnumeric.h>
#line 564 "sip/QtCore/qobject.sip"
// These optional parts of the legacy Qt support API for SIP are implemented.
// This cannot go into qpycore_api.h as they need to be in a particular
// position in the generated code.

#undef sipQtCreateUniversalSignal
#undef sipQtFindUniversalSignal

extern "C"
{
    void *sipQtCreateUniversalSignal(void *tx, const char **sig);
    void *sipQtFindUniversalSignal(void *tx, const char **sig);
    void *sipQtCreateUniversalSlot(sipWrapper *tx, const char *sig,
            PyObject *rxObj, const char *slot, const char **member, int flags);
    void sipQtDestroyUniversalSlot(void *rx);
    void *sipQtFindSlot(void *tx, const char *sig, PyObject *rxObj,
            const char *slot, const char **member);
    int sipQtConnect(void *tx, const char *sig, void *rx, const char *slot,
            int type);
    int sipQtDisconnect(void *tx, const char *sig, void *rx, const char *slot);
    int sipQtSameSignalSlotName(const char *s1, const char *s2);
    sipSlot *sipQtFindSipslot(void *tx, void **context);
}
#line 34 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 34 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 34 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 34 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 34 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 34 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 34 "sip/QtCore/qtextcodec.sip"
#include <qtextcodec.h>
#line 34 "sip/QtCore/qtextstream.sip"
#include <qtextstream.h>
#line 34 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 34 "sip/QtCore/quuid.sip"
#include <quuid.h>
#line 34 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 3656 "sipQtCorecmodule.cpp"

QString sipVH_QtCore_0(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,const QString& a0)
{
    QString sipRes;
    QString *sipResOrig;
    int sipResState;
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",const_cast<QString *>(&a0),sipType_QString,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"D1",sipType_QString,&sipResState,&sipResOrig) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }
    else
    {
        sipRes = *sipResOrig;
        sipReleaseType(sipResOrig,sipType_QString,sipResState);
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_QtCore_1(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"");

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

QString sipVH_QtCore_2(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,const char *a0,const char *a1,const char *a2)
{
    QString sipRes;
    QString *sipResOrig;
    int sipResState;
    PyObject *resObj = sipCallMethod(0,sipMethod,"sss",a0,a1,a2);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"D1",sipType_QString,&sipResState,&sipResOrig) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }
    else
    {
        sipRes = *sipResOrig;
        sipReleaseType(sipResOrig,sipType_QString,sipResState);
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

void sipVH_QtCore_3(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,QTimerEvent *a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",a0,sipType_QTimerEvent,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

double sipVH_QtCore_4(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,int a0)
{
    double sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"i",a0);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"d",&sipRes) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

void sipVH_QtCore_5(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"");

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

QString sipVH_QtCore_6(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,const char *a0,int a1,QTextCodec::ConverterState *a2)
{
    QString sipRes;
    QString *sipResOrig;
    int sipResState;
    PyObject *resObj = sipCallMethod(0,sipMethod,"gD",a0,(SIP_SSIZE_T)a1,a2,sipType_QTextCodec_ConverterState,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"D1",sipType_QString,&sipResState,&sipResOrig) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }
    else
    {
        sipRes = *sipResOrig;
        sipReleaseType(sipResOrig,sipType_QString,sipResState);
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

int sipVH_QtCore_7(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error)
{
    int sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"");

    if (!resObj || sipParseResult(0,sipMethod,resObj,"i",&sipRes) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

QList<QByteArray> sipVH_QtCore_8(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error)
{
    QList<QByteArray> sipRes;
    QList<QByteArray> *sipResOrig;
    PyObject *resObj = sipCallMethod(0,sipMethod,"");

    if (!resObj || sipParseResult(0,sipMethod,resObj,"D5",sipType_QList_0100QByteArray,&sipResOrig) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }
    else
    {
        sipRes = *sipResOrig;
        delete sipResOrig;
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

QByteArray sipVH_QtCore_9(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error)
{
    QByteArray sipRes;
    QByteArray *sipResOrig;
    int sipResState;
    PyObject *resObj = sipCallMethod(0,sipMethod,"");

    if (!resObj || sipParseResult(0,sipMethod,resObj,"D1",sipType_QByteArray,&sipResState,&sipResOrig) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }
    else
    {
        sipRes = *sipResOrig;
        sipReleaseType(sipResOrig,sipType_QByteArray,sipResState);
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_QtCore_10(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,QIODevice::OpenMode a0)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",&a0,sipType_QIODevice_OpenMode,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

QAbstractFileEngine * sipVH_QtCore_11(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error)
{
    QAbstractFileEngine * sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"");

    if (!resObj || sipParseResult(0,sipMethod,resObj,"D4",sipType_QAbstractFileEngine,&sipRes) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_QtCore_12(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,QEvent *a0)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",a0,sipType_QEvent,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

PY_LONG_LONG sipVH_QtCore_13(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,const char *a0,PY_LONG_LONG a1)
{
    PY_LONG_LONG sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"g",a0,(SIP_SSIZE_T)a1);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"n",&sipRes) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

PY_LONG_LONG sipVH_QtCore_14(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,char *a0,PY_LONG_LONG a1)
{
    PY_LONG_LONG sipRes = 0;
    int sipIsErr = 0;

#line 274 "sip/QtCore/qiodevice.sip"
        PyObject *result = sipCallMethod(&sipIsErr, sipMethod, "n", a1);
        
        if (result != NULL)
        {
            PyObject *buf;
        
            sipParseResult(&sipIsErr, sipMethod, result, "O", &buf);
        
            if (buf == Py_None)
                sipRes = -1L;
            else if (!SIPBytes_Check(buf))
            {
                sipBadCatcherResult(sipMethod);
                sipIsErr = 1;
            }
            else
            {
                memcpy(a0, SIPBytes_AS_STRING(buf), SIPBytes_GET_SIZE(buf));
                sipRes = SIPBytes_GET_SIZE(buf);
            }
        
            Py_DECREF(buf);
            Py_DECREF(result);
        }
#line 3968 "sipQtCorecmodule.cpp"

    if (sipIsErr) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

PY_LONG_LONG sipVH_QtCore_15(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error)
{
    PY_LONG_LONG sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"");

    if (!resObj || sipParseResult(0,sipMethod,resObj,"n",&sipRes) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_QtCore_16(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,int a0)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"i",a0);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

void sipVH_QtCore_17(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,const char *a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"s",a0);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

void sipVH_QtCore_18(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,QEvent *a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",a0,sipType_QEvent,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

void sipVH_QtCore_19(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,QChildEvent *a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",a0,sipType_QChildEvent,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

bool sipVH_QtCore_20(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,QObject *a0,QEvent *a1)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"DD",a0,sipType_QObject,NULL,a1,sipType_QEvent,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

QVariant sipVH_QtCore_21(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,const QString& a0,QVariant::Type a1)
{
    QVariant sipRes;
    QVariant *sipResOrig;
    int sipResState;
    PyObject *resObj = sipCallMethod(0,sipMethod,"DF",const_cast<QString *>(&a0),sipType_QString,NULL,a1,sipType_QVariant_Type);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"D1",sipType_QVariant,&sipResState,&sipResOrig) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }
    else
    {
        sipRes = *sipResOrig;
        sipReleaseType(sipResOrig,sipType_QVariant,sipResState);
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

QStringList sipVH_QtCore_22(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error)
{
    QStringList sipRes;
    QStringList *sipResOrig;
    int sipResState;
    PyObject *resObj = sipCallMethod(0,sipMethod,"");

    if (!resObj || sipParseResult(0,sipMethod,resObj,"D1",sipType_QStringList,&sipResState,&sipResOrig) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }
    else
    {
        sipRes = *sipResOrig;
        sipReleaseType(sipResOrig,sipType_QStringList,sipResState);
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_QtCore_23(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,const QString& a0)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",const_cast<QString *>(&a0),sipType_QString,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

QLocale sipVH_QtCore_24(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error)
{
    QLocale sipRes;
    QLocale *sipResOrig;
    PyObject *resObj = sipCallMethod(0,sipMethod,"");

    if (!resObj || sipParseResult(0,sipMethod,resObj,"D5",sipType_QLocale,&sipResOrig) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }
    else
    {
        sipRes = *sipResOrig;
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

QVariant sipVH_QtCore_25(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,QSystemLocale::QueryType a0,QVariant a1)
{
    QVariant sipRes;
    QVariant *sipResOrig;
    int sipResState;
    PyObject *resObj = sipCallMethod(0,sipMethod,"FD",a0,sipType_QSystemLocale_QueryType,&a1,sipType_QVariant,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"D1",sipType_QVariant,&sipResState,&sipResOrig) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }
    else
    {
        sipRes = *sipResOrig;
        sipReleaseType(sipResOrig,sipType_QVariant,sipResState);
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

PY_LONG_LONG sipVH_QtCore_26(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,char *a0,PY_LONG_LONG a1)
{
    PY_LONG_LONG sipRes = 0;
    int sipIsErr = 0;

#line 213 "sip/QtCore/qiodevice.sip"
        PyObject *result = sipCallMethod(&sipIsErr, sipMethod, "n", a1);
        
        if (result != NULL)
        {
            PyObject *buf;
        
            sipParseResult(&sipIsErr, sipMethod, result, "O", &buf);
        
            if (buf == Py_None)
                sipRes = -1L;
            else if (!SIPBytes_Check(buf))
            {
                sipBadCatcherResult(sipMethod);
                sipIsErr = 1;
            }
            else
            {
                memcpy(a0, SIPBytes_AS_STRING(buf), SIPBytes_GET_SIZE(buf));
                sipRes = SIPBytes_GET_SIZE(buf);
            }
        
            Py_DECREF(buf);
            Py_DECREF(result);
        }
#line 4227 "sipQtCorecmodule.cpp"

    if (sipIsErr) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_QtCore_27(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,PY_LONG_LONG a0)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"n",a0);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

void sipVH_QtCore_28(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,const QString& a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",const_cast<QString *>(&a0),sipType_QString,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

QDateTime sipVH_QtCore_29(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,QAbstractFileEngine::FileTime a0)
{
    QDateTime sipRes;
    QDateTime *sipResOrig;
    int sipResState;
    PyObject *resObj = sipCallMethod(0,sipMethod,"F",a0,sipType_QAbstractFileEngine_FileTime);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"D1",sipType_QDateTime,&sipResState,&sipResOrig) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }
    else
    {
        sipRes = *sipResOrig;
        sipReleaseType(sipResOrig,sipType_QDateTime,sipResState);
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

QString sipVH_QtCore_30(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,QAbstractFileEngine::FileOwner a0)
{
    QString sipRes;
    QString *sipResOrig;
    int sipResState;
    PyObject *resObj = sipCallMethod(0,sipMethod,"F",a0,sipType_QAbstractFileEngine_FileOwner);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"D1",sipType_QString,&sipResState,&sipResOrig) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }
    else
    {
        sipRes = *sipResOrig;
        sipReleaseType(sipResOrig,sipType_QString,sipResState);
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

unsigned sipVH_QtCore_31(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,QAbstractFileEngine::FileOwner a0)
{
    unsigned sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"F",a0,sipType_QAbstractFileEngine_FileOwner);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"u",&sipRes) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

QString sipVH_QtCore_32(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,QAbstractFileEngine::FileName a0)
{
    QString sipRes;
    QString *sipResOrig;
    int sipResState;
    PyObject *resObj = sipCallMethod(0,sipMethod,"F",a0,sipType_QAbstractFileEngine_FileName);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"D1",sipType_QString,&sipResState,&sipResOrig) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }
    else
    {
        sipRes = *sipResOrig;
        sipReleaseType(sipResOrig,sipType_QString,sipResState);
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_QtCore_33(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,unsigned a0)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"u",a0);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

QAbstractFileEngine::FileFlags sipVH_QtCore_34(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,QAbstractFileEngine::FileFlags a0)
{
    QAbstractFileEngine::FileFlags sipRes;
    QAbstractFileEngine::FileFlags *sipResOrig;
    int sipResState;
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",&a0,sipType_QAbstractFileEngine_FileFlags,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"D1",sipType_QAbstractFileEngine_FileFlags,&sipResState,&sipResOrig) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }
    else
    {
        sipRes = *sipResOrig;
        sipReleaseType(sipResOrig,sipType_QAbstractFileEngine_FileFlags,sipResState);
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

QStringList sipVH_QtCore_35(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,QDir::Filters a0,const QStringList& a1)
{
    QStringList sipRes;
    QStringList *sipResOrig;
    int sipResState;
    PyObject *resObj = sipCallMethod(0,sipMethod,"DD",&a0,sipType_QDir_Filters,NULL,const_cast<QStringList *>(&a1),sipType_QStringList,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"D1",sipType_QStringList,&sipResState,&sipResOrig) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }
    else
    {
        sipRes = *sipResOrig;
        sipReleaseType(sipResOrig,sipType_QStringList,sipResState);
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_QtCore_36(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,const QString& a0,bool a1)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"Db",const_cast<QString *>(&a0),sipType_QString,NULL,a1);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_QtCore_37(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,const QModelIndex& a0)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",const_cast<QModelIndex *>(&a0),sipType_QModelIndex,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

int sipVH_QtCore_38(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,const QModelIndex& a0)
{
    int sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",const_cast<QModelIndex *>(&a0),sipType_QModelIndex,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"i",&sipRes) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

QModelIndex sipVH_QtCore_39(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,const QModelIndex& a0)
{
    QModelIndex sipRes;
    QModelIndex *sipResOrig;
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",const_cast<QModelIndex *>(&a0),sipType_QModelIndex,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"D5",sipType_QModelIndex,&sipResOrig) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }
    else
    {
        sipRes = *sipResOrig;
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_QtCore_40(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,const QMimeData *a0,Qt::DropAction a1,int a2,int a3,const QModelIndex& a4)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"DFiiD",const_cast<QMimeData *>(a0),sipType_QMimeData,NULL,a1,sipType_Qt_DropAction,a2,a3,const_cast<QModelIndex *>(&a4),sipType_QModelIndex,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

QModelIndex sipVH_QtCore_41(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,int a0,int a1,const QModelIndex& a2)
{
    QModelIndex sipRes;
    QModelIndex *sipResOrig;
    PyObject *resObj = sipCallMethod(0,sipMethod,"iiD",a0,a1,const_cast<QModelIndex *>(&a2),sipType_QModelIndex,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"D5",sipType_QModelIndex,&sipResOrig) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }
    else
    {
        sipRes = *sipResOrig;
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

QSize sipVH_QtCore_42(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,const QModelIndex& a0)
{
    QSize sipRes;
    QSize *sipResOrig;
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",const_cast<QModelIndex *>(&a0),sipType_QModelIndex,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"D5",sipType_QSize,&sipResOrig) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }
    else
    {
        sipRes = *sipResOrig;
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

QList<QModelIndex> sipVH_QtCore_43(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,const QModelIndex& a0,int a1,const QVariant& a2,int a3,Qt::MatchFlags a4)
{
    QList<QModelIndex> sipRes;
    QList<QModelIndex> *sipResOrig;
    PyObject *resObj = sipCallMethod(0,sipMethod,"DiDiD",const_cast<QModelIndex *>(&a0),sipType_QModelIndex,NULL,a1,const_cast<QVariant *>(&a2),sipType_QVariant,NULL,a3,&a4,sipType_Qt_MatchFlags,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"D5",sipType_QList_0100QModelIndex,&sipResOrig) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }
    else
    {
        sipRes = *sipResOrig;
        delete sipResOrig;
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

void sipVH_QtCore_44(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,int a0,Qt::SortOrder a1)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"iF",a0,a1,sipType_Qt_SortOrder);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

Qt::ItemFlags sipVH_QtCore_45(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,const QModelIndex& a0)
{
    Qt::ItemFlags sipRes;
    Qt::ItemFlags *sipResOrig;
    int sipResState;
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",const_cast<QModelIndex *>(&a0),sipType_QModelIndex,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"D1",sipType_Qt_ItemFlags,&sipResState,&sipResOrig) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }
    else
    {
        sipRes = *sipResOrig;
        sipReleaseType(sipResOrig,sipType_Qt_ItemFlags,sipResState);
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

void sipVH_QtCore_46(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,const QModelIndex& a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",const_cast<QModelIndex *>(&a0),sipType_QModelIndex,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

bool sipVH_QtCore_47(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,int a0,int a1,const QModelIndex& a2)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"iiD",a0,a1,const_cast<QModelIndex *>(&a2),sipType_QModelIndex,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

Qt::DropActions sipVH_QtCore_48(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error)
{
    Qt::DropActions sipRes;
    Qt::DropActions *sipResOrig;
    int sipResState;
    PyObject *resObj = sipCallMethod(0,sipMethod,"");

    if (!resObj || sipParseResult(0,sipMethod,resObj,"D1",sipType_Qt_DropActions,&sipResState,&sipResOrig) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }
    else
    {
        sipRes = *sipResOrig;
        sipReleaseType(sipResOrig,sipType_Qt_DropActions,sipResState);
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

QMimeData * sipVH_QtCore_49(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,const QList<QModelIndex>& a0)
{
    QMimeData * sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",const_cast<QModelIndexList *>(&a0),sipType_QList_0100QModelIndex,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"D6",sipType_QMimeData,&sipRes) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_QtCore_50(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,const QModelIndex& a0,const QMap<int,QVariant>& a1)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"DD",const_cast<QModelIndex *>(&a0),sipType_QModelIndex,NULL,const_cast<QMap<int,QVariant> *>(&a1),sipType_QMap_1800_0100QVariant,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

QMap<int,QVariant> sipVH_QtCore_51(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,const QModelIndex& a0)
{
    QMap<int,QVariant> sipRes;
    QMap<int,QVariant> *sipResOrig;
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",const_cast<QModelIndex *>(&a0),sipType_QModelIndex,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"D5",sipType_QMap_1800_0100QVariant,&sipResOrig) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }
    else
    {
        sipRes = *sipResOrig;
        delete sipResOrig;
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_QtCore_52(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,int a0,Qt::Orientation a1,const QVariant& a2,int a3)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"iFDi",a0,a1,sipType_Qt_Orientation,const_cast<QVariant *>(&a2),sipType_QVariant,NULL,a3);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

QVariant sipVH_QtCore_53(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,int a0,Qt::Orientation a1,int a2)
{
    QVariant sipRes;
    QVariant *sipResOrig;
    int sipResState;
    PyObject *resObj = sipCallMethod(0,sipMethod,"iFi",a0,a1,sipType_Qt_Orientation,a2);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"D1",sipType_QVariant,&sipResState,&sipResOrig) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }
    else
    {
        sipRes = *sipResOrig;
        sipReleaseType(sipResOrig,sipType_QVariant,sipResState);
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_QtCore_54(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,const QModelIndex& a0,const QVariant& a1,int a2)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"DDi",const_cast<QModelIndex *>(&a0),sipType_QModelIndex,NULL,const_cast<QVariant *>(&a1),sipType_QVariant,NULL,a2);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

QVariant sipVH_QtCore_55(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,const QModelIndex& a0,int a1)
{
    QVariant sipRes;
    QVariant *sipResOrig;
    int sipResState;
    PyObject *resObj = sipCallMethod(0,sipMethod,"Di",const_cast<QModelIndex *>(&a0),sipType_QModelIndex,NULL,a1);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"D1",sipType_QVariant,&sipResState,&sipResOrig) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }
    else
    {
        sipRes = *sipResOrig;
        sipReleaseType(sipResOrig,sipType_QVariant,sipResState);
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

QFileInfo sipVH_QtCore_56(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error)
{
    QFileInfo sipRes;
    QFileInfo *sipResOrig;
    PyObject *resObj = sipCallMethod(0,sipMethod,"");

    if (!resObj || sipParseResult(0,sipMethod,resObj,"D5",sipType_QFileInfo,&sipResOrig) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }
    else
    {
        sipRes = *sipResOrig;
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

QString sipVH_QtCore_57(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error)
{
    QString sipRes;
    QString *sipResOrig;
    int sipResState;
    PyObject *resObj = sipCallMethod(0,sipMethod,"");

    if (!resObj || sipParseResult(0,sipMethod,resObj,"D1",sipType_QString,&sipResState,&sipResOrig) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }
    else
    {
        sipRes = *sipResOrig;
        sipReleaseType(sipResOrig,sipType_QString,sipResState);
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

QAbstractFileEngine * sipVH_QtCore_58(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,const QString& a0)
{
    QAbstractFileEngine * sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",const_cast<QString *>(&a0),sipType_QString,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"D6",sipType_QAbstractFileEngine,&sipRes) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

PY_LONG_LONG sipVH_QtCore_59(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,char *a0,PY_LONG_LONG a1)
{
    PY_LONG_LONG sipRes = 0;
    int sipIsErr = 0;

#line 235 "sip/QtCore/qabstractfileengine.sip"
        PyObject *result = sipCallMethod(&sipIsErr, sipMethod, "n", a1);
        
        if (result != NULL)
        {
            PyObject *buf;
        
            sipParseResult(&sipIsErr, sipMethod, result, "O", &buf);
        
            if (buf == Py_None)
                sipRes = -1L;
            else if (!SIPBytes_Check(buf))
            {
                sipBadCatcherResult(sipMethod);
                sipIsErr = 1;
            }
            else
            {
                memcpy(a0, SIPBytes_AS_STRING(buf), SIPBytes_GET_SIZE(buf));
                sipRes = SIPBytes_GET_SIZE(buf);
            }
        
            Py_DECREF(buf);
            Py_DECREF(result);
        }
#line 4940 "sipQtCorecmodule.cpp"

    if (sipIsErr) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

PY_LONG_LONG sipVH_QtCore_60(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,char *a0,PY_LONG_LONG a1)
{
    PY_LONG_LONG sipRes = 0;
    int sipIsErr = 0;

#line 173 "sip/QtCore/qabstractfileengine.sip"
        PyObject *result = sipCallMethod(&sipIsErr, sipMethod, "n", a1);
        
        if (result != NULL)
        {
            PyObject *buf;
        
            sipParseResult(&sipIsErr, sipMethod, result, "O", &buf);
        
            if (buf == Py_None)
                sipRes = -1L;
            else if (!SIPBytes_Check(buf))
            {
                sipBadCatcherResult(sipMethod);
                sipIsErr = 1;
            }
            else
            {
                memcpy(a0, SIPBytes_AS_STRING(buf), SIPBytes_GET_SIZE(buf));
                sipRes = SIPBytes_GET_SIZE(buf);
            }
        
            Py_DECREF(buf);
            Py_DECREF(result);
        }
#line 4984 "sipQtCorecmodule.cpp"

    if (sipIsErr) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

QList<QPair<int,int> > sipVH_QtCore_61(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,QObject *a0)
{
    QList<QPair<int,int> > sipRes;
    QList<QPair<int,int> > *sipResOrig;
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",a0,sipType_QObject,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"D5",sipType_QList_0600QPair_1800_1800,&sipResOrig) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }
    else
    {
        sipRes = *sipResOrig;
        delete sipResOrig;
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_QtCore_62(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,QObject *a0)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",a0,sipType_QObject,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

void sipVH_QtCore_63(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,int a0,int a1,QObject *a2)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"iiD",a0,a1,a2,sipType_QObject,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

void sipVH_QtCore_64(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,QSocketNotifier *a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",a0,sipType_QSocketNotifier,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

bool sipVH_QtCore_65(sip_gilstate_t sipGILState,PyObject *sipMethod,bool *error,QEventLoop::ProcessEventsFlags a0)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",&a0,sipType_QEventLoop_ProcessEventsFlags,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0) {
        if (error) *error = true;
        else       PyErr_Print();
    }

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}


extern "C" {static PyObject *func_qSetRealNumberPrecision(PyObject *,PyObject *);}
static PyObject *func_qSetRealNumberPrecision(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"i",&a0))
        {
            QTextStreamManipulator *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextStreamManipulator(qSetRealNumberPrecision(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextStreamManipulator,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qSetRealNumberPrecision);

    return NULL;
}


extern "C" {static PyObject *func_qSetPadChar(PyObject *,PyObject *);}
static PyObject *func_qSetPadChar(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1",sipType_QChar,&a0,&a0State))
        {
            QTextStreamManipulator *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextStreamManipulator(qSetPadChar(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QChar,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTextStreamManipulator,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qSetPadChar);

    return NULL;
}


extern "C" {static PyObject *func_qSetFieldWidth(PyObject *,PyObject *);}
static PyObject *func_qSetFieldWidth(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"i",&a0))
        {
            QTextStreamManipulator *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextStreamManipulator(qSetFieldWidth(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextStreamManipulator,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qSetFieldWidth);

    return NULL;
}


extern "C" {static PyObject *func_ws(PyObject *,PyObject *);}
static PyObject *func_ws(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextStream * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QTextStream,&a0))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &ws(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_ws);

    return NULL;
}


extern "C" {static PyObject *func_bom(PyObject *,PyObject *);}
static PyObject *func_bom(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextStream * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QTextStream,&a0))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &bom(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_bom);

    return NULL;
}


extern "C" {static PyObject *func_reset(PyObject *,PyObject *);}
static PyObject *func_reset(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextStream * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QTextStream,&a0))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &reset(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_reset);

    return NULL;
}


extern "C" {static PyObject *func_flush(PyObject *,PyObject *);}
static PyObject *func_flush(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextStream * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QTextStream,&a0))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &flush(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_flush);

    return NULL;
}


extern "C" {static PyObject *func_endl(PyObject *,PyObject *);}
static PyObject *func_endl(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextStream * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QTextStream,&a0))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &endl(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_endl);

    return NULL;
}


extern "C" {static PyObject *func_center(PyObject *,PyObject *);}
static PyObject *func_center(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextStream * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QTextStream,&a0))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &center(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_center);

    return NULL;
}


extern "C" {static PyObject *func_right(PyObject *,PyObject *);}
static PyObject *func_right(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextStream * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QTextStream,&a0))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &right(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_right);

    return NULL;
}


extern "C" {static PyObject *func_left(PyObject *,PyObject *);}
static PyObject *func_left(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextStream * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QTextStream,&a0))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &left(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_left);

    return NULL;
}


extern "C" {static PyObject *func_scientific(PyObject *,PyObject *);}
static PyObject *func_scientific(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextStream * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QTextStream,&a0))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &scientific(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_scientific);

    return NULL;
}


extern "C" {static PyObject *func_fixed(PyObject *,PyObject *);}
static PyObject *func_fixed(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextStream * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QTextStream,&a0))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &fixed(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_fixed);

    return NULL;
}


extern "C" {static PyObject *func_lowercasedigits(PyObject *,PyObject *);}
static PyObject *func_lowercasedigits(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextStream * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QTextStream,&a0))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &lowercasedigits(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_lowercasedigits);

    return NULL;
}


extern "C" {static PyObject *func_lowercasebase(PyObject *,PyObject *);}
static PyObject *func_lowercasebase(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextStream * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QTextStream,&a0))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &lowercasebase(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_lowercasebase);

    return NULL;
}


extern "C" {static PyObject *func_uppercasedigits(PyObject *,PyObject *);}
static PyObject *func_uppercasedigits(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextStream * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QTextStream,&a0))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &uppercasedigits(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_uppercasedigits);

    return NULL;
}


extern "C" {static PyObject *func_uppercasebase(PyObject *,PyObject *);}
static PyObject *func_uppercasebase(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextStream * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QTextStream,&a0))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &uppercasebase(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_uppercasebase);

    return NULL;
}


extern "C" {static PyObject *func_noforcepoint(PyObject *,PyObject *);}
static PyObject *func_noforcepoint(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextStream * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QTextStream,&a0))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &noforcepoint(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_noforcepoint);

    return NULL;
}


extern "C" {static PyObject *func_noforcesign(PyObject *,PyObject *);}
static PyObject *func_noforcesign(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextStream * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QTextStream,&a0))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &noforcesign(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_noforcesign);

    return NULL;
}


extern "C" {static PyObject *func_noshowbase(PyObject *,PyObject *);}
static PyObject *func_noshowbase(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextStream * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QTextStream,&a0))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &noshowbase(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_noshowbase);

    return NULL;
}


extern "C" {static PyObject *func_forcepoint(PyObject *,PyObject *);}
static PyObject *func_forcepoint(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextStream * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QTextStream,&a0))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &forcepoint(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_forcepoint);

    return NULL;
}


extern "C" {static PyObject *func_forcesign(PyObject *,PyObject *);}
static PyObject *func_forcesign(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextStream * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QTextStream,&a0))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &forcesign(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_forcesign);

    return NULL;
}


extern "C" {static PyObject *func_showbase(PyObject *,PyObject *);}
static PyObject *func_showbase(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextStream * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QTextStream,&a0))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &showbase(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_showbase);

    return NULL;
}


extern "C" {static PyObject *func_hex_(PyObject *,PyObject *);}
static PyObject *func_hex_(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextStream * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QTextStream,&a0))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &hex(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_hex_);

    return NULL;
}


extern "C" {static PyObject *func_hex(PyObject *,PyObject *);}
static PyObject *func_hex(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextStream * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QTextStream,&a0))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &hex(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_hex);

    return NULL;
}


extern "C" {static PyObject *func_dec(PyObject *,PyObject *);}
static PyObject *func_dec(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextStream * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QTextStream,&a0))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &dec(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_dec);

    return NULL;
}


extern "C" {static PyObject *func_oct_(PyObject *,PyObject *);}
static PyObject *func_oct_(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextStream * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QTextStream,&a0))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &oct(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_oct_);

    return NULL;
}


extern "C" {static PyObject *func_oct(PyObject *,PyObject *);}
static PyObject *func_oct(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextStream * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QTextStream,&a0))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &oct(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_oct);

    return NULL;
}


extern "C" {static PyObject *func_bin_(PyObject *,PyObject *);}
static PyObject *func_bin_(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextStream * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QTextStream,&a0))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &bin(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_bin_);

    return NULL;
}


extern "C" {static PyObject *func_bin(PyObject *,PyObject *);}
static PyObject *func_bin(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QTextStream * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QTextStream,&a0))
        {
            QTextStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &bin(*a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QTextStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_bin);

    return NULL;
}


extern "C" {static PyObject *func_Q_RETURN_ARG(PyObject *,PyObject *);}
static PyObject *func_Q_RETURN_ARG(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        PyObject * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"P0",&a0))
        {
            PyObject * sipRes = 0;

#line 192 "sip/QtCore/qobjectdefs.sip"
    sipRes = qpycore_ReturnFactory(a0);
#line 5916 "sipQtCorecmodule.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_Q_RETURN_ARG);

    return NULL;
}


extern "C" {static PyObject *func_Q_ARG(PyObject *,PyObject *);}
static PyObject *func_Q_ARG(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        PyObject * a0;
        PyObject * a1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"P0P0",&a0,&a1))
        {
            PyObject * sipRes = 0;

#line 175 "sip/QtCore/qobjectdefs.sip"
    sipRes = qpycore_ArgumentFactory(a0, a1);
#line 5944 "sipQtCorecmodule.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_Q_ARG);

    return NULL;
}


extern "C" {static PyObject *func_pyqtSignature(PyObject *,PyObject *, PyObject *);}
static PyObject *func_pyqtSignature(PyObject *,PyObject *sipArgs, PyObject *sipKwds)
{
#line 556 "sip/QtCore/qobject.sip"
    return qpycore_pyqtsignature(sipArgs, sipKwds);
#line 5962 "sipQtCorecmodule.cpp"
}


extern "C" {static PyObject *func_pyqtSlot(PyObject *,PyObject *, PyObject *);}
static PyObject *func_pyqtSlot(PyObject *,PyObject *sipArgs, PyObject *sipKwds)
{
#line 551 "sip/QtCore/qobject.sip"
    return qpycore_pyqtslot(sipArgs, sipKwds);
#line 5971 "sipQtCorecmodule.cpp"
}


extern "C" {static PyObject *func_SIGNAL(PyObject *,PyObject *);}
static PyObject *func_SIGNAL(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const char * a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"AA",&a0Keep,&a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 542 "sip/QtCore/qobject.sip"
    QByteArray ns = QMetaObject::normalizedSignature(a0);
    ns.prepend('2');
    
    if ((sipRes = SIPBytes_FromString(ns.constData())) == NULL)
        sipIsErr = 1;
#line 5995 "sipQtCorecmodule.cpp"
            Py_DECREF(a0Keep);

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_SIGNAL);

    return NULL;
}


extern "C" {static PyObject *func_SLOT(PyObject *,PyObject *);}
static PyObject *func_SLOT(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const char * a0;
        PyObject *a0Keep;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"AA",&a0Keep,&a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 533 "sip/QtCore/qobject.sip"
    QByteArray ns = QMetaObject::normalizedSignature(a0);
    ns.prepend('1');
    
    if ((sipRes = SIPBytes_FromString(ns.constData())) == NULL)
        sipIsErr = 1;
#line 6032 "sipQtCorecmodule.cpp"
            Py_DECREF(a0Keep);

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_SLOT);

    return NULL;
}


extern "C" {static PyObject *func_QT_TRANSLATE_NOOP(PyObject *,PyObject *);}
static PyObject *func_QT_TRANSLATE_NOOP(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        PyObject * a0;
        PyObject * a1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"P0P0",&a0,&a1))
        {
            PyObject * sipRes = 0;

#line 527 "sip/QtCore/qobject.sip"
    Py_INCREF(a1);
    sipRes = a1;
#line 6065 "sipQtCorecmodule.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_QT_TRANSLATE_NOOP);

    return NULL;
}


extern "C" {static PyObject *func_QT_TR_NOOP_UTF8(PyObject *,PyObject *);}
static PyObject *func_QT_TR_NOOP_UTF8(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        PyObject * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"P0",&a0))
        {
            PyObject * sipRes = 0;

#line 521 "sip/QtCore/qobject.sip"
    Py_INCREF(a0);
    sipRes = a0;
#line 6093 "sipQtCorecmodule.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_QT_TR_NOOP_UTF8);

    return NULL;
}


extern "C" {static PyObject *func_QT_TR_NOOP(PyObject *,PyObject *);}
static PyObject *func_QT_TR_NOOP(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        PyObject * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"P0",&a0))
        {
            PyObject * sipRes = 0;

#line 515 "sip/QtCore/qobject.sip"
    Py_INCREF(a0);
    sipRes = a0;
#line 6121 "sipQtCorecmodule.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_QT_TR_NOOP);

    return NULL;
}


extern "C" {static PyObject *func_Q_FLAGS(PyObject *,PyObject *);}
static PyObject *func_Q_FLAGS(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        PyObject * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"W",&a0))
        {
            PyObject * sipRes = 0;

#line 510 "sip/QtCore/qobject.sip"
    sipRes = qpycore_register_int_types(a0);
#line 6148 "sipQtCorecmodule.cpp"

            Py_DECREF(a0);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_Q_FLAGS);

    return NULL;
}


extern "C" {static PyObject *func_Q_ENUMS(PyObject *,PyObject *);}
static PyObject *func_Q_ENUMS(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        PyObject * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"W",&a0))
        {
            PyObject * sipRes = 0;

#line 505 "sip/QtCore/qobject.sip"
    sipRes = qpycore_register_int_types(a0);
#line 6177 "sipQtCorecmodule.cpp"

            Py_DECREF(a0);

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_Q_ENUMS);

    return NULL;
}


extern "C" {static PyObject *func_qQNaN(PyObject *,PyObject *);}
static PyObject *func_qQNaN(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            double sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = qQNaN();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qQNaN);

    return NULL;
}


extern "C" {static PyObject *func_qSNaN(PyObject *,PyObject *);}
static PyObject *func_qSNaN(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            double sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = qSNaN();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qSNaN);

    return NULL;
}


extern "C" {static PyObject *func_qInf(PyObject *,PyObject *);}
static PyObject *func_qInf(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            double sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = qInf();
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qInf);

    return NULL;
}


extern "C" {static PyObject *func_qIsNaN(PyObject *,PyObject *);}
static PyObject *func_qIsNaN(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        double a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"d",&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = qIsNaN(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qIsNaN);

    return NULL;
}


extern "C" {static PyObject *func_qIsFinite(PyObject *,PyObject *);}
static PyObject *func_qIsFinite(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        double a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"d",&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = qIsFinite(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qIsFinite);

    return NULL;
}


extern "C" {static PyObject *func_qIsInf(PyObject *,PyObject *);}
static PyObject *func_qIsInf(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        double a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"d",&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = qIsInf(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qIsInf);

    return NULL;
}


extern "C" {static PyObject *func_pyqtRestoreInputHook(PyObject *,PyObject *);}
static PyObject *func_pyqtRestoreInputHook(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
#line 352 "sip/QtCore/qcoreapplication.sip"
    // Restore the input hook.
    PyOS_InputHook = qtcore_input_hook;
#line 6359 "sipQtCorecmodule.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_pyqtRestoreInputHook);

    return NULL;
}


extern "C" {static PyObject *func_pyqtRemoveInputHook(PyObject *,PyObject *);}
static PyObject *func_pyqtRemoveInputHook(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
#line 346 "sip/QtCore/qcoreapplication.sip"
    // Clear the Python input hook installed when the module was initialised.
    PyOS_InputHook = 0;
#line 6384 "sipQtCorecmodule.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_pyqtRemoveInputHook);

    return NULL;
}


extern "C" {static PyObject *func_qRemovePostRoutine(PyObject *,PyObject *);}
static PyObject *func_qRemovePostRoutine(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        PyObject * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"F",&a0))
        {
#line 309 "sip/QtCore/qcoreapplication.sip"
    // Remove it from the list of post routines if it exists.
    if (qtcore_PostRoutines != NULL)
        for (SIP_SSIZE_T i = 0; i < PyList_GET_SIZE(qtcore_PostRoutines); ++i)
            if (PyList_GET_ITEM(qtcore_PostRoutines, i) == a0)
            {
                Py_DECREF(a0);
                Py_INCREF(Py_None);
                PyList_SET_ITEM(qtcore_PostRoutines, i, Py_None);
    
                break;
            }
#line 6420 "sipQtCorecmodule.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qRemovePostRoutine);

    return NULL;
}


extern "C" {static PyObject *func_qAddPostRoutine(PyObject *,PyObject *);}
static PyObject *func_qAddPostRoutine(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        PyObject * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"F",&a0))
        {
            int sipIsErr = 0;

#line 275 "sip/QtCore/qcoreapplication.sip"
    // Add it to the list of post routines if it already exists.
    if (qtcore_PostRoutines != NULL)
    {
        // See if there is an empty slot.
        bool app = true;
    
        for (SIP_SSIZE_T i = 0; i < PyList_GET_SIZE(qtcore_PostRoutines); ++i)
            if (PyList_GET_ITEM(qtcore_PostRoutines, i) == Py_None)
            {
                Py_DECREF(Py_None);
                Py_INCREF(a0);
                PyList_SET_ITEM(qtcore_PostRoutines, i, a0);
    
                app = false;
    
                break;
            }
    
        if (app && PyList_Append(qtcore_PostRoutines, a0) < 0)
            sipIsErr = 1;
    }
    else if ((qtcore_PostRoutines = PyList_New(1)) != NULL)
    {
        Py_INCREF(a0);
        PyList_SET_ITEM(qtcore_PostRoutines, 0, a0);
    
        qAddPostRoutine(qtcore_CallPostRoutines);
    }
    else
        sipIsErr = 1;
#line 6477 "sipQtCorecmodule.cpp"

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qAddPostRoutine);

    return NULL;
}


extern "C" {static PyObject *func_qUncompress(PyObject *,PyObject *);}
static PyObject *func_qUncompress(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QByteArray * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1",sipType_QByteArray,&a0,&a0State))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(qUncompress(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qUncompress);

    return NULL;
}


extern "C" {static PyObject *func_qCompress(PyObject *,PyObject *);}
static PyObject *func_qCompress(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QByteArray * a0;
        int a0State = 0;
        int a1 = -1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1|i",sipType_QByteArray,&a0,&a0State,&a1))
        {
            QByteArray *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QByteArray(qCompress(*a0,a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qCompress);

    return NULL;
}


extern "C" {static PyObject *func_qChecksum(PyObject *,PyObject *);}
static PyObject *func_qChecksum(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const char * a0;
        SIP_SSIZE_T a1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"k",&a0,&a1))
        {
            quint16 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = qChecksum(a0,(unsigned)a1);
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qChecksum);

    return NULL;
}


extern "C" {static PyObject *func_qSwap(PyObject *,PyObject *);}
static PyObject *func_qSwap(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QBitArray * a0;
        QBitArray * a1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9J9",sipType_QBitArray,&a0,sipType_QBitArray,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            qSwap(*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QByteArray * a0;
        int a0State = 0;
        QByteArray * a1;
        int a1State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1J1",sipType_QByteArray,&a0,&a0State,sipType_QByteArray,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            qSwap(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QByteArray,a0State);
            sipReleaseType(a1,sipType_QByteArray,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QString * a0;
        int a0State = 0;
        QString * a1;
        int a1State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1J1",sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            qSwap(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QString,a0State);
            sipReleaseType(a1,sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QUrl * a0;
        QUrl * a1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9J9",sipType_QUrl,&a0,sipType_QUrl,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            qSwap(*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        QVariant * a0;
        int a0State = 0;
        QVariant * a1;
        int a1State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1J1",sipType_QVariant,&a0,&a0State,sipType_QVariant,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            qSwap(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QVariant,a0State);
            sipReleaseType(a1,sipType_QVariant,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qSwap);

    return NULL;
}


extern "C" {static PyObject *func_qrand(PyObject *,PyObject *);}
static PyObject *func_qrand(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = qrand();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qrand);

    return NULL;
}


extern "C" {static PyObject *func_qsrand(PyObject *,PyObject *);}
static PyObject *func_qsrand(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        uint a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"u",&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            qsrand(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qsrand);

    return NULL;
}


extern "C" {static PyObject *func_qIsNull(PyObject *,PyObject *);}
static PyObject *func_qIsNull(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        double a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"d",&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = qIsNull(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qIsNull);

    return NULL;
}


extern "C" {static PyObject *func_qFuzzyCompare(PyObject *,PyObject *);}
static PyObject *func_qFuzzyCompare(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        double a0;
        double a1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"dd",&a0,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = qFuzzyCompare(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qFuzzyCompare);

    return NULL;
}


extern "C" {static PyObject *func_qUnregisterResourceData(PyObject *,PyObject *);}
static PyObject *func_qUnregisterResourceData(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        const unsigned char * a1;
        const unsigned char * a2;
        const unsigned char * a3;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"isss",&a0,&a1,&a2,&a3))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = qUnregisterResourceData(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qUnregisterResourceData);

    return NULL;
}


extern "C" {static PyObject *func_qRegisterResourceData(PyObject *,PyObject *);}
static PyObject *func_qRegisterResourceData(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        const unsigned char * a1;
        const unsigned char * a2;
        const unsigned char * a3;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"isss",&a0,&a1,&a2,&a3))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = qRegisterResourceData(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qRegisterResourceData);

    return NULL;
}


extern "C" {static PyObject *func_qInstallMsgHandler(PyObject *,PyObject *);}
static PyObject *func_qInstallMsgHandler(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        PyObject * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"H",&a0))
        {
            PyObject * sipRes = 0;

#line 233 "sip/QtCore/qglobal.sip"
    void (*old)(QtMsgType, const char *);
    
    // Treat None as the default handler.
    old = qInstallMsgHandler((a0 != Py_None) ? qtcore_MsgHandler : 0);
    
    // If we recognise the old handler, then return it.  Otherwise return
    // the default handler.  This doesn't exactly mimic the Qt behaviour
    // but it is probably close enough for the way it will be used.
    sipRes = (old == qtcore_MsgHandler) ? qtcore_PyMsgHandler : Py_None;
    Py_INCREF(sipRes);
    
    // Save the new Python handler.
    Py_XDECREF(qtcore_PyMsgHandler);
    qtcore_PyMsgHandler = a0;
    Py_INCREF(qtcore_PyMsgHandler);
#line 6879 "sipQtCorecmodule.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qInstallMsgHandler);

    return NULL;
}


extern "C" {static PyObject *func_qErrnoWarning(PyObject *,PyObject *);}
static PyObject *func_qErrnoWarning(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        const char * a1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"is",&a0,&a1))
        {
#line 210 "sip/QtCore/qglobal.sip"
    Py_BEGIN_ALLOW_THREADS
    qErrnoWarning(a0, "%s", a1);
    Py_END_ALLOW_THREADS
#line 6907 "sipQtCorecmodule.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const char * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"s",&a0))
        {
#line 217 "sip/QtCore/qglobal.sip"
    Py_BEGIN_ALLOW_THREADS
    qErrnoWarning("%s", a0);
    Py_END_ALLOW_THREADS
#line 6923 "sipQtCorecmodule.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qErrnoWarning);

    return NULL;
}


extern "C" {static PyObject *func_qFatal(PyObject *,PyObject *);}
static PyObject *func_qFatal(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const char * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"s",&a0))
        {
#line 203 "sip/QtCore/qglobal.sip"
    Py_BEGIN_ALLOW_THREADS
    qFatal("%s", a0);
    Py_END_ALLOW_THREADS
#line 6951 "sipQtCorecmodule.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qFatal);

    return NULL;
}


extern "C" {static PyObject *func_qCritical(PyObject *,PyObject *);}
static PyObject *func_qCritical(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const char * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"s",&a0))
        {
#line 196 "sip/QtCore/qglobal.sip"
    Py_BEGIN_ALLOW_THREADS
    qCritical("%s", a0);
    Py_END_ALLOW_THREADS
#line 6979 "sipQtCorecmodule.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qCritical);

    return NULL;
}


extern "C" {static PyObject *func_qWarning(PyObject *,PyObject *);}
static PyObject *func_qWarning(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const char * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"s",&a0))
        {
#line 189 "sip/QtCore/qglobal.sip"
    Py_BEGIN_ALLOW_THREADS
    qWarning("%s", a0);
    Py_END_ALLOW_THREADS
#line 7007 "sipQtCorecmodule.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qWarning);

    return NULL;
}


extern "C" {static PyObject *func_qDebug(PyObject *,PyObject *);}
static PyObject *func_qDebug(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const char * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"s",&a0))
        {
#line 182 "sip/QtCore/qglobal.sip"
    Py_BEGIN_ALLOW_THREADS
    qDebug("%s", a0);
    Py_END_ALLOW_THREADS
#line 7035 "sipQtCorecmodule.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qDebug);

    return NULL;
}


extern "C" {static PyObject *func_qSharedBuild(PyObject *,PyObject *);}
static PyObject *func_qSharedBuild(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = qSharedBuild();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qSharedBuild);

    return NULL;
}


extern "C" {static PyObject *func_qVersion(PyObject *,PyObject *);}
static PyObject *func_qVersion(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            const char *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = qVersion();
            Py_END_ALLOW_THREADS

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qVersion);

    return NULL;
}


extern "C" {static PyObject *func_qRound64(PyObject *,PyObject *);}
static PyObject *func_qRound64(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qreal a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"d",&a0))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = qRound64(a0);
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qRound64);

    return NULL;
}


extern "C" {static PyObject *func_qRound(PyObject *,PyObject *);}
static PyObject *func_qRound(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qreal a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"d",&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = qRound(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qRound);

    return NULL;
}


extern "C" {static PyObject *func_qAbs(PyObject *,PyObject *);}
static PyObject *func_qAbs(PyObject *,PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        double a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"d",&a0))
        {
            double sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = qAbs(a0);
            Py_END_ALLOW_THREADS

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoFunction(sipArgsParsed,sipName_qAbs);

    return NULL;
}


/* Convert to a sub-class if possible. */
extern "C" {static const sipTypeDef *sipSubClass_QObject(void **);}
static const sipTypeDef *sipSubClass_QObject(void **sipCppRet)
{
    QObject *sipCpp = reinterpret_cast<QObject *>(*sipCppRet);
    const sipTypeDef *sipType;

#line 164 "sip/QtCore/qobject.sip"
    static struct class_graph {
        const char *name;
        sipTypeDef **type;
        int yes, no;
    } graph[] = {
        {sipName_QAbstractEventDispatcher, &sipType_QAbstractEventDispatcher, -1, 1},
        {sipName_QEventLoop, &sipType_QEventLoop, -1, 2},
        {sipName_QTranslator, &sipType_QTranslator, -1, 3},
        {sipName_QSignalMapper, &sipType_QSignalMapper, -1, 4},
        {sipName_QObjectCleanupHandler, &sipType_QObjectCleanupHandler, -1, 5},
    #if QT_VERSION >= 0x040200
        {sipName_QFileSystemWatcher, &sipType_QFileSystemWatcher, -1, 6},
    #else
        {0, 0, -1, 6},
    #endif
        {sipName_QSocketNotifier, &sipType_QSocketNotifier, -1, 7},
        {sipName_QPluginLoader, &sipType_QPluginLoader, -1, 8},
        {sipName_QIODevice, &sipType_QIODevice, 19, 9},
        {sipName_QLibrary, &sipType_QLibrary, -1, 10},
        {sipName_QThread, &sipType_QThread, -1, 11},
        {sipName_QCoreApplication, &sipType_QCoreApplication, -1, 12},
    #if QT_VERSION >= 0x040200
        {sipName_QTimeLine, &sipType_QTimeLine, -1, 13},
    #else
        {0, 0, -1, 13},
    #endif
    #if QT_VERSION >= 0x040400
        {sipName_QSharedMemory, &sipType_QSharedMemory, -1, 14},
    #else
        {0, 0, -1, 14},
    #endif
        {sipName_QAbstractItemModel, &sipType_QAbstractItemModel, 23, 15},
        {sipName_QSettings, &sipType_QSettings, -1, 16},
    #if QT_VERSION >= 0x040400
        {sipName_QThreadPool, &sipType_QThreadPool, -1, 17},
    #else
        {0, 0, -1, 17},
    #endif
        {sipName_QTimer, &sipType_QTimer, -1, 18},
        {sipName_QMimeData, &sipType_QMimeData, -1, -1},
        {sipName_QFile, &sipType_QFile, 22, 20},
        {sipName_QProcess, &sipType_QProcess, -1, 21},
        {sipName_QBuffer, &sipType_QBuffer, -1, -1},
        {sipName_QTemporaryFile, &sipType_QTemporaryFile, -1, -1},
        {sipName_QAbstractListModel, &sipType_QAbstractListModel, -1, 24},
        {sipName_QAbstractTableModel, &sipType_QAbstractTableModel, -1, -1},
    };
    
    int i = 0;
    
    sipType = 0;
    
    do
    {
        struct class_graph *cg = &graph[i];
    
        if (cg->name != NULL && sipCpp->inherits(cg->name))
        {
            sipType = *cg->type;
            i = cg->yes;
        }
        else
            i = cg->no;
    }
    while (i >= 0);
#line 7259 "sipQtCorecmodule.cpp"

    return sipType;
}


/* Convert to a sub-class if possible. */
extern "C" {static const sipTypeDef *sipSubClass_QEvent(void **);}
static const sipTypeDef *sipSubClass_QEvent(void **sipCppRet)
{
    QEvent *sipCpp = reinterpret_cast<QEvent *>(*sipCppRet);
    const sipTypeDef *sipType;

#line 41 "sip/QtCore/qcoreevent.sip"
    switch (sipCpp->type())
    {
    case QEvent::Timer:
            sipType = sipType_QTimerEvent;
            break;
    
    case QEvent::ChildAdded:
    case QEvent::ChildPolished:
    case QEvent::ChildRemoved:
            sipType = sipType_QChildEvent;
            break;
    
    #if QT_VERSION >= 0x040200
    case QEvent::DynamicPropertyChange:
            sipType = sipType_QDynamicPropertyChangeEvent;
            break;
    #endif
    
    default:
            sipType = 0;
    }
#line 7294 "sipQtCorecmodule.cpp"

    return sipType;
}


/* This defines each external type declared in this module, */
static sipExternalTypeDef externalTypesTable[] = {
    {207, "QWidget"},
    {-1, NULL}
};


extern "C" {static PyObject *slot_QUrl_FormattingOption___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_QUrl_FormattingOption___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        QUrl::FormattingOption a0;
        QUrl::FormattingOption a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EE",sipType_QUrl_FormattingOption,&a0,sipType_QUrl_FormattingOption,&a1))
        {
            QUrl::FormattingOptions *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QUrl::FormattingOptions((a0 | a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QUrl_FormattingOptions,NULL);
        }
    }

    {
        QUrl::FormattingOption a0;
        QUrl::FormattingOptions * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EJ1",sipType_QUrl_FormattingOption,&a0,sipType_QUrl_FormattingOptions,&a1,&a1State))
        {
            QUrl::FormattingOptions *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QUrl::FormattingOptions((a0 | *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_QUrl_FormattingOptions,a1State);

            return sipConvertFromNewType(sipRes,sipType_QUrl_FormattingOptions,NULL);
        }
    }

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QUrl_FormattingOption[] = {
    {(void *)slot_QUrl_FormattingOption___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QTextStream_NumberFlag___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_QTextStream_NumberFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        QTextStream::NumberFlag a0;
        QTextStream::NumberFlag a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EE",sipType_QTextStream_NumberFlag,&a0,sipType_QTextStream_NumberFlag,&a1))
        {
            QTextStream::NumberFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextStream::NumberFlags((a0 | a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextStream_NumberFlags,NULL);
        }
    }

    {
        QTextStream::NumberFlag a0;
        QTextStream::NumberFlags * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EJ1",sipType_QTextStream_NumberFlag,&a0,sipType_QTextStream_NumberFlags,&a1,&a1State))
        {
            QTextStream::NumberFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextStream::NumberFlags((a0 | *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_QTextStream_NumberFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QTextStream_NumberFlags,NULL);
        }
    }

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QTextStream_NumberFlag[] = {
    {(void *)slot_QTextStream_NumberFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QTextCodec_ConversionFlag___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_QTextCodec_ConversionFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        QTextCodec::ConversionFlag a0;
        QTextCodec::ConversionFlag a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EE",sipType_QTextCodec_ConversionFlag,&a0,sipType_QTextCodec_ConversionFlag,&a1))
        {
            QTextCodec::ConversionFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextCodec::ConversionFlags((a0 | a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QTextCodec_ConversionFlags,NULL);
        }
    }

    {
        QTextCodec::ConversionFlag a0;
        QTextCodec::ConversionFlags * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EJ1",sipType_QTextCodec_ConversionFlag,&a0,sipType_QTextCodec_ConversionFlags,&a1,&a1State))
        {
            QTextCodec::ConversionFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTextCodec::ConversionFlags((a0 | *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_QTextCodec_ConversionFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QTextCodec_ConversionFlags,NULL);
        }
    }

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QTextCodec_ConversionFlag[] = {
    {(void *)slot_QTextCodec_ConversionFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QString_SectionFlag___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_QString_SectionFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        QString::SectionFlag a0;
        QString::SectionFlag a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EE",sipType_QString_SectionFlag,&a0,sipType_QString_SectionFlag,&a1))
        {
            QString::SectionFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString::SectionFlags((a0 | a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString_SectionFlags,NULL);
        }
    }

    {
        QString::SectionFlag a0;
        QString::SectionFlags * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EJ1",sipType_QString_SectionFlag,&a0,sipType_QString_SectionFlags,&a1,&a1State))
        {
            QString::SectionFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString::SectionFlags((a0 | *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_QString_SectionFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString_SectionFlags,NULL);
        }
    }

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QString_SectionFlag[] = {
    {(void *)slot_QString_SectionFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QLocale_NumberOption___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_QLocale_NumberOption___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        QLocale::NumberOption a0;
        QLocale::NumberOption a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EE",sipType_QLocale_NumberOption,&a0,sipType_QLocale_NumberOption,&a1))
        {
            QLocale::NumberOptions *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QLocale::NumberOptions((a0 | a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QLocale_NumberOptions,NULL);
        }
    }

    {
        QLocale::NumberOption a0;
        QLocale::NumberOptions * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EJ1",sipType_QLocale_NumberOption,&a0,sipType_QLocale_NumberOptions,&a1,&a1State))
        {
            QLocale::NumberOptions *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QLocale::NumberOptions((a0 | *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_QLocale_NumberOptions,a1State);

            return sipConvertFromNewType(sipRes,sipType_QLocale_NumberOptions,NULL);
        }
    }

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QLocale_NumberOption[] = {
    {(void *)slot_QLocale_NumberOption___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QLibrary_LoadHint___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_QLibrary_LoadHint___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        QLibrary::LoadHint a0;
        QLibrary::LoadHint a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EE",sipType_QLibrary_LoadHint,&a0,sipType_QLibrary_LoadHint,&a1))
        {
            QLibrary::LoadHints *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QLibrary::LoadHints((a0 | a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QLibrary_LoadHints,NULL);
        }
    }

    {
        QLibrary::LoadHint a0;
        QLibrary::LoadHints * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EJ1",sipType_QLibrary_LoadHint,&a0,sipType_QLibrary_LoadHints,&a1,&a1State))
        {
            QLibrary::LoadHints *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QLibrary::LoadHints((a0 | *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_QLibrary_LoadHints,a1State);

            return sipConvertFromNewType(sipRes,sipType_QLibrary_LoadHints,NULL);
        }
    }

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QLibrary_LoadHint[] = {
    {(void *)slot_QLibrary_LoadHint___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QIODevice_OpenModeFlag___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_QIODevice_OpenModeFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        QIODevice::OpenModeFlag a0;
        QIODevice::OpenModeFlag a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EE",sipType_QIODevice_OpenModeFlag,&a0,sipType_QIODevice_OpenModeFlag,&a1))
        {
            QIODevice::OpenMode *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QIODevice::OpenMode((a0 | a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QIODevice_OpenMode,NULL);
        }
    }

    {
        QIODevice::OpenModeFlag a0;
        QIODevice::OpenMode * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EJ1",sipType_QIODevice_OpenModeFlag,&a0,sipType_QIODevice_OpenMode,&a1,&a1State))
        {
            QIODevice::OpenMode *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QIODevice::OpenMode((a0 | *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);

            return sipConvertFromNewType(sipRes,sipType_QIODevice_OpenMode,NULL);
        }
    }

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QIODevice_OpenModeFlag[] = {
    {(void *)slot_QIODevice_OpenModeFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QFile_Permission___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_QFile_Permission___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        QFile::Permission a0;
        QFile::Permission a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EE",sipType_QFile_Permission,&a0,sipType_QFile_Permission,&a1))
        {
            QFile::Permissions *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFile::Permissions((a0 | a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QFile_Permissions,NULL);
        }
    }

    {
        QFile::Permission a0;
        QFile::Permissions * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EJ1",sipType_QFile_Permission,&a0,sipType_QFile_Permissions,&a1,&a1State))
        {
            QFile::Permissions *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QFile::Permissions((a0 | *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_QFile_Permissions,a1State);

            return sipConvertFromNewType(sipRes,sipType_QFile_Permissions,NULL);
        }
    }

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QFile_Permission[] = {
    {(void *)slot_QFile_Permission___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QEventLoop_ProcessEventsFlag___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_QEventLoop_ProcessEventsFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        QEventLoop::ProcessEventsFlag a0;
        QEventLoop::ProcessEventsFlag a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EE",sipType_QEventLoop_ProcessEventsFlag,&a0,sipType_QEventLoop_ProcessEventsFlag,&a1))
        {
            QEventLoop::ProcessEventsFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QEventLoop::ProcessEventsFlags((a0 | a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QEventLoop_ProcessEventsFlags,NULL);
        }
    }

    {
        QEventLoop::ProcessEventsFlag a0;
        QEventLoop::ProcessEventsFlags * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EJ1",sipType_QEventLoop_ProcessEventsFlag,&a0,sipType_QEventLoop_ProcessEventsFlags,&a1,&a1State))
        {
            QEventLoop::ProcessEventsFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QEventLoop::ProcessEventsFlags((a0 | *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_QEventLoop_ProcessEventsFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QEventLoop_ProcessEventsFlags,NULL);
        }
    }

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QEventLoop_ProcessEventsFlag[] = {
    {(void *)slot_QEventLoop_ProcessEventsFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QDirIterator_IteratorFlag___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_QDirIterator_IteratorFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        QDirIterator::IteratorFlag a0;
        QDirIterator::IteratorFlag a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EE",sipType_QDirIterator_IteratorFlag,&a0,sipType_QDirIterator_IteratorFlag,&a1))
        {
            QDirIterator::IteratorFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDirIterator::IteratorFlags((a0 | a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDirIterator_IteratorFlags,NULL);
        }
    }

    {
        QDirIterator::IteratorFlag a0;
        QDirIterator::IteratorFlags * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EJ1",sipType_QDirIterator_IteratorFlag,&a0,sipType_QDirIterator_IteratorFlags,&a1,&a1State))
        {
            QDirIterator::IteratorFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDirIterator::IteratorFlags((a0 | *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_QDirIterator_IteratorFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDirIterator_IteratorFlags,NULL);
        }
    }

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QDirIterator_IteratorFlag[] = {
    {(void *)slot_QDirIterator_IteratorFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QDir_SortFlag___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_QDir_SortFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        QDir::SortFlag a0;
        QDir::SortFlag a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EE",sipType_QDir_SortFlag,&a0,sipType_QDir_SortFlag,&a1))
        {
            QDir::SortFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDir::SortFlags((a0 | a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDir_SortFlags,NULL);
        }
    }

    {
        QDir::SortFlag a0;
        QDir::SortFlags * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EJ1",sipType_QDir_SortFlag,&a0,sipType_QDir_SortFlags,&a1,&a1State))
        {
            QDir::SortFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDir::SortFlags((a0 | *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_QDir_SortFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDir_SortFlags,NULL);
        }
    }

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QDir_SortFlag[] = {
    {(void *)slot_QDir_SortFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QDir_Filter___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_QDir_Filter___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        QDir::Filter a0;
        QDir::Filter a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EE",sipType_QDir_Filter,&a0,sipType_QDir_Filter,&a1))
        {
            QDir::Filters *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDir::Filters((a0 | a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QDir_Filters,NULL);
        }
    }

    {
        QDir::Filter a0;
        QDir::Filters * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EJ1",sipType_QDir_Filter,&a0,sipType_QDir_Filters,&a1,&a1State))
        {
            QDir::Filters *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDir::Filters((a0 | *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_QDir_Filters,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDir_Filters,NULL);
        }
    }

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QDir_Filter[] = {
    {(void *)slot_QDir_Filter___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_QAbstractFileEngine_FileFlag___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_QAbstractFileEngine_FileFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        QAbstractFileEngine::FileFlag a0;
        QAbstractFileEngine::FileFlag a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EE",sipType_QAbstractFileEngine_FileFlag,&a0,sipType_QAbstractFileEngine_FileFlag,&a1))
        {
            QAbstractFileEngine::FileFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QAbstractFileEngine::FileFlags((a0 | a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QAbstractFileEngine_FileFlags,NULL);
        }
    }

    {
        QAbstractFileEngine::FileFlag a0;
        QAbstractFileEngine::FileFlags * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EJ1",sipType_QAbstractFileEngine_FileFlag,&a0,sipType_QAbstractFileEngine_FileFlags,&a1,&a1State))
        {
            QAbstractFileEngine::FileFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QAbstractFileEngine::FileFlags((a0 | *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_QAbstractFileEngine_FileFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_QAbstractFileEngine_FileFlags,NULL);
        }
    }

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_QAbstractFileEngine_FileFlag[] = {
    {(void *)slot_QAbstractFileEngine_FileFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_TextInteractionFlag___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_Qt_TextInteractionFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        Qt::TextInteractionFlag a0;
        Qt::TextInteractionFlag a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EE",sipType_Qt_TextInteractionFlag,&a0,sipType_Qt_TextInteractionFlag,&a1))
        {
            Qt::TextInteractionFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::TextInteractionFlags((a0 | a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_TextInteractionFlags,NULL);
        }
    }

    {
        Qt::TextInteractionFlag a0;
        Qt::TextInteractionFlags * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EJ1",sipType_Qt_TextInteractionFlag,&a0,sipType_Qt_TextInteractionFlags,&a1,&a1State))
        {
            Qt::TextInteractionFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::TextInteractionFlags((a0 | *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_Qt_TextInteractionFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_TextInteractionFlags,NULL);
        }
    }

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_TextInteractionFlag[] = {
    {(void *)slot_Qt_TextInteractionFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_MatchFlag___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_Qt_MatchFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        Qt::MatchFlag a0;
        Qt::MatchFlag a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EE",sipType_Qt_MatchFlag,&a0,sipType_Qt_MatchFlag,&a1))
        {
            Qt::MatchFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::MatchFlags((a0 | a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_MatchFlags,NULL);
        }
    }

    {
        Qt::MatchFlag a0;
        Qt::MatchFlags * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EJ1",sipType_Qt_MatchFlag,&a0,sipType_Qt_MatchFlags,&a1,&a1State))
        {
            Qt::MatchFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::MatchFlags((a0 | *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_Qt_MatchFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_MatchFlags,NULL);
        }
    }

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_MatchFlag[] = {
    {(void *)slot_Qt_MatchFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_ItemFlag___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_Qt_ItemFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        Qt::ItemFlag a0;
        Qt::ItemFlag a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EE",sipType_Qt_ItemFlag,&a0,sipType_Qt_ItemFlag,&a1))
        {
            Qt::ItemFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::ItemFlags((a0 | a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,NULL);
        }
    }

    {
        Qt::ItemFlag a0;
        Qt::ItemFlags * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EJ1",sipType_Qt_ItemFlag,&a0,sipType_Qt_ItemFlags,&a1,&a1State))
        {
            Qt::ItemFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::ItemFlags((a0 | *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_Qt_ItemFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,NULL);
        }
    }

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_ItemFlag[] = {
    {(void *)slot_Qt_ItemFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_DropAction___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_Qt_DropAction___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        Qt::DropAction a0;
        Qt::DropAction a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EE",sipType_Qt_DropAction,&a0,sipType_Qt_DropAction,&a1))
        {
            Qt::DropActions *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::DropActions((a0 | a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,NULL);
        }
    }

    {
        Qt::DropAction a0;
        Qt::DropActions * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EJ1",sipType_Qt_DropAction,&a0,sipType_Qt_DropActions,&a1,&a1State))
        {
            Qt::DropActions *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::DropActions((a0 | *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_Qt_DropActions,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,NULL);
        }
    }

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_DropAction[] = {
    {(void *)slot_Qt_DropAction___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_ToolBarArea___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_Qt_ToolBarArea___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        Qt::ToolBarArea a0;
        Qt::ToolBarArea a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EE",sipType_Qt_ToolBarArea,&a0,sipType_Qt_ToolBarArea,&a1))
        {
            Qt::ToolBarAreas *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::ToolBarAreas((a0 | a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_ToolBarAreas,NULL);
        }
    }

    {
        Qt::ToolBarArea a0;
        Qt::ToolBarAreas * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EJ1",sipType_Qt_ToolBarArea,&a0,sipType_Qt_ToolBarAreas,&a1,&a1State))
        {
            Qt::ToolBarAreas *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::ToolBarAreas((a0 | *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_Qt_ToolBarAreas,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_ToolBarAreas,NULL);
        }
    }

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_ToolBarArea[] = {
    {(void *)slot_Qt_ToolBarArea___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_DockWidgetArea___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_Qt_DockWidgetArea___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        Qt::DockWidgetArea a0;
        Qt::DockWidgetArea a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EE",sipType_Qt_DockWidgetArea,&a0,sipType_Qt_DockWidgetArea,&a1))
        {
            Qt::DockWidgetAreas *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::DockWidgetAreas((a0 | a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_DockWidgetAreas,NULL);
        }
    }

    {
        Qt::DockWidgetArea a0;
        Qt::DockWidgetAreas * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EJ1",sipType_Qt_DockWidgetArea,&a0,sipType_Qt_DockWidgetAreas,&a1,&a1State))
        {
            Qt::DockWidgetAreas *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::DockWidgetAreas((a0 | *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_Qt_DockWidgetAreas,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_DockWidgetAreas,NULL);
        }
    }

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_DockWidgetArea[] = {
    {(void *)slot_Qt_DockWidgetArea___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_ImageConversionFlag___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_Qt_ImageConversionFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        Qt::ImageConversionFlag a0;
        Qt::ImageConversionFlag a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EE",sipType_Qt_ImageConversionFlag,&a0,sipType_Qt_ImageConversionFlag,&a1))
        {
            Qt::ImageConversionFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::ImageConversionFlags((a0 | a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_ImageConversionFlags,NULL);
        }
    }

    {
        Qt::ImageConversionFlag a0;
        Qt::ImageConversionFlags * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EJ1",sipType_Qt_ImageConversionFlag,&a0,sipType_Qt_ImageConversionFlags,&a1,&a1State))
        {
            Qt::ImageConversionFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::ImageConversionFlags((a0 | *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_Qt_ImageConversionFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_ImageConversionFlags,NULL);
        }
    }

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_ImageConversionFlag[] = {
    {(void *)slot_Qt_ImageConversionFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_WindowState___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_Qt_WindowState___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        Qt::WindowState a0;
        Qt::WindowState a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EE",sipType_Qt_WindowState,&a0,sipType_Qt_WindowState,&a1))
        {
            Qt::WindowStates *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::WindowStates((a0 | a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_WindowStates,NULL);
        }
    }

    {
        Qt::WindowState a0;
        Qt::WindowStates * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EJ1",sipType_Qt_WindowState,&a0,sipType_Qt_WindowStates,&a1,&a1State))
        {
            Qt::WindowStates *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::WindowStates((a0 | *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_Qt_WindowStates,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_WindowStates,NULL);
        }
    }

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_WindowState[] = {
    {(void *)slot_Qt_WindowState___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_WindowType___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_Qt_WindowType___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        Qt::WindowType a0;
        Qt::WindowType a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EE",sipType_Qt_WindowType,&a0,sipType_Qt_WindowType,&a1))
        {
            Qt::WindowFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::WindowFlags((a0 | a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_WindowFlags,NULL);
        }
    }

    {
        Qt::WindowType a0;
        Qt::WindowFlags * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EJ1",sipType_Qt_WindowType,&a0,sipType_Qt_WindowFlags,&a1,&a1State))
        {
            Qt::WindowFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::WindowFlags((a0 | *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_Qt_WindowFlags,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_WindowFlags,NULL);
        }
    }

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_WindowType[] = {
    {(void *)slot_Qt_WindowType___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_AlignmentFlag___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_Qt_AlignmentFlag___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        Qt::AlignmentFlag a0;
        Qt::AlignmentFlag a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EE",sipType_Qt_AlignmentFlag,&a0,sipType_Qt_AlignmentFlag,&a1))
        {
            Qt::Alignment *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::Alignment((a0 | a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,NULL);
        }
    }

    {
        Qt::AlignmentFlag a0;
        Qt::Alignment * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EJ1",sipType_Qt_AlignmentFlag,&a0,sipType_Qt_Alignment,&a1,&a1State))
        {
            Qt::Alignment *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::Alignment((a0 | *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_Qt_Alignment,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_Alignment,NULL);
        }
    }

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_AlignmentFlag[] = {
    {(void *)slot_Qt_AlignmentFlag___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_Orientation___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_Qt_Orientation___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        Qt::Orientation a0;
        Qt::Orientation a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EE",sipType_Qt_Orientation,&a0,sipType_Qt_Orientation,&a1))
        {
            Qt::Orientations *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::Orientations((a0 | a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_Orientations,NULL);
        }
    }

    {
        Qt::Orientation a0;
        Qt::Orientations * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EJ1",sipType_Qt_Orientation,&a0,sipType_Qt_Orientations,&a1,&a1State))
        {
            Qt::Orientations *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::Orientations((a0 | *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_Qt_Orientations,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_Orientations,NULL);
        }
    }

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_Orientation[] = {
    {(void *)slot_Qt_Orientation___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_MouseButton___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_Qt_MouseButton___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        Qt::MouseButton a0;
        Qt::MouseButton a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EE",sipType_Qt_MouseButton,&a0,sipType_Qt_MouseButton,&a1))
        {
            Qt::MouseButtons *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::MouseButtons((a0 | a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_MouseButtons,NULL);
        }
    }

    {
        Qt::MouseButton a0;
        Qt::MouseButtons * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EJ1",sipType_Qt_MouseButton,&a0,sipType_Qt_MouseButtons,&a1,&a1State))
        {
            Qt::MouseButtons *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::MouseButtons((a0 | *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_Qt_MouseButtons,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_MouseButtons,NULL);
        }
    }

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_MouseButton[] = {
    {(void *)slot_Qt_MouseButton___or__, or_slot},
    {0, (sipPySlotType)0}
};



extern "C" {static PyObject *slot_Qt_KeyboardModifier___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_Qt_KeyboardModifier___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        Qt::KeyboardModifier a0;
        Qt::KeyboardModifier a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EE",sipType_Qt_KeyboardModifier,&a0,sipType_Qt_KeyboardModifier,&a1))
        {
            Qt::KeyboardModifiers *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::KeyboardModifiers((a0 | a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_KeyboardModifiers,NULL);
        }
    }

    {
        Qt::KeyboardModifier a0;
        Qt::KeyboardModifiers * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"EJ1",sipType_Qt_KeyboardModifier,&a0,sipType_Qt_KeyboardModifiers,&a1,&a1State))
        {
            Qt::KeyboardModifiers *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::KeyboardModifiers((a0 | *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_Qt_KeyboardModifiers,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_KeyboardModifiers,NULL);
        }
    }

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

static sipPySlotDef slots_Qt_KeyboardModifier[] = {
    {(void *)slot_Qt_KeyboardModifier___or__, or_slot},
    {0, (sipPySlotType)0}
};

static sipEnumTypeDef enumTypes[] = {
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QXmlStreamReader__Error, {0}}, sipNameNr_Error, 215, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QXmlStreamReader__TokenType, {0}}, sipNameNr_TokenType, 215, NULL},
    {{5, 0, 0, SIP_TYPE_ENUM, sipNameNr_QVariant__Type, {0}}, sipNameNr_Type, 199, NULL},
    {{4, &enumTypes[2].etd_base, 0, SIP_TYPE_ENUM, sipNameNr_QVariant__Type, {0}}, sipNameNr_Type, 199, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QUuid__Version, {0}}, sipNameNr_Version, 196, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QUuid__Variant, {0}}, sipNameNr_Variant, 196, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QUrl__ParsingMode, {0}}, sipNameNr_ParsingMode, 192, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QUrl__FormattingOption, {0}}, sipNameNr_FormattingOption, 192, slots_QUrl_FormattingOption},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTimeLine__State, {0}}, sipNameNr_State, 185, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTimeLine__Direction, {0}}, sipNameNr_Direction, 185, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTimeLine__CurveShape, {0}}, sipNameNr_CurveShape, 185, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QThread__Priority, {0}}, sipNameNr_Priority, 181, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextStream__Status, {0}}, sipNameNr_Status, 174, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextStream__NumberFlag, {0}}, sipNameNr_NumberFlag, 174, slots_QTextStream_NumberFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextStream__FieldAlignment, {0}}, sipNameNr_FieldAlignment, 174, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextStream__RealNumberNotation, {0}}, sipNameNr_RealNumberNotation, 174, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextCodec__ConversionFlag, {0}}, sipNameNr_ConversionFlag, 168, slots_QTextCodec_ConversionFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextBoundaryFinder__BoundaryType, {0}}, sipNameNr_BoundaryType, 164, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QTextBoundaryFinder__BoundaryReason, {0}}, sipNameNr_BoundaryReason, 164, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSystemSemaphore__SystemSemaphoreError, {0}}, sipNameNr_SystemSemaphoreError, 160, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSystemSemaphore__AccessMode, {0}}, sipNameNr_AccessMode, 160, NULL},
    {{0, 0, 0, SIP_TYPE_ENUM, sipNameNr_QString__NormalizationForm, {0}}, sipNameNr_NormalizationForm, 147, NULL},
    {{0, 0, 0, SIP_TYPE_ENUM, sipNameNr_QString__SplitBehavior, {0}}, sipNameNr_SplitBehavior, 147, NULL},
    {{0, 0, 0, SIP_TYPE_ENUM, sipNameNr_QString__SectionFlag, {0}}, sipNameNr_SectionFlag, 147, slots_QString_SectionFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSocketNotifier__Type, {0}}, sipNameNr_Type, 145, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSharedMemory__SharedMemoryError, {0}}, sipNameNr_SharedMemoryError, 139, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSharedMemory__AccessMode, {0}}, sipNameNr_AccessMode, 139, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSettings__Scope, {0}}, sipNameNr_Scope, 135, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSettings__Format, {0}}, sipNameNr_Format, 135, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSettings__Status, {0}}, sipNameNr_Status, 135, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QRegExp__CaretMode, {0}}, sipNameNr_CaretMode, 129, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QRegExp__PatternSyntax, {0}}, sipNameNr_PatternSyntax, 129, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QReadWriteLock__RecursionMode, {0}}, sipNameNr_RecursionMode, 125, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QProcess__ProcessChannelMode, {0}}, sipNameNr_ProcessChannelMode, 118, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QProcess__ProcessChannel, {0}}, sipNameNr_ProcessChannel, 118, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QProcess__ProcessState, {0}}, sipNameNr_ProcessState, 118, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QProcess__ProcessError, {0}}, sipNameNr_ProcessError, 118, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QProcess__ExitStatus, {0}}, sipNameNr_ExitStatus, 118, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QMutex__RecursionMode, {0}}, sipNameNr_RecursionMode, 108, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QMetaType__Type, {0}}, sipNameNr_Type, 104, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QMetaMethod__MethodType, {0}}, sipNameNr_MethodType, 99, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QMetaMethod__Access, {0}}, sipNameNr_Access, 99, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSystemLocale__QueryType, {0}}, sipNameNr_QueryType, 158, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QLocale__MeasurementSystem, {0}}, sipNameNr_MeasurementSystem, 88, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QLocale__FormatType, {0}}, sipNameNr_FormatType, 88, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QLocale__NumberOption, {0}}, sipNameNr_NumberOption, 88, slots_QLocale_NumberOption},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QLocale__Country, {0}}, sipNameNr_Country, 88, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QLocale__Language, {0}}, sipNameNr_Language, 88, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QLineF__IntersectType, {0}}, sipNameNr_IntersectType, 73, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QLibraryInfo__LibraryLocation, {0}}, sipNameNr_LibraryLocation, 70, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QLibrary__LoadHint, {0}}, sipNameNr_LoadHint, 67, slots_QLibrary_LoadHint},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QIODevice__OpenModeFlag, {0}}, sipNameNr_OpenModeFlag, 62, slots_QIODevice_OpenModeFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QFile__Permission, {0}}, sipNameNr_Permission, 52, slots_QFile_Permission},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QFile__MemoryMapFlags, {0}}, sipNameNr_MemoryMapFlags, 52, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QFile__FileError, {0}}, sipNameNr_FileError, 52, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QEventLoop__ProcessEventsFlag, {0}}, sipNameNr_ProcessEventsFlag, 48, slots_QEventLoop_ProcessEventsFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QDirIterator__IteratorFlag, {0}}, sipNameNr_IteratorFlag, 42, slots_QDirIterator_IteratorFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QDir__SortFlag, {0}}, sipNameNr_SortFlag, 37, slots_QDir_SortFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QDir__Filter, {0}}, sipNameNr_Filter, 37, slots_QDir_Filter},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QDate__MonthNameType, {0}}, sipNameNr_MonthNameType, 34, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QDataStream__Status, {0}}, sipNameNr_Status, 30, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QDataStream__ByteOrder, {0}}, sipNameNr_ByteOrder, 30, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QDataStream__Version, {0}}, sipNameNr_Version, 30, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QCryptographicHash__Algorithm, {0}}, sipNameNr_Algorithm, 28, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QEvent__Type, {0}}, sipNameNr_Type, 46, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QCoreApplication__Encoding, {0}}, sipNameNr_Encoding, 26, NULL},
    {{0, 0, 0, SIP_TYPE_ENUM, sipNameNr_QChar__UnicodeVersion, {0}}, sipNameNr_UnicodeVersion, 17, NULL},
    {{0, 0, 0, SIP_TYPE_ENUM, sipNameNr_QChar__CombiningClass, {0}}, sipNameNr_CombiningClass, 17, NULL},
    {{0, 0, 0, SIP_TYPE_ENUM, sipNameNr_QChar__Joining, {0}}, sipNameNr_Joining, 17, NULL},
    {{0, 0, 0, SIP_TYPE_ENUM, sipNameNr_QChar__Decomposition, {0}}, sipNameNr_Decomposition, 17, NULL},
    {{0, 0, 0, SIP_TYPE_ENUM, sipNameNr_QChar__Direction, {0}}, sipNameNr_Direction, 17, NULL},
    {{0, 0, 0, SIP_TYPE_ENUM, sipNameNr_QChar__Category, {0}}, sipNameNr_Category, 17, NULL},
    {{0, 0, 0, SIP_TYPE_ENUM, sipNameNr_QChar__SpecialCharacter, {0}}, sipNameNr_SpecialCharacter, 17, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QAbstractFileEngine__FileTime, {0}}, sipNameNr_FileTime, 1, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QAbstractFileEngine__FileOwner, {0}}, sipNameNr_FileOwner, 1, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QAbstractFileEngine__FileName, {0}}, sipNameNr_FileName, 1, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QAbstractFileEngine__FileFlag, {0}}, sipNameNr_FileFlag, 1, slots_QAbstractFileEngine_FileFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__WindowFrameSection, {0}}, sipNameNr_WindowFrameSection, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__SizeHint, {0}}, sipNameNr_SizeHint, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__SizeMode, {0}}, sipNameNr_SizeMode, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__EventPriority, {0}}, sipNameNr_EventPriority, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__Axis, {0}}, sipNameNr_Axis, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__MaskMode, {0}}, sipNameNr_MaskMode, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__TextInteractionFlag, {0}}, sipNameNr_TextInteractionFlag, 219, slots_Qt_TextInteractionFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ItemSelectionMode, {0}}, sipNameNr_ItemSelectionMode, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ApplicationAttribute, {0}}, sipNameNr_ApplicationAttribute, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__WindowModality, {0}}, sipNameNr_WindowModality, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__MatchFlag, {0}}, sipNameNr_MatchFlag, 219, slots_Qt_MatchFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ItemFlag, {0}}, sipNameNr_ItemFlag, 219, slots_Qt_ItemFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ItemDataRole, {0}}, sipNameNr_ItemDataRole, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__CheckState, {0}}, sipNameNr_CheckState, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__DropAction, {0}}, sipNameNr_DropAction, 219, slots_Qt_DropAction},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__LayoutDirection, {0}}, sipNameNr_LayoutDirection, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ToolButtonStyle, {0}}, sipNameNr_ToolButtonStyle, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__InputMethodQuery, {0}}, sipNameNr_InputMethodQuery, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ContextMenuPolicy, {0}}, sipNameNr_ContextMenuPolicy, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__FocusReason, {0}}, sipNameNr_FocusReason, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__TransformationMode, {0}}, sipNameNr_TransformationMode, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ClipOperation, {0}}, sipNameNr_ClipOperation, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__FillRule, {0}}, sipNameNr_FillRule, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ShortcutContext, {0}}, sipNameNr_ShortcutContext, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ConnectionType, {0}}, sipNameNr_ConnectionType, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__Corner, {0}}, sipNameNr_Corner, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__CaseSensitivity, {0}}, sipNameNr_CaseSensitivity, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ScrollBarPolicy, {0}}, sipNameNr_ScrollBarPolicy, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__DayOfWeek, {0}}, sipNameNr_DayOfWeek, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__TimeSpec, {0}}, sipNameNr_TimeSpec, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__DateFormat, {0}}, sipNameNr_DateFormat, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ToolBarArea, {0}}, sipNameNr_ToolBarArea, 219, slots_Qt_ToolBarArea},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__DockWidgetArea, {0}}, sipNameNr_DockWidgetArea, 219, slots_Qt_DockWidgetArea},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__AnchorAttribute, {0}}, sipNameNr_AnchorAttribute, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__AspectRatioMode, {0}}, sipNameNr_AspectRatioMode, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__TextFormat, {0}}, sipNameNr_TextFormat, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__CursorShape, {0}}, sipNameNr_CursorShape, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__UIEffect, {0}}, sipNameNr_UIEffect, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__BrushStyle, {0}}, sipNameNr_BrushStyle, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__PenJoinStyle, {0}}, sipNameNr_PenJoinStyle, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__PenCapStyle, {0}}, sipNameNr_PenCapStyle, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__PenStyle, {0}}, sipNameNr_PenStyle, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ArrowType, {0}}, sipNameNr_ArrowType, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__Key, {0}}, sipNameNr_Key, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__BGMode, {0}}, sipNameNr_BGMode, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__ImageConversionFlag, {0}}, sipNameNr_ImageConversionFlag, 219, slots_Qt_ImageConversionFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__WidgetAttribute, {0}}, sipNameNr_WidgetAttribute, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__WindowState, {0}}, sipNameNr_WindowState, 219, slots_Qt_WindowState},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__WindowType, {0}}, sipNameNr_WindowType, 219, slots_Qt_WindowType},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__TextElideMode, {0}}, sipNameNr_TextElideMode, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__TextFlag, {0}}, sipNameNr_TextFlag, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__AlignmentFlag, {0}}, sipNameNr_AlignmentFlag, 219, slots_Qt_AlignmentFlag},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__SortOrder, {0}}, sipNameNr_SortOrder, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__FocusPolicy, {0}}, sipNameNr_FocusPolicy, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__Orientation, {0}}, sipNameNr_Orientation, 219, slots_Qt_Orientation},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__MouseButton, {0}}, sipNameNr_MouseButton, 219, slots_Qt_MouseButton},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__Modifier, {0}}, sipNameNr_Modifier, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__KeyboardModifier, {0}}, sipNameNr_KeyboardModifier, 219, slots_Qt_KeyboardModifier},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_Qt__GlobalColor, {0}}, sipNameNr_GlobalColor, 219, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QtMsgType, {0}}, sipNameNr_QtMsgType, -1, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSysInfo__Endian, {0}}, sipNameNr_Endian, 155, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_QSysInfo__Sizes, {0}}, sipNameNr_Sizes, 155, NULL},
};

/* These are the enum members of all global enums. */
static sipEnumMemberDef enummembers[] = {
    {sipName_QtCriticalMsg, QtCriticalMsg, 292},
    {sipName_QtDebugMsg, QtDebugMsg, 292},
    {sipName_QtFatalMsg, QtFatalMsg, 292},
    {sipName_QtSystemMsg, QtSystemMsg, 292},
    {sipName_QtWarningMsg, QtWarningMsg, 292},
};


/*
 * This defines each type in this module.
 */
static sipTypeDef *typesTable[] = {
    &sipTypeDef_QtCore_QAbstractEventDispatcher.super.ctd_base,
    &sipTypeDef_QtCore_QAbstractFileEngine.super.ctd_base,
    &enumTypes[76].etd_base,
    &sipTypeDef_QtCore_QAbstractFileEngine_FileFlags.super.ctd_base,
    &enumTypes[75].etd_base,
    &enumTypes[74].etd_base,
    &enumTypes[73].etd_base,
    &sipTypeDef_QtCore_QAbstractFileEngineHandler.super.ctd_base,
    &sipTypeDef_QtCore_QAbstractFileEngineIterator.super.ctd_base,
    &sipTypeDef_QtCore_QAbstractItemModel.super.ctd_base,
    &sipTypeDef_QtCore_QAbstractListModel.super.ctd_base,
    &sipTypeDef_QtCore_QAbstractTableModel.super.ctd_base,
    &sipTypeDef_QtCore_QBasicTimer.super.ctd_base,
    &sipTypeDef_QtCore_QBitArray.super.ctd_base,
    &sipTypeDef_QtCore_QBuffer.super.ctd_base,
    &sipTypeDef_QtCore_QByteArray.super.ctd_base,
    &sipTypeDef_QtCore_QByteArrayMatcher.super.ctd_base,
    &sipTypeDef_QtCore_QChar_1.mtd_base,
    &enumTypes[71].etd_base,
    &enumTypes[67].etd_base,
    &enumTypes[69].etd_base,
    &enumTypes[70].etd_base,
    &enumTypes[68].etd_base,
    &enumTypes[72].etd_base,
    &enumTypes[66].etd_base,
    &sipTypeDef_QtCore_QChildEvent.super.ctd_base,
    &sipTypeDef_QtCore_QCoreApplication.super.ctd_base,
    &enumTypes[65].etd_base,
    &sipTypeDef_QtCore_QCryptographicHash.super.ctd_base,
    &enumTypes[63].etd_base,
    &sipTypeDef_QtCore_QDataStream.super.ctd_base,
    &enumTypes[61].etd_base,
    &enumTypes[60].etd_base,
    &enumTypes[62].etd_base,
    &sipTypeDef_QtCore_QDate.super.ctd_base,
    &enumTypes[59].etd_base,
    &sipTypeDef_QtCore_QDateTime.super.ctd_base,
    &sipTypeDef_QtCore_QDir.super.ctd_base,
    &enumTypes[58].etd_base,
    &sipTypeDef_QtCore_QDir_Filters.super.ctd_base,
    &enumTypes[57].etd_base,
    &sipTypeDef_QtCore_QDir_SortFlags.super.ctd_base,
    &sipTypeDef_QtCore_QDirIterator.super.ctd_base,
    &enumTypes[56].etd_base,
    &sipTypeDef_QtCore_QDirIterator_IteratorFlags.super.ctd_base,
    &sipTypeDef_QtCore_QDynamicPropertyChangeEvent.super.ctd_base,
    &sipTypeDef_QtCore_QEvent.super.ctd_base,
    &enumTypes[64].etd_base,
    &sipTypeDef_QtCore_QEventLoop.super.ctd_base,
    &enumTypes[55].etd_base,
    &sipTypeDef_QtCore_QEventLoop_ProcessEventsFlags.super.ctd_base,
    &sipTypeDef_QtCore_QFSFileEngine.super.ctd_base,
    &sipTypeDef_QtCore_QFile.super.ctd_base,
    &enumTypes[54].etd_base,
    &enumTypes[53].etd_base,
    &enumTypes[52].etd_base,
    &sipTypeDef_QtCore_QFile_Permissions.super.ctd_base,
    &sipTypeDef_QtCore_QFileInfo.super.ctd_base,
    &sipTypeDef_QtCore_QFileSystemWatcher.super.ctd_base,
    &sipTypeDef_QtCore_QGenericArgument.super.ctd_base,
    &sipTypeDef_QtCore_QGenericReturnArgument.super.ctd_base,
    &sipTypeDef_QtCore_QHash_0100QString_0100QVariant.mtd_base,
    &sipTypeDef_QtCore_QIODevice.super.ctd_base,
    &sipTypeDef_QtCore_QIODevice_OpenMode.super.ctd_base,
    &enumTypes[51].etd_base,
    &sipTypeDef_QtCore_QLatin1Char_0.super.ctd_base,
    &sipTypeDef_QtCore_QLatin1String_0.super.ctd_base,
    &sipTypeDef_QtCore_QLibrary.super.ctd_base,
    &enumTypes[50].etd_base,
    &sipTypeDef_QtCore_QLibrary_LoadHints.super.ctd_base,
    &sipTypeDef_QtCore_QLibraryInfo.super.ctd_base,
    &enumTypes[49].etd_base,
    &sipTypeDef_QtCore_QLine.super.ctd_base,
    &sipTypeDef_QtCore_QLineF.super.ctd_base,
    &enumTypes[48].etd_base,
    &sipTypeDef_QtCore_QList_0100QByteArray.mtd_base,
    &sipTypeDef_QtCore_QList_0100QFileInfo.mtd_base,
    &sipTypeDef_QtCore_QList_0100QLocale_Country.mtd_base,
    &sipTypeDef_QtCore_QList_0100QModelIndex.mtd_base,
    &sipTypeDef_QtCore_QList_0101QObject.mtd_base,
    &sipTypeDef_QtCore_QList_0600QPair_0100QByteArray_0100QByteArray.mtd_base,
    &sipTypeDef_QtCore_QList_0600QPair_0100QString_0100QString.mtd_base,
    &sipTypeDef_QtCore_QList_0600QPair_1800_1800.mtd_base,
    &sipTypeDef_QtCore_QList_0600QPair_2400_2400.mtd_base,
    &sipTypeDef_QtCore_QList_0100QUrl.mtd_base,
    &sipTypeDef_QtCore_QList_0100QVariant.mtd_base,
    &sipTypeDef_QtCore_QList_1800.mtd_base,
    &sipTypeDef_QtCore_QList_2400.mtd_base,
    &sipTypeDef_QtCore_QLocale.super.ctd_base,
    &enumTypes[46].etd_base,
    &enumTypes[44].etd_base,
    &enumTypes[47].etd_base,
    &enumTypes[43].etd_base,
    &enumTypes[45].etd_base,
    &sipTypeDef_QtCore_QLocale_NumberOptions.super.ctd_base,
    &sipTypeDef_QtCore_QMap_0100QString_0100QVariant.mtd_base,
    &sipTypeDef_QtCore_QMap_1800_0100QVariant.mtd_base,
    &sipTypeDef_QtCore_QMetaClassInfo.super.ctd_base,
    &sipTypeDef_QtCore_QMetaEnum.super.ctd_base,
    &sipTypeDef_QtCore_QMetaMethod.super.ctd_base,
    &enumTypes[41].etd_base,
    &enumTypes[40].etd_base,
    &sipTypeDef_QtCore_QMetaObject.super.ctd_base,
    &sipTypeDef_QtCore_QMetaProperty.super.ctd_base,
    &sipTypeDef_QtCore_QMetaType.super.ctd_base,
    &enumTypes[39].etd_base,
    &sipTypeDef_QtCore_QMimeData.super.ctd_base,
    &sipTypeDef_QtCore_QModelIndex.super.ctd_base,
    &sipTypeDef_QtCore_QMutex.super.ctd_base,
    &enumTypes[38].etd_base,
    &sipTypeDef_QtCore_QMutexLocker.super.ctd_base,
    &sipTypeDef_QtCore_QObject.super.ctd_base,
    &sipTypeDef_QtCore_QObjectCleanupHandler.super.ctd_base,
    &sipTypeDef_QtCore_QPair_1800_1800.mtd_base,
    &sipTypeDef_QtCore_QPersistentModelIndex.super.ctd_base,
    &sipTypeDef_QtCore_QPluginLoader.super.ctd_base,
    &sipTypeDef_QtCore_QPoint.super.ctd_base,
    &sipTypeDef_QtCore_QPointF.super.ctd_base,
    &sipTypeDef_QtCore_QProcess.super.ctd_base,
    &enumTypes[37].etd_base,
    &enumTypes[34].etd_base,
    &enumTypes[33].etd_base,
    &enumTypes[36].etd_base,
    &enumTypes[35].etd_base,
    &sipTypeDef_QtCore_QReadLocker.super.ctd_base,
    &sipTypeDef_QtCore_QReadWriteLock.super.ctd_base,
    &enumTypes[32].etd_base,
    &sipTypeDef_QtCore_QRect.super.ctd_base,
    &sipTypeDef_QtCore_QRectF.super.ctd_base,
    &sipTypeDef_QtCore_QRegExp.super.ctd_base,
    &enumTypes[30].etd_base,
    &enumTypes[31].etd_base,
    &sipTypeDef_QtCore_QResource.super.ctd_base,
    &sipTypeDef_QtCore_QRunnable.super.ctd_base,
    &sipTypeDef_QtCore_QSemaphore.super.ctd_base,
    &sipTypeDef_QtCore_QSettings.super.ctd_base,
    &enumTypes[28].etd_base,
    &enumTypes[27].etd_base,
    &enumTypes[29].etd_base,
    &sipTypeDef_QtCore_QSharedMemory.super.ctd_base,
    &enumTypes[26].etd_base,
    &enumTypes[25].etd_base,
    &sipTypeDef_QtCore_QSignalMapper.super.ctd_base,
    &sipTypeDef_QtCore_QSize.super.ctd_base,
    &sipTypeDef_QtCore_QSizeF.super.ctd_base,
    &sipTypeDef_QtCore_QSocketNotifier.super.ctd_base,
    &enumTypes[24].etd_base,
    &sipTypeDef_QtCore_QString_1.mtd_base,
    &enumTypes[21].etd_base,
    &enumTypes[23].etd_base,
    &sipTypeDef_QtCore_QString_SectionFlags_0.super.ctd_base,
    &enumTypes[22].etd_base,
    &sipTypeDef_QtCore_QStringList_1.mtd_base,
    &sipTypeDef_QtCore_QStringMatcher_0.super.ctd_base,
    &sipTypeDef_QtCore_QStringRef_1.mtd_base,
    &sipTypeDef_QtCore_QSysInfo.super.ctd_base,
    &enumTypes[137].etd_base,
    &enumTypes[138].etd_base,
    &sipTypeDef_QtCore_QSystemLocale.super.ctd_base,
    &enumTypes[42].etd_base,
    &sipTypeDef_QtCore_QSystemSemaphore.super.ctd_base,
    &enumTypes[20].etd_base,
    &enumTypes[19].etd_base,
    &sipTypeDef_QtCore_QTemporaryFile.super.ctd_base,
    &sipTypeDef_QtCore_QTextBoundaryFinder.super.ctd_base,
    &enumTypes[18].etd_base,
    &sipTypeDef_QtCore_QTextBoundaryFinder_BoundaryReasons.super.ctd_base,
    &enumTypes[17].etd_base,
    &sipTypeDef_QtCore_QTextCodec.super.ctd_base,
    &enumTypes[16].etd_base,
    &sipTypeDef_QtCore_QTextCodec_ConversionFlags.super.ctd_base,
    &sipTypeDef_QtCore_QTextCodec_ConverterState.super.ctd_base,
    &sipTypeDef_QtCore_QTextDecoder.super.ctd_base,
    &sipTypeDef_QtCore_QTextEncoder.super.ctd_base,
    &sipTypeDef_QtCore_QTextStream.super.ctd_base,
    &enumTypes[14].etd_base,
    &enumTypes[13].etd_base,
    &sipTypeDef_QtCore_QTextStream_NumberFlags.super.ctd_base,
    &enumTypes[15].etd_base,
    &enumTypes[12].etd_base,
    &sipTypeDef_QtCore_QTextStreamManipulator.super.ctd_base,
    &sipTypeDef_QtCore_QThread.super.ctd_base,
    &enumTypes[11].etd_base,
    &sipTypeDef_QtCore_QThreadPool.super.ctd_base,
    &sipTypeDef_QtCore_QTime.super.ctd_base,
    &sipTypeDef_QtCore_QTimeLine.super.ctd_base,
    &enumTypes[10].etd_base,
    &enumTypes[9].etd_base,
    &enumTypes[8].etd_base,
    &sipTypeDef_QtCore_QTimer.super.ctd_base,
    &sipTypeDef_QtCore_QTimerEvent.super.ctd_base,
    &sipTypeDef_QtCore_QTranslator.super.ctd_base,
    &sipTypeDef_QtCore_QUrl.super.ctd_base,
    &enumTypes[7].etd_base,
    &sipTypeDef_QtCore_QUrl_FormattingOptions.super.ctd_base,
    &enumTypes[6].etd_base,
    &sipTypeDef_QtCore_QUuid.super.ctd_base,
    &enumTypes[5].etd_base,
    &enumTypes[4].etd_base,
    &sipTypeDef_QtCore_QVariant_4.mtd_base,
    &enumTypes[3].etd_base,
    &sipTypeDef_QtCore_QVector_0100QXmlStreamEntityDeclaration.mtd_base,
    &sipTypeDef_QtCore_QVector_0100QXmlStreamNamespaceDeclaration.mtd_base,
    &sipTypeDef_QtCore_QVector_0100QXmlStreamNotationDeclaration.mtd_base,
    &sipTypeDef_QtCore_QVector_2400.mtd_base,
    &sipTypeDef_QtCore_QVector_1900.mtd_base,
    &sipTypeDef_QtCore_QWaitCondition.super.ctd_base,
    0,
    &sipTypeDef_QtCore_QWriteLocker.super.ctd_base,
    &sipTypeDef_QtCore_QXmlStreamAttribute.super.ctd_base,
    &sipTypeDef_QtCore_QXmlStreamAttributes.super.ctd_base,
    &sipTypeDef_QtCore_QXmlStreamEntityDeclaration.super.ctd_base,
    &sipTypeDef_QtCore_QXmlStreamEntityResolver.super.ctd_base,
    &sipTypeDef_QtCore_QXmlStreamNamespaceDeclaration.super.ctd_base,
    &sipTypeDef_QtCore_QXmlStreamNotationDeclaration.super.ctd_base,
    &sipTypeDef_QtCore_QXmlStreamReader.super.ctd_base,
    &enumTypes[0].etd_base,
    &enumTypes[1].etd_base,
    &sipTypeDef_QtCore_QXmlStreamWriter.super.ctd_base,
    &sipTypeDef_QtCore_Qt.super.ctd_base,
    &sipTypeDef_QtCore_Qt_Alignment.super.ctd_base,
    &enumTypes[128].etd_base,
    &enumTypes[110].etd_base,
    &enumTypes[85].etd_base,
    &enumTypes[119].etd_base,
    &enumTypes[111].etd_base,
    &enumTypes[81].etd_base,
    &enumTypes[121].etd_base,
    &enumTypes[115].etd_base,
    &enumTypes[103].etd_base,
    &enumTypes[90].etd_base,
    &enumTypes[98].etd_base,
    &enumTypes[101].etd_base,
    &enumTypes[95].etd_base,
    &enumTypes[102].etd_base,
    &enumTypes[113].etd_base,
    &enumTypes[107].etd_base,
    &enumTypes[105].etd_base,
    &enumTypes[109].etd_base,
    &sipTypeDef_QtCore_Qt_DockWidgetAreas.super.ctd_base,
    &enumTypes[91].etd_base,
    &sipTypeDef_QtCore_Qt_DropActions.super.ctd_base,
    &enumTypes[80].etd_base,
    &enumTypes[99].etd_base,
    &enumTypes[130].etd_base,
    &enumTypes[96].etd_base,
    &enumTypes[135].etd_base,
    &enumTypes[122].etd_base,
    &sipTypeDef_QtCore_Qt_ImageConversionFlags.super.ctd_base,
    &enumTypes[94].etd_base,
    &enumTypes[89].etd_base,
    &enumTypes[88].etd_base,
    &sipTypeDef_QtCore_Qt_ItemFlags.super.ctd_base,
    &enumTypes[84].etd_base,
    &enumTypes[120].etd_base,
    &enumTypes[134].etd_base,
    &sipTypeDef_QtCore_Qt_KeyboardModifiers.super.ctd_base,
    &enumTypes[92].etd_base,
    &enumTypes[82].etd_base,
    &enumTypes[87].etd_base,
    &sipTypeDef_QtCore_Qt_MatchFlags.super.ctd_base,
    &enumTypes[133].etd_base,
    &enumTypes[132].etd_base,
    &sipTypeDef_QtCore_Qt_MouseButtons.super.ctd_base,
    &enumTypes[131].etd_base,
    &sipTypeDef_QtCore_Qt_Orientations.super.ctd_base,
    &enumTypes[117].etd_base,
    &enumTypes[116].etd_base,
    &enumTypes[118].etd_base,
    &enumTypes[104].etd_base,
    &enumTypes[100].etd_base,
    &enumTypes[78].etd_base,
    &enumTypes[79].etd_base,
    &enumTypes[129].etd_base,
    &enumTypes[126].etd_base,
    &enumTypes[127].etd_base,
    &enumTypes[112].etd_base,
    &enumTypes[83].etd_base,
    &sipTypeDef_QtCore_Qt_TextInteractionFlags.super.ctd_base,
    &enumTypes[106].etd_base,
    &enumTypes[108].etd_base,
    &sipTypeDef_QtCore_Qt_ToolBarAreas.super.ctd_base,
    &enumTypes[93].etd_base,
    &enumTypes[97].etd_base,
    &enumTypes[114].etd_base,
    &enumTypes[123].etd_base,
    &sipTypeDef_QtCore_Qt_WindowFlags.super.ctd_base,
    &enumTypes[77].etd_base,
    &enumTypes[86].etd_base,
    &enumTypes[124].etd_base,
    &sipTypeDef_QtCore_Qt_WindowStates.super.ctd_base,
    &enumTypes[125].etd_base,
    &enumTypes[136].etd_base,
};


/*
 * These define each typedef in this module.
 */
static sipTypedefDef typedefsTable[] = {
    {"QAbstractEventDispatcher::TimerInfo", "QPair<int,int>"},
    {"QBool", "bool"},
    {"QFileInfoList", "QList<QFileInfo>"},
    {"QModelIndexList", "QList<QModelIndex>"},
    {"QObjectList", "QList<QObject *>"},
    {"QVariantHash", "QHash<QString,QVariant>"},
    {"QVariantList", "QList<QVariant>"},
    {"QVariantMap", "QMap<QString,QVariant>"},
    {"QXmlStreamEntityDeclarations", "QVector<QXmlStreamEntityDeclaration>"},
    {"QXmlStreamNamespaceDeclarations", "QVector<QXmlStreamNamespaceDeclaration>"},
    {"QXmlStreamNotationDeclarations", "QVector<QXmlStreamNotationDeclaration>"},
    {"Q_PID", "long long"},
    {"Qt::HANDLE", "unsigned long"},
    {"Qt::WFlags", "Qt::WindowFlags"},
    {"qint16", "short"},
    {"qint32", "int"},
    {"qint64", "long long"},
    {"qint8", "signed char"},
    {"qlonglong", "long long"},
    {"qreal", "double"},
    {"quint16", "unsigned short"},
    {"quint32", "unsigned"},
    {"quint64", "unsigned long long"},
    {"quint8", "unsigned char"},
    {"qulonglong", "unsigned long long"},
    {"uchar", "unsigned char"},
    {"uint", "unsigned"},
    {"ulong", "unsigned long"},
    {"ushort", "unsigned short"},
};


/*
 * This defines the virtual handlers that this module implements and can be
 * used by other modules.
 */
static sipVirtHandlerFunc virtHandlersTable[] = {
    (sipVirtHandlerFunc)sipVH_QtCore_0,
    (sipVirtHandlerFunc)sipVH_QtCore_1,
    (sipVirtHandlerFunc)sipVH_QtCore_2,
    (sipVirtHandlerFunc)sipVH_QtCore_3,
    (sipVirtHandlerFunc)sipVH_QtCore_4,
    (sipVirtHandlerFunc)sipVH_QtCore_5,
    (sipVirtHandlerFunc)sipVH_QtCore_6,
    (sipVirtHandlerFunc)sipVH_QtCore_7,
    (sipVirtHandlerFunc)sipVH_QtCore_8,
    (sipVirtHandlerFunc)sipVH_QtCore_9,
    (sipVirtHandlerFunc)sipVH_QtCore_10,
    (sipVirtHandlerFunc)sipVH_QtCore_11,
    (sipVirtHandlerFunc)sipVH_QtCore_12,
    (sipVirtHandlerFunc)sipVH_QtCore_13,
    (sipVirtHandlerFunc)sipVH_QtCore_14,
    (sipVirtHandlerFunc)sipVH_QtCore_15,
    (sipVirtHandlerFunc)sipVH_QtCore_16,
    (sipVirtHandlerFunc)sipVH_QtCore_17,
    (sipVirtHandlerFunc)sipVH_QtCore_18,
    (sipVirtHandlerFunc)sipVH_QtCore_19,
    (sipVirtHandlerFunc)sipVH_QtCore_20,
    (sipVirtHandlerFunc)sipVH_QtCore_21,
    (sipVirtHandlerFunc)sipVH_QtCore_22,
    (sipVirtHandlerFunc)sipVH_QtCore_23,
    (sipVirtHandlerFunc)sipVH_QtCore_24,
    (sipVirtHandlerFunc)sipVH_QtCore_25,
    (sipVirtHandlerFunc)sipVH_QtCore_26,
    (sipVirtHandlerFunc)sipVH_QtCore_27,
    (sipVirtHandlerFunc)sipVH_QtCore_28,
    (sipVirtHandlerFunc)sipVH_QtCore_29,
    (sipVirtHandlerFunc)sipVH_QtCore_30,
    (sipVirtHandlerFunc)sipVH_QtCore_31,
    (sipVirtHandlerFunc)sipVH_QtCore_32,
    (sipVirtHandlerFunc)sipVH_QtCore_33,
    (sipVirtHandlerFunc)sipVH_QtCore_34,
    (sipVirtHandlerFunc)sipVH_QtCore_35,
    (sipVirtHandlerFunc)sipVH_QtCore_36,
    (sipVirtHandlerFunc)sipVH_QtCore_37,
    (sipVirtHandlerFunc)sipVH_QtCore_38,
    (sipVirtHandlerFunc)sipVH_QtCore_39,
    (sipVirtHandlerFunc)sipVH_QtCore_40,
    (sipVirtHandlerFunc)sipVH_QtCore_41,
    (sipVirtHandlerFunc)sipVH_QtCore_42,
    (sipVirtHandlerFunc)sipVH_QtCore_43,
    (sipVirtHandlerFunc)sipVH_QtCore_44,
    (sipVirtHandlerFunc)sipVH_QtCore_45,
    (sipVirtHandlerFunc)sipVH_QtCore_46,
    (sipVirtHandlerFunc)sipVH_QtCore_47,
    (sipVirtHandlerFunc)sipVH_QtCore_48,
    (sipVirtHandlerFunc)sipVH_QtCore_49,
    (sipVirtHandlerFunc)sipVH_QtCore_50,
    (sipVirtHandlerFunc)sipVH_QtCore_51,
    (sipVirtHandlerFunc)sipVH_QtCore_52,
    (sipVirtHandlerFunc)sipVH_QtCore_53,
    (sipVirtHandlerFunc)sipVH_QtCore_54,
    (sipVirtHandlerFunc)sipVH_QtCore_55,
    (sipVirtHandlerFunc)sipVH_QtCore_56,
    (sipVirtHandlerFunc)sipVH_QtCore_57,
    (sipVirtHandlerFunc)sipVH_QtCore_58,
    (sipVirtHandlerFunc)sipVH_QtCore_59,
    (sipVirtHandlerFunc)sipVH_QtCore_60,
    (sipVirtHandlerFunc)sipVH_QtCore_61,
    (sipVirtHandlerFunc)sipVH_QtCore_62,
    (sipVirtHandlerFunc)sipVH_QtCore_63,
    (sipVirtHandlerFunc)sipVH_QtCore_64,
    (sipVirtHandlerFunc)sipVH_QtCore_65,
};


/* This defines the class sub-convertors that this module defines. */
static sipSubClassConvertorDef convertorsTable[] = {
    {sipSubClass_QObject, {111, 255, 0}, NULL},
    {sipSubClass_QEvent, {46, 255, 0}, NULL},
    {NULL, {0, 0, 0}, NULL}
};


/* Define the module's license. */
static sipLicenseDef module_license = {
    "gpl",
    NULL,
    NULL,
    NULL
};


/* Define the strings to be added to this module dictionary. */
static sipStringInstanceDef stringInstances[] = {
    {sipName_PYQT_VERSION_STR, PYQT_VERSION_STR, 'N'},
    {sipName_QT_VERSION_STR, QT_VERSION_STR, 'N'},
    {0, 0, 0}
};


/* Define the ints to be added to this module dictionary. */
static sipIntInstanceDef intInstances[] = {
    {sipName_PYQT_VERSION, PYQT_VERSION},
    {sipName_QT_VERSION, QT_VERSION},
    {0, 0}
};


/* This defines the API versions and ranges in use. */
static int apiVersions[] = {sipNameNr_QString, 0, 2, sipNameNr_QString, 2, 0, sipNameNr_QTextStream, 0, 2, sipNameNr_QTextStream, 2, 0, sipNameNr_QVariant, 2, 0, sipNameNr_QVariant, 0, 2, sipNameNr_QVariant, 1, -1, sipNameNr_QUrl, 1, -1, sipNameNr_QTime, 1, -1, sipNameNr_QTextStream, 1, -1, sipNameNr_QString, 1, -1, sipNameNr_QDateTime, 1, -1, sipNameNr_QDate, 1, -1, -1};


/* This defines the global functions where all overloads are versioned. */
static sipVersionedFunctionDef versionedFunctions[] = {
    {sipNameNr_hex_, func_hex_, METH_VARARGS, 3},
    {sipNameNr_hex, func_hex, METH_VARARGS, 2},
    {sipNameNr_oct_, func_oct_, METH_VARARGS, 3},
    {sipNameNr_oct, func_oct, METH_VARARGS, 2},
    {sipNameNr_bin_, func_bin_, METH_VARARGS, 3},
    {sipNameNr_bin, func_bin, METH_VARARGS, 2},
    {-1, 0, 0, -1}
};


/* This defines the Qt support API. */

static sipQtAPI qtAPI = {
    &typesTable[111],
    sipQtCreateUniversalSignal,
    sipQtFindUniversalSignal,
    sipQtCreateUniversalSlot,
    sipQtDestroyUniversalSlot,
    sipQtFindSlot,
    sipQtConnect,
    sipQtDisconnect,
    sipQtSameSignalSlotName,
    sipQtFindSipslot,
    sipQtEmitSignal,
    sipQtConnectPySignal,
    sipQtDisconnectPySignal
};


/* This defines this module. */
sipExportedModuleDef sipModuleAPI_QtCore = {
    0,
    SIP_API_MINOR_NR,
    sipNameNr_PyQt4_QtCore,
    0,
    0,
    sipStrings_QtCore,
    NULL,
    &qtAPI,
    293,
    typesTable,
    externalTypesTable,
    5,
    enummembers,
    29,
    typedefsTable,
    virtHandlersTable,
    convertorsTable,
    {NULL, NULL, NULL, stringInstances, intInstances, NULL, NULL, NULL, NULL, NULL},
    &module_license,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    apiVersions,
    versionedFunctions
};


/* The SIP API and the APIs of any imported modules. */
const sipAPIDef *sipAPI_QtCore;

sip_qt_metaobject_func sip_QtCore_qt_metaobject;
sip_qt_metacall_func sip_QtCore_qt_metacall;
sip_qt_metacast_func sip_QtCore_qt_metacast;


/* The Python module initialisation function. */
#if PY_MAJOR_VERSION >= 3
#define SIP_MODULE_ENTRY        PyInit_QtCore
#define SIP_MODULE_TYPE         PyObject *
#define SIP_MODULE_DISCARD(r)   Py_DECREF(r)
#define SIP_MODULE_RETURN(r)    return (r)
#else
#define SIP_MODULE_ENTRY        initQtCore
#define SIP_MODULE_TYPE         void
#define SIP_MODULE_DISCARD(r)
#define SIP_MODULE_RETURN(r)    return
#endif

#if defined(SIP_STATIC_MODULE)
extern "C" SIP_MODULE_TYPE SIP_MODULE_ENTRY()
#else
PyMODINIT_FUNC SIP_MODULE_ENTRY()
#endif
{
    static PyMethodDef sip_methods[] = {
        {SIP_MLNAME_CAST(sipName_qSetRealNumberPrecision), func_qSetRealNumberPrecision, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qSetPadChar), func_qSetPadChar, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qSetFieldWidth), func_qSetFieldWidth, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_ws), func_ws, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_bom), func_bom, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_reset), func_reset, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_flush), func_flush, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_endl), func_endl, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_center), func_center, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_right), func_right, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_left), func_left, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_scientific), func_scientific, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_fixed), func_fixed, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_lowercasedigits), func_lowercasedigits, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_lowercasebase), func_lowercasebase, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_uppercasedigits), func_uppercasedigits, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_uppercasebase), func_uppercasebase, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_noforcepoint), func_noforcepoint, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_noforcesign), func_noforcesign, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_noshowbase), func_noshowbase, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_forcepoint), func_forcepoint, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_forcesign), func_forcesign, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_showbase), func_showbase, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_dec), func_dec, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_Q_RETURN_ARG), func_Q_RETURN_ARG, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_Q_ARG), func_Q_ARG, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_pyqtSignature), (PyCFunction)func_pyqtSignature, METH_VARARGS|METH_KEYWORDS, NULL},
        {SIP_MLNAME_CAST(sipName_pyqtSlot), (PyCFunction)func_pyqtSlot, METH_VARARGS|METH_KEYWORDS, NULL},
        {SIP_MLNAME_CAST(sipName_SIGNAL), func_SIGNAL, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_SLOT), func_SLOT, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_QT_TRANSLATE_NOOP), func_QT_TRANSLATE_NOOP, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_QT_TR_NOOP_UTF8), func_QT_TR_NOOP_UTF8, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_QT_TR_NOOP), func_QT_TR_NOOP, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_Q_FLAGS), func_Q_FLAGS, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_Q_ENUMS), func_Q_ENUMS, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qQNaN), func_qQNaN, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qSNaN), func_qSNaN, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qInf), func_qInf, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qIsNaN), func_qIsNaN, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qIsFinite), func_qIsFinite, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qIsInf), func_qIsInf, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_pyqtRestoreInputHook), func_pyqtRestoreInputHook, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_pyqtRemoveInputHook), func_pyqtRemoveInputHook, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qRemovePostRoutine), func_qRemovePostRoutine, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qAddPostRoutine), func_qAddPostRoutine, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qUncompress), func_qUncompress, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qCompress), func_qCompress, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qChecksum), func_qChecksum, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qSwap), func_qSwap, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qrand), func_qrand, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qsrand), func_qsrand, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qIsNull), func_qIsNull, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qFuzzyCompare), func_qFuzzyCompare, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qUnregisterResourceData), func_qUnregisterResourceData, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qRegisterResourceData), func_qRegisterResourceData, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qInstallMsgHandler), func_qInstallMsgHandler, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qErrnoWarning), func_qErrnoWarning, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qFatal), func_qFatal, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qCritical), func_qCritical, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qWarning), func_qWarning, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qDebug), func_qDebug, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qSharedBuild), func_qSharedBuild, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qVersion), func_qVersion, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qRound64), func_qRound64, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qRound), func_qRound, METH_VARARGS, NULL},
        {SIP_MLNAME_CAST(sipName_qAbs), func_qAbs, METH_VARARGS, NULL},
        {0, 0, 0, 0}
    };

#if PY_MAJOR_VERSION >= 3
    static PyModuleDef sip_module_def = {
        PyModuleDef_HEAD_INIT,
        "PyQt4.QtCore",
        NULL,
        -1,
        sip_methods,
        NULL,
        NULL,
        NULL,
        NULL
    };
#endif

    PyObject *sipModule, *sipModuleDict;
    PyObject *sip_sipmod, *sip_capiobj;

    /* Initialise the module and get it's dictionary. */
#if PY_MAJOR_VERSION >= 3
    sipModule = PyModule_Create(&sip_module_def);
#elif PY_VERSION_HEX >= 0x02050000
    sipModule = Py_InitModule(sipName_PyQt4_QtCore, sip_methods);
#else
    sipModule = Py_InitModule(const_cast<char *>(sipName_PyQt4_QtCore), sip_methods);
#endif

    if (sipModule == NULL)
        SIP_MODULE_RETURN(NULL);

    sipModuleDict = PyModule_GetDict(sipModule);

    /* Import the SIP module and get it's API. */
#if PY_VERSION_HEX >= 0x02050000
    sip_sipmod = PyImport_ImportModule("sip");
#else
    sip_sipmod = PyImport_ImportModule(const_cast<char *>("sip"));
#endif

    if (sip_sipmod == NULL)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

    sip_capiobj = PyDict_GetItemString(PyModule_GetDict(sip_sipmod), "_C_API");

    if (sip_capiobj == NULL || !PyCObject_Check(sip_capiobj))
    {
        Py_DECREF(sip_sipmod);
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

    sipAPI_QtCore = reinterpret_cast<const sipAPIDef *>(PyCObject_AsVoidPtr(sip_capiobj));

#line 589 "sip/QtCore/qobject.sip"
qpycore_init();
#line 9446 "sipQtCorecmodule.cpp"
    /* Export the module and publish it's API. */
    if (sipExportModule(&sipModuleAPI_QtCore,SIP_API_MAJOR_NR,SIP_API_MINOR_NR,0) < 0)
    {
        Py_DECREF(sip_sipmod);
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }

    sip_QtCore_qt_metaobject = (sip_qt_metaobject_func)sipImportSymbol("qtcore_qt_metaobject");
    sip_QtCore_qt_metacall = (sip_qt_metacall_func)sipImportSymbol("qtcore_qt_metacall");
    sip_QtCore_qt_metacast = (sip_qt_metacast_func)sipImportSymbol("qtcore_qt_metacast");

    /* Initialise the module now all its dependencies have been set up. */
    if (sipInitModule(&sipModuleAPI_QtCore,sipModuleDict) < 0)
    {
        Py_DECREF(sip_sipmod);
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }
#line 403 "sip/QtCore/qcoreapplication.sip"
// Process events from the input hook.
PyOS_InputHook = qtcore_input_hook;
#line 593 "sip/QtCore/qobject.sip"
qpycore_post_init(sipModuleDict);
#line 9471 "sipQtCorecmodule.cpp"

    SIP_MODULE_RETURN(sipModule);
}

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:19 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 37 "sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 39 "sipQtCoreQDataStream.cpp"

#line 41 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 43 "sipQtCoreQDataStream.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 46 "sipQtCoreQDataStream.cpp"
#line 41 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 49 "sipQtCoreQDataStream.cpp"
#line 131 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 52 "sipQtCoreQDataStream.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 55 "sipQtCoreQDataStream.cpp"
#line 41 "sip/QtCore/quuid.sip"
#include <quuid.h>
#line 58 "sipQtCoreQDataStream.cpp"
#line 41 "sip/QtCore/qurl.sip"
#include <qurl.h>
#line 61 "sipQtCoreQDataStream.cpp"
#line 41 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 64 "sipQtCoreQDataStream.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 67 "sipQtCoreQDataStream.cpp"
#line 100 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 70 "sipQtCoreQDataStream.cpp"
#line 41 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 73 "sipQtCoreQDataStream.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 76 "sipQtCoreQDataStream.cpp"
#line 160 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 79 "sipQtCoreQDataStream.cpp"
#line 41 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 82 "sipQtCoreQDataStream.cpp"
#line 94 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 85 "sipQtCoreQDataStream.cpp"
#line 41 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 88 "sipQtCoreQDataStream.cpp"
#line 41 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 91 "sipQtCoreQDataStream.cpp"
#line 109 "sip/QtCore/qline.sip"
#include <qline.h>
#line 94 "sipQtCoreQDataStream.cpp"
#line 41 "sip/QtCore/qline.sip"
#include <qline.h>
#line 97 "sipQtCoreQDataStream.cpp"
#line 346 "sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 100 "sipQtCoreQDataStream.cpp"
#line 200 "sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 103 "sipQtCoreQDataStream.cpp"
#line 41 "sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 106 "sipQtCoreQDataStream.cpp"
#line 78 "sip/QtCore/qchar.sip"
#include <qchar.h>
#line 109 "sipQtCoreQDataStream.cpp"
#line 41 "sip/QtCore/qbitarray.sip"
#include <qbitarray.h>
#line 112 "sipQtCoreQDataStream.cpp"


class sipQDataStream : public QDataStream
{
public:
    sipQDataStream();
    sipQDataStream(QIODevice *);
    sipQDataStream(QByteArray *,QIODevice::OpenMode);
    sipQDataStream(const QByteArray&);
    ~sipQDataStream();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQDataStream(const sipQDataStream &);
    sipQDataStream &operator = (const sipQDataStream &);
};

sipQDataStream::sipQDataStream(): QDataStream(), sipPySelf(0)
{
}

sipQDataStream::sipQDataStream(QIODevice *a0): QDataStream(a0), sipPySelf(0)
{
}

sipQDataStream::sipQDataStream(QByteArray *a0,QIODevice::OpenMode a1): QDataStream(a0,a1), sipPySelf(0)
{
}

sipQDataStream::sipQDataStream(const QByteArray& a0): QDataStream(a0), sipPySelf(0)
{
}

sipQDataStream::~sipQDataStream()
{
    sipCommonDtor(sipPySelf);
}


extern "C" {static PyObject *meth_QDataStream_device(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_device(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataStream,&sipCpp))
        {
            QIODevice *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->device();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_device);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QIODevice * a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QDataStream,&sipCpp,sipType_QIODevice,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDevice(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_setDevice);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_unsetDevice(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_unsetDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataStream,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->unsetDevice();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_unsetDevice);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataStream,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->atEnd();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_atEnd);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_status(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_status(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataStream,&sipCpp))
        {
            QDataStream::Status sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->status();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QDataStream_Status);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_status);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_setStatus(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_setStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataStream::Status a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QDataStream,&sipCpp,sipType_QDataStream_Status,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStatus(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_setStatus);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_resetStatus(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_resetStatus(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataStream,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->resetStatus();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_resetStatus);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_byteOrder(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_byteOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataStream,&sipCpp))
        {
            QDataStream::ByteOrder sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->byteOrder();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QDataStream_ByteOrder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_byteOrder);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_setByteOrder(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_setByteOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataStream::ByteOrder a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QDataStream,&sipCpp,sipType_QDataStream_ByteOrder,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setByteOrder(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_setByteOrder);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_version(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_version(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataStream,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->version();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_version);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_setVersion(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_setVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QDataStream,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setVersion(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_setVersion);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_skipRawData(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_skipRawData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QDataStream,&sipCpp,&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->skipRawData(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_skipRawData);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readInt8(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readInt8(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataStream,&sipCpp))
        {
            qint8 sipRes = 0;

#line 98 "sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 493 "sipQtCoreQDataStream.cpp"

            return SIPBytes_FromStringAndSize((char *)&sipRes,1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_readInt8);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readUInt8(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readUInt8(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataStream,&sipCpp))
        {
            quint8 sipRes = 0;

#line 105 "sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 522 "sipQtCoreQDataStream.cpp"

            return SIPBytes_FromStringAndSize((char *)&sipRes,1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_readUInt8);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readInt16(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readInt16(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataStream,&sipCpp))
        {
            qint16 sipRes = 0;

#line 112 "sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 551 "sipQtCoreQDataStream.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_readInt16);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readUInt16(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readUInt16(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataStream,&sipCpp))
        {
            quint16 sipRes = 0;

#line 119 "sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 580 "sipQtCoreQDataStream.cpp"

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_readUInt16);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readInt32(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readInt32(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataStream,&sipCpp))
        {
            qint32 sipRes = 0;

#line 126 "sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 609 "sipQtCoreQDataStream.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_readInt32);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readUInt32(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readUInt32(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataStream,&sipCpp))
        {
            quint32 sipRes = 0;

#line 133 "sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 638 "sipQtCoreQDataStream.cpp"

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_readUInt32);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readInt64(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readInt64(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataStream,&sipCpp))
        {
            qint64 sipRes = 0;

#line 140 "sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 667 "sipQtCoreQDataStream.cpp"

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_readInt64);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readUInt64(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readUInt64(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataStream,&sipCpp))
        {
            quint64 sipRes = 0;

#line 147 "sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 696 "sipQtCoreQDataStream.cpp"

            return PyLong_FromUnsignedLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_readUInt64);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readBool(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readBool(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataStream,&sipCpp))
        {
            bool sipRes = 0;

#line 154 "sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 725 "sipQtCoreQDataStream.cpp"

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_readBool);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readFloat(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readFloat(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataStream,&sipCpp))
        {
            float sipRes = 0;

#line 161 "sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 754 "sipQtCoreQDataStream.cpp"

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_readFloat);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readDouble(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readDouble(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataStream,&sipCpp))
        {
            double sipRes = 0;

#line 168 "sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> sipRes;
    Py_END_ALLOW_THREADS
#line 783 "sipQtCoreQDataStream.cpp"

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_readDouble);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readString(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readString(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataStream,&sipCpp))
        {
            PyObject * sipRes = 0;

#line 175 "sip/QtCore/qdatastream.sip"
    char *s;

    Py_BEGIN_ALLOW_THREADS
    *sipCpp >> s;
    Py_END_ALLOW_THREADS

    if (s)
    {
        sipRes = SIPBytes_FromString(s);
        delete[] s;
    }
    else
    {
        sipRes = Py_None;
        Py_INCREF(Py_None);
    }
#line 825 "sipQtCoreQDataStream.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_readString);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeInt8(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeInt8(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qint8 a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bc",&sipSelf,sipType_QDataStream,&sipCpp,&a0))
        {
#line 195 "sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 853 "sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_writeInt8);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeUInt8(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeUInt8(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        quint8 a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bc",&sipSelf,sipType_QDataStream,&sipCpp,&a0))
        {
#line 202 "sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 882 "sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_writeUInt8);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeInt16(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeInt16(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qint16 a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bh",&sipSelf,sipType_QDataStream,&sipCpp,&a0))
        {
#line 209 "sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 911 "sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_writeInt16);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeUInt16(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeUInt16(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        quint16 a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bt",&sipSelf,sipType_QDataStream,&sipCpp,&a0))
        {
#line 216 "sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 940 "sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_writeUInt16);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeInt32(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeInt32(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qint32 a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QDataStream,&sipCpp,&a0))
        {
#line 223 "sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 969 "sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_writeInt32);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeUInt32(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeUInt32(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        quint32 a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bu",&sipSelf,sipType_QDataStream,&sipCpp,&a0))
        {
#line 230 "sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 998 "sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_writeUInt32);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeInt64(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeInt64(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        qint64 a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bn",&sipSelf,sipType_QDataStream,&sipCpp,&a0))
        {
#line 237 "sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 1027 "sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_writeInt64);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeUInt64(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeUInt64(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        quint64 a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bo",&sipSelf,sipType_QDataStream,&sipCpp,&a0))
        {
#line 244 "sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 1056 "sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_writeUInt64);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeBool(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeBool(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QDataStream,&sipCpp,&a0))
        {
#line 251 "sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 1085 "sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_writeBool);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeFloat(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeFloat(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        float a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bf",&sipSelf,sipType_QDataStream,&sipCpp,&a0))
        {
#line 258 "sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 1114 "sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_writeFloat);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeDouble(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeDouble(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        double a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bd",&sipSelf,sipType_QDataStream,&sipCpp,&a0))
        {
#line 265 "sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 1143 "sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_writeDouble);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeString(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeString(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const char * a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bs",&sipSelf,sipType_QDataStream,&sipCpp,&a0))
        {
#line 272 "sip/QtCore/qdatastream.sip"
    Py_BEGIN_ALLOW_THREADS
    *sipCpp << a0;
    Py_END_ALLOW_THREADS
#line 1172 "sipQtCoreQDataStream.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_writeString);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readBytes(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readBytes(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QDataStream,&sipCpp))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 278 "sip/QtCore/qdatastream.sip"
        char *s;
        uint l;
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->readBytes(s, l);
        Py_END_ALLOW_THREADS
        
        if ((sipRes = SIPBytes_FromStringAndSize(s, l)) == NULL)
            sipIsErr = 1;
        
        if (s)
            delete[] s;
#line 1212 "sipQtCoreQDataStream.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_readBytes);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_readRawData(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_readRawData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QDataStream,&sipCpp,&a0))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

#line 294 "sip/QtCore/qdatastream.sip"
        char *s = new char[a0];
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->readRawData(s, a0);
        Py_END_ALLOW_THREADS
        
        sipRes = SIPBytes_FromStringAndSize(s, a0);
        
        if (!sipRes)
            sipIsErr = 1;
        
        delete[] s;
#line 1255 "sipQtCoreQDataStream.cpp"

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_readRawData);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeBytes(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeBytes(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const char * a0;
        SIP_SSIZE_T a1;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bk",&sipSelf,sipType_QDataStream,&sipCpp,&a0,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->writeBytes(a0,(unsigned)a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_writeBytes);

    return NULL;
}


extern "C" {static PyObject *meth_QDataStream_writeRawData(PyObject *, PyObject *);}
static PyObject *meth_QDataStream_writeRawData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const char * a0;
        SIP_SSIZE_T a1;
        QDataStream *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bk",&sipSelf,sipType_QDataStream,&sipCpp,&a0,&a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->writeRawData(a0,(int)a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QDataStream,sipName_writeRawData);

    return NULL;
}


extern "C" {static PyObject *slot_QDataStream___lshift__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_QDataStream___lshift__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        QDataStream * a0;
        QVariant::Type a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9XE",sipType_QDataStream,&a0,sipType_QVariant_Type,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QVariant * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QVariant,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QUuid * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QUuid,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QUrl * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QUrl,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QStringList * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QStringList,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QString * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QString,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QSizeF * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QSizeF,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QSize * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QSize,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QRegExp * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QRegExp,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QRectF * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QRectF,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QRect * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QRect,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QPointF * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QPointF,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QPoint * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QPoint,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QLocale * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QLocale,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QLineF * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QLineF,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QLine * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QLine,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QDateTime * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QDateTime,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QTime * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QTime,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QDate * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QDate,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QChar * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QChar,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QByteArray * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QByteArray,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        const QBitArray * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QBitArray,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 << *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,lshift_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QDataStream___rshift__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_QDataStream___rshift__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        QDataStream * a0;
        QVariant::Type a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9XE",sipType_QDataStream,&a0,sipType_QVariant_Type,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QVariant * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QVariant,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QUuid * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QUuid,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QUrl * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QUrl,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QStringList * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QStringList,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QString * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QString,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QSizeF * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QSizeF,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QSize * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QSize,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QRegExp * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QRegExp,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QRectF * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QRectF,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QRect * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QRect,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QPointF * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QPointF,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QPoint * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QPoint,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QLocale * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QLocale,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QLineF * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QLineF,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QLine * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QLine,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QDateTime * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QDateTime,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QTime * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QTime,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QDate * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QDate,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QChar * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QChar,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QByteArray * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QByteArray,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    {
        QDataStream * a0;
        QBitArray * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QDataStream,&a0,sipType_QBitArray,&a1))
        {
            QDataStream *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(*a0 >> *a1);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QDataStream,NULL);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,rshift_slot,NULL,sipArg0,sipArg1);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QDataStream(void *, const sipTypeDef *);}
static void *cast_QDataStream(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QDataStream)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QDataStream(void *, int);}
static void release_QDataStream(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQDataStream *>(sipCppV);
    else
        delete reinterpret_cast<QDataStream *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QDataStream(sipSimpleWrapper *);}
static void dealloc_QDataStream(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQDataStream *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QDataStream(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QDataStream(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QDataStream(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    sipQDataStream *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDataStream();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        QIODevice * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J8",sipType_QIODevice,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDataStream(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        QByteArray * a0;
        QIODevice::OpenMode * a1;
        int a1State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J8J1",sipType_QByteArray,&a0,sipType_QIODevice_OpenMode,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDataStream(a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(a1,sipType_QIODevice_OpenMode,a1State);
        }
    }

    if (!sipCpp)
    {
        const QByteArray * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QByteArray,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQDataStream(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QDataStream[] = {
    {(void *)slot_QDataStream___lshift__, lshift_slot},
    {(void *)slot_QDataStream___rshift__, rshift_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QDataStream[] = {
    {SIP_MLNAME_CAST(sipName_atEnd), meth_QDataStream_atEnd, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_byteOrder), meth_QDataStream_byteOrder, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_device), meth_QDataStream_device, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readBool), meth_QDataStream_readBool, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readBytes), meth_QDataStream_readBytes, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readDouble), meth_QDataStream_readDouble, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readFloat), meth_QDataStream_readFloat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readInt16), meth_QDataStream_readInt16, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readInt32), meth_QDataStream_readInt32, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readInt64), meth_QDataStream_readInt64, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readInt8), meth_QDataStream_readInt8, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readRawData), meth_QDataStream_readRawData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readString), meth_QDataStream_readString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readUInt16), meth_QDataStream_readUInt16, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readUInt32), meth_QDataStream_readUInt32, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readUInt64), meth_QDataStream_readUInt64, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readUInt8), meth_QDataStream_readUInt8, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resetStatus), meth_QDataStream_resetStatus, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setByteOrder), meth_QDataStream_setByteOrder, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDevice), meth_QDataStream_setDevice, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setStatus), meth_QDataStream_setStatus, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setVersion), meth_QDataStream_setVersion, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_skipRawData), meth_QDataStream_skipRawData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_status), meth_QDataStream_status, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_unsetDevice), meth_QDataStream_unsetDevice, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_version), meth_QDataStream_version, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeBool), meth_QDataStream_writeBool, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeBytes), meth_QDataStream_writeBytes, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeDouble), meth_QDataStream_writeDouble, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeFloat), meth_QDataStream_writeFloat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeInt16), meth_QDataStream_writeInt16, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeInt32), meth_QDataStream_writeInt32, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeInt64), meth_QDataStream_writeInt64, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeInt8), meth_QDataStream_writeInt8, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeRawData), meth_QDataStream_writeRawData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeString), meth_QDataStream_writeString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeUInt16), meth_QDataStream_writeUInt16, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeUInt32), meth_QDataStream_writeUInt32, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeUInt64), meth_QDataStream_writeUInt64, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeUInt8), meth_QDataStream_writeUInt8, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QDataStream[] = {
    {sipName_BigEndian, QDataStream::BigEndian, 31},
    {sipName_LittleEndian, QDataStream::LittleEndian, 31},
    {sipName_Ok, QDataStream::Ok, 32},
    {sipName_Qt_1_0, QDataStream::Qt_1_0, 33},
    {sipName_Qt_2_0, QDataStream::Qt_2_0, 33},
    {sipName_Qt_2_1, QDataStream::Qt_2_1, 33},
    {sipName_Qt_3_0, QDataStream::Qt_3_0, 33},
    {sipName_Qt_3_1, QDataStream::Qt_3_1, 33},
    {sipName_Qt_3_3, QDataStream::Qt_3_3, 33},
    {sipName_Qt_4_0, QDataStream::Qt_4_0, 33},
    {sipName_Qt_4_1, QDataStream::Qt_4_1, 33},
    {sipName_Qt_4_2, QDataStream::Qt_4_2, 33},
    {sipName_Qt_4_3, QDataStream::Qt_4_3, 33},
    {sipName_Qt_4_4, QDataStream::Qt_4_4, 33},
    {sipName_Qt_4_5, QDataStream::Qt_4_5, 33},
    {sipName_ReadCorruptData, QDataStream::ReadCorruptData, 32},
    {sipName_ReadPastEnd, QDataStream::ReadPastEnd, 32},
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QDataStream = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QDataStream,
        {0}
    },
    {
        sipNameNr_QDataStream,
        {0, 0, 1},
        40, methods_QDataStream,
        17, enummembers_QDataStream,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QDataStream,
    init_QDataStream,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QDataStream,
    0,
    0,
    0,
    release_QDataStream,
    cast_QDataStream,
    0,
    0,
    0
},
    0,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:19 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 37 "sip/QtCore/qabstracteventdispatcher.sip"
#include <qabstracteventdispatcher.h>
#line 39 "sipQtCoreQAbstractEventDispatcher.cpp"

#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtCoreQAbstractEventDispatcher.cpp"
#line 323 "sip/QtCore/qlist.sip"
#include <qlist.h>
#include <qpair.h>
#line 47 "sipQtCoreQAbstractEventDispatcher.cpp"
#line 37 "sip/QtCore/qsocketnotifier.sip"
#include <qsocketnotifier.h>
#line 50 "sipQtCoreQAbstractEventDispatcher.cpp"
#line 41 "sip/QtCore/qeventloop.sip"
#include <qeventloop.h>
#line 53 "sipQtCoreQAbstractEventDispatcher.cpp"
#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 56 "sipQtCoreQAbstractEventDispatcher.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 59 "sipQtCoreQAbstractEventDispatcher.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 62 "sipQtCoreQAbstractEventDispatcher.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 65 "sipQtCoreQAbstractEventDispatcher.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 68 "sipQtCoreQAbstractEventDispatcher.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 71 "sipQtCoreQAbstractEventDispatcher.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 74 "sipQtCoreQAbstractEventDispatcher.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 77 "sipQtCoreQAbstractEventDispatcher.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 80 "sipQtCoreQAbstractEventDispatcher.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 83 "sipQtCoreQAbstractEventDispatcher.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 86 "sipQtCoreQAbstractEventDispatcher.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 89 "sipQtCoreQAbstractEventDispatcher.cpp"


class sipQAbstractEventDispatcher : public QAbstractEventDispatcher
{
public:
    sipQAbstractEventDispatcher(QObject *);
    virtual ~sipQAbstractEventDispatcher();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool processEvents(QEventLoop::ProcessEventsFlags);
    bool hasPendingEvents();
    void registerSocketNotifier(QSocketNotifier *);
    void unregisterSocketNotifier(QSocketNotifier *);
    void registerTimer(int,int,QObject *);
    bool unregisterTimer(int);
    bool unregisterTimers(QObject *);
    QList<QPair<int,int> > registeredTimers(QObject *) const;
    void wakeUp();
    void interrupt();
    void flush();
    void startingUp();
    void closingDown();
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractEventDispatcher(const sipQAbstractEventDispatcher &);
    sipQAbstractEventDispatcher &operator = (const sipQAbstractEventDispatcher &);

    char sipPyMethods[20];
};

sipQAbstractEventDispatcher::sipQAbstractEventDispatcher(QObject *a0): QAbstractEventDispatcher(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractEventDispatcher::~sipQAbstractEventDispatcher()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQAbstractEventDispatcher::metaObject() const
{
    return sip_QtCore_qt_metaobject(sipPySelf,sipType_QAbstractEventDispatcher);
}

int sipQAbstractEventDispatcher::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QAbstractEventDispatcher::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QAbstractEventDispatcher,_c,_id,_a);

    return _id;
}

void *sipQAbstractEventDispatcher::qt_metacast(const char *_clname)
{
    return (sip_QtCore_qt_metacast && sip_QtCore_qt_metacast(sipPySelf,sipType_QAbstractEventDispatcher,_clname)) ? this : QAbstractEventDispatcher::qt_metacast(_clname);
}

bool sipQAbstractEventDispatcher::processEvents(QEventLoop::ProcessEventsFlags a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_QAbstractEventDispatcher,sipName_processEvents);

    if (!meth)
        return 0;

    extern bool sipVH_QtCore_65(sip_gilstate_t,PyObject *,bool*,QEventLoop::ProcessEventsFlags);

    return sipVH_QtCore_65(sipGILState,meth,0,a0);
}

bool sipQAbstractEventDispatcher::hasPendingEvents()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,sipName_QAbstractEventDispatcher,sipName_hasPendingEvents);

    if (!meth)
        return 0;

    extern bool sipVH_QtCore_1(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtCore_1(sipGILState,meth,0);
}

void sipQAbstractEventDispatcher::registerSocketNotifier(QSocketNotifier *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,sipName_QAbstractEventDispatcher,sipName_registerSocketNotifier);

    if (!meth)
        return;

    extern void sipVH_QtCore_64(sip_gilstate_t,PyObject *,bool*,QSocketNotifier *);

    sipVH_QtCore_64(sipGILState,meth,0,a0);
}

void sipQAbstractEventDispatcher::unregisterSocketNotifier(QSocketNotifier *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,sipName_QAbstractEventDispatcher,sipName_unregisterSocketNotifier);

    if (!meth)
        return;

    extern void sipVH_QtCore_64(sip_gilstate_t,PyObject *,bool*,QSocketNotifier *);

    sipVH_QtCore_64(sipGILState,meth,0,a0);
}

void sipQAbstractEventDispatcher::registerTimer(int a0,int a1,QObject *a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,sipName_QAbstractEventDispatcher,sipName_registerTimer);

    if (!meth)
        return;

    extern void sipVH_QtCore_63(sip_gilstate_t,PyObject *,bool*,int,int,QObject *);

    sipVH_QtCore_63(sipGILState,meth,0,a0,a1,a2);
}

bool sipQAbstractEventDispatcher::unregisterTimer(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,sipName_QAbstractEventDispatcher,sipName_unregisterTimer);

    if (!meth)
        return 0;

    extern bool sipVH_QtCore_16(sip_gilstate_t,PyObject *,bool*,int);

    return sipVH_QtCore_16(sipGILState,meth,0,a0);
}

bool sipQAbstractEventDispatcher::unregisterTimers(QObject *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,sipName_QAbstractEventDispatcher,sipName_unregisterTimers);

    if (!meth)
        return 0;

    extern bool sipVH_QtCore_62(sip_gilstate_t,PyObject *,bool*,QObject *);

    return sipVH_QtCore_62(sipGILState,meth,0,a0);
}

QList<QPair<int,int> > sipQAbstractEventDispatcher::registeredTimers(QObject *a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,sipName_QAbstractEventDispatcher,sipName_registeredTimers);

    if (!meth)
        return QList<QPair<int,int> >();

    extern QList<QPair<int,int> > sipVH_QtCore_61(sip_gilstate_t,PyObject *,bool*,QObject *);

    return sipVH_QtCore_61(sipGILState,meth,0,a0);
}

void sipQAbstractEventDispatcher::wakeUp()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,sipName_QAbstractEventDispatcher,sipName_wakeUp);

    if (!meth)
        return;

    extern void sipVH_QtCore_5(sip_gilstate_t,PyObject *,bool*);

    sipVH_QtCore_5(sipGILState,meth,0);
}

void sipQAbstractEventDispatcher::interrupt()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,sipName_QAbstractEventDispatcher,sipName_interrupt);

    if (!meth)
        return;

    extern void sipVH_QtCore_5(sip_gilstate_t,PyObject *,bool*);

    sipVH_QtCore_5(sipGILState,meth,0);
}

void sipQAbstractEventDispatcher::flush()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,sipName_QAbstractEventDispatcher,sipName_flush);

    if (!meth)
        return;

    extern void sipVH_QtCore_5(sip_gilstate_t,PyObject *,bool*);

    sipVH_QtCore_5(sipGILState,meth,0);
}

void sipQAbstractEventDispatcher::startingUp()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_startingUp);

    if (!meth)
    {
        QAbstractEventDispatcher::startingUp();
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t,PyObject *,bool*);

    sipVH_QtCore_5(sipGILState,meth,0);
}

void sipQAbstractEventDispatcher::closingDown()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_closingDown);

    if (!meth)
    {
        QAbstractEventDispatcher::closingDown();
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t,PyObject *,bool*);

    sipVH_QtCore_5(sipGILState,meth,0);
}

bool sipQAbstractEventDispatcher::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    extern bool sipVH_QtCore_12(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return sipVH_QtCore_12(sipGILState,meth,0,a0);
}

bool sipQAbstractEventDispatcher::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    extern bool sipVH_QtCore_20(sip_gilstate_t,PyObject *,bool*,QObject *,QEvent *);

    return sipVH_QtCore_20(sipGILState,meth,0,a0,a1);
}

void sipQAbstractEventDispatcher::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t,PyObject *,bool*,QTimerEvent *);

    sipVH_QtCore_3(sipGILState,meth,0,a0);
}

void sipQAbstractEventDispatcher::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_19(sip_gilstate_t,PyObject *,bool*,QChildEvent *);

    sipVH_QtCore_19(sipGILState,meth,0,a0);
}

void sipQAbstractEventDispatcher::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_18(sip_gilstate_t,PyObject *,bool*,QEvent *);

    sipVH_QtCore_18(sipGILState,meth,0,a0);
}

void sipQAbstractEventDispatcher::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t,PyObject *,bool*,const char *);

    sipVH_QtCore_17(sipGILState,meth,0,a0);
}

void sipQAbstractEventDispatcher::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t,PyObject *,bool*,const char *);

    sipVH_QtCore_17(sipGILState,meth,0,a0);
}

int sipQAbstractEventDispatcher::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQAbstractEventDispatcher::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQAbstractEventDispatcher::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQAbstractEventDispatcher::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQAbstractEventDispatcher::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQAbstractEventDispatcher::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}


extern "C" {static PyObject *meth_QAbstractEventDispatcher_receivers(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        char * a0;
        sipQAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QAbstractEventDispatcher,&sipCpp,&a0))
        {
            int sipRes = 0;

#line 480 "sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
#line 556 "sipQtCoreQAbstractEventDispatcher.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractEventDispatcher,sipName_receivers);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractEventDispatcher_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QAbstractEventDispatcher,&sipCpp,sipType_QTimerEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractEventDispatcher,sipName_timerEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractEventDispatcher_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QAbstractEventDispatcher,&sipCpp,sipType_QChildEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractEventDispatcher,sipName_childEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractEventDispatcher_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QAbstractEventDispatcher,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractEventDispatcher,sipName_customEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractEventDispatcher_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QAbstractEventDispatcher,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractEventDispatcher,sipName_connectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractEventDispatcher_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QAbstractEventDispatcher,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractEventDispatcher,sipName_disconnectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractEventDispatcher_instance(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_instance(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QThread * a0 = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"|J8",sipType_QThread,&a0))
        {
            QAbstractEventDispatcher *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QAbstractEventDispatcher::instance(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QAbstractEventDispatcher,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractEventDispatcher,sipName_instance);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractEventDispatcher_processEvents(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_processEvents(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        QEventLoop::ProcessEventsFlags * a0;
        int a0State = 0;
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QAbstractEventDispatcher,&sipCpp,sipType_QEventLoop_ProcessEventsFlags,&a0,&a0State))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_processEvents);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->processEvents(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QEventLoop_ProcessEventsFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractEventDispatcher,sipName_processEvents);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractEventDispatcher_hasPendingEvents(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_hasPendingEvents(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QAbstractEventDispatcher,&sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_hasPendingEvents);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasPendingEvents();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractEventDispatcher,sipName_hasPendingEvents);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractEventDispatcher_registerSocketNotifier(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_registerSocketNotifier(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        QSocketNotifier * a0;
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QAbstractEventDispatcher,&sipCpp,sipType_QSocketNotifier,&a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_registerSocketNotifier);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->registerSocketNotifier(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractEventDispatcher,sipName_registerSocketNotifier);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractEventDispatcher_unregisterSocketNotifier(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_unregisterSocketNotifier(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        QSocketNotifier * a0;
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QAbstractEventDispatcher,&sipCpp,sipType_QSocketNotifier,&a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_unregisterSocketNotifier);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->unregisterSocketNotifier(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractEventDispatcher,sipName_unregisterSocketNotifier);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractEventDispatcher_registerTimer(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_registerTimer(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        QObject * a1;
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiJ8",&sipSelf,sipType_QAbstractEventDispatcher,&sipCpp,&a0,sipType_QObject,&a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->registerTimer(a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
        QObject * a2;
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiiJ8",&sipSelf,sipType_QAbstractEventDispatcher,&sipCpp,&a0,&a1,sipType_QObject,&a2))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_registerTimer);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->registerTimer(a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractEventDispatcher,sipName_registerTimer);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractEventDispatcher_unregisterTimer(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_unregisterTimer(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QAbstractEventDispatcher,&sipCpp,&a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_unregisterTimer);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->unregisterTimer(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractEventDispatcher,sipName_unregisterTimer);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractEventDispatcher_unregisterTimers(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_unregisterTimers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        QObject * a0;
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QAbstractEventDispatcher,&sipCpp,sipType_QObject,&a0))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_unregisterTimers);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->unregisterTimers(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractEventDispatcher,sipName_unregisterTimers);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractEventDispatcher_registeredTimers(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_registeredTimers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        QObject * a0;
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QAbstractEventDispatcher,&sipCpp,sipType_QObject,&a0))
        {
            QList<QPair<int,int> > *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_registeredTimers);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QPair<int,int> >(sipCpp->registeredTimers(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0600QPair_1800_1800,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractEventDispatcher,sipName_registeredTimers);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractEventDispatcher_wakeUp(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_wakeUp(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QAbstractEventDispatcher,&sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_wakeUp);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->wakeUp();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractEventDispatcher,sipName_wakeUp);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractEventDispatcher_interrupt(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_interrupt(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QAbstractEventDispatcher,&sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_interrupt);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->interrupt();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractEventDispatcher,sipName_interrupt);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractEventDispatcher_flush(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_flush(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QAbstractEventDispatcher,&sipCpp))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractEventDispatcher, sipName_flush);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipCpp->flush();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractEventDispatcher,sipName_flush);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractEventDispatcher_startingUp(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_startingUp(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QAbstractEventDispatcher,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractEventDispatcher::startingUp() : sipCpp->startingUp());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractEventDispatcher,sipName_startingUp);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractEventDispatcher_closingDown(PyObject *, PyObject *);}
static PyObject *meth_QAbstractEventDispatcher_closingDown(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractEventDispatcher *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QAbstractEventDispatcher,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractEventDispatcher::closingDown() : sipCpp->closingDown());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractEventDispatcher,sipName_closingDown);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QAbstractEventDispatcher(void *, const sipTypeDef *);}
static void *cast_QAbstractEventDispatcher(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QAbstractEventDispatcher)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QAbstractEventDispatcher *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractEventDispatcher(void *, int);}
static void release_QAbstractEventDispatcher(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQAbstractEventDispatcher *>(sipCppV);
    else
        delete reinterpret_cast<QAbstractEventDispatcher *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QAbstractEventDispatcher(sipSimpleWrapper *);}
static void dealloc_QAbstractEventDispatcher(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQAbstractEventDispatcher *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QAbstractEventDispatcher(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QAbstractEventDispatcher(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QAbstractEventDispatcher(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **sipOwner, int *sipArgsParsed)
{
    sipQAbstractEventDispatcher *sipCpp = 0;

    if (!sipCpp)
    {
        QObject * a0 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"|JH",sipType_QObject,&a0,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQAbstractEventDispatcher(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractEventDispatcher[] = {{111, 255, 1}};


static PyMethodDef methods_QAbstractEventDispatcher[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QAbstractEventDispatcher_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_closingDown), meth_QAbstractEventDispatcher_closingDown, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QAbstractEventDispatcher_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QAbstractEventDispatcher_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QAbstractEventDispatcher_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_flush), meth_QAbstractEventDispatcher_flush, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasPendingEvents), meth_QAbstractEventDispatcher_hasPendingEvents, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_instance), meth_QAbstractEventDispatcher_instance, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_interrupt), meth_QAbstractEventDispatcher_interrupt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_processEvents), meth_QAbstractEventDispatcher_processEvents, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QAbstractEventDispatcher_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_registerSocketNotifier), meth_QAbstractEventDispatcher_registerSocketNotifier, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_registerTimer), meth_QAbstractEventDispatcher_registerTimer, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_registeredTimers), meth_QAbstractEventDispatcher_registeredTimers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_startingUp), meth_QAbstractEventDispatcher_startingUp, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QAbstractEventDispatcher_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_unregisterSocketNotifier), meth_QAbstractEventDispatcher_unregisterSocketNotifier, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_unregisterTimer), meth_QAbstractEventDispatcher_unregisterTimer, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_unregisterTimers), meth_QAbstractEventDispatcher_unregisterTimers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_wakeUp), meth_QAbstractEventDispatcher_wakeUp, METH_VARARGS, NULL}
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QAbstractEventDispatcher[] = {
    {"awake()", 0},
    {"aboutToBlock()", 0},
    {0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QAbstractEventDispatcher = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QAbstractEventDispatcher,
        {0}
    },
    {
        sipNameNr_QAbstractEventDispatcher,
        {0, 0, 1},
        20, methods_QAbstractEventDispatcher,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QAbstractEventDispatcher,
    0,
    init_QAbstractEventDispatcher,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAbstractEventDispatcher,
    0,
    0,
    0,
    release_QAbstractEventDispatcher,
    cast_QAbstractEventDispatcher,
    0,
    0,
    0
},
    &QAbstractEventDispatcher::staticMetaObject,
    0,
    pyqt4_signals_QAbstractEventDispatcher
};

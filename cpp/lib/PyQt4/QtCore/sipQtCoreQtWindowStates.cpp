/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:19 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 39 "sipQtCoreQtWindowStates.cpp"

#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 43 "sipQtCoreQtWindowStates.cpp"


extern "C" {static int slot_Qt_WindowStates___bool__(PyObject *sipSelf);}
static int slot_Qt_WindowStates___bool__(PyObject *sipSelf)
{
    Qt::WindowStates *sipCpp = reinterpret_cast<Qt::WindowStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_WindowStates));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 319 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator int() != 0);
#line 61 "sipQtCoreQtWindowStates.cpp"

            return sipRes;
        }
    }
}


extern "C" {static PyObject *slot_Qt_WindowStates___ne__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_Qt_WindowStates___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    Qt::WindowStates *sipCpp = reinterpret_cast<Qt::WindowStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_WindowStates));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const Qt::WindowStates * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_Qt_WindowStates,&a0,&a0State))
        {
            bool sipRes = 0;

#line 314 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator int() != a0->operator int());
#line 89 "sipQtCoreQtWindowStates.cpp"

            sipReleaseType(const_cast<Qt::WindowStates *>(a0),sipType_Qt_WindowStates,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,ne_slot,sipType_Qt_WindowStates,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_Qt_WindowStates___eq__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_Qt_WindowStates___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    Qt::WindowStates *sipCpp = reinterpret_cast<Qt::WindowStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_WindowStates));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const Qt::WindowStates * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_Qt_WindowStates,&a0,&a0State))
        {
            bool sipRes = 0;

#line 309 "sip/QtCore/qglobal.sip"
        sipRes = (sipCpp->operator int() == a0->operator int());
#line 121 "sipQtCoreQtWindowStates.cpp"

            sipReleaseType(const_cast<Qt::WindowStates *>(a0),sipType_Qt_WindowStates,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,eq_slot,sipType_Qt_WindowStates,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_Qt_WindowStates___invert__(PyObject *sipSelf);}
static PyObject *slot_Qt_WindowStates___invert__(PyObject *sipSelf)
{
    Qt::WindowStates *sipCpp = reinterpret_cast<Qt::WindowStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_WindowStates));

    if (!sipCpp)
        return 0;


    {
        {
            Qt::WindowStates *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::WindowStates(~(*sipCpp));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_WindowStates,NULL);
        }
    }
}


extern "C" {static PyObject *slot_Qt_WindowStates___and__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_Qt_WindowStates___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        Qt::WindowStates * a0;
        int a0State = 0;
        int a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J1i",sipType_Qt_WindowStates,&a0,&a0State,&a1))
        {
            Qt::WindowStates *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::WindowStates((*a0 & a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_Qt_WindowStates,a0State);

            return sipConvertFromNewType(sipRes,sipType_Qt_WindowStates,NULL);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,and_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_Qt_WindowStates___xor__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_Qt_WindowStates___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        Qt::WindowStates * a0;
        int a0State = 0;
        Qt::WindowStates * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J1J1",sipType_Qt_WindowStates,&a0,&a0State,sipType_Qt_WindowStates,&a1,&a1State))
        {
            Qt::WindowStates *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::WindowStates((*a0 ^ *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_Qt_WindowStates,a0State);
            sipReleaseType(a1,sipType_Qt_WindowStates,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_WindowStates,NULL);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,xor_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_Qt_WindowStates___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_Qt_WindowStates___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        Qt::WindowStates * a0;
        int a0State = 0;
        Qt::WindowStates * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J1J1",sipType_Qt_WindowStates,&a0,&a0State,sipType_Qt_WindowStates,&a1,&a1State))
        {
            Qt::WindowStates *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::WindowStates((*a0 | *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_Qt_WindowStates,a0State);
            sipReleaseType(a1,sipType_Qt_WindowStates,a1State);

            return sipConvertFromNewType(sipRes,sipType_Qt_WindowStates,NULL);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,or_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_Qt_WindowStates___int__(PyObject *sipSelf);}
static PyObject *slot_Qt_WindowStates___int__(PyObject *sipSelf)
{
    Qt::WindowStates *sipCpp = reinterpret_cast<Qt::WindowStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_WindowStates));

    if (!sipCpp)
        return 0;


    {
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = *sipCpp;
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }
}


extern "C" {static PyObject *slot_Qt_WindowStates___ixor__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_Qt_WindowStates___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_WindowStates)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    Qt::WindowStates *sipCpp = reinterpret_cast<Qt::WindowStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_WindowStates));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        Qt::WindowStates * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_Qt_WindowStates,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->Qt::WindowStates::operator^=(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_Qt_WindowStates,a0State);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_WindowStates___ior__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_Qt_WindowStates___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_WindowStates)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    Qt::WindowStates *sipCpp = reinterpret_cast<Qt::WindowStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_WindowStates));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        Qt::WindowStates * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_Qt_WindowStates,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->Qt::WindowStates::operator|=(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_Qt_WindowStates,a0State);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_Qt_WindowStates___iand__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_Qt_WindowStates___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_Qt_WindowStates)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    Qt::WindowStates *sipCpp = reinterpret_cast<Qt::WindowStates *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_Qt_WindowStates));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        int a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1i",&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->Qt::WindowStates::operator&=(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_Qt_WindowStates(void *, const sipTypeDef *);}
static void *cast_Qt_WindowStates(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_Qt_WindowStates)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_Qt_WindowStates(void *, int);}
static void release_Qt_WindowStates(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<Qt::WindowStates *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_Qt_WindowStates(void *, SIP_SSIZE_T, const void *);}
static void assign_Qt_WindowStates(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<Qt::WindowStates *>(sipDst)[sipDstIdx] = *reinterpret_cast<const Qt::WindowStates *>(sipSrc);
}


extern "C" {static void *array_Qt_WindowStates(SIP_SSIZE_T);}
static void *array_Qt_WindowStates(SIP_SSIZE_T sipNrElem)
{
    return new Qt::WindowStates[sipNrElem];
}


extern "C" {static void *copy_Qt_WindowStates(const void *, SIP_SSIZE_T);}
static void *copy_Qt_WindowStates(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new Qt::WindowStates(reinterpret_cast<const Qt::WindowStates *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_Qt_WindowStates(sipSimpleWrapper *);}
static void dealloc_Qt_WindowStates(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_Qt_WindowStates(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_Qt_WindowStates(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_Qt_WindowStates(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    Qt::WindowStates *sipCpp = 0;

    if (!sipCpp)
    {
        const Qt::WindowStates * a0;
        int a0State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1",sipType_Qt_WindowStates,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new Qt::WindowStates(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<Qt::WindowStates *>(a0),sipType_Qt_WindowStates,a0State);
        }
    }

    if (!sipCpp)
    {
        int a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"i",&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new Qt::WindowStates(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new Qt::WindowStates();
            Py_END_ALLOW_THREADS
        }
    }

    return sipCpp;
}


extern "C" {static int convertTo_Qt_WindowStates(PyObject *, void **, int *, PyObject *);}
static int convertTo_Qt_WindowStates(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    Qt::WindowStates **sipCppPtr = reinterpret_cast<Qt::WindowStates **>(sipCppPtrV);

#line 324 "sip/QtCore/qglobal.sip"
// Allow an instance of the base enum whenever a Qt::WindowStates is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_WindowState)) ||
            sipCanConvertToType(sipPy, sipType_Qt_WindowStates, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_WindowState)))
{
    *sipCppPtr = new Qt::WindowStates(SIPLong_AsLong(sipPy));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<Qt::WindowStates *>(sipConvertToType(sipPy, sipType_Qt_WindowStates, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
#line 506 "sipQtCoreQtWindowStates.cpp"
}


/* Define this type's Python slots. */
static sipPySlotDef slots_Qt_WindowStates[] = {
    {(void *)slot_Qt_WindowStates___bool__, bool_slot},
    {(void *)slot_Qt_WindowStates___ne__, ne_slot},
    {(void *)slot_Qt_WindowStates___eq__, eq_slot},
    {(void *)slot_Qt_WindowStates___invert__, invert_slot},
    {(void *)slot_Qt_WindowStates___and__, and_slot},
    {(void *)slot_Qt_WindowStates___xor__, xor_slot},
    {(void *)slot_Qt_WindowStates___or__, or_slot},
    {(void *)slot_Qt_WindowStates___int__, int_slot},
    {(void *)slot_Qt_WindowStates___ixor__, ixor_slot},
    {(void *)slot_Qt_WindowStates___ior__, ior_slot},
    {(void *)slot_Qt_WindowStates___iand__, iand_slot},
    {0, (sipPySlotType)0}
};


pyqt4ClassTypeDef sipTypeDef_QtCore_Qt_WindowStates = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_Qt__WindowStates,
        {0}
    },
    {
        sipNameNr_WindowStates,
        {219, 255, 0},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_Qt_WindowStates,
    init_Qt_WindowStates,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_Qt_WindowStates,
    assign_Qt_WindowStates,
    array_Qt_WindowStates,
    copy_Qt_WindowStates,
    release_Qt_WindowStates,
    cast_Qt_WindowStates,
    convertTo_Qt_WindowStates,
    0,
    0
},
    0,
    1,
    0
};

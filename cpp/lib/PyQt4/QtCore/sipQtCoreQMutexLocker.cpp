/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:19 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 64 "sip/QtCore/qmutex.sip"
#include <qmutex.h>
#line 39 "sipQtCoreQMutexLocker.cpp"

#line 37 "sip/QtCore/qmutex.sip"
#include <qmutex.h>
#line 43 "sipQtCoreQMutexLocker.cpp"


extern "C" {static PyObject *meth_QMutexLocker_unlock(PyObject *, PyObject *);}
static PyObject *meth_QMutexLocker_unlock(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QMutexLocker *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QMutexLocker,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->unlock();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMutexLocker,sipName_unlock);

    return NULL;
}


extern "C" {static PyObject *meth_QMutexLocker_relock(PyObject *, PyObject *);}
static PyObject *meth_QMutexLocker_relock(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QMutexLocker *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QMutexLocker,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->relock();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMutexLocker,sipName_relock);

    return NULL;
}


extern "C" {static PyObject *meth_QMutexLocker_mutex(PyObject *, PyObject *);}
static PyObject *meth_QMutexLocker_mutex(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QMutexLocker *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QMutexLocker,&sipCpp))
        {
            QMutex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->mutex();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QMutex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMutexLocker,sipName_mutex);

    return NULL;
}


extern "C" {static PyObject *meth_QMutexLocker___enter__(PyObject *, PyObject *);}
static PyObject *meth_QMutexLocker___enter__(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QMutexLocker *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QMutexLocker,&sipCpp))
        {
            PyObject * sipRes = 0;

#line 75 "sip/QtCore/qmutex.sip"
        // Just return a reference to self.
        sipRes = sipSelf;
        Py_INCREF(sipRes);
#line 141 "sipQtCoreQMutexLocker.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMutexLocker,sipName___enter__);

    return NULL;
}


extern "C" {static PyObject *meth_QMutexLocker___exit__(PyObject *, PyObject *);}
static PyObject *meth_QMutexLocker___exit__(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        PyObject * a0;
        PyObject * a1;
        PyObject * a2;
        QMutexLocker *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BP0P0P0",&sipSelf,sipType_QMutexLocker,&sipCpp,&a0,&a1,&a2))
        {
#line 82 "sip/QtCore/qmutex.sip"
        sipCpp->unlock();
#line 169 "sipQtCoreQMutexLocker.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QMutexLocker,sipName___exit__);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QMutexLocker(void *, const sipTypeDef *);}
static void *cast_QMutexLocker(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QMutexLocker)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QMutexLocker(void *, int);}
static void release_QMutexLocker(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QMutexLocker *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QMutexLocker(sipSimpleWrapper *);}
static void dealloc_QMutexLocker(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QMutexLocker(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QMutexLocker(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QMutexLocker(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QMutexLocker *sipCpp = 0;

    if (!sipCpp)
    {
        QMutex * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J8",sipType_QMutex,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QMutexLocker(a0);
            Py_END_ALLOW_THREADS
        }
    }

    return sipCpp;
}


static PyMethodDef methods_QMutexLocker[] = {
    {SIP_MLNAME_CAST(sipName___enter__), meth_QMutexLocker___enter__, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName___exit__), meth_QMutexLocker___exit__, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mutex), meth_QMutexLocker_mutex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_relock), meth_QMutexLocker_relock, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_unlock), meth_QMutexLocker_unlock, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QMutexLocker = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QMutexLocker,
        {0}
    },
    {
        sipNameNr_QMutexLocker,
        {0, 0, 1},
        5, methods_QMutexLocker,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QMutexLocker,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QMutexLocker,
    0,
    0,
    0,
    release_QMutexLocker,
    cast_QMutexLocker,
    0,
    0,
    0
},
    0,
    0,
    0
};

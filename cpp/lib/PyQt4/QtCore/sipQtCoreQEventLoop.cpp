/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:19 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 41 "sip/QtCore/qeventloop.sip"
#include <qeventloop.h>
#line 39 "sipQtCoreQEventLoop.cpp"

#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtCoreQEventLoop.cpp"
#line 41 "sip/QtCore/qeventloop.sip"
#include <qeventloop.h>
#line 46 "sipQtCoreQEventLoop.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 49 "sipQtCoreQEventLoop.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 52 "sipQtCoreQEventLoop.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 55 "sipQtCoreQEventLoop.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 58 "sipQtCoreQEventLoop.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 61 "sipQtCoreQEventLoop.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 64 "sipQtCoreQEventLoop.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 67 "sipQtCoreQEventLoop.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 70 "sipQtCoreQEventLoop.cpp"
#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 73 "sipQtCoreQEventLoop.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 76 "sipQtCoreQEventLoop.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 79 "sipQtCoreQEventLoop.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 82 "sipQtCoreQEventLoop.cpp"


class sipQEventLoop : public QEventLoop
{
public:
    sipQEventLoop(QObject *);
    virtual ~sipQEventLoop();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQEventLoop(const sipQEventLoop &);
    sipQEventLoop &operator = (const sipQEventLoop &);

    char sipPyMethods[7];
};

sipQEventLoop::sipQEventLoop(QObject *a0): QEventLoop(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQEventLoop::~sipQEventLoop()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQEventLoop::metaObject() const
{
    return sip_QtCore_qt_metaobject(sipPySelf,sipType_QEventLoop);
}

int sipQEventLoop::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QEventLoop::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QEventLoop,_c,_id,_a);

    return _id;
}

void *sipQEventLoop::qt_metacast(const char *_clname)
{
    return (sip_QtCore_qt_metacast && sip_QtCore_qt_metacast(sipPySelf,sipType_QEventLoop,_clname)) ? this : QEventLoop::qt_metacast(_clname);
}

bool sipQEventLoop::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    extern bool sipVH_QtCore_12(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return sipVH_QtCore_12(sipGILState,meth,0,a0);
}

bool sipQEventLoop::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    extern bool sipVH_QtCore_20(sip_gilstate_t,PyObject *,bool*,QObject *,QEvent *);

    return sipVH_QtCore_20(sipGILState,meth,0,a0,a1);
}

void sipQEventLoop::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t,PyObject *,bool*,QTimerEvent *);

    sipVH_QtCore_3(sipGILState,meth,0,a0);
}

void sipQEventLoop::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_19(sip_gilstate_t,PyObject *,bool*,QChildEvent *);

    sipVH_QtCore_19(sipGILState,meth,0,a0);
}

void sipQEventLoop::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_18(sip_gilstate_t,PyObject *,bool*,QEvent *);

    sipVH_QtCore_18(sipGILState,meth,0,a0);
}

void sipQEventLoop::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t,PyObject *,bool*,const char *);

    sipVH_QtCore_17(sipGILState,meth,0,a0);
}

void sipQEventLoop::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t,PyObject *,bool*,const char *);

    sipVH_QtCore_17(sipGILState,meth,0,a0);
}

int sipQEventLoop::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQEventLoop::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQEventLoop::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQEventLoop::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQEventLoop::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQEventLoop::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}


extern "C" {static PyObject *meth_QEventLoop_receivers(PyObject *, PyObject *);}
static PyObject *meth_QEventLoop_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        char * a0;
        sipQEventLoop *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QEventLoop,&sipCpp,&a0))
        {
            int sipRes = 0;

#line 480 "sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
#line 335 "sipQtCoreQEventLoop.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QEventLoop,sipName_receivers);

    return NULL;
}


extern "C" {static PyObject *meth_QEventLoop_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QEventLoop_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQEventLoop *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QEventLoop,&sipCpp,sipType_QTimerEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QEventLoop,sipName_timerEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QEventLoop_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QEventLoop_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQEventLoop *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QEventLoop,&sipCpp,sipType_QChildEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QEventLoop,sipName_childEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QEventLoop_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QEventLoop_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQEventLoop *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QEventLoop,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QEventLoop,sipName_customEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QEventLoop_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QEventLoop_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQEventLoop *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QEventLoop,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QEventLoop,sipName_connectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QEventLoop_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QEventLoop_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQEventLoop *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QEventLoop,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QEventLoop,sipName_disconnectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QEventLoop_processEvents(PyObject *, PyObject *);}
static PyObject *meth_QEventLoop_processEvents(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QEventLoop::ProcessEventsFlags a0def = QEventLoop::AllEvents;
        QEventLoop::ProcessEventsFlags * a0 = &a0def;
        int a0State = 0;
        QEventLoop *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|J1",&sipSelf,sipType_QEventLoop,&sipCpp,sipType_QEventLoop_ProcessEventsFlags,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->processEvents(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QEventLoop_ProcessEventsFlags,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        QEventLoop::ProcessEventsFlags * a0;
        int a0State = 0;
        int a1;
        QEventLoop *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1i",&sipSelf,sipType_QEventLoop,&sipCpp,sipType_QEventLoop_ProcessEventsFlags,&a0,&a0State,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->processEvents(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QEventLoop_ProcessEventsFlags,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QEventLoop,sipName_processEvents);

    return NULL;
}


extern "C" {static PyObject *meth_QEventLoop_exec_(PyObject *, PyObject *);}
static PyObject *meth_QEventLoop_exec_(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QEventLoop::ProcessEventsFlags a0def = QEventLoop::AllEvents;
        QEventLoop::ProcessEventsFlags * a0 = &a0def;
        int a0State = 0;
        QEventLoop *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|J1",&sipSelf,sipType_QEventLoop,&sipCpp,sipType_QEventLoop_ProcessEventsFlags,&a0,&a0State))
        {
            int sipRes;

            sipCallHook("__pyQtPostEventLoopHook__");

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->exec(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QEventLoop_ProcessEventsFlags,a0State);


            sipCallHook("__pyQtPreEventLoopHook__");
            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QEventLoop,sipName_exec_);

    return NULL;
}


extern "C" {static PyObject *meth_QEventLoop_exit(PyObject *, PyObject *);}
static PyObject *meth_QEventLoop_exit(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0 = 0;
        QEventLoop *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|i",&sipSelf,sipType_QEventLoop,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->exit(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QEventLoop,sipName_exit);

    return NULL;
}


extern "C" {static PyObject *meth_QEventLoop_isRunning(PyObject *, PyObject *);}
static PyObject *meth_QEventLoop_isRunning(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QEventLoop *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QEventLoop,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isRunning();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QEventLoop,sipName_isRunning);

    return NULL;
}


extern "C" {static PyObject *meth_QEventLoop_wakeUp(PyObject *, PyObject *);}
static PyObject *meth_QEventLoop_wakeUp(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QEventLoop *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QEventLoop,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->wakeUp();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QEventLoop,sipName_wakeUp);

    return NULL;
}


extern "C" {static PyObject *meth_QEventLoop_quit(PyObject *, PyObject *);}
static PyObject *meth_QEventLoop_quit(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QEventLoop *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QEventLoop,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->quit();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QEventLoop,sipName_quit);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QEventLoop(void *, const sipTypeDef *);}
static void *cast_QEventLoop(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QEventLoop)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QEventLoop *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QEventLoop(void *, int);}
static void release_QEventLoop(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQEventLoop *>(sipCppV);
    else
        delete reinterpret_cast<QEventLoop *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QEventLoop(sipSimpleWrapper *);}
static void dealloc_QEventLoop(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQEventLoop *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QEventLoop(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QEventLoop(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QEventLoop(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **sipOwner, int *sipArgsParsed)
{
    sipQEventLoop *sipCpp = 0;

    if (!sipCpp)
    {
        QObject * a0 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"|JH",sipType_QObject,&a0,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQEventLoop(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QEventLoop[] = {{111, 255, 1}};


static PyMethodDef methods_QEventLoop[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QEventLoop_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QEventLoop_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QEventLoop_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QEventLoop_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_exec_), meth_QEventLoop_exec_, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_exit), meth_QEventLoop_exit, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isRunning), meth_QEventLoop_isRunning, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_processEvents), meth_QEventLoop_processEvents, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_quit), meth_QEventLoop_quit, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QEventLoop_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QEventLoop_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_wakeUp), meth_QEventLoop_wakeUp, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QEventLoop[] = {
    {sipName_AllEvents, QEventLoop::AllEvents, 49},
    {sipName_DeferredDeletion, QEventLoop::DeferredDeletion, 49},
    {sipName_ExcludeSocketNotifiers, QEventLoop::ExcludeSocketNotifiers, 49},
    {sipName_ExcludeUserInputEvents, QEventLoop::ExcludeUserInputEvents, 49},
    {sipName_WaitForMoreEvents, QEventLoop::WaitForMoreEvents, 49},
    {sipName_X11ExcludeTimers, QEventLoop::X11ExcludeTimers, 49},
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QEventLoop = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QEventLoop,
        {0}
    },
    {
        sipNameNr_QEventLoop,
        {0, 0, 1},
        12, methods_QEventLoop,
        6, enummembers_QEventLoop,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QEventLoop,
    0,
    init_QEventLoop,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QEventLoop,
    0,
    0,
    0,
    release_QEventLoop,
    cast_QEventLoop,
    0,
    0,
    0
},
    &QEventLoop::staticMetaObject,
    0,
    0
};

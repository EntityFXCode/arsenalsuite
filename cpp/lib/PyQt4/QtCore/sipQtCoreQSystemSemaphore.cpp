/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:19 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 39 "sip/QtCore/qsystemsemaphore.sip"
#include <qsystemsemaphore.h>
#line 39 "sipQtCoreQSystemSemaphore.cpp"

#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 43 "sipQtCoreQSystemSemaphore.cpp"


extern "C" {static PyObject *meth_QSystemSemaphore_setKey(PyObject *, PyObject *);}
static PyObject *meth_QSystemSemaphore_setKey(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        int a1 = 0;
        QSystemSemaphore::AccessMode a2 = QSystemSemaphore::Open;
        QSystemSemaphore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|iE",&sipSelf,sipType_QSystemSemaphore,&sipCpp,sipType_QString,&a0,&a0State,&a1,sipType_QSystemSemaphore_AccessMode,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setKey(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSystemSemaphore,sipName_setKey);

    return NULL;
}


extern "C" {static PyObject *meth_QSystemSemaphore_key(PyObject *, PyObject *);}
static PyObject *meth_QSystemSemaphore_key(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QSystemSemaphore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSystemSemaphore,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->key());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSystemSemaphore,sipName_key);

    return NULL;
}


extern "C" {static PyObject *meth_QSystemSemaphore_acquire(PyObject *, PyObject *);}
static PyObject *meth_QSystemSemaphore_acquire(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QSystemSemaphore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSystemSemaphore,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->acquire();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSystemSemaphore,sipName_acquire);

    return NULL;
}


extern "C" {static PyObject *meth_QSystemSemaphore_release(PyObject *, PyObject *);}
static PyObject *meth_QSystemSemaphore_release(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0 = 1;
        QSystemSemaphore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|i",&sipSelf,sipType_QSystemSemaphore,&sipCpp,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->release(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSystemSemaphore,sipName_release);

    return NULL;
}


extern "C" {static PyObject *meth_QSystemSemaphore_error(PyObject *, PyObject *);}
static PyObject *meth_QSystemSemaphore_error(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QSystemSemaphore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSystemSemaphore,&sipCpp))
        {
            QSystemSemaphore::SystemSemaphoreError sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->error();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QSystemSemaphore_SystemSemaphoreError);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSystemSemaphore,sipName_error);

    return NULL;
}


extern "C" {static PyObject *meth_QSystemSemaphore_errorString(PyObject *, PyObject *);}
static PyObject *meth_QSystemSemaphore_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QSystemSemaphore *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QSystemSemaphore,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->errorString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QSystemSemaphore,sipName_errorString);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QSystemSemaphore(void *, const sipTypeDef *);}
static void *cast_QSystemSemaphore(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QSystemSemaphore)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QSystemSemaphore(void *, int);}
static void release_QSystemSemaphore(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QSystemSemaphore *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QSystemSemaphore(sipSimpleWrapper *);}
static void dealloc_QSystemSemaphore(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QSystemSemaphore(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QSystemSemaphore(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QSystemSemaphore(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QSystemSemaphore *sipCpp = 0;

    if (!sipCpp)
    {
        const QString * a0;
        int a0State = 0;
        int a1 = 0;
        QSystemSemaphore::AccessMode a2 = QSystemSemaphore::Open;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1|iE",sipType_QString,&a0,&a0State,&a1,sipType_QSystemSemaphore_AccessMode,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QSystemSemaphore(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
        }
    }

    return sipCpp;
}


static PyMethodDef methods_QSystemSemaphore[] = {
    {SIP_MLNAME_CAST(sipName_acquire), meth_QSystemSemaphore_acquire, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_error), meth_QSystemSemaphore_error, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QSystemSemaphore_errorString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_key), meth_QSystemSemaphore_key, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_release), meth_QSystemSemaphore_release, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setKey), meth_QSystemSemaphore_setKey, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QSystemSemaphore[] = {
    {sipName_AlreadyExists, QSystemSemaphore::AlreadyExists, 162},
    {sipName_Create, QSystemSemaphore::Create, 161},
    {sipName_KeyError, QSystemSemaphore::KeyError, 162},
    {sipName_NoError, QSystemSemaphore::NoError, 162},
    {sipName_NotFound, QSystemSemaphore::NotFound, 162},
    {sipName_Open, QSystemSemaphore::Open, 161},
    {sipName_OutOfResources, QSystemSemaphore::OutOfResources, 162},
    {sipName_PermissionDenied, QSystemSemaphore::PermissionDenied, 162},
    {sipName_UnknownError, QSystemSemaphore::UnknownError, 162},
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QSystemSemaphore = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QSystemSemaphore,
        {0}
    },
    {
        sipNameNr_QSystemSemaphore,
        {0, 0, 1},
        6, methods_QSystemSemaphore,
        9, enummembers_QSystemSemaphore,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QSystemSemaphore,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QSystemSemaphore,
    0,
    0,
    0,
    release_QSystemSemaphore,
    cast_QSystemSemaphore,
    0,
    0,
    0
},
    0,
    0,
    0
};

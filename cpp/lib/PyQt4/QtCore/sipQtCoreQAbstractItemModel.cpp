/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:19 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 128 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 39 "sipQtCoreQAbstractItemModel.cpp"

#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtCoreQAbstractItemModel.cpp"
#line 37 "sip/QtCore/qabstractitemmodel.sip"
#include <qabstractitemmodel.h>
#line 46 "sipQtCoreQAbstractItemModel.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 49 "sipQtCoreQAbstractItemModel.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 52 "sipQtCoreQAbstractItemModel.cpp"
#line 37 "sip/QtCore/qdatastream.sip"
#include <qdatastream.h>
#line 55 "sipQtCoreQAbstractItemModel.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 58 "sipQtCoreQAbstractItemModel.cpp"
#line 41 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 61 "sipQtCoreQAbstractItemModel.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 64 "sipQtCoreQAbstractItemModel.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 67 "sipQtCoreQAbstractItemModel.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 70 "sipQtCoreQAbstractItemModel.cpp"
#line 37 "sip/QtCore/qmimedata.sip"
#include <qmimedata.h>
#line 73 "sipQtCoreQAbstractItemModel.cpp"
#line 41 "sip/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 76 "sipQtCoreQAbstractItemModel.cpp"
#line 149 "sip/QtCore/qmap.sip"
#include <qmap.h>
#line 79 "sipQtCoreQAbstractItemModel.cpp"
#line 131 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 82 "sipQtCoreQAbstractItemModel.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 85 "sipQtCoreQAbstractItemModel.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 88 "sipQtCoreQAbstractItemModel.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 91 "sipQtCoreQAbstractItemModel.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 94 "sipQtCoreQAbstractItemModel.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 97 "sipQtCoreQAbstractItemModel.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 100 "sipQtCoreQAbstractItemModel.cpp"
#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 103 "sipQtCoreQAbstractItemModel.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 106 "sipQtCoreQAbstractItemModel.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 109 "sipQtCoreQAbstractItemModel.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 112 "sipQtCoreQAbstractItemModel.cpp"


class sipQAbstractItemModel : public QAbstractItemModel
{
public:
    sipQAbstractItemModel(QObject *);
    virtual ~sipQAbstractItemModel();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    void sipProtect_encodeData(const QModelIndexList&,QDataStream&) const;
    bool sipProtect_decodeData(int,int,const QModelIndex&,QDataStream&);
    void sipProtect_beginInsertRows(const QModelIndex&,int,int);
    void sipProtect_endInsertRows();
    void sipProtect_beginRemoveRows(const QModelIndex&,int,int);
    void sipProtect_endRemoveRows();
    void sipProtect_beginInsertColumns(const QModelIndex&,int,int);
    void sipProtect_endInsertColumns();
    void sipProtect_beginRemoveColumns(const QModelIndex&,int,int);
    void sipProtect_endRemoveColumns();
    QModelIndexList sipProtect_persistentIndexList() const;
    void sipProtect_reset();
    void sipProtect_changePersistentIndex(const QModelIndex&,const QModelIndex&);
    void sipProtect_changePersistentIndexList(const QModelIndexList&,const QModelIndexList&);
    QModelIndex sipProtect_createIndex(int,int,void *) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    QModelIndex index(int,int,const QModelIndex&) const;
    QModelIndex parent(const QModelIndex&) const;
    int rowCount(const QModelIndex&) const;
    int columnCount(const QModelIndex&) const;
    bool hasChildren(const QModelIndex&) const;
    QVariant data(const QModelIndex&,int) const;
    bool setData(const QModelIndex&,const QVariant&,int);
    QVariant headerData(int,Qt::Orientation,int) const;
    bool setHeaderData(int,Qt::Orientation,const QVariant&,int);
    QMap<int,QVariant> itemData(const QModelIndex&) const;
    bool setItemData(const QModelIndex&,const QMap<int,QVariant>&);
    QStringList mimeTypes() const;
    QMimeData * mimeData(const QModelIndexList&) const;
    bool dropMimeData(const QMimeData *,Qt::DropAction,int,int,const QModelIndex&);
    Qt::DropActions supportedDropActions() const;
    bool insertRows(int,int,const QModelIndex&);
    bool insertColumns(int,int,const QModelIndex&);
    bool removeRows(int,int,const QModelIndex&);
    bool removeColumns(int,int,const QModelIndex&);
    void fetchMore(const QModelIndex&);
    bool canFetchMore(const QModelIndex&) const;
    Qt::ItemFlags flags(const QModelIndex&) const;
    void sort(int,Qt::SortOrder);
    QModelIndex buddy(const QModelIndex&) const;
    QModelIndexList match(const QModelIndex&,int,const QVariant&,int,Qt::MatchFlags) const;
    QSize span(const QModelIndex&) const;
    bool submit();
    void revert();
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQAbstractItemModel(const sipQAbstractItemModel &);
    sipQAbstractItemModel &operator = (const sipQAbstractItemModel &);

    char sipPyMethods[35];
};

sipQAbstractItemModel::sipQAbstractItemModel(QObject *a0): QAbstractItemModel(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQAbstractItemModel::~sipQAbstractItemModel()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQAbstractItemModel::metaObject() const
{
    return sip_QtCore_qt_metaobject(sipPySelf,sipType_QAbstractItemModel);
}

int sipQAbstractItemModel::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QAbstractItemModel::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QAbstractItemModel,_c,_id,_a);

    return _id;
}

void *sipQAbstractItemModel::qt_metacast(const char *_clname)
{
    return (sip_QtCore_qt_metacast && sip_QtCore_qt_metacast(sipPySelf,sipType_QAbstractItemModel,_clname)) ? this : QAbstractItemModel::qt_metacast(_clname);
}

QModelIndex sipQAbstractItemModel::index(int a0,int a1,const QModelIndex& a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,sipName_QAbstractItemModel,sipName_index);

    if (!meth)
        return QModelIndex();

    extern QModelIndex sipVH_QtCore_41(sip_gilstate_t,PyObject *,bool*,int,int,const QModelIndex&);

    return sipVH_QtCore_41(sipGILState,meth,0,a0,a1,a2);
}

QModelIndex sipQAbstractItemModel::parent(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,sipName_QAbstractItemModel,sipName_parent);

    if (!meth)
        return QModelIndex();

    extern QModelIndex sipVH_QtCore_39(sip_gilstate_t,PyObject *,bool*,const QModelIndex&);

    return sipVH_QtCore_39(sipGILState,meth,0,a0);
}

int sipQAbstractItemModel::rowCount(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,sipName_QAbstractItemModel,sipName_rowCount);

    if (!meth)
        return 0;

    extern int sipVH_QtCore_38(sip_gilstate_t,PyObject *,bool*,const QModelIndex&);

    return sipVH_QtCore_38(sipGILState,meth,0,a0);
}

int sipQAbstractItemModel::columnCount(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,sipName_QAbstractItemModel,sipName_columnCount);

    if (!meth)
        return 0;

    extern int sipVH_QtCore_38(sip_gilstate_t,PyObject *,bool*,const QModelIndex&);

    return sipVH_QtCore_38(sipGILState,meth,0,a0);
}

bool sipQAbstractItemModel::hasChildren(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_hasChildren);

    if (!meth)
        return QAbstractItemModel::hasChildren(a0);

    extern bool sipVH_QtCore_37(sip_gilstate_t,PyObject *,bool*,const QModelIndex&);

    return sipVH_QtCore_37(sipGILState,meth,0,a0);
}

QVariant sipQAbstractItemModel::data(const QModelIndex& a0,int a1) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,sipName_QAbstractItemModel,sipName_data);

    if (!meth)
        return QVariant();

    extern QVariant sipVH_QtCore_55(sip_gilstate_t,PyObject *,bool*,const QModelIndex&,int);

    return sipVH_QtCore_55(sipGILState,meth,0,a0,a1);
}

bool sipQAbstractItemModel::setData(const QModelIndex& a0,const QVariant& a1,int a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_setData);

    if (!meth)
        return QAbstractItemModel::setData(a0,a1,a2);

    extern bool sipVH_QtCore_54(sip_gilstate_t,PyObject *,bool*,const QModelIndex&,const QVariant&,int);

    return sipVH_QtCore_54(sipGILState,meth,0,a0,a1,a2);
}

QVariant sipQAbstractItemModel::headerData(int a0,Qt::Orientation a1,int a2) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_headerData);

    if (!meth)
        return QAbstractItemModel::headerData(a0,a1,a2);

    extern QVariant sipVH_QtCore_53(sip_gilstate_t,PyObject *,bool*,int,Qt::Orientation,int);

    return sipVH_QtCore_53(sipGILState,meth,0,a0,a1,a2);
}

bool sipQAbstractItemModel::setHeaderData(int a0,Qt::Orientation a1,const QVariant& a2,int a3)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_setHeaderData);

    if (!meth)
        return QAbstractItemModel::setHeaderData(a0,a1,a2,a3);

    extern bool sipVH_QtCore_52(sip_gilstate_t,PyObject *,bool*,int,Qt::Orientation,const QVariant&,int);

    return sipVH_QtCore_52(sipGILState,meth,0,a0,a1,a2,a3);
}

QMap<int,QVariant> sipQAbstractItemModel::itemData(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_itemData);

    if (!meth)
        return QAbstractItemModel::itemData(a0);

    extern QMap<int,QVariant> sipVH_QtCore_51(sip_gilstate_t,PyObject *,bool*,const QModelIndex&);

    return sipVH_QtCore_51(sipGILState,meth,0,a0);
}

bool sipQAbstractItemModel::setItemData(const QModelIndex& a0,const QMap<int,QVariant>& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_setItemData);

    if (!meth)
        return QAbstractItemModel::setItemData(a0,a1);

    extern bool sipVH_QtCore_50(sip_gilstate_t,PyObject *,bool*,const QModelIndex&,const QMap<int,QVariant>&);

    return sipVH_QtCore_50(sipGILState,meth,0,a0,a1);
}

QStringList sipQAbstractItemModel::mimeTypes() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_mimeTypes);

    if (!meth)
        return QAbstractItemModel::mimeTypes();

    extern QStringList sipVH_QtCore_22(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtCore_22(sipGILState,meth,0);
}

QMimeData * sipQAbstractItemModel::mimeData(const QModelIndexList& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_mimeData);

    if (!meth)
        return QAbstractItemModel::mimeData(a0);

    extern QMimeData * sipVH_QtCore_49(sip_gilstate_t,PyObject *,bool*,const QList<QModelIndex>&);

    return sipVH_QtCore_49(sipGILState,meth,0,a0);
}

bool sipQAbstractItemModel::dropMimeData(const QMimeData *a0,Qt::DropAction a1,int a2,int a3,const QModelIndex& a4)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_dropMimeData);

    if (!meth)
        return QAbstractItemModel::dropMimeData(a0,a1,a2,a3,a4);

    extern bool sipVH_QtCore_40(sip_gilstate_t,PyObject *,bool*,const QMimeData *,Qt::DropAction,int,int,const QModelIndex&);

    return sipVH_QtCore_40(sipGILState,meth,0,a0,a1,a2,a3,a4);
}

Qt::DropActions sipQAbstractItemModel::supportedDropActions() const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_supportedDropActions);

    if (!meth)
        return QAbstractItemModel::supportedDropActions();

    extern Qt::DropActions sipVH_QtCore_48(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtCore_48(sipGILState,meth,0);
}

bool sipQAbstractItemModel::insertRows(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_insertRows);

    if (!meth)
        return QAbstractItemModel::insertRows(a0,a1,a2);

    extern bool sipVH_QtCore_47(sip_gilstate_t,PyObject *,bool*,int,int,const QModelIndex&);

    return sipVH_QtCore_47(sipGILState,meth,0,a0,a1,a2);
}

bool sipQAbstractItemModel::insertColumns(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_insertColumns);

    if (!meth)
        return QAbstractItemModel::insertColumns(a0,a1,a2);

    extern bool sipVH_QtCore_47(sip_gilstate_t,PyObject *,bool*,int,int,const QModelIndex&);

    return sipVH_QtCore_47(sipGILState,meth,0,a0,a1,a2);
}

bool sipQAbstractItemModel::removeRows(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_removeRows);

    if (!meth)
        return QAbstractItemModel::removeRows(a0,a1,a2);

    extern bool sipVH_QtCore_47(sip_gilstate_t,PyObject *,bool*,int,int,const QModelIndex&);

    return sipVH_QtCore_47(sipGILState,meth,0,a0,a1,a2);
}

bool sipQAbstractItemModel::removeColumns(int a0,int a1,const QModelIndex& a2)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_removeColumns);

    if (!meth)
        return QAbstractItemModel::removeColumns(a0,a1,a2);

    extern bool sipVH_QtCore_47(sip_gilstate_t,PyObject *,bool*,int,int,const QModelIndex&);

    return sipVH_QtCore_47(sipGILState,meth,0,a0,a1,a2);
}

void sipQAbstractItemModel::fetchMore(const QModelIndex& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_fetchMore);

    if (!meth)
    {
        QAbstractItemModel::fetchMore(a0);
        return;
    }

    extern void sipVH_QtCore_46(sip_gilstate_t,PyObject *,bool*,const QModelIndex&);

    sipVH_QtCore_46(sipGILState,meth,0,a0);
}

bool sipQAbstractItemModel::canFetchMore(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_canFetchMore);

    if (!meth)
        return QAbstractItemModel::canFetchMore(a0);

    extern bool sipVH_QtCore_37(sip_gilstate_t,PyObject *,bool*,const QModelIndex&);

    return sipVH_QtCore_37(sipGILState,meth,0,a0);
}

Qt::ItemFlags sipQAbstractItemModel::flags(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_flags);

    if (!meth)
        return QAbstractItemModel::flags(a0);

    extern Qt::ItemFlags sipVH_QtCore_45(sip_gilstate_t,PyObject *,bool*,const QModelIndex&);

    return sipVH_QtCore_45(sipGILState,meth,0,a0);
}

void sipQAbstractItemModel::sort(int a0,Qt::SortOrder a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_sort);

    if (!meth)
    {
        QAbstractItemModel::sort(a0,a1);
        return;
    }

    extern void sipVH_QtCore_44(sip_gilstate_t,PyObject *,bool*,int,Qt::SortOrder);

    sipVH_QtCore_44(sipGILState,meth,0,a0,a1);
}

QModelIndex sipQAbstractItemModel::buddy(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_buddy);

    if (!meth)
        return QAbstractItemModel::buddy(a0);

    extern QModelIndex sipVH_QtCore_39(sip_gilstate_t,PyObject *,bool*,const QModelIndex&);

    return sipVH_QtCore_39(sipGILState,meth,0,a0);
}

QModelIndexList sipQAbstractItemModel::match(const QModelIndex& a0,int a1,const QVariant& a2,int a3,Qt::MatchFlags a4) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_match);

    if (!meth)
        return QAbstractItemModel::match(a0,a1,a2,a3,a4);

    extern QList<QModelIndex> sipVH_QtCore_43(sip_gilstate_t,PyObject *,bool*,const QModelIndex&,int,const QVariant&,int,Qt::MatchFlags);

    return sipVH_QtCore_43(sipGILState,meth,0,a0,a1,a2,a3,a4);
}

QSize sipQAbstractItemModel::span(const QModelIndex& a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_span);

    if (!meth)
        return QAbstractItemModel::span(a0);

    extern QSize sipVH_QtCore_42(sip_gilstate_t,PyObject *,bool*,const QModelIndex&);

    return sipVH_QtCore_42(sipGILState,meth,0,a0);
}

bool sipQAbstractItemModel::submit()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_submit);

    if (!meth)
        return QAbstractItemModel::submit();

    extern bool sipVH_QtCore_1(sip_gilstate_t,PyObject *,bool*);

    return sipVH_QtCore_1(sipGILState,meth,0);
}

void sipQAbstractItemModel::revert()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_revert);

    if (!meth)
    {
        QAbstractItemModel::revert();
        return;
    }

    extern void sipVH_QtCore_5(sip_gilstate_t,PyObject *,bool*);

    sipVH_QtCore_5(sipGILState,meth,0);
}

bool sipQAbstractItemModel::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    extern bool sipVH_QtCore_12(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return sipVH_QtCore_12(sipGILState,meth,0,a0);
}

bool sipQAbstractItemModel::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    extern bool sipVH_QtCore_20(sip_gilstate_t,PyObject *,bool*,QObject *,QEvent *);

    return sipVH_QtCore_20(sipGILState,meth,0,a0,a1);
}

void sipQAbstractItemModel::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t,PyObject *,bool*,QTimerEvent *);

    sipVH_QtCore_3(sipGILState,meth,0,a0);
}

void sipQAbstractItemModel::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_19(sip_gilstate_t,PyObject *,bool*,QChildEvent *);

    sipVH_QtCore_19(sipGILState,meth,0,a0);
}

void sipQAbstractItemModel::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_18(sip_gilstate_t,PyObject *,bool*,QEvent *);

    sipVH_QtCore_18(sipGILState,meth,0,a0);
}

void sipQAbstractItemModel::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t,PyObject *,bool*,const char *);

    sipVH_QtCore_17(sipGILState,meth,0,a0);
}

void sipQAbstractItemModel::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t,PyObject *,bool*,const char *);

    sipVH_QtCore_17(sipGILState,meth,0,a0);
}

int sipQAbstractItemModel::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQAbstractItemModel::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQAbstractItemModel::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQAbstractItemModel::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQAbstractItemModel::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQAbstractItemModel::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

void sipQAbstractItemModel::sipProtect_encodeData(const QModelIndexList& a0,QDataStream& a1) const
{
    QAbstractItemModel::encodeData(a0,a1);
}

bool sipQAbstractItemModel::sipProtect_decodeData(int a0,int a1,const QModelIndex& a2,QDataStream& a3)
{
    return QAbstractItemModel::decodeData(a0,a1,a2,a3);
}

void sipQAbstractItemModel::sipProtect_beginInsertRows(const QModelIndex& a0,int a1,int a2)
{
    QAbstractItemModel::beginInsertRows(a0,a1,a2);
}

void sipQAbstractItemModel::sipProtect_endInsertRows()
{
    QAbstractItemModel::endInsertRows();
}

void sipQAbstractItemModel::sipProtect_beginRemoveRows(const QModelIndex& a0,int a1,int a2)
{
    QAbstractItemModel::beginRemoveRows(a0,a1,a2);
}

void sipQAbstractItemModel::sipProtect_endRemoveRows()
{
    QAbstractItemModel::endRemoveRows();
}

void sipQAbstractItemModel::sipProtect_beginInsertColumns(const QModelIndex& a0,int a1,int a2)
{
    QAbstractItemModel::beginInsertColumns(a0,a1,a2);
}

void sipQAbstractItemModel::sipProtect_endInsertColumns()
{
    QAbstractItemModel::endInsertColumns();
}

void sipQAbstractItemModel::sipProtect_beginRemoveColumns(const QModelIndex& a0,int a1,int a2)
{
    QAbstractItemModel::beginRemoveColumns(a0,a1,a2);
}

void sipQAbstractItemModel::sipProtect_endRemoveColumns()
{
    QAbstractItemModel::endRemoveColumns();
}

QModelIndexList sipQAbstractItemModel::sipProtect_persistentIndexList() const
{
    return QAbstractItemModel::persistentIndexList();
}

void sipQAbstractItemModel::sipProtect_reset()
{
    QAbstractItemModel::reset();
}

void sipQAbstractItemModel::sipProtect_changePersistentIndex(const QModelIndex& a0,const QModelIndex& a1)
{
    QAbstractItemModel::changePersistentIndex(a0,a1);
}

void sipQAbstractItemModel::sipProtect_changePersistentIndexList(const QModelIndexList& a0,const QModelIndexList& a1)
{
    QAbstractItemModel::changePersistentIndexList(a0,a1);
}

QModelIndex sipQAbstractItemModel::sipProtect_createIndex(int a0,int a1,void *a2) const
{
    return QAbstractItemModel::createIndex(a0,a1,a2);
}


extern "C" {static PyObject *meth_QAbstractItemModel_receivers(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        char * a0;
        sipQAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QAbstractItemModel,&sipCpp,&a0))
        {
            int sipRes = 0;

#line 480 "sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
#line 912 "sipQtCoreQAbstractItemModel.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_receivers);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QAbstractItemModel,&sipCpp,sipType_QTimerEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_timerEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QAbstractItemModel,&sipCpp,sipType_QChildEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_childEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QAbstractItemModel,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_customEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QAbstractItemModel,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_connectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QAbstractItemModel,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_disconnectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_hasIndex(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_hasIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex * a2 = &a2def;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii|J9",&sipSelf,sipType_QAbstractItemModel,&sipCpp,&a0,&a1,sipType_QModelIndex,&a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasIndex(a0,a1,*a2);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_hasIndex);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_index(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_index(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex * a2 = &a2def;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii|J9",&sipSelf,sipType_QAbstractItemModel,&sipCpp,&a0,&a1,sipType_QModelIndex,&a2))
        {
            QModelIndex *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemModel, sipName_index);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->index(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_index);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_parent(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_parent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QModelIndex * a0;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QAbstractItemModel,&sipCpp,sipType_QModelIndex,&a0))
        {
            QModelIndex *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemModel, sipName_parent);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->parent(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    {
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QAbstractItemModel,&sipCpp))
        {
            QObject *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->parent();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_parent);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_sibling(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_sibling(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        const QModelIndex * a2;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiiJ9",&sipSelf,sipType_QAbstractItemModel,&sipCpp,&a0,&a1,sipType_QModelIndex,&a2))
        {
            QModelIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex(sipCpp->sibling(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_sibling);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_rowCount(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_rowCount(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QModelIndex& a0def = QModelIndex();
        const QModelIndex * a0 = &a0def;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|J9",&sipSelf,sipType_QAbstractItemModel,&sipCpp,sipType_QModelIndex,&a0))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemModel, sipName_rowCount);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->rowCount(*a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_rowCount);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_columnCount(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_columnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QModelIndex& a0def = QModelIndex();
        const QModelIndex * a0 = &a0def;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|J9",&sipSelf,sipType_QAbstractItemModel,&sipCpp,sipType_QModelIndex,&a0))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemModel, sipName_columnCount);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->columnCount(*a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_columnCount);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_hasChildren(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_hasChildren(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex& a0def = QModelIndex();
        const QModelIndex * a0 = &a0def;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|J9",&sipSelf,sipType_QAbstractItemModel,&sipCpp,sipType_QModelIndex,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractItemModel::hasChildren(*a0) : sipCpp->hasChildren(*a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_hasChildren);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_data(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_data(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    PyObject *sipOrigSelf = sipSelf;

    {
        const QModelIndex * a0;
        int a1 = Qt::DisplayRole;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9|i",&sipSelf,sipType_QAbstractItemModel,&sipCpp,sipType_QModelIndex,&a0,&a1))
        {
            QVariant *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_QAbstractItemModel, sipName_data);
                return NULL;
            }

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant(sipCpp->data(*a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_data);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_setData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_setData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        const QVariant * a1;
        int a1State = 0;
        int a2 = Qt::EditRole;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9J1|i",&sipSelf,sipType_QAbstractItemModel,&sipCpp,sipType_QModelIndex,&a0,sipType_QVariant,&a1,&a1State,&a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractItemModel::setData(*a0,*a1,a2) : sipCpp->setData(*a0,*a1,a2));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QVariant *>(a1),sipType_QVariant,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_setData);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_headerData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_headerData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        Qt::Orientation a1;
        int a2 = Qt::DisplayRole;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiE|i",&sipSelf,sipType_QAbstractItemModel,&sipCpp,&a0,sipType_Qt_Orientation,&a1,&a2))
        {
            QVariant *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QVariant((sipSelfWasArg ? sipCpp->QAbstractItemModel::headerData(a0,a1,a2) : sipCpp->headerData(a0,a1,a2)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_headerData);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_setHeaderData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_setHeaderData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        Qt::Orientation a1;
        const QVariant * a2;
        int a2State = 0;
        int a3 = Qt::EditRole;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BiEJ1|i",&sipSelf,sipType_QAbstractItemModel,&sipCpp,&a0,sipType_Qt_Orientation,&a1,sipType_QVariant,&a2,&a2State,&a3))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractItemModel::setHeaderData(a0,a1,*a2,a3) : sipCpp->setHeaderData(a0,a1,*a2,a3));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QVariant *>(a2),sipType_QVariant,a2State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_setHeaderData);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_itemData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_itemData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QAbstractItemModel,&sipCpp,sipType_QModelIndex,&a0))
        {
            QMap<int,QVariant> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMap<int,QVariant>((sipSelfWasArg ? sipCpp->QAbstractItemModel::itemData(*a0) : sipCpp->itemData(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMap_1800_0100QVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_itemData);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_setItemData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_setItemData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        const QMap<int,QVariant> * a1;
        int a1State = 0;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9J1",&sipSelf,sipType_QAbstractItemModel,&sipCpp,sipType_QModelIndex,&a0,sipType_QMap_1800_0100QVariant,&a1,&a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractItemModel::setItemData(*a0,*a1) : sipCpp->setItemData(*a0,*a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QMap<int,QVariant> *>(a1),sipType_QMap_1800_0100QVariant,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_setItemData);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_mimeTypes(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_mimeTypes(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QAbstractItemModel,&sipCpp))
        {
            QStringList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringList((sipSelfWasArg ? sipCpp->QAbstractItemModel::mimeTypes() : sipCpp->mimeTypes()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_mimeTypes);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_mimeData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_mimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndexList * a0;
        int a0State = 0;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QAbstractItemModel,&sipCpp,sipType_QList_0100QModelIndex,&a0,&a0State))
        {
            QMimeData *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractItemModel::mimeData(*a0) : sipCpp->mimeData(*a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QModelIndexList *>(a0),sipType_QList_0100QModelIndex,a0State);

            return sipConvertFromType(sipRes,sipType_QMimeData,Py_None);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_mimeData);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_dropMimeData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_dropMimeData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QMimeData * a0;
        Qt::DropAction a1;
        int a2;
        int a3;
        const QModelIndex * a4;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8EiiJ9",&sipSelf,sipType_QAbstractItemModel,&sipCpp,sipType_QMimeData,&a0,sipType_Qt_DropAction,&a1,&a2,&a3,sipType_QModelIndex,&a4))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractItemModel::dropMimeData(a0,a1,a2,a3,*a4) : sipCpp->dropMimeData(a0,a1,a2,a3,*a4));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_dropMimeData);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_supportedDropActions(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_supportedDropActions(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QAbstractItemModel,&sipCpp))
        {
            Qt::DropActions *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::DropActions((sipSelfWasArg ? sipCpp->QAbstractItemModel::supportedDropActions() : sipCpp->supportedDropActions()));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_supportedDropActions);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_insertRows(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_insertRows(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex * a2 = &a2def;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii|J9",&sipSelf,sipType_QAbstractItemModel,&sipCpp,&a0,&a1,sipType_QModelIndex,&a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractItemModel::insertRows(a0,a1,*a2) : sipCpp->insertRows(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_insertRows);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_insertColumns(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_insertColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex * a2 = &a2def;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii|J9",&sipSelf,sipType_QAbstractItemModel,&sipCpp,&a0,&a1,sipType_QModelIndex,&a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractItemModel::insertColumns(a0,a1,*a2) : sipCpp->insertColumns(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_insertColumns);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_removeRows(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_removeRows(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex * a2 = &a2def;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii|J9",&sipSelf,sipType_QAbstractItemModel,&sipCpp,&a0,&a1,sipType_QModelIndex,&a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractItemModel::removeRows(a0,a1,*a2) : sipCpp->removeRows(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_removeRows);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_removeColumns(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_removeColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        int a1;
        const QModelIndex& a2def = QModelIndex();
        const QModelIndex * a2 = &a2def;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii|J9",&sipSelf,sipType_QAbstractItemModel,&sipCpp,&a0,&a1,sipType_QModelIndex,&a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractItemModel::removeColumns(a0,a1,*a2) : sipCpp->removeColumns(a0,a1,*a2));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_removeColumns);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_fetchMore(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_fetchMore(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QAbstractItemModel,&sipCpp,sipType_QModelIndex,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemModel::fetchMore(*a0) : sipCpp->fetchMore(*a0));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_fetchMore);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_canFetchMore(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_canFetchMore(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QAbstractItemModel,&sipCpp,sipType_QModelIndex,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractItemModel::canFetchMore(*a0) : sipCpp->canFetchMore(*a0));
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_canFetchMore);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_flags(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_flags(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QAbstractItemModel,&sipCpp,sipType_QModelIndex,&a0))
        {
            Qt::ItemFlags *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::ItemFlags((sipSelfWasArg ? sipCpp->QAbstractItemModel::flags(*a0) : sipCpp->flags(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_ItemFlags,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_flags);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_sort(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_sort(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        Qt::SortOrder a1 = Qt::AscendingOrder;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi|E",&sipSelf,sipType_QAbstractItemModel,&sipCpp,&a0,sipType_Qt_SortOrder,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemModel::sort(a0,a1) : sipCpp->sort(a0,a1));
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_sort);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_buddy(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_buddy(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QAbstractItemModel,&sipCpp,sipType_QModelIndex,&a0))
        {
            QModelIndex *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndex((sipSelfWasArg ? sipCpp->QAbstractItemModel::buddy(*a0) : sipCpp->buddy(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_buddy);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_match(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_match(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        int a1;
        const QVariant * a2;
        int a2State = 0;
        int a3 = 1;
        Qt::MatchFlags a4def = Qt::MatchStartsWith | Qt::MatchWrap;
        Qt::MatchFlags * a4 = &a4def;
        int a4State = 0;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9iJ1|iJ1",&sipSelf,sipType_QAbstractItemModel,&sipCpp,sipType_QModelIndex,&a0,&a1,sipType_QVariant,&a2,&a2State,&a3,sipType_Qt_MatchFlags,&a4,&a4State))
        {
            QModelIndexList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndexList((sipSelfWasArg ? sipCpp->QAbstractItemModel::match(*a0,a1,*a2,a3,*a4) : sipCpp->match(*a0,a1,*a2,a3,*a4)));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QVariant *>(a2),sipType_QVariant,a2State);
            sipReleaseType(a4,sipType_Qt_MatchFlags,a4State);

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_match);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_span(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_span(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const QModelIndex * a0;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QAbstractItemModel,&sipCpp,sipType_QModelIndex,&a0))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize((sipSelfWasArg ? sipCpp->QAbstractItemModel::span(*a0) : sipCpp->span(*a0)));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_span);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_submit(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_submit(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QAbstractItemModel,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp->QAbstractItemModel::submit() : sipCpp->submit());
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_submit);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_revert(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_revert(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QAbstractItemModel,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp->QAbstractItemModel::revert() : sipCpp->revert());
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_revert);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_encodeData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_encodeData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndexList * a0;
        int a0State = 0;
        QDataStream * a1;
        sipQAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ1J9",&sipSelf,sipType_QAbstractItemModel,&sipCpp,sipType_QList_0100QModelIndex,&a0,&a0State,sipType_QDataStream,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_encodeData(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QModelIndexList *>(a0),sipType_QList_0100QModelIndex,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_encodeData);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_decodeData(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_decodeData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        const QModelIndex * a2;
        QDataStream * a3;
        sipQAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"piiJ9J9",&sipSelf,sipType_QAbstractItemModel,&sipCpp,&a0,&a1,sipType_QModelIndex,&a2,sipType_QDataStream,&a3))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_decodeData(a0,a1,*a2,*a3);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_decodeData);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_beginInsertRows(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_beginInsertRows(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;
        int a1;
        int a2;
        sipQAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9ii",&sipSelf,sipType_QAbstractItemModel,&sipCpp,sipType_QModelIndex,&a0,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_beginInsertRows(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_beginInsertRows);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_endInsertRows(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_endInsertRows(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QAbstractItemModel,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_endInsertRows();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_endInsertRows);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_beginRemoveRows(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_beginRemoveRows(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;
        int a1;
        int a2;
        sipQAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9ii",&sipSelf,sipType_QAbstractItemModel,&sipCpp,sipType_QModelIndex,&a0,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_beginRemoveRows(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_beginRemoveRows);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_endRemoveRows(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_endRemoveRows(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QAbstractItemModel,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_endRemoveRows();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_endRemoveRows);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_beginInsertColumns(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_beginInsertColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;
        int a1;
        int a2;
        sipQAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9ii",&sipSelf,sipType_QAbstractItemModel,&sipCpp,sipType_QModelIndex,&a0,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_beginInsertColumns(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_beginInsertColumns);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_endInsertColumns(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_endInsertColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QAbstractItemModel,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_endInsertColumns();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_endInsertColumns);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_beginRemoveColumns(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_beginRemoveColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;
        int a1;
        int a2;
        sipQAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9ii",&sipSelf,sipType_QAbstractItemModel,&sipCpp,sipType_QModelIndex,&a0,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_beginRemoveColumns(*a0,a1,a2);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_beginRemoveColumns);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_endRemoveColumns(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_endRemoveColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QAbstractItemModel,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_endRemoveColumns();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_endRemoveColumns);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_persistentIndexList(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_persistentIndexList(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QAbstractItemModel,&sipCpp))
        {
            QModelIndexList *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QModelIndexList(sipCpp->sipProtect_persistentIndexList());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_persistentIndexList);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_reset(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QAbstractItemModel,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_reset();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_reset);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_changePersistentIndex(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_changePersistentIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndex * a0;
        const QModelIndex * a1;
        sipQAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ9J9",&sipSelf,sipType_QAbstractItemModel,&sipCpp,sipType_QModelIndex,&a0,sipType_QModelIndex,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_changePersistentIndex(*a0,*a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_changePersistentIndex);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_changePersistentIndexList(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_changePersistentIndexList(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QModelIndexList * a0;
        int a0State = 0;
        const QModelIndexList * a1;
        int a1State = 0;
        sipQAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ1J1",&sipSelf,sipType_QAbstractItemModel,&sipCpp,sipType_QList_0100QModelIndex,&a0,&a0State,sipType_QList_0100QModelIndex,&a1,&a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_changePersistentIndexList(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QModelIndexList *>(a0),sipType_QList_0100QModelIndex,a0State);
            sipReleaseType(const_cast<QModelIndexList *>(a1),sipType_QList_0100QModelIndex,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_changePersistentIndexList);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_insertRow(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_insertRow(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        const QModelIndex& a1def = QModelIndex();
        const QModelIndex * a1 = &a1def;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi|J9",&sipSelf,sipType_QAbstractItemModel,&sipCpp,&a0,sipType_QModelIndex,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->insertRow(a0,*a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_insertRow);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_insertColumn(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_insertColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        const QModelIndex& a1def = QModelIndex();
        const QModelIndex * a1 = &a1def;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi|J9",&sipSelf,sipType_QAbstractItemModel,&sipCpp,&a0,sipType_QModelIndex,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->insertColumn(a0,*a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_insertColumn);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_removeRow(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_removeRow(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        const QModelIndex& a1def = QModelIndex();
        const QModelIndex * a1 = &a1def;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi|J9",&sipSelf,sipType_QAbstractItemModel,&sipCpp,&a0,sipType_QModelIndex,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->removeRow(a0,*a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_removeRow);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_removeColumn(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_removeColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        const QModelIndex& a1def = QModelIndex();
        const QModelIndex * a1 = &a1def;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi|J9",&sipSelf,sipType_QAbstractItemModel,&sipCpp,&a0,sipType_QModelIndex,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->removeColumn(a0,*a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_removeColumn);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_setSupportedDragActions(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_setSupportedDragActions(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        Qt::DropActions * a0;
        int a0State = 0;
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QAbstractItemModel,&sipCpp,sipType_Qt_DropActions,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSupportedDragActions(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_Qt_DropActions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_setSupportedDragActions);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_supportedDragActions(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_supportedDragActions(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QAbstractItemModel,&sipCpp))
        {
            Qt::DropActions *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new Qt::DropActions(sipCpp->supportedDragActions());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_Qt_DropActions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_supportedDragActions);

    return NULL;
}


extern "C" {static PyObject *meth_QAbstractItemModel_createIndex(PyObject *, PyObject *);}
static PyObject *meth_QAbstractItemModel_createIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        PyObject * a2 = 0;
        sipQAbstractItemModel *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pii|P0",&sipSelf,sipType_QAbstractItemModel,&sipCpp,&a0,&a1,&a2))
        {
            QModelIndex *sipRes = 0;

#line 221 "sip/QtCore/qabstractitemmodel.sip"
        // The Qt API is broken (and won't be fixed as it would break binary
        // compatibility) regarding the internal id of a model index on different
        // architectures (32 vs 64 bits).  We choose to work around the breakage as it
        // is fairly subtle and continues to catch people out.  Instead of letting Qt
        // convert betweed an integer id and a pointer id (the internal format used by
        // Qt) we let Python do it.
        
        void *ptr;
        
        if (a2)
        {
            // Try and convert it to a Python long and fallback to the object's
            // address if it fails.
            ptr = PyLong_AsVoidPtr(a2);
        
            if (PyErr_Occurred())
            {
                PyErr_Clear();
                ptr = a2;
            }
        }
        else
        {
            ptr = 0;
        }
        
        sipRes = new QModelIndex(sipCpp->sipProtect_createIndex(a0, a1, ptr));
#line 2646 "sipQtCoreQAbstractItemModel.cpp"

            return sipConvertFromNewType(sipRes,sipType_QModelIndex,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QAbstractItemModel,sipName_createIndex);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QAbstractItemModel(void *, const sipTypeDef *);}
static void *cast_QAbstractItemModel(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QAbstractItemModel)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QAbstractItemModel *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QAbstractItemModel(void *, int);}
static void release_QAbstractItemModel(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQAbstractItemModel *>(sipCppV);
    else
        delete reinterpret_cast<QAbstractItemModel *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QAbstractItemModel(sipSimpleWrapper *);}
static void dealloc_QAbstractItemModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQAbstractItemModel *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QAbstractItemModel(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QAbstractItemModel(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QAbstractItemModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **sipOwner, int *sipArgsParsed)
{
    sipQAbstractItemModel *sipCpp = 0;

    if (!sipCpp)
    {
        QObject * a0 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"|JH",sipType_QObject,&a0,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQAbstractItemModel(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QAbstractItemModel[] = {{111, 255, 1}};


static PyMethodDef methods_QAbstractItemModel[] = {
    {SIP_MLNAME_CAST(sipName_beginInsertColumns), meth_QAbstractItemModel_beginInsertColumns, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_beginInsertRows), meth_QAbstractItemModel_beginInsertRows, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_beginRemoveColumns), meth_QAbstractItemModel_beginRemoveColumns, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_beginRemoveRows), meth_QAbstractItemModel_beginRemoveRows, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_buddy), meth_QAbstractItemModel_buddy, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_canFetchMore), meth_QAbstractItemModel_canFetchMore, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changePersistentIndex), meth_QAbstractItemModel_changePersistentIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changePersistentIndexList), meth_QAbstractItemModel_changePersistentIndexList, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QAbstractItemModel_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_columnCount), meth_QAbstractItemModel_columnCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QAbstractItemModel_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createIndex), meth_QAbstractItemModel_createIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QAbstractItemModel_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_data), meth_QAbstractItemModel_data, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_decodeData), meth_QAbstractItemModel_decodeData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QAbstractItemModel_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dropMimeData), meth_QAbstractItemModel_dropMimeData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_encodeData), meth_QAbstractItemModel_encodeData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_endInsertColumns), meth_QAbstractItemModel_endInsertColumns, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_endInsertRows), meth_QAbstractItemModel_endInsertRows, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_endRemoveColumns), meth_QAbstractItemModel_endRemoveColumns, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_endRemoveRows), meth_QAbstractItemModel_endRemoveRows, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fetchMore), meth_QAbstractItemModel_fetchMore, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_flags), meth_QAbstractItemModel_flags, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasChildren), meth_QAbstractItemModel_hasChildren, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasIndex), meth_QAbstractItemModel_hasIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_headerData), meth_QAbstractItemModel_headerData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_index), meth_QAbstractItemModel_index, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertColumn), meth_QAbstractItemModel_insertColumn, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertColumns), meth_QAbstractItemModel_insertColumns, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertRow), meth_QAbstractItemModel_insertRow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_insertRows), meth_QAbstractItemModel_insertRows, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_itemData), meth_QAbstractItemModel_itemData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_match), meth_QAbstractItemModel_match, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mimeData), meth_QAbstractItemModel_mimeData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mimeTypes), meth_QAbstractItemModel_mimeTypes, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_parent), meth_QAbstractItemModel_parent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_persistentIndexList), meth_QAbstractItemModel_persistentIndexList, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QAbstractItemModel_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeColumn), meth_QAbstractItemModel_removeColumn, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeColumns), meth_QAbstractItemModel_removeColumns, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeRow), meth_QAbstractItemModel_removeRow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_removeRows), meth_QAbstractItemModel_removeRows, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_reset), meth_QAbstractItemModel_reset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_revert), meth_QAbstractItemModel_revert, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rowCount), meth_QAbstractItemModel_rowCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setData), meth_QAbstractItemModel_setData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setHeaderData), meth_QAbstractItemModel_setHeaderData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setItemData), meth_QAbstractItemModel_setItemData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSupportedDragActions), meth_QAbstractItemModel_setSupportedDragActions, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sibling), meth_QAbstractItemModel_sibling, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sort), meth_QAbstractItemModel_sort, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_span), meth_QAbstractItemModel_span, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_submit), meth_QAbstractItemModel_submit, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_supportedDragActions), meth_QAbstractItemModel_supportedDragActions, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_supportedDropActions), meth_QAbstractItemModel_supportedDropActions, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QAbstractItemModel_timerEvent, METH_VARARGS, NULL}
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QAbstractItemModel[] = {
    {"modelReset()", 0},
    {"modelAboutToBeReset()", 0},
    {"columnsRemoved(const QModelIndex&,int,int)", 0},
    {"columnsAboutToBeRemoved(const QModelIndex&,int,int)", 0},
    {"columnsInserted(const QModelIndex&,int,int)", 0},
    {"columnsAboutToBeInserted(const QModelIndex&,int,int)", 0},
    {"rowsRemoved(const QModelIndex&,int,int)", 0},
    {"rowsAboutToBeRemoved(const QModelIndex&,int,int)", 0},
    {"rowsInserted(const QModelIndex&,int,int)", 0},
    {"rowsAboutToBeInserted(const QModelIndex&,int,int)", 0},
    {"layoutChanged()", 0},
    {"layoutAboutToBeChanged()", 0},
    {"headerDataChanged(Qt::Orientation,int,int)", 0},
    {"dataChanged(const QModelIndex&,const QModelIndex&)", 0},
    {0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QAbstractItemModel = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QAbstractItemModel,
        {0}
    },
    {
        sipNameNr_QAbstractItemModel,
        {0, 0, 1},
        57, methods_QAbstractItemModel,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QAbstractItemModel,
    0,
    init_QAbstractItemModel,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QAbstractItemModel,
    0,
    0,
    0,
    release_QAbstractItemModel,
    cast_QAbstractItemModel,
    0,
    0,
    0
},
    &QAbstractItemModel::staticMetaObject,
    0,
    pyqt4_signals_QAbstractItemModel
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:19 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 128 "sip/QtCore/qchar.sip"
#include <qchar.h>
#line 39 "sipQtCoreQChar_0.cpp"

#line 41 "sip/QtCore/qchar.sip"
#include <qchar.h>
#line 43 "sipQtCoreQChar_0.cpp"
#line 78 "sip/QtCore/qchar.sip"
#include <qchar.h>
#line 46 "sipQtCoreQChar_0.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 49 "sipQtCoreQChar_0.cpp"
#line 132 "sip/QtCore/qchar.sip"
// This is needed by __hash__().
#include <qhash.h>
#line 53 "sipQtCoreQChar_0.cpp"


extern "C" {static PyObject *meth_QChar_0_digitValue(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_digitValue(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->digitValue();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        uint a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"u",&a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::digitValue(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_digitValue);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_toLower(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_toLower(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            QChar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->toLower());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    {
        uint a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"u",&a0))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::toLower(a0);
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_toLower);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_toUpper(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_toUpper(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            QChar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->toUpper());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    {
        uint a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"u",&a0))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::toUpper(a0);
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_toUpper);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_category(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_category(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            QChar::Category sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->category();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QChar_Category);
        }
    }

    {
        uint a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"u",&a0))
        {
            QChar::Category sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::category(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QChar_Category);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_category);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_direction(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_direction(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            QChar::Direction sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->direction();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QChar_Direction);
        }
    }

    {
        uint a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"u",&a0))
        {
            QChar::Direction sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::direction(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QChar_Direction);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_direction);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_joining(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_joining(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            QChar::Joining sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->joining();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QChar_Joining);
        }
    }

    {
        uint a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"u",&a0))
        {
            QChar::Joining sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::joining(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QChar_Joining);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_joining);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_hasMirrored(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_hasMirrored(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasMirrored();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_hasMirrored);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_isLower(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_isLower(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isLower();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_isLower);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_isUpper(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_isUpper(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isUpper();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_isUpper);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_mirroredChar(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_mirroredChar(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            QChar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->mirroredChar());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    {
        uint a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"u",&a0))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::mirroredChar(a0);
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_mirroredChar);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_decomposition(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_decomposition(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->decomposition());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        uint a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"u",&a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QChar::decomposition(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_decomposition);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_decompositionTag(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_decompositionTag(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            QChar::Decomposition sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->decompositionTag();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QChar_Decomposition);
        }
    }

    {
        uint a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"u",&a0))
        {
            QChar::Decomposition sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::decompositionTag(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QChar_Decomposition);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_decompositionTag);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_combiningClass(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_combiningClass(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            unsigned char sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->combiningClass();
            Py_END_ALLOW_THREADS

            return SIPBytes_FromStringAndSize((char *)&sipRes,1);
        }
    }

    {
        uint a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"u",&a0))
        {
            unsigned char sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::combiningClass(a0);
            Py_END_ALLOW_THREADS

            return SIPBytes_FromStringAndSize((char *)&sipRes,1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_combiningClass);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_unicodeVersion(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_unicodeVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            QChar::UnicodeVersion sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->unicodeVersion();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QChar_UnicodeVersion);
        }
    }

    {
        uint a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"u",&a0))
        {
            QChar::UnicodeVersion sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::unicodeVersion(a0);
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QChar_UnicodeVersion);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_unicodeVersion);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_toAscii(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_toAscii(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            char sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toAscii();
            Py_END_ALLOW_THREADS

            return SIPBytes_FromStringAndSize(&sipRes,1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_toAscii);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_unicode(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_unicode(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            ushort sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->unicode();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_unicode);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_fromAscii(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_fromAscii(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        char a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"aA",&a0))
        {
            QChar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(QChar::fromAscii(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_fromAscii);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_isNull(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNull();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_isNull);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_isPrint(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_isPrint(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isPrint();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_isPrint);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_isPunct(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_isPunct(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isPunct();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_isPunct);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_isSpace(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_isSpace(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSpace();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_isSpace);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_isMark(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_isMark(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isMark();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_isMark);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_isLetter(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_isLetter(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isLetter();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_isLetter);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_isNumber(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_isNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNumber();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_isNumber);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_isLetterOrNumber(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_isLetterOrNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isLetterOrNumber();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_isLetterOrNumber);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_isDigit(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_isDigit(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isDigit();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_isDigit);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_isSymbol(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_isSymbol(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isSymbol();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_isSymbol);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_cell(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_cell(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            uchar sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->cell();
            Py_END_ALLOW_THREADS

            return SIPBytes_FromStringAndSize((char *)&sipRes,1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_cell);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_row(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_row(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            uchar sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->row();
            Py_END_ALLOW_THREADS

            return SIPBytes_FromStringAndSize((char *)&sipRes,1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_row);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_toLatin1(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_toLatin1(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            char sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toLatin1();
            Py_END_ALLOW_THREADS

            return SIPBytes_FromStringAndSize(&sipRes,1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_toLatin1);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_fromLatin1(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_fromLatin1(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        char a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"aL",&a0))
        {
            QChar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(QChar::fromLatin1(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_fromLatin1);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_setCell(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_setCell(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        uchar a0;
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bc",&sipSelf,sipType_QChar,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCell(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_setCell);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_setRow(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_setRow(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        uchar a0;
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bc",&sipSelf,sipType_QChar,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRow(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_setRow);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_toTitleCase(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_toTitleCase(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            QChar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->toTitleCase());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    {
        uint a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"u",&a0))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::toTitleCase(a0);
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_toTitleCase);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_toCaseFolded(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_toCaseFolded(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            QChar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->toCaseFolded());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    {
        uint a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"u",&a0))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::toCaseFolded(a0);
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_toCaseFolded);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_isTitleCase(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_isTitleCase(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isTitleCase();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_isTitleCase);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_isHighSurrogate(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_isHighSurrogate(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isHighSurrogate();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_isHighSurrogate);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_isLowSurrogate(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_isLowSurrogate(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QChar *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QChar,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isLowSurrogate();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_isLowSurrogate);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_surrogateToUcs4(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_surrogateToUcs4(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        ushort a0;
        ushort a1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"tt",&a0,&a1))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::surrogateToUcs4(a0,a1);
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    {
        QChar * a0;
        int a0State = 0;
        QChar * a1;
        int a1State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1J1",sipType_QChar,&a0,&a0State,sipType_QChar,&a1,&a1State))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::surrogateToUcs4(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QChar,a0State);
            sipReleaseType(a1,sipType_QChar,a1State);

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_surrogateToUcs4);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_highSurrogate(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_highSurrogate(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        uint a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"u",&a0))
        {
            ushort sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::highSurrogate(a0);
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_highSurrogate);

    return NULL;
}


extern "C" {static PyObject *meth_QChar_0_lowSurrogate(PyObject *, PyObject *);}
static PyObject *meth_QChar_0_lowSurrogate(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        uint a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"u",&a0))
        {
            ushort sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QChar::lowSurrogate(a0);
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QChar,sipName_lowSurrogate);

    return NULL;
}


extern "C" {static PyObject *slot_QChar_0___eq__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QChar_0___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QChar *sipCpp = reinterpret_cast<QChar *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QChar));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        QChar * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QChar,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator==((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QChar,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,eq_slot,sipType_QChar,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QChar_0___ne__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QChar_0___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QChar *sipCpp = reinterpret_cast<QChar *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QChar));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        QChar * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QChar,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator!=((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QChar,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,ne_slot,sipType_QChar,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QChar_0___lt__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QChar_0___lt__(PyObject *sipSelf,PyObject *sipArg)
{
    QChar *sipCpp = reinterpret_cast<QChar *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QChar));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        QChar * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QChar,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator<((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QChar,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,lt_slot,sipType_QChar,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QChar_0___le__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QChar_0___le__(PyObject *sipSelf,PyObject *sipArg)
{
    QChar *sipCpp = reinterpret_cast<QChar *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QChar));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        QChar * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QChar,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator<=((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QChar,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,le_slot,sipType_QChar,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QChar_0___gt__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QChar_0___gt__(PyObject *sipSelf,PyObject *sipArg)
{
    QChar *sipCpp = reinterpret_cast<QChar *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QChar));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        QChar * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QChar,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator>((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QChar,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,gt_slot,sipType_QChar,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QChar_0___ge__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QChar_0___ge__(PyObject *sipSelf,PyObject *sipArg)
{
    QChar *sipCpp = reinterpret_cast<QChar *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QChar));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        QChar * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QChar,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator>=((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QChar,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,ge_slot,sipType_QChar,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QChar_0___add__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_QChar_0___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        QChar * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J1J1",sipType_QChar,&a0,&a0State,sipType_QString,&a1,&a1State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString((*a0 + *a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QChar,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,add_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static long slot_QChar_0___hash__(PyObject *sipSelf);}
static long slot_QChar_0___hash__(PyObject *sipSelf)
{
    QChar *sipCpp = reinterpret_cast<QChar *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QChar));

    if (!sipCpp)
        return 0;


    {
        {
            long sipRes = 0;

#line 160 "sip/QtCore/qchar.sip"
        sipRes = qHash(*sipCpp);
#line 1617 "sipQtCoreQChar_0.cpp"

            return sipRes;
        }
    }
}


extern "C" {static PyObject *slot_QChar_0___repr__(PyObject *sipSelf);}
static PyObject *slot_QChar_0___repr__(PyObject *sipSelf)
{
    QChar *sipCpp = reinterpret_cast<QChar *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QChar));

    if (!sipCpp)
        return 0;


    {
        {
            PyObject * sipRes = 0;

#line 149 "sip/QtCore/qchar.sip"
        sipRes =
        #if PY_MAJOR_VERSION >= 3
            PyUnicode_FromFormat
        #else
            PyString_FromFormat
        #endif
                ("PyQt4.QtCore.QChar(0x%04x)", sipCpp->unicode());
#line 1646 "sipQtCoreQChar_0.cpp"

            return sipRes;
        }
    }
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QChar_0(void *, const sipTypeDef *);}
static void *cast_QChar_0(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QChar)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QChar_0(void *, int);}
static void release_QChar_0(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QChar *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static PyObject *pickle_QChar(void *);}
static PyObject *pickle_QChar(void *sipCppV)
{
    QChar *sipCpp = reinterpret_cast<QChar *>(sipCppV);
    PyObject *sipRes;

#line 137 "sip/QtCore/qchar.sip"
    sipRes = Py_BuildValue((char *)"(H)", sipCpp->unicode());
#line 1685 "sipQtCoreQChar_0.cpp"

    return sipRes;
}


extern "C" {static void assign_QChar_0(void *, SIP_SSIZE_T, const void *);}
static void assign_QChar_0(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QChar *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QChar *>(sipSrc);
}


extern "C" {static void *array_QChar_0(SIP_SSIZE_T);}
static void *array_QChar_0(SIP_SSIZE_T sipNrElem)
{
    return new QChar[sipNrElem];
}


extern "C" {static void *copy_QChar_0(const void *, SIP_SSIZE_T);}
static void *copy_QChar_0(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QChar(reinterpret_cast<const QChar *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QChar_0(sipSimpleWrapper *);}
static void dealloc_QChar_0(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QChar_0(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QChar_0(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QChar_0(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QChar *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QChar();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        char a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"aL",&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QChar(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        QLatin1Char * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QLatin1Char,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QChar(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        uchar a0;
        uchar a1;

        if (sipParseArgs(sipArgsParsed,sipArgs,"cc",&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QChar(a0,a1);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        int a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"i",&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QChar(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        QChar::SpecialCharacter a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"XE",sipType_QChar_SpecialCharacter,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QChar(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QChar * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QChar,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QChar(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    return sipCpp;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QChar_0[] = {
    {(void *)slot_QChar_0___eq__, eq_slot},
    {(void *)slot_QChar_0___ne__, ne_slot},
    {(void *)slot_QChar_0___lt__, lt_slot},
    {(void *)slot_QChar_0___le__, le_slot},
    {(void *)slot_QChar_0___gt__, gt_slot},
    {(void *)slot_QChar_0___ge__, ge_slot},
    {(void *)slot_QChar_0___add__, add_slot},
    {(void *)slot_QChar_0___hash__, hash_slot},
    {(void *)slot_QChar_0___repr__, repr_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QChar_0[] = {
    {SIP_MLNAME_CAST(sipName_category), meth_QChar_0_category, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_cell), meth_QChar_0_cell, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_combiningClass), meth_QChar_0_combiningClass, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_decomposition), meth_QChar_0_decomposition, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_decompositionTag), meth_QChar_0_decompositionTag, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_digitValue), meth_QChar_0_digitValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_direction), meth_QChar_0_direction, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromAscii), meth_QChar_0_fromAscii, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_fromLatin1), meth_QChar_0_fromLatin1, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasMirrored), meth_QChar_0_hasMirrored, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_highSurrogate), meth_QChar_0_highSurrogate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isDigit), meth_QChar_0_isDigit, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isHighSurrogate), meth_QChar_0_isHighSurrogate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isLetter), meth_QChar_0_isLetter, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isLetterOrNumber), meth_QChar_0_isLetterOrNumber, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isLowSurrogate), meth_QChar_0_isLowSurrogate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isLower), meth_QChar_0_isLower, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isMark), meth_QChar_0_isMark, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QChar_0_isNull, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isNumber), meth_QChar_0_isNumber, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isPrint), meth_QChar_0_isPrint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isPunct), meth_QChar_0_isPunct, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isSpace), meth_QChar_0_isSpace, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isSymbol), meth_QChar_0_isSymbol, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isTitleCase), meth_QChar_0_isTitleCase, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isUpper), meth_QChar_0_isUpper, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_joining), meth_QChar_0_joining, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lowSurrogate), meth_QChar_0_lowSurrogate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mirroredChar), meth_QChar_0_mirroredChar, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_row), meth_QChar_0_row, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCell), meth_QChar_0_setCell, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRow), meth_QChar_0_setRow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_surrogateToUcs4), meth_QChar_0_surrogateToUcs4, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toAscii), meth_QChar_0_toAscii, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toCaseFolded), meth_QChar_0_toCaseFolded, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toLatin1), meth_QChar_0_toLatin1, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toLower), meth_QChar_0_toLower, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toTitleCase), meth_QChar_0_toTitleCase, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toUpper), meth_QChar_0_toUpper, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_unicode), meth_QChar_0_unicode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_unicodeVersion), meth_QChar_0_unicodeVersion, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QChar_0[] = {
    {sipName_ByteOrderMark, QChar::ByteOrderMark, 23},
    {sipName_ByteOrderSwapped, QChar::ByteOrderSwapped, 23},
    {sipName_Canonical, QChar::Canonical, 20},
    {sipName_Center, QChar::Center, 22},
    {sipName_Circle, QChar::Circle, 20},
    {sipName_Combining_Above, QChar::Combining_Above, 19},
    {sipName_Combining_AboveAttached, QChar::Combining_AboveAttached, 19},
    {sipName_Combining_AboveLeft, QChar::Combining_AboveLeft, 19},
    {sipName_Combining_AboveLeftAttached, QChar::Combining_AboveLeftAttached, 19},
    {sipName_Combining_AboveRight, QChar::Combining_AboveRight, 19},
    {sipName_Combining_AboveRightAttached, QChar::Combining_AboveRightAttached, 19},
    {sipName_Combining_Below, QChar::Combining_Below, 19},
    {sipName_Combining_BelowAttached, QChar::Combining_BelowAttached, 19},
    {sipName_Combining_BelowLeft, QChar::Combining_BelowLeft, 19},
    {sipName_Combining_BelowLeftAttached, QChar::Combining_BelowLeftAttached, 19},
    {sipName_Combining_BelowRight, QChar::Combining_BelowRight, 19},
    {sipName_Combining_BelowRightAttached, QChar::Combining_BelowRightAttached, 19},
    {sipName_Combining_DoubleAbove, QChar::Combining_DoubleAbove, 19},
    {sipName_Combining_DoubleBelow, QChar::Combining_DoubleBelow, 19},
    {sipName_Combining_IotaSubscript, QChar::Combining_IotaSubscript, 19},
    {sipName_Combining_Left, QChar::Combining_Left, 19},
    {sipName_Combining_LeftAttached, QChar::Combining_LeftAttached, 19},
    {sipName_Combining_Right, QChar::Combining_Right, 19},
    {sipName_Combining_RightAttached, QChar::Combining_RightAttached, 19},
    {sipName_Compat, QChar::Compat, 20},
    {sipName_DirAL, QChar::DirAL, 21},
    {sipName_DirAN, QChar::DirAN, 21},
    {sipName_DirB, QChar::DirB, 21},
    {sipName_DirBN, QChar::DirBN, 21},
    {sipName_DirCS, QChar::DirCS, 21},
    {sipName_DirEN, QChar::DirEN, 21},
    {sipName_DirES, QChar::DirES, 21},
    {sipName_DirET, QChar::DirET, 21},
    {sipName_DirL, QChar::DirL, 21},
    {sipName_DirLRE, QChar::DirLRE, 21},
    {sipName_DirLRO, QChar::DirLRO, 21},
    {sipName_DirNSM, QChar::DirNSM, 21},
    {sipName_DirON, QChar::DirON, 21},
    {sipName_DirPDF, QChar::DirPDF, 21},
    {sipName_DirR, QChar::DirR, 21},
    {sipName_DirRLE, QChar::DirRLE, 21},
    {sipName_DirRLO, QChar::DirRLO, 21},
    {sipName_DirS, QChar::DirS, 21},
    {sipName_DirWS, QChar::DirWS, 21},
    {sipName_Dual, QChar::Dual, 22},
    {sipName_Final, QChar::Final, 20},
    {sipName_Font, QChar::Font, 20},
    {sipName_Fraction, QChar::Fraction, 20},
    {sipName_Initial, QChar::Initial, 20},
    {sipName_Isolated, QChar::Isolated, 20},
    {sipName_Letter_Lowercase, QChar::Letter_Lowercase, 18},
    {sipName_Letter_Modifier, QChar::Letter_Modifier, 18},
    {sipName_Letter_Other, QChar::Letter_Other, 18},
    {sipName_Letter_Titlecase, QChar::Letter_Titlecase, 18},
    {sipName_Letter_Uppercase, QChar::Letter_Uppercase, 18},
    {sipName_LineSeparator, QChar::LineSeparator, 23},
    {sipName_Mark_Enclosing, QChar::Mark_Enclosing, 18},
    {sipName_Mark_NonSpacing, QChar::Mark_NonSpacing, 18},
    {sipName_Mark_SpacingCombining, QChar::Mark_SpacingCombining, 18},
    {sipName_Medial, QChar::Medial, 20},
    {sipName_Narrow, QChar::Narrow, 20},
    {sipName_Nbsp, QChar::Nbsp, 23},
    {sipName_NoBreak, QChar::NoBreak, 20},
    {sipName_NoCategory, QChar::NoCategory, 18},
    {sipName_NoDecomposition, QChar::NoDecomposition, 20},
    {sipName_Null, QChar::Null, 23},
    {sipName_Number_DecimalDigit, QChar::Number_DecimalDigit, 18},
    {sipName_Number_Letter, QChar::Number_Letter, 18},
    {sipName_Number_Other, QChar::Number_Other, 18},
    {sipName_ObjectReplacementCharacter, QChar::ObjectReplacementCharacter, 23},
    {sipName_OtherJoining, QChar::OtherJoining, 22},
    {sipName_Other_Control, QChar::Other_Control, 18},
    {sipName_Other_Format, QChar::Other_Format, 18},
    {sipName_Other_NotAssigned, QChar::Other_NotAssigned, 18},
    {sipName_Other_PrivateUse, QChar::Other_PrivateUse, 18},
    {sipName_Other_Surrogate, QChar::Other_Surrogate, 18},
    {sipName_ParagraphSeparator, QChar::ParagraphSeparator, 23},
    {sipName_Punctuation_Close, QChar::Punctuation_Close, 18},
    {sipName_Punctuation_Connector, QChar::Punctuation_Connector, 18},
    {sipName_Punctuation_Dash, QChar::Punctuation_Dash, 18},
    {sipName_Punctuation_Dask, QChar::Punctuation_Dask, 18},
    {sipName_Punctuation_FinalQuote, QChar::Punctuation_FinalQuote, 18},
    {sipName_Punctuation_InitialQuote, QChar::Punctuation_InitialQuote, 18},
    {sipName_Punctuation_Open, QChar::Punctuation_Open, 18},
    {sipName_Punctuation_Other, QChar::Punctuation_Other, 18},
    {sipName_ReplacementCharacter, QChar::ReplacementCharacter, 23},
    {sipName_Right, QChar::Right, 22},
    {sipName_Separator_Line, QChar::Separator_Line, 18},
    {sipName_Separator_Paragraph, QChar::Separator_Paragraph, 18},
    {sipName_Separator_Space, QChar::Separator_Space, 18},
    {sipName_Small, QChar::Small, 20},
    {sipName_Square, QChar::Square, 20},
    {sipName_Sub, QChar::Sub, 20},
    {sipName_Super, QChar::Super, 20},
    {sipName_Symbol_Currency, QChar::Symbol_Currency, 18},
    {sipName_Symbol_Math, QChar::Symbol_Math, 18},
    {sipName_Symbol_Modifier, QChar::Symbol_Modifier, 18},
    {sipName_Symbol_Other, QChar::Symbol_Other, 18},
    {sipName_Unicode_1_1, QChar::Unicode_1_1, 24},
    {sipName_Unicode_2_0, QChar::Unicode_2_0, 24},
    {sipName_Unicode_2_1_2, QChar::Unicode_2_1_2, 24},
    {sipName_Unicode_3_0, QChar::Unicode_3_0, 24},
    {sipName_Unicode_3_1, QChar::Unicode_3_1, 24},
    {sipName_Unicode_3_2, QChar::Unicode_3_2, 24},
    {sipName_Unicode_4_0, QChar::Unicode_4_0, 24},
    {sipName_Unicode_4_1, QChar::Unicode_4_1, 24},
    {sipName_Unicode_5_0, QChar::Unicode_5_0, 24},
    {sipName_Unicode_Unassigned, QChar::Unicode_Unassigned, 24},
    {sipName_Vertical, QChar::Vertical, 20},
    {sipName_Wide, QChar::Wide, 20},
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QChar_0 = {
{
    {
        0,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QChar,
        {0}
    },
    {
        sipNameNr_QChar,
        {0, 0, 1},
        41, methods_QChar_0,
        110, enummembers_QChar_0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QChar_0,
    init_QChar_0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QChar_0,
    assign_QChar_0,
    array_QChar_0,
    copy_QChar_0,
    release_QChar_0,
    cast_QChar_0,
    0,
    0,
    pickle_QChar
},
    0,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:19 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 344 "sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 39 "sipQtCoreQXmlStreamReader.cpp"

#line 41 "sip/QtCore/qiodevice.sip"
#include <qiodevice.h>
#line 43 "sipQtCoreQXmlStreamReader.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 46 "sipQtCoreQXmlStreamReader.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 49 "sipQtCoreQXmlStreamReader.cpp"
#line 329 "sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 52 "sipQtCoreQXmlStreamReader.cpp"
#line 646 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 55 "sipQtCoreQXmlStreamReader.cpp"
#line 38 "sip/QtCore/qvector.sip"
#include <qvector.h>
#line 58 "sipQtCoreQXmlStreamReader.cpp"
#line 303 "sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 61 "sipQtCoreQXmlStreamReader.cpp"
#line 38 "sip/QtCore/qvector.sip"
#include <qvector.h>
#line 64 "sipQtCoreQXmlStreamReader.cpp"
#line 279 "sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 67 "sipQtCoreQXmlStreamReader.cpp"
#line 38 "sip/QtCore/qvector.sip"
#include <qvector.h>
#line 70 "sipQtCoreQXmlStreamReader.cpp"
#line 255 "sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 73 "sipQtCoreQXmlStreamReader.cpp"
#line 65 "sip/QtCore/qxmlstream.sip"
#include <qxmlstream.h>
#line 76 "sipQtCoreQXmlStreamReader.cpp"


extern "C" {static PyObject *meth_QXmlStreamReader_setDevice(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_setDevice(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QIODevice * a0;
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QXmlStreamReader,&sipCpp,sipType_QIODevice,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setDevice(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_setDevice);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_device(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_device(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            QIODevice *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->device();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QIODevice,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_device);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_addData(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_addData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QByteArray * a0;
        int a0State = 0;
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QXmlStreamReader,&sipCpp,sipType_QByteArray,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addData(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QXmlStreamReader,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addData(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_addData);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_clear(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_clear);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_atEnd(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_atEnd(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->atEnd();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_atEnd);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_readNext(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_readNext(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            QXmlStreamReader::TokenType sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->readNext();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QXmlStreamReader_TokenType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_readNext);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_tokenType(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_tokenType(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            QXmlStreamReader::TokenType sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->tokenType();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QXmlStreamReader_TokenType);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_tokenType);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_tokenString(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_tokenString(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->tokenString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_tokenString);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_setNamespaceProcessing(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_setNamespaceProcessing(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0;
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bb",&sipSelf,sipType_QXmlStreamReader,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNamespaceProcessing(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_setNamespaceProcessing);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_namespaceProcessing(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_namespaceProcessing(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->namespaceProcessing();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_namespaceProcessing);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_isStartDocument(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isStartDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isStartDocument();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_isStartDocument);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_isEndDocument(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isEndDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEndDocument();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_isEndDocument);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_isStartElement(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isStartElement(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isStartElement();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_isStartElement);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_isEndElement(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isEndElement(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEndElement();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_isEndElement);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_isCharacters(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isCharacters(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isCharacters();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_isCharacters);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_isWhitespace(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isWhitespace(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isWhitespace();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_isWhitespace);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_isCDATA(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isCDATA(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isCDATA();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_isCDATA);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_isComment(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isComment(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isComment();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_isComment);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_isDTD(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isDTD(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isDTD();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_isDTD);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_isEntityReference(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isEntityReference(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEntityReference();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_isEntityReference);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_isProcessingInstruction(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isProcessingInstruction(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isProcessingInstruction();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_isProcessingInstruction);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_isStandaloneDocument(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_isStandaloneDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isStandaloneDocument();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_isStandaloneDocument);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_documentVersion(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_documentVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            QStringRef *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringRef(sipCpp->documentVersion());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringRef,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_documentVersion);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_documentEncoding(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_documentEncoding(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            QStringRef *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringRef(sipCpp->documentEncoding());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringRef,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_documentEncoding);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_lineNumber(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_lineNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->lineNumber();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_lineNumber);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_columnNumber(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_columnNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->columnNumber();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_columnNumber);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_characterOffset(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_characterOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            qint64 sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->characterOffset();
            Py_END_ALLOW_THREADS

            return PyLong_FromLongLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_characterOffset);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_attributes(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_attributes(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            QXmlStreamAttributes *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QXmlStreamAttributes(sipCpp->attributes());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QXmlStreamAttributes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_attributes);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_readElementText(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_readElementText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->readElementText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_readElementText);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_name(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_name(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            QStringRef *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringRef(sipCpp->name());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringRef,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_name);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_namespaceUri(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_namespaceUri(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            QStringRef *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringRef(sipCpp->namespaceUri());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringRef,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_namespaceUri);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_qualifiedName(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_qualifiedName(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            QStringRef *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringRef(sipCpp->qualifiedName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringRef,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_qualifiedName);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_prefix(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_prefix(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            QStringRef *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringRef(sipCpp->prefix());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringRef,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_prefix);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_processingInstructionTarget(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_processingInstructionTarget(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            QStringRef *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringRef(sipCpp->processingInstructionTarget());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringRef,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_processingInstructionTarget);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_processingInstructionData(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_processingInstructionData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            QStringRef *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringRef(sipCpp->processingInstructionData());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringRef,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_processingInstructionData);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_text(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_text(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            QStringRef *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringRef(sipCpp->text());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringRef,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_text);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_namespaceDeclarations(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_namespaceDeclarations(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            QXmlStreamNamespaceDeclarations *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QXmlStreamNamespaceDeclarations(sipCpp->namespaceDeclarations());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QXmlStreamNamespaceDeclaration,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_namespaceDeclarations);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_addExtraNamespaceDeclaration(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_addExtraNamespaceDeclaration(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QXmlStreamNamespaceDeclaration * a0;
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QXmlStreamReader,&sipCpp,sipType_QXmlStreamNamespaceDeclaration,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addExtraNamespaceDeclaration(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_addExtraNamespaceDeclaration);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_addExtraNamespaceDeclarations(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_addExtraNamespaceDeclarations(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QXmlStreamNamespaceDeclarations * a0;
        int a0State = 0;
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QXmlStreamReader,&sipCpp,sipType_QVector_0100QXmlStreamNamespaceDeclaration,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->addExtraNamespaceDeclarations(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QXmlStreamNamespaceDeclarations *>(a0),sipType_QVector_0100QXmlStreamNamespaceDeclaration,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_addExtraNamespaceDeclarations);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_notationDeclarations(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_notationDeclarations(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            QXmlStreamNotationDeclarations *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QXmlStreamNotationDeclarations(sipCpp->notationDeclarations());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QXmlStreamNotationDeclaration,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_notationDeclarations);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_entityDeclarations(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_entityDeclarations(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            QXmlStreamEntityDeclarations *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QXmlStreamEntityDeclarations(sipCpp->entityDeclarations());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QVector_0100QXmlStreamEntityDeclaration,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_entityDeclarations);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_dtdName(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_dtdName(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            QStringRef *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringRef(sipCpp->dtdName());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringRef,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_dtdName);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_dtdPublicId(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_dtdPublicId(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            QStringRef *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringRef(sipCpp->dtdPublicId());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringRef,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_dtdPublicId);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_dtdSystemId(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_dtdSystemId(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            QStringRef *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringRef(sipCpp->dtdSystemId());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringRef,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_dtdSystemId);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_raiseError(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_raiseError(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString& a0def = QString();
        const QString * a0 = &a0def;
        int a0State = 0;
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|J1",&sipSelf,sipType_QXmlStreamReader,&sipCpp,sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->raiseError(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_raiseError);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_errorString(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_errorString(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->errorString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_errorString);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_error(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_error(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            QXmlStreamReader::Error sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->error();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QXmlStreamReader_Error);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_error);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_hasError(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_hasError(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->hasError();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_hasError);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_setEntityResolver(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_setEntityResolver(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamEntityResolver * a0;
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ8",&sipSelf,sipType_QXmlStreamReader,&sipCpp,sipType_QXmlStreamEntityResolver,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setEntityResolver(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_setEntityResolver);

    return NULL;
}


extern "C" {static PyObject *meth_QXmlStreamReader_entityResolver(PyObject *, PyObject *);}
static PyObject *meth_QXmlStreamReader_entityResolver(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QXmlStreamReader *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QXmlStreamReader,&sipCpp))
        {
            QXmlStreamEntityResolver *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->entityResolver();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QXmlStreamEntityResolver,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QXmlStreamReader,sipName_entityResolver);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QXmlStreamReader(void *, const sipTypeDef *);}
static void *cast_QXmlStreamReader(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QXmlStreamReader)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QXmlStreamReader(void *, int);}
static void release_QXmlStreamReader(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QXmlStreamReader *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QXmlStreamReader(sipSimpleWrapper *);}
static void dealloc_QXmlStreamReader(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QXmlStreamReader(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QXmlStreamReader(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QXmlStreamReader(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QXmlStreamReader *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QXmlStreamReader();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        QIODevice * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J8",sipType_QIODevice,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QXmlStreamReader(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QByteArray * a0;
        int a0State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1",sipType_QByteArray,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QXmlStreamReader(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QByteArray *>(a0),sipType_QByteArray,a0State);
        }
    }

    if (!sipCpp)
    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1",sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QXmlStreamReader(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
        }
    }

    return sipCpp;
}


static PyMethodDef methods_QXmlStreamReader[] = {
    {SIP_MLNAME_CAST(sipName_addData), meth_QXmlStreamReader_addData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addExtraNamespaceDeclaration), meth_QXmlStreamReader_addExtraNamespaceDeclaration, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addExtraNamespaceDeclarations), meth_QXmlStreamReader_addExtraNamespaceDeclarations, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_atEnd), meth_QXmlStreamReader_atEnd, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_attributes), meth_QXmlStreamReader_attributes, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_characterOffset), meth_QXmlStreamReader_characterOffset, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clear), meth_QXmlStreamReader_clear, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_columnNumber), meth_QXmlStreamReader_columnNumber, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_device), meth_QXmlStreamReader_device, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_documentEncoding), meth_QXmlStreamReader_documentEncoding, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_documentVersion), meth_QXmlStreamReader_documentVersion, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dtdName), meth_QXmlStreamReader_dtdName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dtdPublicId), meth_QXmlStreamReader_dtdPublicId, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dtdSystemId), meth_QXmlStreamReader_dtdSystemId, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_entityDeclarations), meth_QXmlStreamReader_entityDeclarations, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_entityResolver), meth_QXmlStreamReader_entityResolver, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_error), meth_QXmlStreamReader_error, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_errorString), meth_QXmlStreamReader_errorString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hasError), meth_QXmlStreamReader_hasError, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isCDATA), meth_QXmlStreamReader_isCDATA, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isCharacters), meth_QXmlStreamReader_isCharacters, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isComment), meth_QXmlStreamReader_isComment, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isDTD), meth_QXmlStreamReader_isDTD, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isEndDocument), meth_QXmlStreamReader_isEndDocument, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isEndElement), meth_QXmlStreamReader_isEndElement, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isEntityReference), meth_QXmlStreamReader_isEntityReference, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isProcessingInstruction), meth_QXmlStreamReader_isProcessingInstruction, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isStandaloneDocument), meth_QXmlStreamReader_isStandaloneDocument, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isStartDocument), meth_QXmlStreamReader_isStartDocument, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isStartElement), meth_QXmlStreamReader_isStartElement, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isWhitespace), meth_QXmlStreamReader_isWhitespace, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lineNumber), meth_QXmlStreamReader_lineNumber, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_name), meth_QXmlStreamReader_name, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_namespaceDeclarations), meth_QXmlStreamReader_namespaceDeclarations, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_namespaceProcessing), meth_QXmlStreamReader_namespaceProcessing, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_namespaceUri), meth_QXmlStreamReader_namespaceUri, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_notationDeclarations), meth_QXmlStreamReader_notationDeclarations, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_prefix), meth_QXmlStreamReader_prefix, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_processingInstructionData), meth_QXmlStreamReader_processingInstructionData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_processingInstructionTarget), meth_QXmlStreamReader_processingInstructionTarget, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_qualifiedName), meth_QXmlStreamReader_qualifiedName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_raiseError), meth_QXmlStreamReader_raiseError, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readElementText), meth_QXmlStreamReader_readElementText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_readNext), meth_QXmlStreamReader_readNext, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDevice), meth_QXmlStreamReader_setDevice, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setEntityResolver), meth_QXmlStreamReader_setEntityResolver, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setNamespaceProcessing), meth_QXmlStreamReader_setNamespaceProcessing, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_text), meth_QXmlStreamReader_text, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_tokenString), meth_QXmlStreamReader_tokenString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_tokenType), meth_QXmlStreamReader_tokenType, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QXmlStreamReader[] = {
    {sipName_Characters, QXmlStreamReader::Characters, 217},
    {sipName_Comment, QXmlStreamReader::Comment, 217},
    {sipName_CustomError, QXmlStreamReader::CustomError, 216},
    {sipName_DTD, QXmlStreamReader::DTD, 217},
    {sipName_EndDocument, QXmlStreamReader::EndDocument, 217},
    {sipName_EndElement, QXmlStreamReader::EndElement, 217},
    {sipName_EntityReference, QXmlStreamReader::EntityReference, 217},
    {sipName_Invalid, QXmlStreamReader::Invalid, 217},
    {sipName_NoError, QXmlStreamReader::NoError, 216},
    {sipName_NoToken, QXmlStreamReader::NoToken, 217},
    {sipName_NotWellFormedError, QXmlStreamReader::NotWellFormedError, 216},
    {sipName_PrematureEndOfDocumentError, QXmlStreamReader::PrematureEndOfDocumentError, 216},
    {sipName_ProcessingInstruction, QXmlStreamReader::ProcessingInstruction, 217},
    {sipName_StartDocument, QXmlStreamReader::StartDocument, 217},
    {sipName_StartElement, QXmlStreamReader::StartElement, 217},
    {sipName_UnexpectedElementError, QXmlStreamReader::UnexpectedElementError, 216},
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QXmlStreamReader = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QXmlStreamReader,
        {0}
    },
    {
        sipNameNr_QXmlStreamReader,
        {0, 0, 1},
        50, methods_QXmlStreamReader,
        16, enummembers_QXmlStreamReader,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    0,
    init_QXmlStreamReader,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QXmlStreamReader,
    0,
    0,
    0,
    release_QXmlStreamReader,
    cast_QXmlStreamReader,
    0,
    0,
    0
},
    0,
    0,
    0
};

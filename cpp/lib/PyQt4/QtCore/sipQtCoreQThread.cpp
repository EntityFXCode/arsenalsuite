/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:19 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 37 "sip/QtCore/qthread.sip"
#include <qthread.h>
#line 39 "sipQtCoreQThread.cpp"

#line 40 "sip/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "sipQtCoreQThread.cpp"
#line 37 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 46 "sipQtCoreQThread.cpp"
#line 292 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 49 "sipQtCoreQThread.cpp"
#line 279 "sip/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 52 "sipQtCoreQThread.cpp"
#line 41 "sip/QtCore/qvariant.sip"
#include <qvariant.h>
#line 55 "sipQtCoreQThread.cpp"
#line 38 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 58 "sipQtCoreQThread.cpp"
#line 43 "sip/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 61 "sipQtCoreQThread.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 64 "sipQtCoreQThread.cpp"
#line 125 "sip/QtCore/qlist.sip"
#include <qlist.h>
#line 67 "sipQtCoreQThread.cpp"
#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 70 "sipQtCoreQThread.cpp"
#line 41 "sip/QtCore/qregexp.sip"
#include <qregexp.h>
#line 73 "sipQtCoreQThread.cpp"
#line 37 "sip/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 76 "sipQtCoreQThread.cpp"


class sipQThread : public QThread
{
public:
    sipQThread(QObject *);
    virtual ~sipQThread();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    int sipProtect_receivers(const char *) const;
    void sipProtectVirt_timerEvent(bool,QTimerEvent *);
    void sipProtectVirt_childEvent(bool,QChildEvent *);
    void sipProtectVirt_customEvent(bool,QEvent *);
    void sipProtectVirt_connectNotify(bool,const char *);
    void sipProtectVirt_disconnectNotify(bool,const char *);
    void sipProtectVirt_run(bool);
    int sipProtect_exec();
    static void sipProtect_setTerminationEnabled(bool);
    static void sipProtect_sleep(unsigned long);
    static void sipProtect_msleep(unsigned long);
    static void sipProtect_usleep(unsigned long);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void run();
    bool event(QEvent *);
    bool eventFilter(QObject *,QEvent *);
    void timerEvent(QTimerEvent *);
    void childEvent(QChildEvent *);
    void customEvent(QEvent *);
    void connectNotify(const char *);
    void disconnectNotify(const char *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipQThread(const sipQThread &);
    sipQThread &operator = (const sipQThread &);

    char sipPyMethods[8];
};

sipQThread::sipQThread(QObject *a0): QThread(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipQThread::~sipQThread()
{
    sipCommonDtor(sipPySelf);
}

const QMetaObject *sipQThread::metaObject() const
{
    return sip_QtCore_qt_metaobject(sipPySelf,sipType_QThread);
}

int sipQThread::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id = QThread::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_QtCore_qt_metacall(sipPySelf,sipType_QThread,_c,_id,_a);

    return _id;
}

void *sipQThread::qt_metacast(const char *_clname)
{
    return (sip_QtCore_qt_metacast && sip_QtCore_qt_metacast(sipPySelf,sipType_QThread,_clname)) ? this : QThread::qt_metacast(_clname);
}

void sipQThread::run()
{
    SIP_BLOCK_THREADS

    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_run);

    if (meth)
    {
        sipStartThread();

        extern void sipVH_QtCore_5(sip_gilstate_t,PyObject *,bool*);

        sipVH_QtCore_5(sipGILState,meth,0);

        sipEndThread();
    }

    SIP_UNBLOCK_THREADS
}

bool sipQThread::event(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_event);

    if (!meth)
        return QObject::event(a0);

    extern bool sipVH_QtCore_12(sip_gilstate_t,PyObject *,bool*,QEvent *);

    return sipVH_QtCore_12(sipGILState,meth,0,a0);
}

bool sipQThread::eventFilter(QObject *a0,QEvent *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_eventFilter);

    if (!meth)
        return QObject::eventFilter(a0,a1);

    extern bool sipVH_QtCore_20(sip_gilstate_t,PyObject *,bool*,QObject *,QEvent *);

    return sipVH_QtCore_20(sipGILState,meth,0,a0,a1);
}

void sipQThread::timerEvent(QTimerEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_timerEvent);

    if (!meth)
    {
        QObject::timerEvent(a0);
        return;
    }

    extern void sipVH_QtCore_3(sip_gilstate_t,PyObject *,bool*,QTimerEvent *);

    sipVH_QtCore_3(sipGILState,meth,0,a0);
}

void sipQThread::childEvent(QChildEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_childEvent);

    if (!meth)
    {
        QObject::childEvent(a0);
        return;
    }

    extern void sipVH_QtCore_19(sip_gilstate_t,PyObject *,bool*,QChildEvent *);

    sipVH_QtCore_19(sipGILState,meth,0,a0);
}

void sipQThread::customEvent(QEvent *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_customEvent);

    if (!meth)
    {
        QObject::customEvent(a0);
        return;
    }

    extern void sipVH_QtCore_18(sip_gilstate_t,PyObject *,bool*,QEvent *);

    sipVH_QtCore_18(sipGILState,meth,0,a0);
}

void sipQThread::connectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_connectNotify);

    if (!meth)
    {
        QObject::connectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t,PyObject *,bool*,const char *);

    sipVH_QtCore_17(sipGILState,meth,0,a0);
}

void sipQThread::disconnectNotify(const char *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_disconnectNotify);

    if (!meth)
    {
        QObject::disconnectNotify(a0);
        return;
    }

    extern void sipVH_QtCore_17(sip_gilstate_t,PyObject *,bool*,const char *);

    sipVH_QtCore_17(sipGILState,meth,0,a0);
}

int sipQThread::sipProtect_receivers(const char *a0) const
{
    return QObject::receivers(a0);
}

void sipQThread::sipProtectVirt_timerEvent(bool sipSelfWasArg,QTimerEvent *a0)
{
    (sipSelfWasArg ? QObject::timerEvent(a0) : timerEvent(a0));
}

void sipQThread::sipProtectVirt_childEvent(bool sipSelfWasArg,QChildEvent *a0)
{
    (sipSelfWasArg ? QObject::childEvent(a0) : childEvent(a0));
}

void sipQThread::sipProtectVirt_customEvent(bool sipSelfWasArg,QEvent *a0)
{
    (sipSelfWasArg ? QObject::customEvent(a0) : customEvent(a0));
}

void sipQThread::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::connectNotify(a0) : connectNotify(a0));
}

void sipQThread::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char *a0)
{
    (sipSelfWasArg ? QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

void sipQThread::sipProtectVirt_run(bool sipSelfWasArg)
{
    (sipSelfWasArg ? QThread::run() : run());
}

int sipQThread::sipProtect_exec()
{
    return QThread::exec();
}

void sipQThread::sipProtect_setTerminationEnabled(bool a0)
{
    QThread::setTerminationEnabled(a0);
}

void sipQThread::sipProtect_sleep(unsigned long a0)
{
    QThread::sleep(a0);
}

void sipQThread::sipProtect_msleep(unsigned long a0)
{
    QThread::msleep(a0);
}

void sipQThread::sipProtect_usleep(unsigned long a0)
{
    QThread::usleep(a0);
}


extern "C" {static PyObject *meth_QThread_receivers(PyObject *, PyObject *);}
static PyObject *meth_QThread_receivers(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        char * a0;
        sipQThread *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QThread,&sipCpp,&a0))
        {
            int sipRes = 0;

#line 480 "sip/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helper if it hasn't already been done.
        typedef int (*helper_func)(QObject *, const char *, int);
        
        static helper_func helper = 0;
        
        if (!helper)
            helper = (helper_func)sipImportSymbol("qpycore_qobject_receivers");
        
        if (helper)
            sipRes = helper(sipCpp, a0, sipCpp->sipProtect_receivers(a0));
#line 389 "sipQtCoreQThread.cpp"

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QThread,sipName_receivers);

    return NULL;
}


extern "C" {static PyObject *meth_QThread_timerEvent(PyObject *, PyObject *);}
static PyObject *meth_QThread_timerEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QTimerEvent * a0;
        sipQThread *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QThread,&sipCpp,sipType_QTimerEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QThread,sipName_timerEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QThread_childEvent(PyObject *, PyObject *);}
static PyObject *meth_QThread_childEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QChildEvent * a0;
        sipQThread *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QThread,&sipCpp,sipType_QChildEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QThread,sipName_childEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QThread_customEvent(PyObject *, PyObject *);}
static PyObject *meth_QThread_customEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        QEvent * a0;
        sipQThread *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pJ8",&sipSelf,sipType_QThread,&sipCpp,sipType_QEvent,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QThread,sipName_customEvent);

    return NULL;
}


extern "C" {static PyObject *meth_QThread_connectNotify(PyObject *, PyObject *);}
static PyObject *meth_QThread_connectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQThread *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QThread,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QThread,sipName_connectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QThread_disconnectNotify(PyObject *, PyObject *);}
static PyObject *meth_QThread_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        char * a0;
        sipQThread *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"pG",&sipSelf,sipType_QThread,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QThread,sipName_disconnectNotify);

    return NULL;
}


extern "C" {static PyObject *meth_QThread_currentThread(PyObject *, PyObject *);}
static PyObject *meth_QThread_currentThread(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QThread *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QThread::currentThread();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(sipRes,sipType_QThread,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QThread,sipName_currentThread);

    return NULL;
}


extern "C" {static PyObject *meth_QThread_currentThreadId(PyObject *, PyObject *);}
static PyObject *meth_QThread_currentThreadId(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            Qt::HANDLE sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QThread::currentThreadId();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QThread,sipName_currentThreadId);

    return NULL;
}


extern "C" {static PyObject *meth_QThread_idealThreadCount(PyObject *, PyObject *);}
static PyObject *meth_QThread_idealThreadCount(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QThread::idealThreadCount();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QThread,sipName_idealThreadCount);

    return NULL;
}


extern "C" {static PyObject *meth_QThread_yieldCurrentThread(PyObject *, PyObject *);}
static PyObject *meth_QThread_yieldCurrentThread(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            QThread::yieldCurrentThread();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QThread,sipName_yieldCurrentThread);

    return NULL;
}


extern "C" {static PyObject *meth_QThread_isFinished(PyObject *, PyObject *);}
static PyObject *meth_QThread_isFinished(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QThread *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QThread,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isFinished();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QThread,sipName_isFinished);

    return NULL;
}


extern "C" {static PyObject *meth_QThread_isRunning(PyObject *, PyObject *);}
static PyObject *meth_QThread_isRunning(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QThread *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QThread,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isRunning();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QThread,sipName_isRunning);

    return NULL;
}


extern "C" {static PyObject *meth_QThread_setPriority(PyObject *, PyObject *);}
static PyObject *meth_QThread_setPriority(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QThread::Priority a0;
        QThread *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BE",&sipSelf,sipType_QThread,&sipCpp,sipType_QThread_Priority,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPriority(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QThread,sipName_setPriority);

    return NULL;
}


extern "C" {static PyObject *meth_QThread_priority(PyObject *, PyObject *);}
static PyObject *meth_QThread_priority(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QThread *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QThread,&sipCpp))
        {
            QThread::Priority sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->priority();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QThread_Priority);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QThread,sipName_priority);

    return NULL;
}


extern "C" {static PyObject *meth_QThread_setStackSize(PyObject *, PyObject *);}
static PyObject *meth_QThread_setStackSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        uint a0;
        QThread *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bu",&sipSelf,sipType_QThread,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setStackSize(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QThread,sipName_setStackSize);

    return NULL;
}


extern "C" {static PyObject *meth_QThread_stackSize(PyObject *, PyObject *);}
static PyObject *meth_QThread_stackSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QThread *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QThread,&sipCpp))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->stackSize();
            Py_END_ALLOW_THREADS

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QThread,sipName_stackSize);

    return NULL;
}


extern "C" {static PyObject *meth_QThread_exit(PyObject *, PyObject *);}
static PyObject *meth_QThread_exit(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0 = 0;
        QThread *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|i",&sipSelf,sipType_QThread,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->exit(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QThread,sipName_exit);

    return NULL;
}


extern "C" {static PyObject *meth_QThread_start(PyObject *, PyObject *);}
static PyObject *meth_QThread_start(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QThread::Priority a0 = QThread::InheritPriority;
        QThread *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|E",&sipSelf,sipType_QThread,&sipCpp,sipType_QThread_Priority,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->start(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QThread,sipName_start);

    return NULL;
}


extern "C" {static PyObject *meth_QThread_terminate(PyObject *, PyObject *);}
static PyObject *meth_QThread_terminate(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QThread *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QThread,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->terminate();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QThread,sipName_terminate);

    return NULL;
}


extern "C" {static PyObject *meth_QThread_quit(PyObject *, PyObject *);}
static PyObject *meth_QThread_quit(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QThread *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QThread,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->quit();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QThread,sipName_quit);

    return NULL;
}


extern "C" {static PyObject *meth_QThread_wait(PyObject *, PyObject *);}
static PyObject *meth_QThread_wait(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        unsigned long a0 = ULONG_MAX;
        QThread *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|m",&sipSelf,sipType_QThread,&sipCpp,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->wait(a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QThread,sipName_wait);

    return NULL;
}


extern "C" {static PyObject *meth_QThread_run(PyObject *, PyObject *);}
static PyObject *meth_QThread_run(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        sipQThread *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QThread,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_run(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QThread,sipName_run);

    return NULL;
}


extern "C" {static PyObject *meth_QThread_exec_(PyObject *, PyObject *);}
static PyObject *meth_QThread_exec_(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        sipQThread *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"p",&sipSelf,sipType_QThread,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_exec();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QThread,sipName_exec_);

    return NULL;
}


extern "C" {static PyObject *meth_QThread_setTerminationEnabled(PyObject *, PyObject *);}
static PyObject *meth_QThread_setTerminationEnabled(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        bool a0 = 1;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"|b",&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipQThread::sipProtect_setTerminationEnabled(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QThread,sipName_setTerminationEnabled);

    return NULL;
}


extern "C" {static PyObject *meth_QThread_sleep(PyObject *, PyObject *);}
static PyObject *meth_QThread_sleep(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        unsigned long a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"m",&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipQThread::sipProtect_sleep(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QThread,sipName_sleep);

    return NULL;
}


extern "C" {static PyObject *meth_QThread_msleep(PyObject *, PyObject *);}
static PyObject *meth_QThread_msleep(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        unsigned long a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"m",&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipQThread::sipProtect_msleep(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QThread,sipName_msleep);

    return NULL;
}


extern "C" {static PyObject *meth_QThread_usleep(PyObject *, PyObject *);}
static PyObject *meth_QThread_usleep(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        unsigned long a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"m",&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipQThread::sipProtect_usleep(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QThread,sipName_usleep);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QThread(void *, const sipTypeDef *);}
static void *cast_QThread(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_QThread)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_QObject)->ctd_cast((QObject *)(QThread *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QThread(void *, int);}
static void release_QThread(void *sipCppV,int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipQThread *>(sipCppV);
    else
        delete reinterpret_cast<QThread *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_QThread(sipSimpleWrapper *);}
static void dealloc_QThread(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipQThread *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_QThread(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_QThread(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QThread(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **sipOwner, int *sipArgsParsed)
{
    sipQThread *sipCpp = 0;

    if (!sipCpp)
    {
        QObject * a0 = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"|JH",sipType_QObject,&a0,sipOwner))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQThread(a0);
            Py_END_ALLOW_THREADS
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_QThread[] = {{111, 255, 1}};


static PyMethodDef methods_QThread[] = {
    {SIP_MLNAME_CAST(sipName_childEvent), meth_QThread_childEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), meth_QThread_connectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentThread), meth_QThread_currentThread, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentThreadId), meth_QThread_currentThreadId, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), meth_QThread_customEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), meth_QThread_disconnectNotify, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_exec_), meth_QThread_exec_, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_exit), meth_QThread_exit, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_idealThreadCount), meth_QThread_idealThreadCount, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isFinished), meth_QThread_isFinished, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isRunning), meth_QThread_isRunning, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_msleep), meth_QThread_msleep, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_priority), meth_QThread_priority, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_quit), meth_QThread_quit, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), meth_QThread_receivers, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_run), meth_QThread_run, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPriority), meth_QThread_setPriority, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setStackSize), meth_QThread_setStackSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTerminationEnabled), meth_QThread_setTerminationEnabled, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sleep), meth_QThread_sleep, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_stackSize), meth_QThread_stackSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_start), meth_QThread_start, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_terminate), meth_QThread_terminate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), meth_QThread_timerEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_usleep), meth_QThread_usleep, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_wait), meth_QThread_wait, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_yieldCurrentThread), meth_QThread_yieldCurrentThread, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QThread[] = {
    {sipName_HighPriority, QThread::HighPriority, 182},
    {sipName_HighestPriority, QThread::HighestPriority, 182},
    {sipName_IdlePriority, QThread::IdlePriority, 182},
    {sipName_InheritPriority, QThread::InheritPriority, 182},
    {sipName_LowPriority, QThread::LowPriority, 182},
    {sipName_LowestPriority, QThread::LowestPriority, 182},
    {sipName_NormalPriority, QThread::NormalPriority, 182},
    {sipName_TimeCriticalPriority, QThread::TimeCriticalPriority, 182},
};


/* Define this type's PyQt4 signals. */
static const pyqt4QtSignal pyqt4_signals_QThread[] = {
    {"terminated()", 0},
    {"finished()", 0},
    {"started()", 0},
    {0, 0}
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QThread = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_QThread,
        {0}
    },
    {
        sipNameNr_QThread,
        {0, 0, 1},
        27, methods_QThread,
        8, enummembers_QThread,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_QThread,
    0,
    init_QThread,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QThread,
    0,
    0,
    0,
    release_QThread,
    cast_QThread,
    0,
    0,
    0
},
    &QThread::staticMetaObject,
    0,
    pyqt4_signals_QThread
};

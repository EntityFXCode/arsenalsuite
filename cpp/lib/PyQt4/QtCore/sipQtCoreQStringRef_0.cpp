/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:19 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 665 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 39 "sipQtCoreQStringRef_0.cpp"

#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 43 "sipQtCoreQStringRef_0.cpp"
#line 646 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 46 "sipQtCoreQStringRef_0.cpp"
#line 576 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 49 "sipQtCoreQStringRef_0.cpp"
#line 40 "sip/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 52 "sipQtCoreQStringRef_0.cpp"
#line 78 "sip/QtCore/qchar.sip"
#include <qchar.h>
#line 55 "sipQtCoreQStringRef_0.cpp"


extern "C" {static PyObject *meth_QStringRef_0_string(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_string(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStringRef *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStringRef,&sipCpp))
        {
            const QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->string();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(const_cast<QString *>(sipRes),sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStringRef,sipName_string);

    return NULL;
}


extern "C" {static PyObject *meth_QStringRef_0_position(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_position(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStringRef *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStringRef,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->position();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStringRef,sipName_position);

    return NULL;
}


extern "C" {static PyObject *meth_QStringRef_0_size(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_size(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStringRef *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStringRef,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->size();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStringRef,sipName_size);

    return NULL;
}


extern "C" {static PyObject *meth_QStringRef_0_count(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_count(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStringRef *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStringRef,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->count();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStringRef,sipName_count);

    return NULL;
}


extern "C" {static PyObject *meth_QStringRef_0_length(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_length(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStringRef *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStringRef,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->length();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStringRef,sipName_length);

    return NULL;
}


extern "C" {static PyObject *meth_QStringRef_0_unicode(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_unicode(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStringRef *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStringRef,&sipCpp))
        {
            const QChar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->unicode();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(const_cast<QChar *>(sipRes),sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStringRef,sipName_unicode);

    return NULL;
}


extern "C" {static PyObject *meth_QStringRef_0_data(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_data(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStringRef *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStringRef,&sipCpp))
        {
            const QChar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->data();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(const_cast<QChar *>(sipRes),sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStringRef,sipName_data);

    return NULL;
}


extern "C" {static PyObject *meth_QStringRef_0_constData(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_constData(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStringRef *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStringRef,&sipCpp))
        {
            const QChar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->constData();
            Py_END_ALLOW_THREADS

            return sipConvertFromType(const_cast<QChar *>(sipRes),sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStringRef,sipName_constData);

    return NULL;
}


extern "C" {static PyObject *meth_QStringRef_0_clear(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_clear(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStringRef *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStringRef,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->clear();
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStringRef,sipName_clear);

    return NULL;
}


extern "C" {static PyObject *meth_QStringRef_0_toString(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_toString(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStringRef *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStringRef,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStringRef,sipName_toString);

    return NULL;
}


extern "C" {static PyObject *meth_QStringRef_0_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStringRef *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStringRef,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEmpty();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStringRef,sipName_isEmpty);

    return NULL;
}


extern "C" {static PyObject *meth_QStringRef_0_isNull(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QStringRef *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QStringRef,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNull();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStringRef,sipName_isNull);

    return NULL;
}


extern "C" {static PyObject *meth_QStringRef_0_appendTo(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_appendTo(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QString * a0;
        int a0State = 0;
        QStringRef *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ0",&sipSelf,sipType_QStringRef,&sipCpp,sipType_QString,&a0,&a0State))
        {
            QStringRef *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QStringRef(sipCpp->appendTo(a0));
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringRef,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStringRef,sipName_appendTo);

    return NULL;
}


extern "C" {static PyObject *meth_QStringRef_0_at(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_at(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QStringRef *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QStringRef,&sipCpp,&a0))
        {
            QChar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->at(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStringRef,sipName_at);

    return NULL;
}


extern "C" {static PyObject *meth_QStringRef_0_compare(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_compare(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        QStringRef *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|E",&sipSelf,sipType_QStringRef,&sipCpp,sipType_QString,&a0,&a0State,sipType_Qt_CaseSensitivity,&a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->compare(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QStringRef * a0;
        int a0State = 0;
        Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        QStringRef *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|E",&sipSelf,sipType_QStringRef,&sipCpp,sipType_QStringRef,&a0,&a0State,sipType_Qt_CaseSensitivity,&a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->compare(*a0,a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QStringRef *>(a0),sipType_QStringRef,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        QLatin1String * a0;
        Qt::CaseSensitivity a1 = Qt::CaseSensitive;
        QStringRef *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9|E",&sipSelf,sipType_QStringRef,&sipCpp,sipType_QLatin1String,&a0,sipType_Qt_CaseSensitivity,&a1))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->compare(*a0,a1);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QStringRef * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        Qt::CaseSensitivity a2 = Qt::CaseSensitive;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1J1|E",sipType_QStringRef,&a0,&a0State,sipType_QString,&a1,&a1State,sipType_Qt_CaseSensitivity,&a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QStringRef::compare(*a0,*a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QStringRef *>(a0),sipType_QStringRef,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QStringRef * a0;
        int a0State = 0;
        const QStringRef * a1;
        int a1State = 0;
        Qt::CaseSensitivity a2 = Qt::CaseSensitive;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1J1|E",sipType_QStringRef,&a0,&a0State,sipType_QStringRef,&a1,&a1State,sipType_Qt_CaseSensitivity,&a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QStringRef::compare(*a0,*a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QStringRef *>(a0),sipType_QStringRef,a0State);
            sipReleaseType(const_cast<QStringRef *>(a1),sipType_QStringRef,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QStringRef * a0;
        int a0State = 0;
        QLatin1String * a1;
        Qt::CaseSensitivity a2 = Qt::CaseSensitive;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1J9|E",sipType_QStringRef,&a0,&a0State,sipType_QLatin1String,&a1,sipType_Qt_CaseSensitivity,&a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QStringRef::compare(*a0,*a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QStringRef *>(a0),sipType_QStringRef,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStringRef,sipName_compare);

    return NULL;
}


extern "C" {static PyObject *meth_QStringRef_0_localeAwareCompare(PyObject *, PyObject *);}
static PyObject *meth_QStringRef_0_localeAwareCompare(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QStringRef *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QStringRef,&sipCpp,sipType_QString,&a0,&a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->localeAwareCompare(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QStringRef * a0;
        int a0State = 0;
        QStringRef *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QStringRef,&sipCpp,sipType_QStringRef,&a0,&a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->localeAwareCompare(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QStringRef *>(a0),sipType_QStringRef,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QStringRef * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1J1",sipType_QStringRef,&a0,&a0State,sipType_QString,&a1,&a1State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QStringRef::localeAwareCompare(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QStringRef *>(a0),sipType_QStringRef,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    {
        const QStringRef * a0;
        int a0State = 0;
        const QStringRef * a1;
        int a1State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J1J1",sipType_QStringRef,&a0,&a0State,sipType_QStringRef,&a1,&a1State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = QStringRef::localeAwareCompare(*a0,*a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QStringRef *>(a0),sipType_QStringRef,a0State);
            sipReleaseType(const_cast<QStringRef *>(a1),sipType_QStringRef,a1State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QStringRef,sipName_localeAwareCompare);

    return NULL;
}


extern "C" {static PyObject *slot_QStringRef_0___eq__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QStringRef_0___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QStringRef *sipCpp = reinterpret_cast<QStringRef *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStringRef));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QLatin1String * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QLatin1String,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator==((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QString,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator==((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QStringRef * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QStringRef,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator==((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QStringRef *>(a0),sipType_QStringRef,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,eq_slot,sipType_QStringRef,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QStringRef_0___ne__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QStringRef_0___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QStringRef *sipCpp = reinterpret_cast<QStringRef *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStringRef));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QLatin1String * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QLatin1String,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator!=((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QString,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator!=((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QStringRef * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QStringRef,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator!=((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QStringRef *>(a0),sipType_QStringRef,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,ne_slot,sipType_QStringRef,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QStringRef_0___lt__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QStringRef_0___lt__(PyObject *sipSelf,PyObject *sipArg)
{
    QStringRef *sipCpp = reinterpret_cast<QStringRef *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStringRef));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QStringRef * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QStringRef,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator<((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QStringRef *>(a0),sipType_QStringRef,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,lt_slot,sipType_QStringRef,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QStringRef_0___le__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QStringRef_0___le__(PyObject *sipSelf,PyObject *sipArg)
{
    QStringRef *sipCpp = reinterpret_cast<QStringRef *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStringRef));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QStringRef * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QStringRef,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator<=((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QStringRef *>(a0),sipType_QStringRef,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,le_slot,sipType_QStringRef,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QStringRef_0___gt__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QStringRef_0___gt__(PyObject *sipSelf,PyObject *sipArg)
{
    QStringRef *sipCpp = reinterpret_cast<QStringRef *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStringRef));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QStringRef * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QStringRef,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator>((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QStringRef *>(a0),sipType_QStringRef,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,gt_slot,sipType_QStringRef,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QStringRef_0___ge__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QStringRef_0___ge__(PyObject *sipSelf,PyObject *sipArg)
{
    QStringRef *sipCpp = reinterpret_cast<QStringRef *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QStringRef));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QStringRef * a0;
        int a0State = 0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J1",sipType_QStringRef,&a0,&a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator>=((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QStringRef *>(a0),sipType_QStringRef,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,ge_slot,sipType_QStringRef,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QStringRef_0(void *, const sipTypeDef *);}
static void *cast_QStringRef_0(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QStringRef)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QStringRef_0(void *, int);}
static void release_QStringRef_0(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QStringRef *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QStringRef_0(void *, SIP_SSIZE_T, const void *);}
static void assign_QStringRef_0(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QStringRef *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QStringRef *>(sipSrc);
}


extern "C" {static void *array_QStringRef_0(SIP_SSIZE_T);}
static void *array_QStringRef_0(SIP_SSIZE_T sipNrElem)
{
    return new QStringRef[sipNrElem];
}


extern "C" {static void *copy_QStringRef_0(const void *, SIP_SSIZE_T);}
static void *copy_QStringRef_0(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QStringRef(reinterpret_cast<const QStringRef *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QStringRef_0(sipSimpleWrapper *);}
static void dealloc_QStringRef_0(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QStringRef_0(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QStringRef_0(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QStringRef_0(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QStringRef *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QStringRef();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QString * a0;
        int a0State = 0;
        int a1;
        int a2;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J0ii",sipType_QString,&a0,&a0State,&a1,&a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QStringRef(a0,a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
        }
    }

    if (!sipCpp)
    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J0",sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QStringRef(a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
        }
    }

    if (!sipCpp)
    {
        const QStringRef * a0;
        int a0State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1",sipType_QStringRef,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QStringRef(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QStringRef *>(a0),sipType_QStringRef,a0State);
        }
    }

    if (!sipCpp)
    {
        const QStringRef * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QStringRef,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QStringRef(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    return sipCpp;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QStringRef_0[] = {
    {(void *)slot_QStringRef_0___eq__, eq_slot},
    {(void *)slot_QStringRef_0___ne__, ne_slot},
    {(void *)slot_QStringRef_0___lt__, lt_slot},
    {(void *)slot_QStringRef_0___le__, le_slot},
    {(void *)slot_QStringRef_0___gt__, gt_slot},
    {(void *)slot_QStringRef_0___ge__, ge_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QStringRef_0[] = {
    {SIP_MLNAME_CAST(sipName_appendTo), meth_QStringRef_0_appendTo, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_at), meth_QStringRef_0_at, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_clear), meth_QStringRef_0_clear, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_compare), meth_QStringRef_0_compare, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_constData), meth_QStringRef_0_constData, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_count), meth_QStringRef_0_count, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_data), meth_QStringRef_0_data, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QStringRef_0_isEmpty, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QStringRef_0_isNull, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_length), meth_QStringRef_0_length, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_localeAwareCompare), meth_QStringRef_0_localeAwareCompare, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_position), meth_QStringRef_0_position, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_size), meth_QStringRef_0_size, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_string), meth_QStringRef_0_string, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toString), meth_QStringRef_0_toString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_unicode), meth_QStringRef_0_unicode, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QStringRef_0 = {
{
    {
        0,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QStringRef,
        {0}
    },
    {
        sipNameNr_QStringRef,
        {0, 0, 1},
        16, methods_QStringRef_0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QStringRef_0,
    init_QStringRef_0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QStringRef_0,
    assign_QStringRef_0,
    array_QStringRef_0,
    copy_QStringRef_0,
    release_QStringRef_0,
    cast_QStringRef_0,
    0,
    0,
    0
},
    0,
    0,
    0
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:19 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 41 "sip/QtCore/qrect.sip"
#include <qrect.h>
#line 39 "sipQtCoreQRect.cpp"

#line 41 "sip/QtCore/qpoint.sip"
#include <qpoint.h>
#line 43 "sipQtCoreQRect.cpp"
#line 41 "sip/QtCore/qsize.sip"
#include <qsize.h>
#line 46 "sipQtCoreQRect.cpp"


extern "C" {static PyObject *meth_QRect_normalized(PyObject *, PyObject *);}
static PyObject *meth_QRect_normalized(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QRect,&sipCpp))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->normalized());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_normalized);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_moveCenter(PyObject *, PyObject *);}
static PyObject *meth_QRect_moveCenter(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPoint * a0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QRect,&sipCpp,sipType_QPoint,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveCenter(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_moveCenter);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_contains(PyObject *, PyObject *);}
static PyObject *meth_QRect_contains(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPoint * a0;
        bool a1 = 0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9|b",&sipSelf,sipType_QRect,&sipCpp,sipType_QPoint,&a0,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->contains(*a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const QRect * a0;
        bool a1 = 0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9|b",&sipSelf,sipType_QRect,&sipCpp,sipType_QRect,&a0,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->contains(*a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
        bool a2;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Biib",&sipSelf,sipType_QRect,&sipCpp,&a0,&a1,&a2))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->contains(a0,a1,a2);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int a0;
        int a1;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii",&sipSelf,sipType_QRect,&sipCpp,&a0,&a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->contains(a0,a1);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_contains);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_intersects(PyObject *, PyObject *);}
static PyObject *meth_QRect_intersects(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QRect * a0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QRect,&sipCpp,sipType_QRect,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->intersects(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_intersects);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_isNull(PyObject *, PyObject *);}
static PyObject *meth_QRect_isNull(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QRect,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isNull();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_isNull);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_isEmpty(PyObject *, PyObject *);}
static PyObject *meth_QRect_isEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QRect,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isEmpty();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_isEmpty);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_isValid(PyObject *, PyObject *);}
static PyObject *meth_QRect_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QRect,&sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->isValid();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_isValid);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_left(PyObject *, PyObject *);}
static PyObject *meth_QRect_left(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QRect,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->left();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_left);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_top(PyObject *, PyObject *);}
static PyObject *meth_QRect_top(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QRect,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->top();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_top);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_right(PyObject *, PyObject *);}
static PyObject *meth_QRect_right(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QRect,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->right();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_right);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_bottom(PyObject *, PyObject *);}
static PyObject *meth_QRect_bottom(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QRect,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->bottom();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_bottom);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_x(PyObject *, PyObject *);}
static PyObject *meth_QRect_x(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QRect,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->x();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_x);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_y(PyObject *, PyObject *);}
static PyObject *meth_QRect_y(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QRect,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->y();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_y);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_setLeft(PyObject *, PyObject *);}
static PyObject *meth_QRect_setLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QRect,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setLeft(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_setLeft);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_setTop(PyObject *, PyObject *);}
static PyObject *meth_QRect_setTop(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QRect,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTop(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_setTop);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_setRight(PyObject *, PyObject *);}
static PyObject *meth_QRect_setRight(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QRect,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRight(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_setRight);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_setBottom(PyObject *, PyObject *);}
static PyObject *meth_QRect_setBottom(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QRect,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBottom(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_setBottom);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_setTopLeft(PyObject *, PyObject *);}
static PyObject *meth_QRect_setTopLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPoint * a0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QRect,&sipCpp,sipType_QPoint,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTopLeft(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_setTopLeft);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_setBottomRight(PyObject *, PyObject *);}
static PyObject *meth_QRect_setBottomRight(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPoint * a0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QRect,&sipCpp,sipType_QPoint,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBottomRight(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_setBottomRight);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_setTopRight(PyObject *, PyObject *);}
static PyObject *meth_QRect_setTopRight(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPoint * a0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QRect,&sipCpp,sipType_QPoint,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTopRight(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_setTopRight);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_setBottomLeft(PyObject *, PyObject *);}
static PyObject *meth_QRect_setBottomLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPoint * a0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QRect,&sipCpp,sipType_QPoint,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setBottomLeft(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_setBottomLeft);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_setX(PyObject *, PyObject *);}
static PyObject *meth_QRect_setX(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QRect,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setX(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_setX);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_setY(PyObject *, PyObject *);}
static PyObject *meth_QRect_setY(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QRect,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setY(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_setY);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_topLeft(PyObject *, PyObject *);}
static PyObject *meth_QRect_topLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QRect,&sipCpp))
        {
            QPoint *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint(sipCpp->topLeft());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_topLeft);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_bottomRight(PyObject *, PyObject *);}
static PyObject *meth_QRect_bottomRight(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QRect,&sipCpp))
        {
            QPoint *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint(sipCpp->bottomRight());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_bottomRight);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_topRight(PyObject *, PyObject *);}
static PyObject *meth_QRect_topRight(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QRect,&sipCpp))
        {
            QPoint *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint(sipCpp->topRight());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_topRight);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_bottomLeft(PyObject *, PyObject *);}
static PyObject *meth_QRect_bottomLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QRect,&sipCpp))
        {
            QPoint *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint(sipCpp->bottomLeft());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_bottomLeft);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_center(PyObject *, PyObject *);}
static PyObject *meth_QRect_center(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QRect,&sipCpp))
        {
            QPoint *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QPoint(sipCpp->center());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_center);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_width(PyObject *, PyObject *);}
static PyObject *meth_QRect_width(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QRect,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->width();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_width);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_height(PyObject *, PyObject *);}
static PyObject *meth_QRect_height(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QRect,&sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->height();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_height);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_size(PyObject *, PyObject *);}
static PyObject *meth_QRect_size(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QRect,&sipCpp))
        {
            QSize *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QSize(sipCpp->size());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_size);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_translate(PyObject *, PyObject *);}
static PyObject *meth_QRect_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii",&sipSelf,sipType_QRect,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->translate(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint * a0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QRect,&sipCpp,sipType_QPoint,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->translate(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_translate);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_translated(PyObject *, PyObject *);}
static PyObject *meth_QRect_translated(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii",&sipSelf,sipType_QRect,&sipCpp,&a0,&a1))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->translated(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    {
        const QPoint * a0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QRect,&sipCpp,sipType_QPoint,&a0))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->translated(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_translated);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_moveTo(PyObject *, PyObject *);}
static PyObject *meth_QRect_moveTo(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bii",&sipSelf,sipType_QRect,&sipCpp,&a0,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveTo(a0,a1);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const QPoint * a0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QRect,&sipCpp,sipType_QPoint,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveTo(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_moveTo);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_moveLeft(PyObject *, PyObject *);}
static PyObject *meth_QRect_moveLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QRect,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveLeft(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_moveLeft);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_moveTop(PyObject *, PyObject *);}
static PyObject *meth_QRect_moveTop(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QRect,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveTop(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_moveTop);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_moveRight(PyObject *, PyObject *);}
static PyObject *meth_QRect_moveRight(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QRect,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveRight(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_moveRight);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_moveBottom(PyObject *, PyObject *);}
static PyObject *meth_QRect_moveBottom(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QRect,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveBottom(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_moveBottom);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_moveTopLeft(PyObject *, PyObject *);}
static PyObject *meth_QRect_moveTopLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPoint * a0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QRect,&sipCpp,sipType_QPoint,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveTopLeft(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_moveTopLeft);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_moveBottomRight(PyObject *, PyObject *);}
static PyObject *meth_QRect_moveBottomRight(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPoint * a0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QRect,&sipCpp,sipType_QPoint,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveBottomRight(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_moveBottomRight);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_moveTopRight(PyObject *, PyObject *);}
static PyObject *meth_QRect_moveTopRight(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPoint * a0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QRect,&sipCpp,sipType_QPoint,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveTopRight(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_moveTopRight);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_moveBottomLeft(PyObject *, PyObject *);}
static PyObject *meth_QRect_moveBottomLeft(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QPoint * a0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QRect,&sipCpp,sipType_QPoint,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->moveBottomLeft(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_moveBottomLeft);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_getRect(PyObject *, PyObject *);}
static PyObject *meth_QRect_getRect(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QRect,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->getRect(&a0,&a1,&a2,&a3);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(iiii)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_getRect);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_setRect(PyObject *, PyObject *);}
static PyObject *meth_QRect_setRect(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Biiii",&sipSelf,sipType_QRect,&sipCpp,&a0,&a1,&a2,&a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setRect(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_setRect);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_getCoords(PyObject *, PyObject *);}
static PyObject *meth_QRect_getCoords(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QRect,&sipCpp))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->getCoords(&a0,&a1,&a2,&a3);
            Py_END_ALLOW_THREADS

            return sipBuildResult(0,"(iiii)",a0,a1,a2,a3);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_getCoords);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_setCoords(PyObject *, PyObject *);}
static PyObject *meth_QRect_setCoords(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Biiii",&sipSelf,sipType_QRect,&sipCpp,&a0,&a1,&a2,&a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setCoords(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_setCoords);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_adjusted(PyObject *, PyObject *);}
static PyObject *meth_QRect_adjusted(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Biiii",&sipSelf,sipType_QRect,&sipCpp,&a0,&a1,&a2,&a3))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->adjusted(a0,a1,a2,a3));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_adjusted);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_adjust(PyObject *, PyObject *);}
static PyObject *meth_QRect_adjust(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        int a1;
        int a2;
        int a3;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Biiii",&sipSelf,sipType_QRect,&sipCpp,&a0,&a1,&a2,&a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->adjust(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_adjust);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_setWidth(PyObject *, PyObject *);}
static PyObject *meth_QRect_setWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QRect,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setWidth(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_setWidth);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_setHeight(PyObject *, PyObject *);}
static PyObject *meth_QRect_setHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi",&sipSelf,sipType_QRect,&sipCpp,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHeight(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_setHeight);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_setSize(PyObject *, PyObject *);}
static PyObject *meth_QRect_setSize(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QSize * a0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QRect,&sipCpp,sipType_QSize,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setSize(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_setSize);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_intersect(PyObject *, PyObject *);}
static PyObject *meth_QRect_intersect(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QRect * a0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QRect,&sipCpp,sipType_QRect,&a0))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->intersect(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_intersect);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_unite(PyObject *, PyObject *);}
static PyObject *meth_QRect_unite(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QRect * a0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QRect,&sipCpp,sipType_QRect,&a0))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->unite(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_unite);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_intersected(PyObject *, PyObject *);}
static PyObject *meth_QRect_intersected(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QRect * a0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QRect,&sipCpp,sipType_QRect,&a0))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->intersected(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_intersected);

    return NULL;
}


extern "C" {static PyObject *meth_QRect_united(PyObject *, PyObject *);}
static PyObject *meth_QRect_united(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QRect * a0;
        QRect *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ9",&sipSelf,sipType_QRect,&sipCpp,sipType_QRect,&a0))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect(sipCpp->united(*a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName_united);

    return NULL;
}


extern "C" {static PyObject *slot_QRect___eq__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QRect___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QRect *sipCpp = reinterpret_cast<QRect *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRect));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QRect * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QRect,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator==((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,eq_slot,sipType_QRect,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QRect___ne__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QRect___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QRect *sipCpp = reinterpret_cast<QRect *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRect));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QRect * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QRect,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = operator!=((*sipCpp), *a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,ne_slot,sipType_QRect,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QRect___iand__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QRect___iand__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QRect)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QRect *sipCpp = reinterpret_cast<QRect *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRect));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QRect * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QRect,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QRect::operator&=(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_QRect___ior__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QRect___ior__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_QRect)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    QRect *sipCpp = reinterpret_cast<QRect *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRect));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QRect * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QRect,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->QRect::operator|=(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static int slot_QRect___bool__(PyObject *sipSelf);}
static int slot_QRect___bool__(PyObject *sipSelf)
{
    QRect *sipCpp = reinterpret_cast<QRect *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRect));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;

#line 87 "sip/QtCore/qrect.sip"
        sipRes = sipCpp->isValid();
#line 1807 "sipQtCoreQRect.cpp"

            return sipRes;
        }
    }
}


extern "C" {static PyObject *slot_QRect___repr__(PyObject *sipSelf);}
static PyObject *slot_QRect___repr__(PyObject *sipSelf)
{
    QRect *sipCpp = reinterpret_cast<QRect *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRect));

    if (!sipCpp)
        return 0;


    {
        {
            PyObject * sipRes = 0;

#line 72 "sip/QtCore/qrect.sip"
        sipRes =
        #if PY_MAJOR_VERSION >= 3
            PyUnicode_FromFormat
        #else
            PyString_FromFormat
        #endif
                ("PyQt4.QtCore.QRect(%i, %i, %i, %i)",
                 sipCpp->left(), sipCpp->top(), sipCpp->width(), sipCpp->height());
#line 1837 "sipQtCoreQRect.cpp"

            return sipRes;
        }
    }
}


extern "C" {static int slot_QRect___contains__(PyObject *sipSelf,PyObject *sipArg);}
static int slot_QRect___contains__(PyObject *sipSelf,PyObject *sipArg)
{
    QRect *sipCpp = reinterpret_cast<QRect *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QRect));

    if (!sipCpp)
        return -1;

    int sipArgsParsed = 0;

    {
        const QPoint * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QPoint,&a0))
        {
            int sipRes = 0;

#line 57 "sip/QtCore/qrect.sip"
        sipRes = sipCpp->contains(*a0);
#line 1864 "sipQtCoreQRect.cpp"

            return sipRes;
        }
    }

    {
        const QRect * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QRect,&a0))
        {
            int sipRes = 0;

#line 63 "sip/QtCore/qrect.sip"
        sipRes = sipCpp->contains(*a0);
#line 1879 "sipQtCoreQRect.cpp"

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QRect,sipName___contains__);

    return -1;
}


extern "C" {static PyObject *slot_QRect___and__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_QRect___and__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        QRect * a0;
        const QRect * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QRect,&a0,sipType_QRect,&a1))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect((*a0 & *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,and_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_QRect___or__(PyObject *sipArg0,PyObject *sipArg1);}
static PyObject *slot_QRect___or__(PyObject *sipArg0,PyObject *sipArg1)
{
    int sipArgsParsed = 0;

    {
        QRect * a0;
        const QRect * a1;

        if (sipParsePair(&sipArgsParsed,sipArg0,sipArg1,"J9J9",sipType_QRect,&a0,sipType_QRect,&a1))
        {
            QRect *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QRect((*a0 | *a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QRect,NULL);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,or_slot,NULL,sipArg0,sipArg1);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QRect(void *, const sipTypeDef *);}
static void *cast_QRect(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QRect)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QRect(void *, int);}
static void release_QRect(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QRect *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static PyObject *pickle_QRect(void *);}
static PyObject *pickle_QRect(void *sipCppV)
{
    QRect *sipCpp = reinterpret_cast<QRect *>(sipCppV);
    PyObject *sipRes;

#line 45 "sip/QtCore/qrect.sip"
    sipRes = Py_BuildValue((char *)"iiii", sipCpp->x(), sipCpp->y(), sipCpp->width(), sipCpp->height());
#line 1973 "sipQtCoreQRect.cpp"

    return sipRes;
}


extern "C" {static void assign_QRect(void *, SIP_SSIZE_T, const void *);}
static void assign_QRect(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QRect *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QRect *>(sipSrc);
}


extern "C" {static void *array_QRect(SIP_SSIZE_T);}
static void *array_QRect(SIP_SSIZE_T sipNrElem)
{
    return new QRect[sipNrElem];
}


extern "C" {static void *copy_QRect(const void *, SIP_SSIZE_T);}
static void *copy_QRect(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QRect(reinterpret_cast<const QRect *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QRect(sipSimpleWrapper *);}
static void dealloc_QRect(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QRect(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QRect(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QRect(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QRect *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QRect();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        int a0;
        int a1;
        int a2;
        int a3;

        if (sipParseArgs(sipArgsParsed,sipArgs,"iiii",&a0,&a1,&a2,&a3))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QRect(a0,a1,a2,a3);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QPoint * a0;
        const QPoint * a1;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9J9",sipType_QPoint,&a0,sipType_QPoint,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QRect(*a0,*a1);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QPoint * a0;
        const QSize * a1;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9J9",sipType_QPoint,&a0,sipType_QSize,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QRect(*a0,*a1);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QRect * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QRect,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QRect(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    return sipCpp;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QRect[] = {
    {(void *)slot_QRect___eq__, eq_slot},
    {(void *)slot_QRect___ne__, ne_slot},
    {(void *)slot_QRect___iand__, iand_slot},
    {(void *)slot_QRect___ior__, ior_slot},
    {(void *)slot_QRect___bool__, bool_slot},
    {(void *)slot_QRect___repr__, repr_slot},
    {(void *)slot_QRect___contains__, contains_slot},
    {(void *)slot_QRect___and__, and_slot},
    {(void *)slot_QRect___or__, or_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QRect[] = {
    {SIP_MLNAME_CAST(sipName_adjust), meth_QRect_adjust, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_adjusted), meth_QRect_adjusted, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_bottom), meth_QRect_bottom, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_bottomLeft), meth_QRect_bottomLeft, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_bottomRight), meth_QRect_bottomRight, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_center), meth_QRect_center, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_contains), meth_QRect_contains, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getCoords), meth_QRect_getCoords, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getRect), meth_QRect_getRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_height), meth_QRect_height, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_intersect), meth_QRect_intersect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_intersected), meth_QRect_intersected, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_intersects), meth_QRect_intersects, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isEmpty), meth_QRect_isEmpty, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isNull), meth_QRect_isNull, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_isValid), meth_QRect_isValid, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_left), meth_QRect_left, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveBottom), meth_QRect_moveBottom, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveBottomLeft), meth_QRect_moveBottomLeft, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveBottomRight), meth_QRect_moveBottomRight, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveCenter), meth_QRect_moveCenter, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveLeft), meth_QRect_moveLeft, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveRight), meth_QRect_moveRight, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveTo), meth_QRect_moveTo, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveTop), meth_QRect_moveTop, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveTopLeft), meth_QRect_moveTopLeft, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_moveTopRight), meth_QRect_moveTopRight, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_normalized), meth_QRect_normalized, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_right), meth_QRect_right, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBottom), meth_QRect_setBottom, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBottomLeft), meth_QRect_setBottomLeft, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBottomRight), meth_QRect_setBottomRight, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCoords), meth_QRect_setCoords, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setHeight), meth_QRect_setHeight, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setLeft), meth_QRect_setLeft, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRect), meth_QRect_setRect, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setRight), meth_QRect_setRight, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setSize), meth_QRect_setSize, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTop), meth_QRect_setTop, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTopLeft), meth_QRect_setTopLeft, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTopRight), meth_QRect_setTopRight, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setWidth), meth_QRect_setWidth, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setX), meth_QRect_setX, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setY), meth_QRect_setY, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_size), meth_QRect_size, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_top), meth_QRect_top, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_topLeft), meth_QRect_topLeft, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_topRight), meth_QRect_topRight, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_translate), meth_QRect_translate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_translated), meth_QRect_translated, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_unite), meth_QRect_unite, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_united), meth_QRect_united, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_width), meth_QRect_width, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_x), meth_QRect_x, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_y), meth_QRect_y, METH_VARARGS, NULL}
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QRect = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QRect,
        {0}
    },
    {
        sipNameNr_QRect,
        {0, 0, 1},
        55, methods_QRect,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QRect,
    init_QRect,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QRect,
    assign_QRect,
    array_QRect,
    copy_QRect,
    release_QRect,
    cast_QRect,
    0,
    0,
    pickle_QRect
},
    0,
    0,
    0
};

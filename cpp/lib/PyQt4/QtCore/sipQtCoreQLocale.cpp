/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1 on Wed Feb 17 09:47:19 2010
 *
 * Copyright (c) 2009 Riverbank Computing Limited <info@riverbankcomputing.com>
 * 
 * This file is part of PyQt.
 * 
 * This file may be used under the terms of the GNU General Public
 * License versions 2.0 or 3.0 as published by the Free Software
 * Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
 * included in the packaging of this file.  Alternatively you may (at
 * your option) use any later version of the GNU General Public
 * License if such license has been publicly approved by Riverbank
 * Computing Limited (or its successors, if any) and the KDE Free Qt
 * Foundation. In addition, as a special exception, Riverbank gives you
 * certain additional rights. These rights are described in the Riverbank
 * GPL Exception version 1.1, which can be found in the file
 * GPL_EXCEPTION.txt in this package.
 * 
 * Please review the following information to ensure GNU General
 * Public Licensing requirements will be met:
 * http://trolltech.com/products/qt/licenses/licensing/opensource/. If
 * you are unsure which license is appropriate for your use, please
 * review the following information:
 * http://trolltech.com/products/qt/licenses/licensing/licensingoverview
 * or contact the sales department at sales@riverbankcomputing.com.
 * 
 * This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
 * WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#include "sipAPIQtCore.h"

#line 41 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 39 "sipQtCoreQLocale.cpp"

#line 41 "sip/QtCore/qstring.sip"
#include <qstring.h>
#line 43 "sipQtCoreQLocale.cpp"
#line 78 "sip/QtCore/qchar.sip"
#include <qchar.h>
#line 46 "sipQtCoreQLocale.cpp"
#line 716 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 49 "sipQtCoreQLocale.cpp"
#line 41 "sip/QtCore/qlocale.sip"
#include <qlocale.h>
#line 52 "sipQtCoreQLocale.cpp"
#line 346 "sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 55 "sipQtCoreQLocale.cpp"
#line 200 "sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 58 "sipQtCoreQLocale.cpp"
#line 41 "sip/QtCore/qdatetime.sip"
#include <qdatetime.h>
#line 61 "sipQtCoreQLocale.cpp"


extern "C" {static PyObject *meth_QLocale_language(PyObject *, PyObject *);}
static PyObject *meth_QLocale_language(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLocale,&sipCpp))
        {
            QLocale::Language sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->language();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QLocale_Language);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_language);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_country(PyObject *, PyObject *);}
static PyObject *meth_QLocale_country(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLocale,&sipCpp))
        {
            QLocale::Country sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->country();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QLocale_Country);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_country);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_name(PyObject *, PyObject *);}
static PyObject *meth_QLocale_name(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLocale,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->name());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_name);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_toShort(PyObject *, PyObject *);}
static PyObject *meth_QLocale_toShort(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        bool a1;
        int a2 = 0;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|i",&sipSelf,sipType_QLocale,&sipCpp,sipType_QString,&a0,&a0State,&a2))
        {
            short sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toShort(*a0,&a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(hb)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_toShort);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_toUShort(PyObject *, PyObject *);}
static PyObject *meth_QLocale_toUShort(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        bool a1;
        int a2 = 0;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|i",&sipSelf,sipType_QLocale,&sipCpp,sipType_QString,&a0,&a0State,&a2))
        {
            ushort sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toUShort(*a0,&a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(tb)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_toUShort);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_toInt(PyObject *, PyObject *);}
static PyObject *meth_QLocale_toInt(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        bool a1;
        int a2 = 0;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|i",&sipSelf,sipType_QLocale,&sipCpp,sipType_QString,&a0,&a0State,&a2))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toInt(*a0,&a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(ib)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_toInt);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_toUInt(PyObject *, PyObject *);}
static PyObject *meth_QLocale_toUInt(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        bool a1;
        int a2 = 0;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|i",&sipSelf,sipType_QLocale,&sipCpp,sipType_QString,&a0,&a0State,&a2))
        {
            uint sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toUInt(*a0,&a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(ub)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_toUInt);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_toLongLong(PyObject *, PyObject *);}
static PyObject *meth_QLocale_toLongLong(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        bool a1;
        int a2 = 0;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|i",&sipSelf,sipType_QLocale,&sipCpp,sipType_QString,&a0,&a0State,&a2))
        {
            qlonglong sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toLongLong(*a0,&a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(nb)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_toLongLong);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_toULongLong(PyObject *, PyObject *);}
static PyObject *meth_QLocale_toULongLong(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        bool a1;
        int a2 = 0;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|i",&sipSelf,sipType_QLocale,&sipCpp,sipType_QString,&a0,&a0State,&a2))
        {
            qlonglong sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toULongLong(*a0,&a1,a2);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(nb)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_toULongLong);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_toFloat(PyObject *, PyObject *);}
static PyObject *meth_QLocale_toFloat(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        bool a1;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QLocale,&sipCpp,sipType_QString,&a0,&a0State))
        {
            float sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toFloat(*a0,&a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(fb)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_toFloat);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_toDouble(PyObject *, PyObject *);}
static PyObject *meth_QLocale_toDouble(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        bool a1;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QLocale,&sipCpp,sipType_QString,&a0,&a0State))
        {
            double sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toDouble(*a0,&a1);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipBuildResult(0,"(db)",sipRes,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_toDouble);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_toString(PyObject *, PyObject *);}
static PyObject *meth_QLocale_toString(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BXi",&sipSelf,sipType_QLocale,&sipCpp,&a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        double a0;
        char a1 = 'g';
        int a2 = 6;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BXd|ci",&sipSelf,sipType_QLocale,&sipCpp,&a0,&a1,&a2))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(a0,a1,a2));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        qlonglong a0;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bn",&sipSelf,sipType_QLocale,&sipCpp,&a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        qulonglong a0;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bo",&sipSelf,sipType_QLocale,&sipCpp,&a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QDate * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1",&sipSelf,sipType_QLocale,&sipCpp,sipType_QDate,&a0,&a0State,sipType_QString,&a1,&a1State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(*a0,*a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QDate *>(a0),sipType_QDate,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QDate * a0;
        int a0State = 0;
        QLocale::FormatType a1 = QLocale::LongFormat;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|E",&sipSelf,sipType_QLocale,&sipCpp,sipType_QDate,&a0,&a0State,sipType_QLocale_FormatType,&a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(*a0,a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QDate *>(a0),sipType_QDate,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QTime * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1",&sipSelf,sipType_QLocale,&sipCpp,sipType_QTime,&a0,&a0State,sipType_QString,&a1,&a1State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(*a0,*a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QTime *>(a0),sipType_QTime,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QTime * a0;
        int a0State = 0;
        QLocale::FormatType a1 = QLocale::LongFormat;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|E",&sipSelf,sipType_QLocale,&sipCpp,sipType_QTime,&a0,&a0State,sipType_QLocale_FormatType,&a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(*a0,a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QTime *>(a0),sipType_QTime,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QDateTime * a0;
        int a0State = 0;
        QLocale::FormatType a1 = QLocale::LongFormat;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|E",&sipSelf,sipType_QLocale,&sipCpp,sipType_QDateTime,&a0,&a0State,sipType_QLocale_FormatType,&a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(*a0,a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QDateTime *>(a0),sipType_QDateTime,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    {
        const QDateTime * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1",&sipSelf,sipType_QLocale,&sipCpp,sipType_QDateTime,&a0,&a0State,sipType_QString,&a1,&a1State))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->toString(*a0,*a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QDateTime *>(a0),sipType_QDateTime,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_toString);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_languageToString(PyObject *, PyObject *);}
static PyObject *meth_QLocale_languageToString(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLocale::Language a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"E",sipType_QLocale_Language,&a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QLocale::languageToString(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_languageToString);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_countryToString(PyObject *, PyObject *);}
static PyObject *meth_QLocale_countryToString(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLocale::Country a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"E",sipType_QLocale_Country,&a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(QLocale::countryToString(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_countryToString);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_setDefault(PyObject *, PyObject *);}
static PyObject *meth_QLocale_setDefault(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QLocale * a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"J9",sipType_QLocale,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            QLocale::setDefault(*a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_setDefault);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_c(PyObject *, PyObject *);}
static PyObject *meth_QLocale_c(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QLocale *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QLocale(QLocale::c());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QLocale,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_c);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_system(PyObject *, PyObject *);}
static PyObject *meth_QLocale_system(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        if (sipParseArgs(&sipArgsParsed,sipArgs,""))
        {
            QLocale *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QLocale(QLocale::system());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QLocale,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_system);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_dateFormat(PyObject *, PyObject *);}
static PyObject *meth_QLocale_dateFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLocale::FormatType a0 = QLocale::LongFormat;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|E",&sipSelf,sipType_QLocale,&sipCpp,sipType_QLocale_FormatType,&a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->dateFormat(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_dateFormat);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_timeFormat(PyObject *, PyObject *);}
static PyObject *meth_QLocale_timeFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLocale::FormatType a0 = QLocale::LongFormat;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|E",&sipSelf,sipType_QLocale,&sipCpp,sipType_QLocale_FormatType,&a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->timeFormat(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_timeFormat);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_dateTimeFormat(PyObject *, PyObject *);}
static PyObject *meth_QLocale_dateTimeFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLocale::FormatType a0 = QLocale::LongFormat;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B|E",&sipSelf,sipType_QLocale,&sipCpp,sipType_QLocale_FormatType,&a0))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->dateTimeFormat(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_dateTimeFormat);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_toDate(PyObject *, PyObject *);}
static PyObject *meth_QLocale_toDate(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QLocale::FormatType a1 = QLocale::LongFormat;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|E",&sipSelf,sipType_QLocale,&sipCpp,sipType_QString,&a0,&a0State,sipType_QLocale_FormatType,&a1))
        {
            QDate *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDate(sipCpp->toDate(*a0,a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDate,NULL);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1",&sipSelf,sipType_QLocale,&sipCpp,sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State))
        {
            QDate *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDate(sipCpp->toDate(*a0,*a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDate,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_toDate);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_toTime(PyObject *, PyObject *);}
static PyObject *meth_QLocale_toTime(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QLocale::FormatType a1 = QLocale::LongFormat;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|E",&sipSelf,sipType_QLocale,&sipCpp,sipType_QString,&a0,&a0State,sipType_QLocale_FormatType,&a1))
        {
            QTime *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTime(sipCpp->toTime(*a0,a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QTime,NULL);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1",&sipSelf,sipType_QLocale,&sipCpp,sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State))
        {
            QTime *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QTime(sipCpp->toTime(*a0,*a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_toTime);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_toDateTime(PyObject *, PyObject *);}
static PyObject *meth_QLocale_toDateTime(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        const QString * a0;
        int a0State = 0;
        QLocale::FormatType a1 = QLocale::LongFormat;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1|E",&sipSelf,sipType_QLocale,&sipCpp,sipType_QString,&a0,&a0State,sipType_QLocale_FormatType,&a1))
        {
            QDateTime *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDateTime(sipCpp->toDateTime(*a0,a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QDateTime,NULL);
        }
    }

    {
        const QString * a0;
        int a0State = 0;
        const QString * a1;
        int a1State = 0;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1J1",&sipSelf,sipType_QLocale,&sipCpp,sipType_QString,&a0,&a0State,sipType_QString,&a1,&a1State))
        {
            QDateTime *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QDateTime(sipCpp->toDateTime(*a0,*a1));
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast<QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QDateTime,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_toDateTime);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_decimalPoint(PyObject *, PyObject *);}
static PyObject *meth_QLocale_decimalPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLocale,&sipCpp))
        {
            QChar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->decimalPoint());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_decimalPoint);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_groupSeparator(PyObject *, PyObject *);}
static PyObject *meth_QLocale_groupSeparator(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLocale,&sipCpp))
        {
            QChar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->groupSeparator());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_groupSeparator);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_percent(PyObject *, PyObject *);}
static PyObject *meth_QLocale_percent(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLocale,&sipCpp))
        {
            QChar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->percent());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_percent);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_zeroDigit(PyObject *, PyObject *);}
static PyObject *meth_QLocale_zeroDigit(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLocale,&sipCpp))
        {
            QChar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->zeroDigit());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_zeroDigit);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_negativeSign(PyObject *, PyObject *);}
static PyObject *meth_QLocale_negativeSign(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLocale,&sipCpp))
        {
            QChar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->negativeSign());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_negativeSign);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_exponential(PyObject *, PyObject *);}
static PyObject *meth_QLocale_exponential(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLocale,&sipCpp))
        {
            QChar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->exponential());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_exponential);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_monthName(PyObject *, PyObject *);}
static PyObject *meth_QLocale_monthName(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QLocale::FormatType a1 = QLocale::LongFormat;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi|E",&sipSelf,sipType_QLocale,&sipCpp,&a0,sipType_QLocale_FormatType,&a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->monthName(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_monthName);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_dayName(PyObject *, PyObject *);}
static PyObject *meth_QLocale_dayName(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QLocale::FormatType a1 = QLocale::LongFormat;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi|E",&sipSelf,sipType_QLocale,&sipCpp,&a0,sipType_QLocale_FormatType,&a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->dayName(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_dayName);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_setNumberOptions(PyObject *, PyObject *);}
static PyObject *meth_QLocale_setNumberOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLocale::NumberOptions * a0;
        int a0State = 0;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"BJ1",&sipSelf,sipType_QLocale,&sipCpp,sipType_QLocale_NumberOptions,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setNumberOptions(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(a0,sipType_QLocale_NumberOptions,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_setNumberOptions);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_numberOptions(PyObject *, PyObject *);}
static PyObject *meth_QLocale_numberOptions(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLocale,&sipCpp))
        {
            QLocale::NumberOptions *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QLocale::NumberOptions(sipCpp->numberOptions());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QLocale_NumberOptions,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_numberOptions);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_countriesForLanguage(PyObject *, PyObject *);}
static PyObject *meth_QLocale_countriesForLanguage(PyObject *, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLocale::Language a0;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"E",sipType_QLocale_Language,&a0))
        {
            QList<QLocale::Country> *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QList<QLocale::Country>(QLocale::countriesForLanguage(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QList_0100QLocale_Country,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_countriesForLanguage);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_measurementSystem(PyObject *, PyObject *);}
static PyObject *meth_QLocale_measurementSystem(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLocale,&sipCpp))
        {
            QLocale::MeasurementSystem sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->measurementSystem();
            Py_END_ALLOW_THREADS

            return sipConvertFromEnum(sipRes,sipType_QLocale_MeasurementSystem);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_measurementSystem);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_positiveSign(PyObject *, PyObject *);}
static PyObject *meth_QLocale_positiveSign(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLocale,&sipCpp))
        {
            QChar *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QChar(sipCpp->positiveSign());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QChar,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_positiveSign);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_standaloneMonthName(PyObject *, PyObject *);}
static PyObject *meth_QLocale_standaloneMonthName(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QLocale::FormatType a1 = QLocale::LongFormat;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi|E",&sipSelf,sipType_QLocale,&sipCpp,&a0,sipType_QLocale_FormatType,&a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->standaloneMonthName(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_standaloneMonthName);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_standaloneDayName(PyObject *, PyObject *);}
static PyObject *meth_QLocale_standaloneDayName(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        int a0;
        QLocale::FormatType a1 = QLocale::LongFormat;
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"Bi|E",&sipSelf,sipType_QLocale,&sipCpp,&a0,sipType_QLocale_FormatType,&a1))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->standaloneDayName(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_standaloneDayName);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_amText(PyObject *, PyObject *);}
static PyObject *meth_QLocale_amText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLocale,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->amText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_amText);

    return NULL;
}


extern "C" {static PyObject *meth_QLocale_pmText(PyObject *, PyObject *);}
static PyObject *meth_QLocale_pmText(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;

    {
        QLocale *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_QLocale,&sipCpp))
        {
            QString *sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QString(sipCpp->pmText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_QLocale,sipName_pmText);

    return NULL;
}


extern "C" {static PyObject *slot_QLocale___ne__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QLocale___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    QLocale *sipCpp = reinterpret_cast<QLocale *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocale));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QLocale * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QLocale,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QLocale::operator!=(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,ne_slot,sipType_QLocale,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_QLocale___eq__(PyObject *sipSelf,PyObject *sipArg);}
static PyObject *slot_QLocale___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    QLocale *sipCpp = reinterpret_cast<QLocale *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_QLocale));

    if (!sipCpp)
        return 0;

    int sipArgsParsed = 0;

    {
        const QLocale * a0;

        if (sipParseArgs(&sipArgsParsed,sipArg,"1J9",sipType_QLocale,&a0))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->QLocale::operator==(*a0);
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    return sipPySlotExtend(&sipModuleAPI_QtCore,eq_slot,sipType_QLocale,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_QLocale(void *, const sipTypeDef *);}
static void *cast_QLocale(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_QLocale)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_QLocale(void *, int);}
static void release_QLocale(void *sipCppV,int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast<QLocale *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_QLocale(void *, SIP_SSIZE_T, const void *);}
static void assign_QLocale(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<QLocale *>(sipDst)[sipDstIdx] = *reinterpret_cast<const QLocale *>(sipSrc);
}


extern "C" {static void *array_QLocale(SIP_SSIZE_T);}
static void *array_QLocale(SIP_SSIZE_T sipNrElem)
{
    return new QLocale[sipNrElem];
}


extern "C" {static void *copy_QLocale(const void *, SIP_SSIZE_T);}
static void *copy_QLocale(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new QLocale(reinterpret_cast<const QLocale *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_QLocale(sipSimpleWrapper *);}
static void dealloc_QLocale(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_QLocale(sipSelf->u.cppPtr,0);
    }
}


extern "C" {static void *init_QLocale(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_QLocale(sipSimpleWrapper *, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    QLocale *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QLocale();
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QString * a0;
        int a0State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1",sipType_QString,&a0,&a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QLocale(*a0);
            Py_END_ALLOW_THREADS

            sipReleaseType(const_cast<QString *>(a0),sipType_QString,a0State);
        }
    }

    if (!sipCpp)
    {
        QLocale::Language a0;
        QLocale::Country a1 = QLocale::AnyCountry;

        if (sipParseArgs(sipArgsParsed,sipArgs,"E|E",sipType_QLocale_Language,&a0,sipType_QLocale_Country,&a1))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QLocale(a0,a1);
            Py_END_ALLOW_THREADS
        }
    }

    if (!sipCpp)
    {
        const QLocale * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_QLocale,&a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new QLocale(*a0);
            Py_END_ALLOW_THREADS
        }
    }

    return sipCpp;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_QLocale[] = {
    {(void *)slot_QLocale___ne__, ne_slot},
    {(void *)slot_QLocale___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_QLocale[] = {
    {SIP_MLNAME_CAST(sipName_amText), meth_QLocale_amText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_c), meth_QLocale_c, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_countriesForLanguage), meth_QLocale_countriesForLanguage, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_country), meth_QLocale_country, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_countryToString), meth_QLocale_countryToString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dateFormat), meth_QLocale_dateFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dateTimeFormat), meth_QLocale_dateTimeFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_dayName), meth_QLocale_dayName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_decimalPoint), meth_QLocale_decimalPoint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_exponential), meth_QLocale_exponential, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_groupSeparator), meth_QLocale_groupSeparator, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_language), meth_QLocale_language, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_languageToString), meth_QLocale_languageToString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_measurementSystem), meth_QLocale_measurementSystem, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_monthName), meth_QLocale_monthName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_name), meth_QLocale_name, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_negativeSign), meth_QLocale_negativeSign, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_numberOptions), meth_QLocale_numberOptions, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_percent), meth_QLocale_percent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_pmText), meth_QLocale_pmText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_positiveSign), meth_QLocale_positiveSign, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setDefault), meth_QLocale_setDefault, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setNumberOptions), meth_QLocale_setNumberOptions, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_standaloneDayName), meth_QLocale_standaloneDayName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_standaloneMonthName), meth_QLocale_standaloneMonthName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_system), meth_QLocale_system, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timeFormat), meth_QLocale_timeFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toDate), meth_QLocale_toDate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toDateTime), meth_QLocale_toDateTime, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toDouble), meth_QLocale_toDouble, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toFloat), meth_QLocale_toFloat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toInt), meth_QLocale_toInt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toLongLong), meth_QLocale_toLongLong, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toShort), meth_QLocale_toShort, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toString), meth_QLocale_toString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toTime), meth_QLocale_toTime, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toUInt), meth_QLocale_toUInt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toULongLong), meth_QLocale_toULongLong, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toUShort), meth_QLocale_toUShort, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_zeroDigit), meth_QLocale_zeroDigit, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_QLocale[] = {
    {sipName_Abkhazian, QLocale::Abkhazian, 91},
    {sipName_Afan, QLocale::Afan, 91},
    {sipName_Afar, QLocale::Afar, 91},
    {sipName_Afghanistan, QLocale::Afghanistan, 89},
    {sipName_Afrikaans, QLocale::Afrikaans, 91},
    {sipName_Akan, QLocale::Akan, 91},
    {sipName_Albania, QLocale::Albania, 89},
    {sipName_Albanian, QLocale::Albanian, 91},
    {sipName_Algeria, QLocale::Algeria, 89},
    {sipName_AmericanSamoa, QLocale::AmericanSamoa, 89},
    {sipName_Amharic, QLocale::Amharic, 91},
    {sipName_Andorra, QLocale::Andorra, 89},
    {sipName_Angola, QLocale::Angola, 89},
    {sipName_Anguilla, QLocale::Anguilla, 89},
    {sipName_Antarctica, QLocale::Antarctica, 89},
    {sipName_AntiguaAndBarbuda, QLocale::AntiguaAndBarbuda, 89},
    {sipName_AnyCountry, QLocale::AnyCountry, 89},
    {sipName_Arabic, QLocale::Arabic, 91},
    {sipName_Argentina, QLocale::Argentina, 89},
    {sipName_Armenia, QLocale::Armenia, 89},
    {sipName_Armenian, QLocale::Armenian, 91},
    {sipName_Aruba, QLocale::Aruba, 89},
    {sipName_Assamese, QLocale::Assamese, 91},
    {sipName_Atsam, QLocale::Atsam, 91},
    {sipName_Australia, QLocale::Australia, 89},
    {sipName_Austria, QLocale::Austria, 89},
    {sipName_Aymara, QLocale::Aymara, 91},
    {sipName_Azerbaijan, QLocale::Azerbaijan, 89},
    {sipName_Azerbaijani, QLocale::Azerbaijani, 91},
    {sipName_Bahamas, QLocale::Bahamas, 89},
    {sipName_Bahrain, QLocale::Bahrain, 89},
    {sipName_Bangladesh, QLocale::Bangladesh, 89},
    {sipName_Barbados, QLocale::Barbados, 89},
    {sipName_Bashkir, QLocale::Bashkir, 91},
    {sipName_Basque, QLocale::Basque, 91},
    {sipName_Belarus, QLocale::Belarus, 89},
    {sipName_Belgium, QLocale::Belgium, 89},
    {sipName_Belize, QLocale::Belize, 89},
    {sipName_Bengali, QLocale::Bengali, 91},
    {sipName_Benin, QLocale::Benin, 89},
    {sipName_Bermuda, QLocale::Bermuda, 89},
    {sipName_Bhutan, QLocale::Bhutan, 89},
    {sipName_Bhutani, QLocale::Bhutani, 91},
    {sipName_Bihari, QLocale::Bihari, 91},
    {sipName_Bislama, QLocale::Bislama, 91},
    {sipName_Blin, QLocale::Blin, 91},
    {sipName_Bolivia, QLocale::Bolivia, 89},
    {sipName_BosniaAndHerzegowina, QLocale::BosniaAndHerzegowina, 89},
    {sipName_Bosnian, QLocale::Bosnian, 91},
    {sipName_Botswana, QLocale::Botswana, 89},
    {sipName_BouvetIsland, QLocale::BouvetIsland, 89},
    {sipName_Brazil, QLocale::Brazil, 89},
    {sipName_Breton, QLocale::Breton, 91},
    {sipName_BritishIndianOceanTerritory, QLocale::BritishIndianOceanTerritory, 89},
    {sipName_BritishVirginIslands, QLocale::BritishVirginIslands, 89},
    {sipName_BruneiDarussalam, QLocale::BruneiDarussalam, 89},
    {sipName_Bulgaria, QLocale::Bulgaria, 89},
    {sipName_Bulgarian, QLocale::Bulgarian, 91},
    {sipName_BurkinaFaso, QLocale::BurkinaFaso, 89},
    {sipName_Burmese, QLocale::Burmese, 91},
    {sipName_Burundi, QLocale::Burundi, 89},
    {sipName_Byelorussian, QLocale::Byelorussian, 91},
    {sipName_C, QLocale::C, 91},
    {sipName_Cambodia, QLocale::Cambodia, 89},
    {sipName_Cambodian, QLocale::Cambodian, 91},
    {sipName_Cameroon, QLocale::Cameroon, 89},
    {sipName_Canada, QLocale::Canada, 89},
    {sipName_CapeVerde, QLocale::CapeVerde, 89},
    {sipName_Catalan, QLocale::Catalan, 91},
    {sipName_CaymanIslands, QLocale::CaymanIslands, 89},
    {sipName_CentralAfricanRepublic, QLocale::CentralAfricanRepublic, 89},
    {sipName_Chad, QLocale::Chad, 89},
    {sipName_Chewa, QLocale::Chewa, 91},
    {sipName_Chile, QLocale::Chile, 89},
    {sipName_China, QLocale::China, 89},
    {sipName_Chinese, QLocale::Chinese, 91},
    {sipName_ChristmasIsland, QLocale::ChristmasIsland, 89},
    {sipName_CocosIslands, QLocale::CocosIslands, 89},
    {sipName_Colombia, QLocale::Colombia, 89},
    {sipName_Comoros, QLocale::Comoros, 89},
    {sipName_CookIslands, QLocale::CookIslands, 89},
    {sipName_Cornish, QLocale::Cornish, 91},
    {sipName_Corsican, QLocale::Corsican, 91},
    {sipName_CostaRica, QLocale::CostaRica, 89},
    {sipName_Croatia, QLocale::Croatia, 89},
    {sipName_Croatian, QLocale::Croatian, 91},
    {sipName_Cuba, QLocale::Cuba, 89},
    {sipName_Cyprus, QLocale::Cyprus, 89},
    {sipName_Czech, QLocale::Czech, 91},
    {sipName_CzechRepublic, QLocale::CzechRepublic, 89},
    {sipName_Danish, QLocale::Danish, 91},
    {sipName_DemocraticRepublicOfCongo, QLocale::DemocraticRepublicOfCongo, 89},
    {sipName_DemocraticRepublicOfKorea, QLocale::DemocraticRepublicOfKorea, 89},
    {sipName_Denmark, QLocale::Denmark, 89},
    {sipName_Divehi, QLocale::Divehi, 91},
    {sipName_Djibouti, QLocale::Djibouti, 89},
    {sipName_Dominica, QLocale::Dominica, 89},
    {sipName_DominicanRepublic, QLocale::DominicanRepublic, 89},
    {sipName_Dutch, QLocale::Dutch, 91},
    {sipName_EastTimor, QLocale::EastTimor, 89},
    {sipName_Ecuador, QLocale::Ecuador, 89},
    {sipName_Egypt, QLocale::Egypt, 89},
    {sipName_ElSalvador, QLocale::ElSalvador, 89},
    {sipName_English, QLocale::English, 91},
    {sipName_EquatorialGuinea, QLocale::EquatorialGuinea, 89},
    {sipName_Eritrea, QLocale::Eritrea, 89},
    {sipName_Esperanto, QLocale::Esperanto, 91},
    {sipName_Estonia, QLocale::Estonia, 89},
    {sipName_Estonian, QLocale::Estonian, 91},
    {sipName_Ethiopia, QLocale::Ethiopia, 89},
    {sipName_Ewe, QLocale::Ewe, 91},
    {sipName_FalklandIslands, QLocale::FalklandIslands, 89},
    {sipName_FaroeIslands, QLocale::FaroeIslands, 89},
    {sipName_Faroese, QLocale::Faroese, 91},
    {sipName_FijiCountry, QLocale::FijiCountry, 89},
    {sipName_FijiLanguage, QLocale::FijiLanguage, 91},
    {sipName_Finland, QLocale::Finland, 89},
    {sipName_Finnish, QLocale::Finnish, 91},
    {sipName_France, QLocale::France, 89},
    {sipName_French, QLocale::French, 91},
    {sipName_FrenchGuiana, QLocale::FrenchGuiana, 89},
    {sipName_FrenchPolynesia, QLocale::FrenchPolynesia, 89},
    {sipName_FrenchSouthernTerritories, QLocale::FrenchSouthernTerritories, 89},
    {sipName_Frisian, QLocale::Frisian, 91},
    {sipName_Friulian, QLocale::Friulian, 91},
    {sipName_Ga, QLocale::Ga, 91},
    {sipName_Gabon, QLocale::Gabon, 89},
    {sipName_Gaelic, QLocale::Gaelic, 91},
    {sipName_Galician, QLocale::Galician, 91},
    {sipName_Gambia, QLocale::Gambia, 89},
    {sipName_Geez, QLocale::Geez, 91},
    {sipName_Georgia, QLocale::Georgia, 89},
    {sipName_Georgian, QLocale::Georgian, 91},
    {sipName_German, QLocale::German, 91},
    {sipName_Germany, QLocale::Germany, 89},
    {sipName_Ghana, QLocale::Ghana, 89},
    {sipName_Gibraltar, QLocale::Gibraltar, 89},
    {sipName_Greece, QLocale::Greece, 89},
    {sipName_Greek, QLocale::Greek, 91},
    {sipName_Greenland, QLocale::Greenland, 89},
    {sipName_Greenlandic, QLocale::Greenlandic, 91},
    {sipName_Grenada, QLocale::Grenada, 89},
    {sipName_Guadeloupe, QLocale::Guadeloupe, 89},
    {sipName_Guam, QLocale::Guam, 89},
    {sipName_Guarani, QLocale::Guarani, 91},
    {sipName_Guatemala, QLocale::Guatemala, 89},
    {sipName_Guinea, QLocale::Guinea, 89},
    {sipName_GuineaBissau, QLocale::GuineaBissau, 89},
    {sipName_Gujarati, QLocale::Gujarati, 91},
    {sipName_Guyana, QLocale::Guyana, 89},
    {sipName_Haiti, QLocale::Haiti, 89},
    {sipName_Hausa, QLocale::Hausa, 91},
    {sipName_Hawaiian, QLocale::Hawaiian, 91},
    {sipName_HeardAndMcDonaldIslands, QLocale::HeardAndMcDonaldIslands, 89},
    {sipName_Hebrew, QLocale::Hebrew, 91},
    {sipName_Hindi, QLocale::Hindi, 91},
    {sipName_Honduras, QLocale::Honduras, 89},
    {sipName_HongKong, QLocale::HongKong, 89},
    {sipName_Hungarian, QLocale::Hungarian, 91},
    {sipName_Hungary, QLocale::Hungary, 89},
    {sipName_Iceland, QLocale::Iceland, 89},
    {sipName_Icelandic, QLocale::Icelandic, 91},
    {sipName_Igbo, QLocale::Igbo, 91},
    {sipName_ImperialSystem, QLocale::ImperialSystem, 92},
    {sipName_India, QLocale::India, 89},
    {sipName_Indonesia, QLocale::Indonesia, 89},
    {sipName_Indonesian, QLocale::Indonesian, 91},
    {sipName_Interlingua, QLocale::Interlingua, 91},
    {sipName_Interlingue, QLocale::Interlingue, 91},
    {sipName_Inuktitut, QLocale::Inuktitut, 91},
    {sipName_Inupiak, QLocale::Inupiak, 91},
    {sipName_Iran, QLocale::Iran, 89},
    {sipName_Iraq, QLocale::Iraq, 89},
    {sipName_Ireland, QLocale::Ireland, 89},
    {sipName_Irish, QLocale::Irish, 91},
    {sipName_Israel, QLocale::Israel, 89},
    {sipName_Italian, QLocale::Italian, 91},
    {sipName_Italy, QLocale::Italy, 89},
    {sipName_IvoryCoast, QLocale::IvoryCoast, 89},
    {sipName_Jamaica, QLocale::Jamaica, 89},
    {sipName_Japan, QLocale::Japan, 89},
    {sipName_Japanese, QLocale::Japanese, 91},
    {sipName_Javanese, QLocale::Javanese, 91},
    {sipName_Jju, QLocale::Jju, 91},
    {sipName_Jordan, QLocale::Jordan, 89},
    {sipName_Kamba, QLocale::Kamba, 91},
    {sipName_Kannada, QLocale::Kannada, 91},
    {sipName_Kashmiri, QLocale::Kashmiri, 91},
    {sipName_Kazakh, QLocale::Kazakh, 91},
    {sipName_Kazakhstan, QLocale::Kazakhstan, 89},
    {sipName_Kenya, QLocale::Kenya, 89},
    {sipName_Kinyarwanda, QLocale::Kinyarwanda, 91},
    {sipName_Kirghiz, QLocale::Kirghiz, 91},
    {sipName_Kiribati, QLocale::Kiribati, 89},
    {sipName_Konkani, QLocale::Konkani, 91},
    {sipName_Korean, QLocale::Korean, 91},
    {sipName_Koro, QLocale::Koro, 91},
    {sipName_Kurdish, QLocale::Kurdish, 91},
    {sipName_Kurundi, QLocale::Kurundi, 91},
    {sipName_Kuwait, QLocale::Kuwait, 89},
    {sipName_Kyrgyzstan, QLocale::Kyrgyzstan, 89},
    {sipName_Lao, QLocale::Lao, 89},
    {sipName_Laothian, QLocale::Laothian, 91},
    {sipName_LastCountry, QLocale::LastCountry, 89},
    {sipName_LastLanguage, QLocale::LastLanguage, 91},
    {sipName_Latin, QLocale::Latin, 91},
    {sipName_Latvia, QLocale::Latvia, 89},
    {sipName_Latvian, QLocale::Latvian, 91},
    {sipName_Lebanon, QLocale::Lebanon, 89},
    {sipName_Lesotho, QLocale::Lesotho, 89},
    {sipName_Liberia, QLocale::Liberia, 89},
    {sipName_LibyanArabJamahiriya, QLocale::LibyanArabJamahiriya, 89},
    {sipName_Liechtenstein, QLocale::Liechtenstein, 89},
    {sipName_Lingala, QLocale::Lingala, 91},
    {sipName_Lithuania, QLocale::Lithuania, 89},
    {sipName_Lithuanian, QLocale::Lithuanian, 91},
    {sipName_LongFormat, QLocale::LongFormat, 90},
    {sipName_Luxembourg, QLocale::Luxembourg, 89},
    {sipName_Macau, QLocale::Macau, 89},
    {sipName_Macedonia, QLocale::Macedonia, 89},
    {sipName_Macedonian, QLocale::Macedonian, 91},
    {sipName_Madagascar, QLocale::Madagascar, 89},
    {sipName_Malagasy, QLocale::Malagasy, 91},
    {sipName_Malawi, QLocale::Malawi, 89},
    {sipName_Malay, QLocale::Malay, 91},
    {sipName_Malayalam, QLocale::Malayalam, 91},
    {sipName_Malaysia, QLocale::Malaysia, 89},
    {sipName_Maldives, QLocale::Maldives, 89},
    {sipName_Mali, QLocale::Mali, 89},
    {sipName_Malta, QLocale::Malta, 89},
    {sipName_Maltese, QLocale::Maltese, 91},
    {sipName_Manx, QLocale::Manx, 91},
    {sipName_Maori, QLocale::Maori, 91},
    {sipName_Marathi, QLocale::Marathi, 91},
    {sipName_MarshallIslands, QLocale::MarshallIslands, 89},
    {sipName_Martinique, QLocale::Martinique, 89},
    {sipName_Mauritania, QLocale::Mauritania, 89},
    {sipName_Mauritius, QLocale::Mauritius, 89},
    {sipName_Mayotte, QLocale::Mayotte, 89},
    {sipName_MetricSystem, QLocale::MetricSystem, 92},
    {sipName_MetropolitanFrance, QLocale::MetropolitanFrance, 89},
    {sipName_Mexico, QLocale::Mexico, 89},
    {sipName_Micronesia, QLocale::Micronesia, 89},
    {sipName_Moldavian, QLocale::Moldavian, 91},
    {sipName_Moldova, QLocale::Moldova, 89},
    {sipName_Monaco, QLocale::Monaco, 89},
    {sipName_Mongolia, QLocale::Mongolia, 89},
    {sipName_Mongolian, QLocale::Mongolian, 91},
    {sipName_Montserrat, QLocale::Montserrat, 89},
    {sipName_Morocco, QLocale::Morocco, 89},
    {sipName_Mozambique, QLocale::Mozambique, 89},
    {sipName_Myanmar, QLocale::Myanmar, 89},
    {sipName_Namibia, QLocale::Namibia, 89},
    {sipName_NarrowFormat, QLocale::NarrowFormat, 90},
    {sipName_NauruCountry, QLocale::NauruCountry, 89},
    {sipName_NauruLanguage, QLocale::NauruLanguage, 91},
    {sipName_Nepal, QLocale::Nepal, 89},
    {sipName_Nepali, QLocale::Nepali, 91},
    {sipName_Netherlands, QLocale::Netherlands, 89},
    {sipName_NetherlandsAntilles, QLocale::NetherlandsAntilles, 89},
    {sipName_NewCaledonia, QLocale::NewCaledonia, 89},
    {sipName_NewZealand, QLocale::NewZealand, 89},
    {sipName_Nicaragua, QLocale::Nicaragua, 89},
    {sipName_Niger, QLocale::Niger, 89},
    {sipName_Nigeria, QLocale::Nigeria, 89},
    {sipName_Niue, QLocale::Niue, 89},
    {sipName_NorfolkIsland, QLocale::NorfolkIsland, 89},
    {sipName_NorthernMarianaIslands, QLocale::NorthernMarianaIslands, 89},
    {sipName_Norway, QLocale::Norway, 89},
    {sipName_Norwegian, QLocale::Norwegian, 91},
    {sipName_NorwegianBokmal, QLocale::NorwegianBokmal, 91},
    {sipName_NorwegianNynorsk, QLocale::NorwegianNynorsk, 91},
    {sipName_Nynorsk, QLocale::Nynorsk, 91},
    {sipName_Occitan, QLocale::Occitan, 91},
    {sipName_Oman, QLocale::Oman, 89},
    {sipName_OmitGroupSeparator, QLocale::OmitGroupSeparator, 93},
    {sipName_Oriya, QLocale::Oriya, 91},
    {sipName_Pakistan, QLocale::Pakistan, 89},
    {sipName_Palau, QLocale::Palau, 89},
    {sipName_PalestinianTerritory, QLocale::PalestinianTerritory, 89},
    {sipName_Panama, QLocale::Panama, 89},
    {sipName_PapuaNewGuinea, QLocale::PapuaNewGuinea, 89},
    {sipName_Paraguay, QLocale::Paraguay, 89},
    {sipName_Pashto, QLocale::Pashto, 91},
    {sipName_PeoplesRepublicOfCongo, QLocale::PeoplesRepublicOfCongo, 89},
    {sipName_Persian, QLocale::Persian, 91},
    {sipName_Peru, QLocale::Peru, 89},
    {sipName_Philippines, QLocale::Philippines, 89},
    {sipName_Pitcairn, QLocale::Pitcairn, 89},
    {sipName_Poland, QLocale::Poland, 89},
    {sipName_Polish, QLocale::Polish, 91},
    {sipName_Portugal, QLocale::Portugal, 89},
    {sipName_Portuguese, QLocale::Portuguese, 91},
    {sipName_PuertoRico, QLocale::PuertoRico, 89},
    {sipName_Punjabi, QLocale::Punjabi, 91},
    {sipName_Qatar, QLocale::Qatar, 89},
    {sipName_Quechua, QLocale::Quechua, 91},
    {sipName_RejectGroupSeparator, QLocale::RejectGroupSeparator, 93},
    {sipName_RepublicOfKorea, QLocale::RepublicOfKorea, 89},
    {sipName_Reunion, QLocale::Reunion, 89},
    {sipName_RhaetoRomance, QLocale::RhaetoRomance, 91},
    {sipName_Romania, QLocale::Romania, 89},
    {sipName_Romanian, QLocale::Romanian, 91},
    {sipName_Russian, QLocale::Russian, 91},
    {sipName_RussianFederation, QLocale::RussianFederation, 89},
    {sipName_Rwanda, QLocale::Rwanda, 89},
    {sipName_SaintKittsAndNevis, QLocale::SaintKittsAndNevis, 89},
    {sipName_Samoa, QLocale::Samoa, 89},
    {sipName_Samoan, QLocale::Samoan, 91},
    {sipName_SanMarino, QLocale::SanMarino, 89},
    {sipName_Sangho, QLocale::Sangho, 91},
    {sipName_Sanskrit, QLocale::Sanskrit, 91},
    {sipName_SaoTomeAndPrincipe, QLocale::SaoTomeAndPrincipe, 89},
    {sipName_SaudiArabia, QLocale::SaudiArabia, 89},
    {sipName_Senegal, QLocale::Senegal, 89},
    {sipName_SerbiaAndMontenegro, QLocale::SerbiaAndMontenegro, 89},
    {sipName_Serbian, QLocale::Serbian, 91},
    {sipName_SerboCroatian, QLocale::SerboCroatian, 91},
    {sipName_Sesotho, QLocale::Sesotho, 91},
    {sipName_Setswana, QLocale::Setswana, 91},
    {sipName_Seychelles, QLocale::Seychelles, 89},
    {sipName_Shona, QLocale::Shona, 91},
    {sipName_ShortFormat, QLocale::ShortFormat, 90},
    {sipName_Sidamo, QLocale::Sidamo, 91},
    {sipName_SierraLeone, QLocale::SierraLeone, 89},
    {sipName_Sindhi, QLocale::Sindhi, 91},
    {sipName_Singapore, QLocale::Singapore, 89},
    {sipName_Singhalese, QLocale::Singhalese, 91},
    {sipName_Siswati, QLocale::Siswati, 91},
    {sipName_Slovak, QLocale::Slovak, 91},
    {sipName_Slovakia, QLocale::Slovakia, 89},
    {sipName_Slovenia, QLocale::Slovenia, 89},
    {sipName_Slovenian, QLocale::Slovenian, 91},
    {sipName_SolomonIslands, QLocale::SolomonIslands, 89},
    {sipName_Somali, QLocale::Somali, 91},
    {sipName_Somalia, QLocale::Somalia, 89},
    {sipName_SouthAfrica, QLocale::SouthAfrica, 89},
    {sipName_SouthGeorgiaAndTheSouthSandwichIslands, QLocale::SouthGeorgiaAndTheSouthSandwichIslands, 89},
    {sipName_Spain, QLocale::Spain, 89},
    {sipName_Spanish, QLocale::Spanish, 91},
    {sipName_SriLanka, QLocale::SriLanka, 89},
    {sipName_StHelena, QLocale::StHelena, 89},
    {sipName_StLucia, QLocale::StLucia, 89},
    {sipName_StPierreAndMiquelon, QLocale::StPierreAndMiquelon, 89},
    {sipName_StVincentAndTheGrenadines, QLocale::StVincentAndTheGrenadines, 89},
    {sipName_Sudan, QLocale::Sudan, 89},
    {sipName_Sundanese, QLocale::Sundanese, 91},
    {sipName_Suriname, QLocale::Suriname, 89},
    {sipName_SvalbardAndJanMayenIslands, QLocale::SvalbardAndJanMayenIslands, 89},
    {sipName_Swahili, QLocale::Swahili, 91},
    {sipName_Swaziland, QLocale::Swaziland, 89},
    {sipName_Sweden, QLocale::Sweden, 89},
    {sipName_Swedish, QLocale::Swedish, 91},
    {sipName_Switzerland, QLocale::Switzerland, 89},
    {sipName_Syriac, QLocale::Syriac, 91},
    {sipName_SyrianArabRepublic, QLocale::SyrianArabRepublic, 89},
    {sipName_Tagalog, QLocale::Tagalog, 91},
    {sipName_Taiwan, QLocale::Taiwan, 89},
    {sipName_Tajik, QLocale::Tajik, 91},
    {sipName_Tajikistan, QLocale::Tajikistan, 89},
    {sipName_Tamil, QLocale::Tamil, 91},
    {sipName_Tanzania, QLocale::Tanzania, 89},
    {sipName_Tatar, QLocale::Tatar, 91},
    {sipName_Telugu, QLocale::Telugu, 91},
    {sipName_Thai, QLocale::Thai, 91},
    {sipName_Thailand, QLocale::Thailand, 89},
    {sipName_Tibetan, QLocale::Tibetan, 91},
    {sipName_Tigre, QLocale::Tigre, 91},
    {sipName_Tigrinya, QLocale::Tigrinya, 91},
    {sipName_Togo, QLocale::Togo, 89},
    {sipName_Tokelau, QLocale::Tokelau, 89},
    {sipName_TongaCountry, QLocale::TongaCountry, 89},
    {sipName_TongaLanguage, QLocale::TongaLanguage, 91},
    {sipName_TrinidadAndTobago, QLocale::TrinidadAndTobago, 89},
    {sipName_Tsonga, QLocale::Tsonga, 91},
    {sipName_Tunisia, QLocale::Tunisia, 89},
    {sipName_Turkey, QLocale::Turkey, 89},
    {sipName_Turkish, QLocale::Turkish, 91},
    {sipName_Turkmen, QLocale::Turkmen, 91},
    {sipName_Turkmenistan, QLocale::Turkmenistan, 89},
    {sipName_TurksAndCaicosIslands, QLocale::TurksAndCaicosIslands, 89},
    {sipName_Tuvalu, QLocale::Tuvalu, 89},
    {sipName_Twi, QLocale::Twi, 91},
    {sipName_Tyap, QLocale::Tyap, 91},
    {sipName_USVirginIslands, QLocale::USVirginIslands, 89},
    {sipName_Uganda, QLocale::Uganda, 89},
    {sipName_Uigur, QLocale::Uigur, 91},
    {sipName_Ukraine, QLocale::Ukraine, 89},
    {sipName_Ukrainian, QLocale::Ukrainian, 91},
    {sipName_UnitedArabEmirates, QLocale::UnitedArabEmirates, 89},
    {sipName_UnitedKingdom, QLocale::UnitedKingdom, 89},
    {sipName_UnitedStates, QLocale::UnitedStates, 89},
    {sipName_UnitedStatesMinorOutlyingIslands, QLocale::UnitedStatesMinorOutlyingIslands, 89},
    {sipName_Urdu, QLocale::Urdu, 91},
    {sipName_Uruguay, QLocale::Uruguay, 89},
    {sipName_Uzbek, QLocale::Uzbek, 91},
    {sipName_Uzbekistan, QLocale::Uzbekistan, 89},
    {sipName_Vanuatu, QLocale::Vanuatu, 89},
    {sipName_VaticanCityState, QLocale::VaticanCityState, 89},
    {sipName_Venda, QLocale::Venda, 91},
    {sipName_Venezuela, QLocale::Venezuela, 89},
    {sipName_VietNam, QLocale::VietNam, 89},
    {sipName_Vietnamese, QLocale::Vietnamese, 91},
    {sipName_Volapuk, QLocale::Volapuk, 91},
    {sipName_Walamo, QLocale::Walamo, 91},
    {sipName_WallisAndFutunaIslands, QLocale::WallisAndFutunaIslands, 89},
    {sipName_Welsh, QLocale::Welsh, 91},
    {sipName_WesternSahara, QLocale::WesternSahara, 89},
    {sipName_Wolof, QLocale::Wolof, 91},
    {sipName_Xhosa, QLocale::Xhosa, 91},
    {sipName_Yemen, QLocale::Yemen, 89},
    {sipName_Yiddish, QLocale::Yiddish, 91},
    {sipName_Yoruba, QLocale::Yoruba, 91},
    {sipName_Yugoslavia, QLocale::Yugoslavia, 89},
    {sipName_Zambia, QLocale::Zambia, 89},
    {sipName_Zhuang, QLocale::Zhuang, 91},
    {sipName_Zimbabwe, QLocale::Zimbabwe, 89},
    {sipName_Zulu, QLocale::Zulu, 91},
};


pyqt4ClassTypeDef sipTypeDef_QtCore_QLocale = {
{
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_QLocale,
        {0}
    },
    {
        sipNameNr_QLocale,
        {0, 0, 1},
        40, methods_QLocale,
        418, enummembers_QLocale,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    sipNameNr_PyQt4_QtCore_pyqtWrapperType,
    sipNameNr_sip_simplewrapper,
    0,
    slots_QLocale,
    init_QLocale,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_QLocale,
    assign_QLocale,
    array_QLocale,
    copy_QLocale,
    release_QLocale,
    cast_QLocale,
    0,
    0,
    0
},
    0,
    0,
    0
};
